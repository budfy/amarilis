function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(S,e){"use strict";function v(e){return null!=e&&e===e.window}var t=[],n=Object.getPrototypeOf,a=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,s=t.indexOf,i={},o=i.toString,m=i.hasOwnProperty,r=m.toString,d=r.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},C=S.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,i){var n,s,o=(i=i||C).createElement("script");if(o.text=e,t)for(n in c)(s=t[n]||t.getAttribute&&t.getAttribute(n))&&o.setAttribute(n,s);i.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[o.call(e)]||"object":typeof e}var u="3.5.0",E=function(e,t){return new E.fn.init(e,t)};function p(e){var t=!!e&&"length"in e&&e.length,i=x(e);return!b(e)&&!v(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:u,constructor:E,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(i){return this.pushStack(E.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,i,n,s,o,r=arguments[0]||{},a=1,l=arguments.length,d=!1;for("boolean"==typeof r&&(d=r,r=arguments[a]||{},a++),"object"==typeof r||b(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=e[t],"__proto__"!==t&&r!==n&&(d&&n&&(E.isPlainObject(n)||(s=Array.isArray(n)))?(i=r[t],o=s&&!Array.isArray(i)?[]:s||E.isPlainObject(i)?i:{},s=!1,r[t]=E.extend(d,o,n)):void 0!==n&&(r[t]=n));return r},E.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==o.call(e))&&(!(t=n(e))||"function"==typeof(i=m.call(t,"constructor")&&t.constructor)&&r.call(i)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,i){w(e,{nonce:t&&t.nonce},i)},each:function(e,t){var i,n=0;if(p(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},makeArray:function(e,t){var i=t||[];return null!=e&&(p(Object(e))?E.merge(i,"string"==typeof e?[e]:e):l.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:s.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,s=e.length;n<i;n++)e[s++]=t[n];return e.length=s,e},grep:function(e,t,i){for(var n=[],s=0,o=e.length,r=!i;s<o;s++)!t(e[s],s)!=r&&n.push(e[s]);return n},map:function(e,t,i){var n,s,o=0,r=[];if(p(e))for(n=e.length;o<n;o++)null!=(s=t(e[o],o,i))&&r.push(s);else for(o in e)null!=(s=t(e[o],o,i))&&r.push(s);return g(r)},guid:1,support:y}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var h=function(i){function u(e,t){var i="0x"+e.slice(1)-65536;return t||(i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320))}function s(){T()}var e,h,w,o,r,f,p,v,x,l,d,T,S,a,C,g,c,m,y,E="sizzle"+ +new Date,b=i.document,k=0,n=0,$=le(),P=le(),M=le(),L=le(),A=function(e,t){return e===t&&(d=!0),0},D={}.hasOwnProperty,t=[],z=t.pop,I=t.push,O=t.push,H=t.slice,N=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\["+q+"*("+F+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+q+"*\\]",B=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",X=new RegExp(q+"+","g"),W=new RegExp("^"+q+"+|((?:^|[^\\\\])(?:\\\\.)*)"+q+"+$","g"),Y=new RegExp("^"+q+"*,"+q+"*"),G=new RegExp("^"+q+"*([>+~]|"+q+")"+q+"*"),V=new RegExp(q+"|>"),_=new RegExp(B),U=new RegExp("^"+F+"$"),K={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+q+"*(even|odd|(([+-]|)(\\d*)n|)"+q+"*(?:([+-]|)"+q+"*(\\d+)|))"+q+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+q+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+q+"*((?:-\\d)?\\d*)"+q+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ie=/[+~]/,ne=new RegExp("\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\([^\\r\\n\\f])","g"),se=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=we(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{O.apply(t=H.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){I.apply(e,H.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function ae(t,e,i,n){var s,o,r,a,l,d,c,u=e&&e.ownerDocument,p=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return i;if(!n&&(T(e),e=e||S,C)){if(11!==p&&(l=te.exec(t)))if(s=l[1]){if(9===p){if(!(r=e.getElementById(s)))return i;if(r.id===s)return i.push(r),i}else if(u&&(r=u.getElementById(s))&&y(e,r)&&r.id===s)return i.push(r),i}else{if(l[2])return O.apply(i,e.getElementsByTagName(t)),i;if((s=l[3])&&h.getElementsByClassName&&e.getElementsByClassName)return O.apply(i,e.getElementsByClassName(s)),i}if(h.qsa&&!L[t+" "]&&(!g||!g.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,u=e,1===p&&(V.test(t)||G.test(t))){for((u=ie.test(t)&&me(e.parentNode)||e)===e&&h.scope||((a=e.getAttribute("id"))?a=a.replace(se,oe):e.setAttribute("id",a=E)),o=(d=f(t)).length;o--;)d[o]=(a?"#"+a:":scope")+" "+be(d[o]);c=d.join(",")}try{return O.apply(i,u.querySelectorAll(c)),i}catch(e){L(t,!0)}finally{a===E&&e.removeAttribute("id")}}}return v(t.replace(W,"$1"),e,i,n)}function le(){var i=[];function n(e,t){return i.push(e+" ")>w.cacheLength&&delete n[i.shift()],n[e+" "]=t}return n}function de(e){return e[E]=!0,e}function ce(e){var t=S.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var i=e.split("|"),n=i.length;n--;)w.attrHandle[i[n]]=t}function pe(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function he(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function fe(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function ve(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&re(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ge(r){return de(function(o){return o=+o,de(function(e,t){for(var i,n=r([],e.length,o),s=n.length;s--;)e[i=n[s]]&&(e[i]=!(t[i]=e[i]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in h=ae.support={},r=ae.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!Z.test(t||i&&i.nodeName||"HTML")},T=ae.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:b;return n!=S&&9===n.nodeType&&n.documentElement&&(a=(S=n).documentElement,C=!r(S),b!=S&&(i=S.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",s,!1):i.attachEvent&&i.attachEvent("onunload",s)),h.scope=ce(function(e){return a.appendChild(e).appendChild(S.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),h.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),h.getElementsByTagName=ce(function(e){return e.appendChild(S.createComment("")),!e.getElementsByTagName("*").length}),h.getElementsByClassName=ee.test(S.getElementsByClassName),h.getById=ce(function(e){return a.appendChild(e).id=E,!S.getElementsByName||!S.getElementsByName(E).length}),h.getById?(w.filter.ID=function(e){var t=e.replace(ne,u);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i=t.getElementById(e);return i?[i]:[]}}):(w.filter.ID=function(e){var i=e.replace(ne,u);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i,n,s,o=t.getElementById(e);if(o){if((i=o.getAttributeNode("id"))&&i.value===e)return[o];for(s=t.getElementsByName(e),n=0;o=s[n++];)if((i=o.getAttributeNode("id"))&&i.value===e)return[o]}return[]}}),w.find.TAG=h.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):h.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],s=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;i=o[s++];)1===i.nodeType&&n.push(i);return n},w.find.CLASS=h.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},c=[],g=[],(h.qsa=ee.test(S.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+q+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+q+"*(?:value|"+j+")"),e.querySelectorAll("[id~="+E+"-]").length||g.push("~="),(t=S.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+q+"*name"+q+"*="+q+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=S.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+q+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(h.matchesSelector=ee.test(m=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){h.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),c.push("!=",B)}),g=g.length&&new RegExp(g.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(a.compareDocumentPosition),y=t||ee.test(a.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!h.sortDetached&&t.compareDocumentPosition(e)===i?e==S||e.ownerDocument==b&&y(b,e)?-1:t==S||t.ownerDocument==b&&y(b,t)?1:l?N(l,e)-N(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var i,n=0,s=e.parentNode,o=t.parentNode,r=[e],a=[t];if(!s||!o)return e==S?-1:t==S?1:s?-1:o?1:l?N(l,e)-N(l,t):0;if(s===o)return pe(e,t);for(i=e;i=i.parentNode;)r.unshift(i);for(i=t;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?pe(r[n],a[n]):r[n]==b?-1:a[n]==b?1:0}),S},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(T(e),h.matchesSelector&&C&&!L[t+" "]&&(!c||!c.test(t))&&(!g||!g.test(t)))try{var i=m.call(e,t);if(i||h.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){L(t,!0)}return 0<ae(t,S,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!=S&&T(e),y(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=S&&T(e);var i=w.attrHandle[t.toLowerCase()],n=i&&D.call(w.attrHandle,t.toLowerCase())?i(e,t,!C):void 0;return void 0!==n?n:h.attributes||!C?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},ae.escape=function(e){return(e+"").replace(se,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],n=0,s=0;if(d=!h.detectDuplicates,l=!h.sortStable&&e.slice(0),e.sort(A),d){for(;t=e[s++];)t===e[s]&&(n=i.push(s));for(;n--;)e.splice(i[n],1)}return l=null,e},o=ae.getText=function(e){var t,i="",n=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=o(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[n++];)i+=o(t);return i},(w=ae.selectors={cacheLength:50,createPseudo:de,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,u),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,u),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&_.test(i)&&(t=f(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ne,u).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=$[e+" "];return t||(t=new RegExp("(^|"+q+")"+e+"("+q+"|$)"))&&$(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,n,s){return function(e){var t=ae.attr(e,i);return null==t?"!="===n:!n||(t+="","="===n?t===s:"!="===n?t!==s:"^="===n?s&&0===t.indexOf(s):"*="===n?s&&-1<t.indexOf(s):"$="===n?s&&t.slice(-s.length)===s:"~="===n?-1<(" "+t.replace(X," ")+" ").indexOf(s):"|="===n&&(t===s||t.slice(0,s.length+1)===s+"-"))}},CHILD:function(f,e,t,v,g){var m="nth"!==f.slice(0,3),y="last"!==f.slice(-4),b="of-type"===e;return 1===v&&0===g?function(e){return!!e.parentNode}:function(e,t,i){var n,s,o,r,a,l,d=m!=y?"nextSibling":"previousSibling",c=e.parentNode,u=b&&e.nodeName.toLowerCase(),p=!i&&!b,h=!1;if(c){if(m){for(;d;){for(r=e;r=r[d];)if(b?r.nodeName.toLowerCase()===u:1===r.nodeType)return!1;l=d="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&p){for(h=(a=(n=(s=(o=(r=c)[E]||(r[E]={}))[r.uniqueID]||(o[r.uniqueID]={}))[f]||[])[0]===k&&n[1])&&n[2],r=a&&c.childNodes[a];r=++a&&r&&r[d]||(h=a=0)||l.pop();)if(1===r.nodeType&&++h&&r===e){s[f]=[k,a,h];break}}else if(p&&(h=a=(n=(s=(o=(r=e)[E]||(r[E]={}))[r.uniqueID]||(o[r.uniqueID]={}))[f]||[])[0]===k&&n[1]),!1===h)for(;(r=++a&&r&&r[d]||(h=a=0)||l.pop())&&((b?r.nodeName.toLowerCase()!==u:1!==r.nodeType)||!++h||(p&&((s=(o=r[E]||(r[E]={}))[r.uniqueID]||(o[r.uniqueID]={}))[f]=[k,h]),r!==e)););return(h-=g)===v||h%v==0&&0<=h/v}}},PSEUDO:function(e,o){var t,r=w.pseudos[e]||w.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return r[E]?r(o):1<r.length?(t=[e,e,"",o],w.setFilters.hasOwnProperty(e.toLowerCase())?de(function(e,t){for(var i,n=r(e,o),s=n.length;s--;)e[i=N(e,n[s])]=!(t[i]=n[s])}):function(e){return r(e,0,t)}):r}},pseudos:{not:de(function(e){var n=[],s=[],a=p(e.replace(W,"$1"));return a[E]?de(function(e,t,i,n){for(var s,o=a(e,null,n,[]),r=e.length;r--;)(s=o[r])&&(e[r]=!(t[r]=s))}):function(e,t,i){return n[0]=e,a(n,null,i,s),n[0]=null,!s.pop()}}),has:de(function(t){return function(e){return 0<ae(t,e).length}}),contains:de(function(t){return t=t.replace(ne,u),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:de(function(i){return U.test(i||"")||ae.error("unsupported lang: "+i),i=i.replace(ne,u).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ve(!1),disabled:ve(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,i){return[i<0?i+t:i]}),even:ge(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:ge(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:ge(function(e,t,i){for(var n=i<0?i+t:t<i?t:i;0<=--n;)e.push(n);return e}),gt:ge(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[e]=he(e);for(e in{submit:!0,reset:!0})w.pseudos[e]=fe(e);function ye(){}function be(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function we(a,e,t){var l=e.dir,d=e.next,c=d||l,u=t&&"parentNode"===c,p=n++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||u)return a(e,t,i);return!1}:function(e,t,i){var n,s,o,r=[k,p];if(i){for(;e=e[l];)if((1===e.nodeType||u)&&a(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||u)if(s=(o=e[E]||(e[E]={}))[e.uniqueID]||(o[e.uniqueID]={}),d&&d===e.nodeName.toLowerCase())e=e[l]||e;else{if((n=s[c])&&n[0]===k&&n[1]===p)return r[2]=n[2];if((s[c]=r)[2]=a(e,t,i))return!0}return!1}}function xe(s){return 1<s.length?function(e,t,i){for(var n=s.length;n--;)if(!s[n](e,t,i))return!1;return!0}:s[0]}function Te(e,t,i,n,s){for(var o,r=[],a=0,l=e.length,d=null!=t;a<l;a++)(o=e[a])&&(i&&!i(o,n,s)||(r.push(o),d&&t.push(a)));return r}function Se(h,f,v,g,m,e){return g&&!g[E]&&(g=Se(g)),m&&!m[E]&&(m=Se(m,e)),de(function(e,t,i,n){var s,o,r,a=[],l=[],d=t.length,c=e||function(e,t,i){for(var n=0,s=t.length;n<s;n++)ae(e,t[n],i);return i}(f||"*",i.nodeType?[i]:i,[]),u=!h||!e&&f?c:Te(c,a,h,i,n),p=v?m||(e?h:d||g)?[]:t:u;if(v&&v(u,p,i,n),g)for(s=Te(p,l),g(s,[],i,n),o=s.length;o--;)(r=s[o])&&(p[l[o]]=!(u[l[o]]=r));if(e){if(m||h){if(m){for(s=[],o=p.length;o--;)(r=p[o])&&s.push(u[o]=r);m(null,p=[],s,n)}for(o=p.length;o--;)(r=p[o])&&-1<(s=m?N(e,r):a[o])&&(e[s]=!(t[s]=r))}}else p=Te(p===t?p.splice(d,p.length):p),m?m(null,t,p,n):O.apply(t,p)})}function Ce(e){for(var s,t,i,n=e.length,o=w.relative[e[0].type],r=o||w.relative[" "],a=o?1:0,l=we(function(e){return e===s},r,!0),d=we(function(e){return-1<N(s,e)},r,!0),c=[function(e,t,i){var n=!o&&(i||t!==x)||((s=t).nodeType?l:d)(e,t,i);return s=null,n}];a<n;a++)if(t=w.relative[e[a].type])c=[we(xe(c),t)];else{if((t=w.filter[e[a].type].apply(null,e[a].matches))[E]){for(i=++a;i<n&&!w.relative[e[i].type];i++);return Se(1<a&&xe(c),1<a&&be(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(W,"$1"),t,a<i&&Ce(e.slice(a,i)),i<n&&Ce(e=e.slice(i)),i<n&&be(e))}c.push(t)}return xe(c)}function Ee(g,m){function e(e,t,i,n,s){var o,r,a,l=0,d="0",c=e&&[],u=[],p=x,h=e||b&&w.find.TAG("*",s),f=k+=null==p?1:Math.random()||.1,v=h.length;for(s&&(x=t==S||t||s);d!==v&&null!=(o=h[d]);d++){if(b&&o){for(r=0,t||o.ownerDocument==S||(T(o),i=!C);a=g[r++];)if(a(o,t||S,i)){n.push(o);break}s&&(k=f)}y&&((o=!a&&o)&&l--,e&&c.push(o))}if(l+=d,y&&d!==l){for(r=0;a=m[r++];)a(c,u,t,i);if(e){if(0<l)for(;d--;)c[d]||u[d]||(u[d]=z.call(n));u=Te(u)}O.apply(n,u),s&&!e&&0<u.length&&1<l+m.length&&ae.uniqueSort(n)}return s&&(k=f,x=p),c}var y=0<m.length,b=0<g.length;return y?de(e):e}return ye.prototype=w.filters=w.pseudos,w.setFilters=new ye,f=ae.tokenize=function(e,t){var i,n,s,o,r,a,l,d=P[e+" "];if(d)return t?0:d.slice(0);for(r=e,a=[],l=w.preFilter;r;){for(o in i&&!(n=Y.exec(r))||(n&&(r=r.slice(n[0].length)||r),a.push(s=[])),i=!1,(n=G.exec(r))&&(i=n.shift(),s.push({value:i,type:n[0].replace(W," ")}),r=r.slice(i.length)),w.filter)!(n=K[o].exec(r))||l[o]&&!(n=l[o](n))||(i=n.shift(),s.push({value:i,type:o,matches:n}),r=r.slice(i.length));if(!i)break}return t?r.length:r?ae.error(e):P(e,a).slice(0)},p=ae.compile=function(e,t){var i,n=[],s=[],o=M[e+" "];if(!o){for(i=(t=t||f(e)).length;i--;)(o=Ce(t[i]))[E]?n.push(o):s.push(o);(o=M(e,Ee(s,n))).selector=e}return o},v=ae.select=function(e,t,i,n){var s,o,r,a,l,d="function"==typeof e&&e,c=!n&&f(e=d.selector||e);if(i=i||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(r=o[0]).type&&9===t.nodeType&&C&&w.relative[o[1].type]){if(!(t=(w.find.ID(r.matches[0].replace(ne,u),t)||[])[0]))return i;d&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(s=K.needsContext.test(e)?0:o.length;s--&&(r=o[s],!w.relative[a=r.type]);)if((l=w.find[a])&&(n=l(r.matches[0].replace(ne,u),ie.test(o[0].type)&&me(t.parentNode)||t))){if(o.splice(s,1),!(e=n.length&&be(o)))return O.apply(i,n),i;break}}return(d||p(e,c))(n,t,!C,i,!t||ie.test(e)&&me(t.parentNode)||t),i},h.sortStable=E.split("").sort(A).join("")===E,h.detectDuplicates=!!d,T(),h.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(S.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),h.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||ue(j,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),ae}(S);E.find=h,E.expr=h.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=h.uniqueSort,E.text=h.getText,E.isXMLDoc=h.isXML,E.contains=h.contains,E.escapeSelector=h.escape;function f(e,t,i){for(var n=[],s=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(s&&E(e).is(i))break;n.push(e)}return n}function T(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i}var k=E.expr.match.needsContext;function $(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function M(e,i,n){return b(i)?E.grep(e,function(e,t){return!!i.call(e,t,e)!==n}):i.nodeType?E.grep(e,function(e){return e===i!==n}):"string"!=typeof i?E.grep(e,function(e){return-1<s.call(i,e)!==n}):E.filter(i,e,n)}E.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?E.find.matchesSelector(n,e)?[n]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,i,n=this.length,s=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<n;t++)if(E.contains(s[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)E.find(e,s[t],i);return 1<n?E.uniqueSort(i):i},filter:function(e){return this.pushStack(M(this,e||[],!1))},not:function(e){return this.pushStack(M(this,e||[],!0))},is:function(e){return!!M(this,"string"==typeof e&&k.test(e)?E(e):e||[],!1).length}});var L,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,i){var n,s;if(!e)return this;if(i=i||L,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==i.ready?i.ready(e):e(E):E.makeArray(e,this);if(!(n="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:A.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),P.test(n[1])&&E.isPlainObject(t))for(n in t)b(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(s=C.getElementById(n[2]))&&(this[0]=s,this.length=1),this}).prototype=E.fn,L=E(C);var D=/^(?:parents|prev(?:Until|All))/,z={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,s=this.length,o=[],r="string"!=typeof e&&E(e);if(!k.test(e))for(;n<s;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&E.find.matchesSelector(i,e))){o.push(i);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?s.call(E(e),this[0]):s.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return f(e,"parentNode")},parentsUntil:function(e,t,i){return f(e,"parentNode",i)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return f(e,"nextSibling")},prevAll:function(e){return f(e,"previousSibling")},nextUntil:function(e,t,i){return f(e,"nextSibling",i)},prevUntil:function(e,t,i){return f(e,"previousSibling",i)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&n(e.contentDocument)?e.contentDocument:($(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(n,s){E.fn[n]=function(e,t){var i=E.map(this,s,e);return"Until"!==n.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=E.filter(t,i)),1<this.length&&(z[n]||E.uniqueSort(i),D.test(n)&&i.reverse()),this.pushStack(i)}});var O=/[^\x20\t\r\n\f]+/g;function H(e){return e}function N(e){throw e}function j(e,t,i,n){var s;try{e&&b(s=e.promise)?s.call(e).done(t).fail(i):e&&b(s=e.then)?s.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}E.Callbacks=function(n){var e,i;n="string"==typeof n?(e=n,i={},E.each(e.match(O)||[],function(e,t){i[t]=!0}),i):E.extend({},n);function s(){for(a=a||n.once,r=o=!0;d.length;c=-1)for(t=d.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&n.stopOnFalse&&(c=l.length,t=!1);n.memory||(t=!1),o=!1,a&&(l=t?[]:"")}var o,t,r,a,l=[],d=[],c=-1,u={add:function(){return l&&(t&&!o&&(c=l.length-1,d.push(t)),function i(e){E.each(e,function(e,t){b(t)?n.unique&&u.has(t)||l.push(t):t&&t.length&&"string"!==x(t)&&i(t)})}(arguments),t&&!o&&s()),this},remove:function(){return E.each(arguments,function(e,t){for(var i;-1<(i=E.inArray(t,l,i));)l.splice(i,1),i<=c&&c--}),this},has:function(e){return e?-1<E.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=d=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=d=[],t||o||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],d.push(t),o||s()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},E.extend({Deferred:function(e){var o=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],s="pending",r={state:function(){return s},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var s=arguments;return E.Deferred(function(n){E.each(o,function(e,t){var i=b(s[t[4]])&&s[t[4]];a[t[1]](function(){var e=i&&i.apply(this,arguments);e&&b(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,i?[e]:arguments)})}),s=null}).promise()},then:function(t,i,n){var l=0;function d(s,o,r,a){return function(){function e(){var e,t;if(!(s<l)){if((e=r.apply(i,n))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?a?t.call(e,d(l,o,H,a),d(l,o,N,a)):(l++,t.call(e,d(l,o,H,a),d(l,o,N,a),d(l,o,H,o.notifyWith))):(r!==H&&(i=void 0,n=[e]),(a||o.resolveWith)(i,n))}}var i=this,n=arguments,t=a?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),l<=s+1&&(r!==N&&(i=void 0,n=[e]),o.rejectWith(i,n))}};s?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),S.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(d(0,e,b(n)?n:H,e.notifyWith)),o[1][3].add(d(0,e,b(t)?t:H)),o[2][3].add(d(0,e,b(i)?i:N))}).promise()},promise:function(e){return null!=e?E.extend(e,r):r}},a={};return E.each(o,function(e,t){var i=t[2],n=t[5];r[t[1]]=i.add,n&&i.add(function(){s=n},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),i.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=i.fireWith}),r.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){s[t]=this,o[t]=1<arguments.length?a.call(arguments):e,--i||r.resolveWith(s,o)}}var i=arguments.length,n=i,s=Array(n),o=a.call(arguments),r=E.Deferred();if(i<=1&&(j(e,r.done(t(n)).resolve,r.reject,!i),"pending"===r.state()||b(o[n]&&o[n].then)))return r.then();for(;n--;)j(o[n],t(n),r.reject);return r.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){S.console&&S.console.warn&&e&&q.test(e.name)&&S.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){S.setTimeout(function(){throw e})};var F=E.Deferred();function R(){C.removeEventListener("DOMContentLoaded",R),S.removeEventListener("load",R),E.ready()}E.fn.ready=function(e){return F.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||F.resolveWith(C,[E])}}),E.ready.then=F.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?S.setTimeout(E.ready):(C.addEventListener("DOMContentLoaded",R),S.addEventListener("load",R));var B=function(e,t,i,n,s,o,r){var a=0,l=e.length,d=null==i;if("object"===x(i))for(a in s=!0,i)B(e,t,a,i[a],!0,o,r);else if(void 0!==n&&(s=!0,b(n)||(r=!0),d&&(t=r?(t.call(e,n),null):(d=t,function(e,t,i){return d.call(E(e),i)})),t))for(;a<l;a++)t(e[a],i,r?n:n.call(e[a],a,t(e[a],i)));return s?e:d?t.call(e):l?t(e[0],i):o},X=/^-ms-/,W=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function G(e){return e.replace(X,"ms-").replace(W,Y)}function V(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function _(){this.expando=E.expando+_.uid++}_.uid=1,_.prototype={cache:function(e){var t=e[this.expando];return t||(t=Object.create(null),V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,s=this.cache(e);if("string"==typeof t)s[G(t)]=i;else for(n in t)s[G(n)]=t[n];return s},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(G):(t=G(t))in n?[t]:t.match(O)||[]).length;for(;i--;)delete n[t[i]]}void 0!==t&&!E.isEmptyObject(n)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var U=new _,K=new _,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function J(e,t,i){var n,s;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(Q,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i="true"===(s=i)||"false"!==s&&("null"===s?null:s===+s+""?+s:Z.test(s)?JSON.parse(s):s)}catch(e){}K.set(e,t,i)}else i=void 0;return i}E.extend({hasData:function(e){return K.hasData(e)||U.hasData(e)},data:function(e,t,i){return K.access(e,t,i)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,i){return U.access(e,t,i)},_removeData:function(e,t){U.remove(e,t)}}),E.fn.extend({data:function(i,e){var t,n,s,o=this[0],r=o&&o.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){K.set(this,i)}):B(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=K.get(o,i))||void 0!==(t=J(o,i))?t:void 0;this.each(function(){K.set(this,i,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(s=K.get(o),1===o.nodeType&&!U.get(o,"hasDataAttrs"))){for(t=r.length;t--;)r[t]&&0===(n=r[t].name).indexOf("data-")&&(n=G(n.slice(5)),J(o,n,s[n]));U.set(o,"hasDataAttrs",!0)}return s},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),E.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=U.get(e,t),i&&(!n||Array.isArray(i)?n=U.access(e,t,E.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=E.queue(e,t),n=i.length,s=i.shift(),o=E._queueHooks(e,t);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===t&&i.unshift("inprogress"),delete o.stop,s.call(e,function(){E.dequeue(e,t)},o)),!n&&o&&o.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return U.get(e,i)||U.access(e,i,{empty:E.Callbacks("once memory").add(function(){U.remove(e,[t+"queue",i])})})}}),E.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?E.queue(this[0],t):void 0===i?this:this.each(function(){var e=E.queue(this,t,i);E._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function i(){--s||o.resolveWith(r,[r])}var n,s=1,o=E.Deferred(),r=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=U.get(r[a],e+"queueHooks"))&&n.empty&&(s++,n.empty.add(i));return i(),o.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ne=C.documentElement,se=function(e){return E.contains(e.ownerDocument,e)},oe={composed:!0};ne.getRootNode&&(se=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var re=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===E.css(e,"display")};function ae(e,t,i,n){var s,o,r=20,a=n?function(){return n.cur()}:function(){return E.css(e,t,"")},l=a(),d=i&&i[3]||(E.cssNumber[t]?"":"px"),c=e.nodeType&&(E.cssNumber[t]||"px"!==d&&+l)&&te.exec(E.css(e,t));if(c&&c[3]!==d){for(l/=2,d=d||c[3],c=+l||1;r--;)E.style(e,t,c+d),(1-o)*(1-(o=a()/l||.5))<=0&&(r=0),c/=o;c*=2,E.style(e,t,c+d),i=i||[]}return i&&(c=+c||+l||0,s=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=d,n.start=c,n.end=s)),s}var le={};function de(e,t){for(var i,n,s,o,r,a,l,d=[],c=0,u=e.length;c<u;c++)(n=e[c]).style&&(i=n.style.display,t?("none"===i&&(d[c]=U.get(n,"display")||null,d[c]||(n.style.display="")),""===n.style.display&&re(n)&&(d[c]=(l=r=o=void 0,r=(s=n).ownerDocument,a=s.nodeName,(l=le[a])||(o=r.body.appendChild(r.createElement(a)),l=E.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),le[a]=l)))):"none"!==i&&(d[c]="none",U.set(n,"display",i)));for(c=0;c<u;c++)null!=d[c]&&(e[c].style.display=d[c]);return e}E.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){re(this)?E(this).show():E(this).hide()})}});var ce,ue,pe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i;ce=C.createDocumentFragment().appendChild(C.createElement("div")),(ue=C.createElement("input")).setAttribute("type","radio"),ue.setAttribute("checked","checked"),ue.setAttribute("name","t"),ce.appendChild(ue),y.checkClone=ce.cloneNode(!0).cloneNode(!0).lastChild.checked,ce.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ce.cloneNode(!0).lastChild.defaultValue,ce.innerHTML="<option></option>",y.option=!!ce.lastChild;var ve={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&$(e,t)?E.merge([e],i):i}function me(e,t){for(var i=0,n=e.length;i<n;i++)U.set(e[i],"globalEval",!t||U.get(t[i],"globalEval"))}ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td,y.option||(ve.optgroup=ve.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,i,n,s){for(var o,r,a,l,d,c,u=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((o=e[h])||0===o)if("object"===x(o))E.merge(p,o.nodeType?[o]:o);else if(ye.test(o)){for(r=r||u.appendChild(t.createElement("div")),a=(he.exec(o)||["",""])[1].toLowerCase(),l=ve[a]||ve._default,r.innerHTML=l[1]+E.htmlPrefilter(o)+l[2],c=l[0];c--;)r=r.lastChild;E.merge(p,r.childNodes),(r=u.firstChild).textContent=""}else p.push(t.createTextNode(o));for(u.textContent="",h=0;o=p[h++];)if(n&&-1<E.inArray(o,n))s&&s.push(o);else if(d=se(o),r=ge(u.appendChild(o),"script"),d&&me(r),i)for(c=0;o=r[c++];)fe.test(o.type||"")&&i.push(o);return u}var we=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ce(){return!1}function Ee(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,i,n,s,o){var r,a;if("object"==typeof t){for(a in"string"!=typeof i&&(n=n||i,i=void 0),t)ke(e,a,i,n,t[a],o);return e}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=Ce;else if(!s)return e;return 1===o&&(r=s,(s=function(e){return E().off(e),r.apply(this,arguments)}).guid=r.guid||(r.guid=E.guid++)),e.each(function(){E.event.add(this,t,s,n,i)})}function $e(e,s,o){o?(U.set(e,s,!1),E.event.add(e,s,{namespace:!1,handler:function(e){var t,i,n=U.get(this,s);if(1&e.isTrigger&&this[s]){if(n.length)(E.event.special[s]||{}).delegateType&&e.stopPropagation();else if(n=a.call(arguments),U.set(this,s,n),t=o(this,s),this[s](),n!==(i=U.get(this,s))||t?U.set(this,s,!1):i={},n!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else n.length&&(U.set(this,s,{value:E.event.trigger(E.extend(n[0],E.Event.prototype),n.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===U.get(e,s)&&E.event.add(e,s,Se)}E.event={global:{},add:function(t,e,i,n,s){var o,r,a,l,d,c,u,p,h,f,v,g=U.get(t);if(V(t))for(i.handler&&(i=(o=i).handler,s=o.selector),s&&E.find.matchesSelector(ne,s),i.guid||(i.guid=E.guid++),(l=g.events)||(l=g.events=Object.create(null)),(r=g.handle)||(r=g.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),d=(e=(e||"").match(O)||[""]).length;d--;)h=v=(a=Te.exec(e[d])||[])[1],f=(a[2]||"").split(".").sort(),h&&(u=E.event.special[h]||{},h=(s?u.delegateType:u.bindType)||h,u=E.event.special[h]||{},c=E.extend({type:h,origType:v,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&E.expr.match.needsContext.test(s),namespace:f.join(".")},o),(p=l[h])||((p=l[h]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(h,r)),u.add&&(u.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),s?p.splice(p.delegateCount++,0,c):p.push(c),E.event.global[h]=!0)},remove:function(e,t,i,n,s){var o,r,a,l,d,c,u,p,h,f,v,g=U.hasData(e)&&U.get(e);if(g&&(l=g.events)){for(d=(t=(t||"").match(O)||[""]).length;d--;)if(h=v=(a=Te.exec(t[d])||[])[1],f=(a[2]||"").split(".").sort(),h){for(u=E.event.special[h]||{},p=l[h=(n?u.delegateType:u.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=p.length;o--;)c=p[o],!s&&v!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,u.remove&&u.remove.call(e,c));r&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,f,g.handle)||E.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)E.event.remove(e,h+t[d],i,n,!0);E.isEmptyObject(l)&&U.remove(e,"handle events")}},dispatch:function(e){var t,i,n,s,o,r,a=new Array(arguments.length),l=E.event.fix(e),d=(U.get(this,"events")||Object.create(null))[l.type]||[],c=E.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(r=E.event.handlers.call(this,l,d),t=0;(s=r[t++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(o=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(n=((E.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var i,n,s,o,r,a=[],l=t.delegateCount,d=e.target;if(l&&d.nodeType&&!("click"===e.type&&1<=e.button))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==e.type||!0!==d.disabled)){for(o=[],r={},i=0;i<l;i++)void 0===r[s=(n=t[i]).selector+" "]&&(r[s]=n.needsContext?-1<E(s,this).index(d):E.find(s,this,null,[d]).length),r[s]&&o.push(n);o.length&&a.push({elem:d,handlers:o})}return d=this,l<t.length&&a.push({elem:d,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&$(t,"input")&&$e(t,"click",Se),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&$(t,"input")&&$e(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&$(t,"input")&&U.get(t,"click")||$(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(e,t){E.event.special[e]={setup:function(){return $e(this,e,Ee),!1},trigger:function(){return $e(this,e),!0},delegateType:t}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,s){E.event.special[e]={delegateType:s,bindType:s,handle:function(e){var t,i=e.relatedTarget,n=e.handleObj;return i&&(i===this||E.contains(this,i))||(e.type=n.origType,t=n.handler.apply(this,arguments),e.type=s),t}}}),E.fn.extend({on:function(e,t,i,n){return ke(this,e,t,i,n)},one:function(e,t,i,n){return ke(this,e,t,i,n,1)},off:function(e,t,i){var n,s;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,E(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Ce),this.each(function(){E.event.remove(this,e,i,t)});for(s in e)this.off(s,t,e[s]);return this}});var Pe=/<script|<style|<link/i,Me=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ae(e,t){return $(e,"table")&&$(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function De(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ze(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ie(e,t){var i,n,s,o,r,a;if(1===t.nodeType){if(U.hasData(e)&&(a=U.get(e).events))for(s in U.remove(t,"handle events"),a)for(i=0,n=a[s].length;i<n;i++)E.event.add(t,s,a[s][i]);K.hasData(e)&&(o=K.access(e),r=E.extend({},o),K.set(t,r))}}function Oe(i,n,s,o){n=g(n);var e,t,r,a,l,d,c=0,u=i.length,p=u-1,h=n[0],f=b(h);if(f||1<u&&"string"==typeof h&&!y.checkClone&&Me.test(h))return i.each(function(e){var t=i.eq(e);f&&(n[0]=h.call(this,e,t.html())),Oe(t,n,s,o)});if(u&&(t=(e=be(n,i[0].ownerDocument,!1,i,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(a=(r=E.map(ge(e,"script"),De)).length;c<u;c++)l=e,c!==p&&(l=E.clone(l,!0,!0),a&&E.merge(r,ge(l,"script"))),s.call(i[c],l,c);if(a)for(d=r[r.length-1].ownerDocument,E.map(r,ze),c=0;c<a;c++)l=r[c],fe.test(l.type||"")&&!U.access(l,"globalEval")&&E.contains(d,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&!l.noModule&&E._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},d):w(l.textContent.replace(Le,""),l,d))}return i}function He(e,t,i){for(var n,s=t?E.filter(t,e):e,o=0;null!=(n=s[o]);o++)i||1!==n.nodeType||E.cleanData(ge(n)),n.parentNode&&(i&&se(n)&&me(ge(n,"script")),n.parentNode.removeChild(n));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,i){var n,s,o,r,a,l,d,c=e.cloneNode(!0),u=se(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(r=ge(c),n=0,s=(o=ge(e)).length;n<s;n++)a=o[n],l=r[n],"input"===(d=l.nodeName.toLowerCase())&&pe.test(a.type)?l.checked=a.checked:"input"!==d&&"textarea"!==d||(l.defaultValue=a.defaultValue);if(t)if(i)for(o=o||ge(e),r=r||ge(c),n=0,s=o.length;n<s;n++)Ie(o[n],r[n]);else Ie(e,c);return 0<(r=ge(c,"script")).length&&me(r,!u&&ge(e,"script")),c},cleanData:function(e){for(var t,i,n,s=E.event.special,o=0;void 0!==(i=e[o]);o++)if(V(i)){if(t=i[U.expando]){if(t.events)for(n in t.events)s[n]?E.event.remove(i,n):E.removeEvent(i,n,t.handle);i[U.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),E.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return B(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Oe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ae(this,e).appendChild(e)})},prepend:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ae(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!ve[(he.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return Oe(this,arguments,function(e){var t=this.parentNode;E.inArray(this,i)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},i)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,r){E.fn[e]=function(e){for(var t,i=[],n=E(e),s=n.length-1,o=0;o<=s;o++)t=o===s?this:this.clone(!0),E(n[o])[r](t),l.apply(i,t.get());return this.pushStack(i)}});function Ne(e,t,i){var n,s,o={};for(s in t)o[s]=e.style[s],e.style[s]=t[s];for(s in n=i.call(e),t)e.style[s]=o[s];return n}var je,qe,Fe,Re,Be,Xe,We,Ye,Ge=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ve=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=S),t.getComputedStyle(e)},_e=new RegExp(ie.join("|"),"i");function Ue(){if(Ye){We.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ye.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(We).appendChild(Ye);var e=S.getComputedStyle(Ye);je="1%"!==e.top,Xe=12===Ke(e.marginLeft),Ye.style.right="60%",Re=36===Ke(e.right),qe=36===Ke(e.width),Ye.style.position="absolute",Fe=12===Ke(Ye.offsetWidth/3),ne.removeChild(We),Ye=null}}function Ke(e){return Math.round(parseFloat(e))}function Ze(e,t,i){var n,s,o,r,a=e.style;return(i=i||Ve(e))&&(""!==(r=i.getPropertyValue(t)||i[t])||se(e)||(r=E.style(e,t)),!y.pixelBoxStyles()&&Ge.test(r)&&_e.test(t)&&(n=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=s,a.maxWidth=o)),void 0!==r?r+"":r}function Qe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}We=C.createElement("div"),(Ye=C.createElement("div")).style&&(Ye.style.backgroundClip="content-box",Ye.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Ye.style.backgroundClip,E.extend(y,{boxSizingReliable:function(){return Ue(),qe},pixelBoxStyles:function(){return Ue(),Re},pixelPosition:function(){return Ue(),je},reliableMarginLeft:function(){return Ue(),Xe},scrollboxSize:function(){return Ue(),Fe},reliableTrDimensions:function(){var e,t,i,n;return null==Be&&(e=C.createElement("table"),t=C.createElement("tr"),i=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",ne.appendChild(e).appendChild(t).appendChild(i),n=S.getComputedStyle(t),Be=3<parseInt(n.height),ne.removeChild(e)),Be}}));var Je=["Webkit","Moz","ms"],et=C.createElement("div").style,tt={};function it(e){var t=E.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=Je.length;i--;)if((e=Je[i]+t)in et)return e}(e)||e)}var nt=/^(none|table(?!-c[ea]).+)/,st=/^--/,ot={position:"absolute",visibility:"hidden",display:"block"},rt={letterSpacing:"0",fontWeight:"400"};function at(e,t,i){var n=te.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function lt(e,t,i,n,s,o){var r="width"===t?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=E.css(e,i+ie[r],!0,s)),n?("content"===i&&(l-=E.css(e,"padding"+ie[r],!0,s)),"margin"!==i&&(l-=E.css(e,"border"+ie[r]+"Width",!0,s))):(l+=E.css(e,"padding"+ie[r],!0,s),"padding"!==i?l+=E.css(e,"border"+ie[r]+"Width",!0,s):a+=E.css(e,"border"+ie[r]+"Width",!0,s));return!n&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))||0),l}function dt(e,t,i){var n=Ve(e),s=(!y.boxSizingReliable()||i)&&"border-box"===E.css(e,"boxSizing",!1,n),o=s,r=Ze(e,t,n),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ge.test(r)){if(!i)return r;r="auto"}return(!y.boxSizingReliable()&&s||!y.reliableTrDimensions()&&$(e,"tr")||"auto"===r||!parseFloat(r)&&"inline"===E.css(e,"display",!1,n))&&e.getClientRects().length&&(s="border-box"===E.css(e,"boxSizing",!1,n),(o=a in e)&&(r=e[a])),(r=parseFloat(r)||0)+lt(e,t,i||(s?"border":"content"),o,n,r)+"px"}function ct(e,t,i,n,s){return new ct.prototype.init(e,t,i,n,s)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Ze(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var s,o,r,a=G(t),l=st.test(t),d=e.style;if(l||(t=it(a)),r=E.cssHooks[t]||E.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(e,!1,n))?s:d[t];"string"===(o=typeof i)&&(s=te.exec(i))&&s[1]&&(i=ae(e,t,s),o="number"),null!=i&&i==i&&("number"!==o||l||(i+=s&&s[3]||(E.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==i||0!==t.indexOf("background")||(d[t]="inherit"),r&&"set"in r&&void 0===(i=r.set(e,i,n))||(l?d.setProperty(t,i):d[t]=i))}},css:function(e,t,i,n){var s,o,r,a=G(t);return st.test(t)||(t=it(a)),(r=E.cssHooks[t]||E.cssHooks[a])&&"get"in r&&(s=r.get(e,!0,i)),void 0===s&&(s=Ze(e,t,n)),"normal"===s&&t in rt&&(s=rt[t]),""===i||i?(o=parseFloat(s),!0===i||isFinite(o)?o||0:s):s}}),E.each(["height","width"],function(e,l){E.cssHooks[l]={get:function(e,t,i){if(t)return!nt.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?dt(e,l,i):Ne(e,ot,function(){return dt(e,l,i)})},set:function(e,t,i){var n,s=Ve(e),o=!y.scrollboxSize()&&"absolute"===s.position,r=(o||i)&&"border-box"===E.css(e,"boxSizing",!1,s),a=i?lt(e,l,i,r,s):0;return r&&o&&(a-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(s[l])-lt(e,l,"border",!1,s)-.5)),a&&(n=te.exec(t))&&"px"!==(n[3]||"px")&&(e.style[l]=t,t=E.css(e,l)),at(0,t,a)}}}),E.cssHooks.marginLeft=Qe(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ze(e,"marginLeft"))||e.getBoundingClientRect().left-Ne(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(s,o){E.cssHooks[s+o]={expand:function(e){for(var t=0,i={},n="string"==typeof e?e.split(" "):[e];t<4;t++)i[s+ie[t]+o]=n[t]||n[t-2]||n[0];return i}},"margin"!==s&&(E.cssHooks[s+o].set=at)}),E.fn.extend({css:function(e,t){return B(this,function(e,t,i){var n,s,o={},r=0;if(Array.isArray(t)){for(n=Ve(e),s=t.length;r<s;r++)o[t[r]]=E.css(e,t[r],!1,n);return o}return void 0!==i?E.style(e,t,i):E.css(e,t)},e,t,1<arguments.length)}}),(E.Tween=ct).prototype={constructor:ct,init:function(e,t,i,n,s,o){this.elem=e,this.prop=i,this.easing=s||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=o||(E.cssNumber[i]?"":"px")},cur:function(){var e=ct.propHooks[this.prop];return e&&e.get?e.get(this):ct.propHooks._default.get(this)},run:function(e){var t,i=ct.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ct.propHooks._default.set(this),this}},ct.prototype.init.prototype=ct.prototype,ct.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[it(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},ct.propHooks.scrollTop=ct.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=ct.prototype.init,E.fx.step={};var ut,pt,ht,ft,vt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function mt(){pt&&(!1===C.hidden&&S.requestAnimationFrame?S.requestAnimationFrame(mt):S.setTimeout(mt,E.fx.interval),E.fx.tick())}function yt(){return S.setTimeout(function(){ut=void 0}),ut=Date.now()}function bt(e,t){var i,n=0,s={height:e};for(t=t?1:0;n<4;n+=2-t)s["margin"+(i=ie[n])]=s["padding"+i]=e;return t&&(s.opacity=s.width=e),s}function wt(e,t,i){for(var n,s=(xt.tweeners[t]||[]).concat(xt.tweeners["*"]),o=0,r=s.length;o<r;o++)if(n=s[o].call(i,t,e))return n}function xt(o,e,t){var i,r,n=0,s=xt.prefilters.length,a=E.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ut||yt(),t=Math.max(0,d.startTime+d.duration-e),i=1-(t/d.duration||0),n=0,s=d.tweens.length;n<s;n++)d.tweens[n].run(i);return a.notifyWith(o,[d,i,t]),i<1&&s?t:(s||a.notifyWith(o,[d,1,0]),a.resolveWith(o,[d]),!1)},d=a.promise({elem:o,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},t),originalProperties:e,originalOptions:t,startTime:ut||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var i=E.Tween(o,d.opts,e,t,d.opts.specialEasing[e]||d.opts.easing);return d.tweens.push(i),i},stop:function(e){var t=0,i=e?d.tweens.length:0;if(r)return this;for(r=!0;t<i;t++)d.tweens[t].run(1);return e?(a.notifyWith(o,[d,1,0]),a.resolveWith(o,[d,e])):a.rejectWith(o,[d,e]),this}}),c=d.props;for(!function(e,t){var i,n,s,o,r;for(i in e)if(s=t[n=G(i)],o=e[i],Array.isArray(o)&&(s=o[1],o=e[i]=o[0]),i!==n&&(e[n]=o,delete e[i]),(r=E.cssHooks[n])&&"expand"in r)for(i in o=r.expand(o),delete e[n],o)i in e||(e[i]=o[i],t[i]=s);else t[n]=s}(c,d.opts.specialEasing);n<s;n++)if(i=xt.prefilters[n].call(d,o,c,d.opts))return b(i.stop)&&(E._queueHooks(d.elem,d.opts.queue).stop=i.stop.bind(i)),i;return E.map(c,wt,d),b(d.opts.start)&&d.opts.start.call(o,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),E.fx.timer(E.extend(l,{elem:o,anim:d,queue:d.opts.queue})),d}E.Animation=E.extend(xt,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return ae(i.elem,e,te.exec(t),i),i}]},tweener:function(e,t){for(var i,n=0,s=(e=b(e)?(t=e,["*"]):e.match(O)).length;n<s;n++)i=e[n],xt.tweeners[i]=xt.tweeners[i]||[],xt.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,s,o,r,a,l,d,c,u="width"in t||"height"in t,p=this,h={},f=e.style,v=e.nodeType&&re(e),g=U.get(e,"fxshow");for(n in i.queue||(null==(r=E._queueHooks(e,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,p.always(function(){p.always(function(){r.unqueued--,E.queue(e,"fx").length||r.empty.fire()})})),t)if(s=t[n],vt.test(s)){if(delete t[n],o=o||"toggle"===s,s===(v?"hide":"show")){if("show"!==s||!g||void 0===g[n])continue;v=!0}h[n]=g&&g[n]||E.style(e,n)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(h))for(n in u&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(d=g&&g.display)&&(d=U.get(e,"display")),"none"===(c=E.css(e,"display"))&&(d?c=d:(de([e],!0),d=e.style.display||d,c=E.css(e,"display"),de([e]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===E.css(e,"float")&&(l||(p.done(function(){f.display=d}),null==d&&(c=f.display,d="none"===c?"":c)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,h)l||(g?"hidden"in g&&(v=g.hidden):g=U.access(e,"fxshow",{display:d}),o&&(g.hidden=!v),v&&de([e],!0),p.done(function(){for(n in v||de([e]),U.remove(e,"fxshow"),h)E.style(e,n,h[n])})),l=wt(v?g[n]:0,n,p),n in g||(g[n]=l.start,v&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?xt.prefilters.unshift(e):xt.prefilters.push(e)}}),E.speed=function(e,t,i){var n=e&&"object"==typeof e?E.extend({},e):{complete:i||!i&&t||b(e)&&e,duration:e,easing:i&&t||t&&!b(t)&&t};return E.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in E.fx.speeds?n.duration=E.fx.speeds[n.duration]:n.duration=E.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){b(n.old)&&n.old.call(this),n.queue&&E.dequeue(this,n.queue)},n},E.fn.extend({fadeTo:function(e,t,i,n){return this.filter(re).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(t,e,i,n){function s(){var e=xt(this,E.extend({},t),r);(o||U.get(this,"finish"))&&e.stop(!0)}var o=E.isEmptyObject(t),r=E.speed(e,i,n);return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(s,e,o){function r(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof s&&(o=e,e=s,s=void 0),e&&this.queue(s||"fx",[]),this.each(function(){var e=!0,t=null!=s&&s+"queueHooks",i=E.timers,n=U.get(this);if(t)n[t]&&n[t].stop&&r(n[t]);else for(t in n)n[t]&&n[t].stop&&gt.test(t)&&r(n[t]);for(t=i.length;t--;)i[t].elem!==this||null!=s&&i[t].queue!==s||(i[t].anim.stop(o),e=!1,i.splice(t,1));!e&&o||E.dequeue(this,s)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var e,t=U.get(this),i=t[r+"queue"],n=t[r+"queueHooks"],s=E.timers,o=i?i.length:0;for(t.finish=!0,E.queue(this,r,[]),n&&n.stop&&n.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===r&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<o;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),E.each(["toggle","show","hide"],function(e,n){var s=E.fn[n];E.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?s.apply(this,arguments):this.animate(bt(n,!0),e,t,i)}}),E.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,n){E.fn[e]=function(e,t,i){return this.animate(n,e,t,i)}}),E.timers=[],E.fx.tick=function(){var e,t=0,i=E.timers;for(ut=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||E.fx.stop(),ut=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){pt||(pt=!0,mt())},E.fx.stop=function(){pt=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(n,e){return n=E.fx&&E.fx.speeds[n]||n,e=e||"fx",this.queue(e,function(e,t){var i=S.setTimeout(e,n);t.stop=function(){S.clearTimeout(i)}})},ht=C.createElement("input"),ft=C.createElement("select").appendChild(C.createElement("option")),ht.type="checkbox",y.checkOn=""!==ht.value,y.optSelected=ft.selected,(ht=C.createElement("input")).value="t",ht.type="radio",y.radioValue="t"===ht.value;var Tt,St=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return B(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,i){var n,s,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?E.prop(e,t,i):(1===o&&E.isXMLDoc(e)||(s=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?Tt:void 0)),void 0!==i?null===i?void E.removeAttr(e,t):s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:(e.setAttribute(t,i+""),i):!(s&&"get"in s&&null!==(n=s.get(e,t)))&&null==(n=E.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&$(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,s=t&&t.match(O);if(s&&1===e.nodeType)for(;i=s[n++];)e.removeAttribute(i)}}),Tt={set:function(e,t,i){return!1===t?E.removeAttr(e,i):e.setAttribute(i,i),i}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var r=St[t]||E.find.attr;St[t]=function(e,t,i){var n,s,o=t.toLowerCase();return i||(s=St[o],St[o]=n,n=null!=r(e,t,i)?o:null,St[o]=s),n}});var Ct=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function kt(e){return(e.match(O)||[]).join(" ")}function $t(e){return e.getAttribute&&e.getAttribute("class")||""}function Pt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(O)||[]}E.fn.extend({prop:function(e,t){return B(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,i){var n,s,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,s=E.propHooks[t]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:e[t]=i:s&&"get"in s&&null!==(n=s.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):Ct.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,i,n,s,o,r,a,l=0;if(b(t))return this.each(function(e){E(this).addClass(t.call(this,e,$t(this)))});if((e=Pt(t)).length)for(;i=this[l++];)if(s=$t(i),n=1===i.nodeType&&" "+kt(s)+" "){for(r=0;o=e[r++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");s!==(a=kt(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,s,o,r,a,l=0;if(b(t))return this.each(function(e){E(this).removeClass(t.call(this,e,$t(this)))});if(!arguments.length)return this.attr("class","");if((e=Pt(t)).length)for(;i=this[l++];)if(s=$t(i),n=1===i.nodeType&&" "+kt(s)+" "){for(r=0;o=e[r++];)for(;-1<n.indexOf(" "+o+" ");)n=n.replace(" "+o+" "," ");s!==(a=kt(n))&&i.setAttribute("class",a)}return this},toggleClass:function(s,t){var o=typeof s,r="string"==o||Array.isArray(s);return"boolean"==typeof t&&r?t?this.addClass(s):this.removeClass(s):b(s)?this.each(function(e){E(this).toggleClass(s.call(this,e,$t(this),t),t)}):this.each(function(){var e,t,i,n;if(r)for(t=0,i=E(this),n=Pt(s);e=n[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==s&&"boolean"!=o||((e=$t(this))&&U.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==s&&U.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&-1<(" "+kt($t(i))+" ").indexOf(t))return!0;return!1}});var Mt=/\r/g;E.fn.extend({val:function(i){var n,e,s,t=this[0];return arguments.length?(s=b(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=s?i.call(this,e,E(this).val()):i)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?"":e+""})),(n=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):t?(n=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Mt,""):null==e?"":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:kt(E.text(e))}},select:{get:function(e){var t,i,n,s=e.options,o=e.selectedIndex,r="select-one"===e.type,a=r?null:[],l=r?o+1:s.length;for(n=o<0?l:r?o:0;n<l;n++)if(((i=s[n]).selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!$(i.parentNode,"optgroup"))){if(t=E(i).val(),r)return t;a.push(t)}return a},set:function(e,t){for(var i,n,s=e.options,o=E.makeArray(t),r=s.length;r--;)((n=s[r]).selected=-1<E.inArray(E.valHooks.option.get(n),o))&&(i=!0);return i||(e.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},y.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in S;function Lt(e){e.stopPropagation()}var At=/^(?:focusinfocus|focusoutblur)$/;E.extend(E.event,{trigger:function(e,t,i,n){var s,o,r,a,l,d,c,u,p=[i||C],h=m.call(e,"type")?e.type:e,f=m.call(e,"namespace")?e.namespace.split("."):[];if(o=u=r=i=i||C,3!==i.nodeType&&8!==i.nodeType&&!At.test(h+E.event.triggered)&&(-1<h.indexOf(".")&&(h=(f=h.split(".")).shift(),f.sort()),l=h.indexOf(":")<0&&"on"+h,(e=e[E.expando]?e:new E.Event(h,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[h]||{},n||!c.trigger||!1!==c.trigger.apply(i,t))){if(!n&&!c.noBubble&&!v(i)){for(a=c.delegateType||h,At.test(a+h)||(o=o.parentNode);o;o=o.parentNode)p.push(o),r=o;r===(i.ownerDocument||C)&&p.push(r.defaultView||r.parentWindow||S)}for(s=0;(o=p[s++])&&!e.isPropagationStopped();)u=o,e.type=1<s?a:c.bindType||h,(d=(U.get(o,"events")||Object.create(null))[e.type]&&U.get(o,"handle"))&&d.apply(o,t),(d=l&&o[l])&&d.apply&&V(o)&&(e.result=d.apply(o,t),!1===e.result&&e.preventDefault());return e.type=h,n||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!V(i)||l&&b(i[h])&&!v(i)&&((r=i[l])&&(i[l]=null),E.event.triggered=h,e.isPropagationStopped()&&u.addEventListener(h,Lt),i[h](),e.isPropagationStopped()&&u.removeEventListener(h,Lt),E.event.triggered=void 0,r&&(i[l]=r)),e.result}},simulate:function(e,t,i){var n=E.extend(new E.Event,i,{type:e,isSimulated:!0});E.event.trigger(n,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return E.event.trigger(e,t,i,!0)}}),y.focusin||E.each({focus:"focusin",blur:"focusout"},function(i,n){function s(e){E.event.simulate(n,e.target,E.event.fix(e))}E.event.special[n]={setup:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,n);t||e.addEventListener(i,s,!0),U.access(e,n,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,n)-1;t?U.access(e,n,t):(e.removeEventListener(i,s,!0),U.remove(e,n))}}});var Dt=S.location,zt={guid:Date.now()},It=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new S.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var Ot=/\[\]$/,Ht=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function qt(i,e,n,s){var t;if(Array.isArray(e))E.each(e,function(e,t){n||Ot.test(i)?s(i,t):qt(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,n,s)});else if(n||"object"!==x(e))s(i,e);else for(t in e)qt(i+"["+t+"]",e[t],n,s)}E.param=function(e,t){function i(e,t){var i=b(t)?t():t;s[s.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)}var n,s=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return s.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&jt.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var i=E(this).val();return null==i?null:Array.isArray(i)?E.map(i,function(e){return{name:t.name,value:e.replace(Ht,"\r\n")}}):{name:t.name,value:i.replace(Ht,"\r\n")}}).get()}});var Ft=/%20/g,Rt=/#.*$/,Bt=/([?&])_=[^&]*/,Xt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wt=/^(?:GET|HEAD)$/,Yt=/^\/\//,Gt={},Vt={},_t="*/".concat("*"),Ut=C.createElement("a");function Kt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,n=0,s=e.toLowerCase().match(O)||[];if(b(t))for(;i=s[n++];)"+"===i[0]?(i=i.slice(1)||"*",(o[i]=o[i]||[]).unshift(t)):(o[i]=o[i]||[]).push(t)}}function Zt(t,s,o,r){var a={},l=t===Vt;function d(e){var n;return a[e]=!0,E.each(t[e]||[],function(e,t){var i=t(s,o,r);return"string"!=typeof i||l||a[i]?l?!(n=i):void 0:(s.dataTypes.unshift(i),d(i),!1)}),n}return d(s.dataTypes[0])||!a["*"]&&d("*")}function Qt(e,t){var i,n,s=E.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((s[i]?e:n=n||{})[i]=t[i]);return n&&E.extend(!0,e,n),e}Ut.href=Dt.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":_t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Qt(Qt(e,E.ajaxSettings),t):Qt(E.ajaxSettings,e)},ajaxPrefilter:Kt(Gt),ajaxTransport:Kt(Vt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,u,p,i,h,n,f,v,s,o,g=E.ajaxSetup({},t),m=g.context||g,y=g.context&&(m.nodeType||m.jquery)?E(m):E.event,b=E.Deferred(),w=E.Callbacks("once memory"),x=g.statusCode||{},r={},a={},l="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(f){if(!i)for(i={};t=Xt.exec(p);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return f?p:null},setRequestHeader:function(e,t){return null==f&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,r[e]=t),this},overrideMimeType:function(e){return null==f&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(f)T.always(e[T.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),d(0,t),this}};if(b.promise(T),g.url=((e||g.url||Dt.href)+"").replace(Yt,Dt.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(O)||[""],null==g.crossDomain){n=C.createElement("a");try{n.href=g.url,n.href=n.href,g.crossDomain=Ut.protocol+"//"+Ut.host!=n.protocol+"//"+n.host}catch(e){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=E.param(g.data,g.traditional)),Zt(Gt,g,t,T),f)return T;for(s in(v=E.event&&g.global)&&0==E.active++&&E.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Wt.test(g.type),u=g.url.replace(Rt,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Ft,"+")):(o=g.url.slice(u.length),g.data&&(g.processData||"string"==typeof g.data)&&(u+=(It.test(u)?"&":"?")+g.data,delete g.data),!1===g.cache&&(u=u.replace(Bt,"$1"),o=(It.test(u)?"&":"?")+"_="+zt.guid+++o),g.url=u+o),g.ifModified&&(E.lastModified[u]&&T.setRequestHeader("If-Modified-Since",E.lastModified[u]),E.etag[u]&&T.setRequestHeader("If-None-Match",E.etag[u])),(g.data&&g.hasContent&&!1!==g.contentType||t.contentType)&&T.setRequestHeader("Content-Type",g.contentType),T.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+_t+"; q=0.01":""):g.accepts["*"]),g.headers)T.setRequestHeader(s,g.headers[s]);if(g.beforeSend&&(!1===g.beforeSend.call(m,T,g)||f))return T.abort();if(l="abort",w.add(g.complete),T.done(g.success),T.fail(g.error),c=Zt(Vt,g,t,T)){if(T.readyState=1,v&&y.trigger("ajaxSend",[T,g]),f)return T;g.async&&0<g.timeout&&(h=S.setTimeout(function(){T.abort("timeout")},g.timeout));try{f=!1,c.send(r,d)}catch(e){if(f)throw e;d(-1,e)}}else d(-1,"No Transport");function d(e,t,i,n){var s,o,r,a,l,d=t;f||(f=!0,h&&S.clearTimeout(h),c=void 0,p=n||"",T.readyState=0<e?4:0,s=200<=e&&e<300||304===e,i&&(a=function(e,t,i){for(var n,s,o,r,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)o=l[0];else{for(s in i){if(!l[0]||e.converters[s+" "+l[0]]){o=s;break}r=r||s}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}(g,T,i)),!s&&-1<E.inArray("script",g.dataTypes)&&(g.converters["text script"]=function(){}),a=function(e,t,i,n){var s,o,r,a,l,d={},c=e.dataTypes.slice();if(c[1])for(r in e.converters)d[r.toLowerCase()]=e.converters[r];for(o=c.shift();o;)if(e.responseFields[o]&&(i[e.responseFields[o]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=d[l+" "+o]||d["* "+o]))for(s in d)if((a=s.split(" "))[1]===o&&(r=d[l+" "+a[0]]||d["* "+a[0]])){!0===r?r=d[s]:!0!==d[s]&&(o=a[0],c.unshift(a[1]));break}if(!0!==r)if(r&&e.throws)t=r(t);else try{t=r(t)}catch(e){return{state:"parsererror",error:r?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(g,a,T,s),s?(g.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(E.lastModified[u]=l),(l=T.getResponseHeader("etag"))&&(E.etag[u]=l)),204===e||"HEAD"===g.type?d="nocontent":304===e?d="notmodified":(d=a.state,o=a.data,s=!(r=a.error))):(r=d,!e&&d||(d="error",e<0&&(e=0))),T.status=e,T.statusText=(t||d)+"",s?b.resolveWith(m,[o,d,T]):b.rejectWith(m,[T,d,r]),T.statusCode(x),x=void 0,v&&y.trigger(s?"ajaxSuccess":"ajaxError",[T,g,s?o:r]),w.fireWith(m,[T,d]),v&&(y.trigger("ajaxComplete",[T,g]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,i){return E.get(e,t,i,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,s){E[s]=function(e,t,i,n){return b(t)&&(n=n||i,i=t,t=void 0),E.ajax(E.extend({url:e,type:s,dataType:n,data:t,success:i},E.isPlainObject(e)&&e))}}),E.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),E._evalUrl=function(e,t,i){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,i)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(i){return b(i)?this.each(function(e){E(this).wrapInner(i.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=b(t);return this.each(function(e){E(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},ei=E.ajaxSettings.xhr();y.cors=!!ei&&"withCredentials"in ei,y.ajax=ei=!!ei,E.ajaxTransport(function(s){var o,r;if(y.cors||ei&&!s.crossDomain)return{send:function(e,t){var i,n=s.xhr();if(n.open(s.type,s.url,s.async,s.username,s.password),s.xhrFields)for(i in s.xhrFields)n[i]=s.xhrFields[i];for(i in s.mimeType&&n.overrideMimeType&&n.overrideMimeType(s.mimeType),s.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)n.setRequestHeader(i,e[i]);o=function(e){return function(){o&&(o=r=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===e?n.abort():"error"===e?"number"!=typeof n.status?t(0,"error"):t(n.status,n.statusText):t(Jt[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=o(),r=n.onerror=n.ontimeout=o("error"),void 0!==n.onabort?n.onabort=r:n.onreadystatechange=function(){4===n.readyState&&S.setTimeout(function(){o&&r()})},o=o("abort");try{n.send(s.hasContent&&s.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(i){var n,s;if(i.crossDomain||i.scriptAttrs)return{send:function(e,t){n=E("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",s=function(e){n.remove(),s=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(n[0])},abort:function(){s&&s()}}});var ti,ii=[],ni=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=ii.pop()||E.expando+"_"+zt.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,i){var n,s,o,r=!1!==e.jsonp&&(ni.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&ni.test(e.data)&&"data");if(r||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,r?e[r]=e[r].replace(ni,"$1"+n):!1!==e.jsonp&&(e.url+=(It.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return o||E.error(n+" was not called"),o[0]},e.dataTypes[0]="json",s=S[n],S[n]=function(){o=arguments},i.always(function(){void 0===s?E(S).removeProp(n):S[n]=s,e[n]&&(e.jsonpCallback=t.jsonpCallback,ii.push(n)),o&&b(s)&&s(o[0]),o=s=void 0}),"script"}),y.createHTMLDocument=((ti=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),E.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(y.createHTMLDocument?((n=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(n)):t=C),o=!i&&[],(s=P.exec(e))?[t.createElement(s[1])]:(s=be([e],t,o),o&&o.length&&E(o).remove(),E.merge([],s.childNodes)));var n,s,o},E.fn.load=function(e,t,i){var n,s,o,r=this,a=e.indexOf(" ");return-1<a&&(n=kt(e.slice(a)),e=e.slice(0,a)),b(t)?(i=t,t=void 0):t&&"object"==typeof t&&(s="POST"),0<r.length&&E.ajax({url:e,type:s||"GET",dataType:"html",data:t}).done(function(e){o=arguments,r.html(n?E("<div>").append(E.parseHTML(e)).find(n):e)}).always(i&&function(e,t){r.each(function(){i.apply(this,o||[e.responseText,t,e])})}),this},E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(e,t,i){var n,s,o,r,a,l,d=E.css(e,"position"),c=E(e),u={};"static"===d&&(e.style.position="relative"),a=c.offset(),o=E.css(e,"top"),l=E.css(e,"left"),s=("absolute"===d||"fixed"===d)&&-1<(o+l).indexOf("auto")?(r=(n=c.position()).top,n.left):(r=parseFloat(o)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,i,E.extend({},a))),null!=t.top&&(u.top=t.top-a.top+r),null!=t.left&&(u.left=t.left-a.left+s),"using"in t?t.using.call(e,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),c.css(u))}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],s={top:0,left:0};if("fixed"===E.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((s=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),s.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-s.top-E.css(n,"marginTop",!0),left:t.left-s.left-E.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ne})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,s){var o="pageYOffset"===s;E.fn[t]=function(e){return B(this,function(e,t,i){var n;if(v(e)?n=e:9===e.nodeType&&(n=e.defaultView),void 0===i)return n?n[s]:e[t];n?n.scrollTo(o?n.pageXOffset:i,o?i:n.pageYOffset):e[t]=i},t,e,arguments.length)}}),E.each(["top","left"],function(e,i){E.cssHooks[i]=Qe(y.pixelPosition,function(e,t){if(t)return t=Ze(e,i),Ge.test(t)?E(e).position()[i]+"px":t})}),E.each({Height:"height",Width:"width"},function(r,a){E.each({padding:"inner"+r,content:a,"":"outer"+r},function(n,o){E.fn[o]=function(e,t){var i=arguments.length&&(n||"boolean"!=typeof e),s=n||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,i){var n;return v(e)?0===o.indexOf("outer")?e["inner"+r]:e.document.documentElement["client"+r]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+r],n["scroll"+r],e.body["offset"+r],n["offset"+r],n["client"+r])):void 0===i?E.css(e,t,s):E.style(e,t,i,s)},a,i?e:void 0,i)}})}),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,i){E.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}});var si=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var i,n,s;if("string"==typeof t&&(i=e[t],t=e,e=i),b(e))return n=a.call(arguments,2),(s=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||E.guid++,s},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=$,E.isFunction=b,E.isWindow=v,E.camelCase=G,E.type=x,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(si,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return E});var oi=S.jQuery,ri=S.$;return E.noConflict=function(e){return S.$===E&&(S.$=ri),e&&S.jQuery===E&&(S.jQuery=oi),E},void 0===e&&(S.jQuery=S.$=E),E}),function(e,t){"object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Swiper=t()}(this,function(){"use strict";var v="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,q="undefined"==typeof window?{document:v,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window,l=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function A(e,t){var i=[],n=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var s,o,r=e.trim();if(0<=r.indexOf("<")&&0<=r.indexOf(">")){var a="div";for(0===r.indexOf("<li")&&(a="ul"),0===r.indexOf("<tr")&&(a="tbody"),0!==r.indexOf("<td")&&0!==r.indexOf("<th")||(a="tr"),0===r.indexOf("<tbody")&&(a="table"),0===r.indexOf("<option")&&(a="select"),(o=v.createElement(a)).innerHTML=r,n=0;n<o.childNodes.length;n+=1)i.push(o.childNodes[n])}else for(s=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||v).querySelectorAll(e.trim()):[v.getElementById(e.trim().split("#")[1])],n=0;n<s.length;n+=1)s[n]&&i.push(s[n])}else if(e.nodeType||e===q||e===v)i.push(e);else if(0<e.length&&e[0].nodeType)for(n=0;n<e.length;n+=1)i.push(e[n]);return new l(i)}function o(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}A.fn=l.prototype,A.Class=l,A.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.toggle(t[i]);return this},attr:function(e,t){var i=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===i.length)this[n].setAttribute(e,t);else for(var s in e)this[n][s]=e[s],this[n].setAttribute(s,e[s]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var i;if(void 0!==t){for(var n=0;n<this.length;n+=1)(i=this[n]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0])return i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage?i.dom7ElementDataStorage[e]:i.getAttribute("data-"+e)||void 0},transform:function(e){for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],o=e[1],r=e[2],n=e[3];function s(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),A(t).is(o))r.apply(t,i);else for(var n=A(t).parents(),s=0;s<n.length;s+=1)A(n[s]).is(o)&&r.apply(n[s],i)}}function a(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof e[1]&&(i=e[0],r=e[1],n=e[2],o=void 0),n=n||!1;for(var l,d=i.split(" "),c=0;c<this.length;c+=1){var u=this[c];if(o)for(l=0;l<d.length;l+=1){var p=d[l];u.dom7LiveListeners||(u.dom7LiveListeners={}),u.dom7LiveListeners[p]||(u.dom7LiveListeners[p]=[]),u.dom7LiveListeners[p].push({listener:r,proxyListener:s}),u.addEventListener(p,s,n)}else for(l=0;l<d.length;l+=1){var h=d[l];u.dom7Listeners||(u.dom7Listeners={}),u.dom7Listeners[h]||(u.dom7Listeners[h]=[]),u.dom7Listeners[h].push({listener:r,proxyListener:a}),u.addEventListener(h,a,n)}}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],n=e[1],s=e[2],o=e[3];"function"==typeof e[1]&&(i=e[0],s=e[1],o=e[2],n=void 0),o=o||!1;for(var r=i.split(" "),a=0;a<r.length;a+=1)for(var l=r[a],d=0;d<this.length;d+=1){var c=this[d],u=void 0;if(!n&&c.dom7Listeners?u=c.dom7Listeners[l]:n&&c.dom7LiveListeners&&(u=c.dom7LiveListeners[l]),u&&u.length)for(var p=u.length-1;0<=p;--p){var h=u[p];(!s||h.listener!==s)&&s||(c.removeEventListener(l,h.proxyListener,o),u.splice(p,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=e[0].split(" "),n=e[1],s=0;s<i.length;s+=1)for(var o=i[s],r=0;r<this.length;r+=1){var a=this[r],l=void 0;try{l=new q.CustomEvent(o,{detail:n,bubbles:!0,cancelable:!0})}catch(e){(l=v.createEvent("Event")).initEvent(o,!0,!0),l.detail=n}a.dom7EventData=e.filter(function(e,t){return 0<t}),a.dispatchEvent(l),a.dom7EventData=[],delete a.dom7EventData}return this},transitionEnd:function(t){var i,n=["webkitTransitionEnd","transitionend"],s=this;function o(e){if(e.target===this)for(t.call(this,e),i=0;i<n.length;i+=1)s.off(n[i],o)}if(t)for(i=0;i<n.length;i+=1)s.on(n[i],o);return this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),i=v.body,n=e.clientTop||i.clientTop||0,s=e.clientLeft||i.clientLeft||0,o=e===q?q.scrollY:e.scrollTop,r=e===q?q.scrollX:e.scrollLeft;return{top:t.top+o-n,left:t.left+r-s}}return null},css:function(e,t){var i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var n in e)this[i].style[n]=e[n];return this}if(this[0])return q.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,n=this[0];if(!n||void 0===e)return!1;if("string"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(t=A(e),i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}if(e===v)return n===v;if(e===q)return n===q;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,i=this.length;return new l(i-1<e?[]:e<0?(t=i+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var n=0;n<t.length;n+=1){e=t[n];for(var s=0;s<this.length;s+=1)if("string"==typeof e){var o=v.createElement("div");for(o.innerHTML=e;o.firstChild;)this[s].appendChild(o.firstChild)}else if(e instanceof l)for(var r=0;r<e.length;r+=1)this[s].appendChild(e[r]);else this[s].appendChild(e)}return this},prepend:function(e){var t,i,n=this;for(t=0;t<this.length;t+=1)if("string"==typeof e){var s=v.createElement("div");for(s.innerHTML=e,i=s.childNodes.length-1;0<=i;--i)n[t].insertBefore(s.childNodes[i],n[t].childNodes[0])}else if(e instanceof l)for(i=0;i<e.length;i+=1)n[t].insertBefore(e[i],n[t].childNodes[0]);else n[t].insertBefore(e,n[t].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&A(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){var n=i.nextElementSibling;e&&!A(n).is(e)||t.push(n),i=n}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&A(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){var n=i.previousElementSibling;e&&!A(n).is(e)||t.push(n),i=n}return new l(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null===this[i].parentNode||e&&!A(this[i].parentNode).is(e)||t.push(this[i].parentNode);return A(o(t))},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].parentNode;n;)e&&!A(n).is(e)||t.push(n),n=n.parentNode;return A(o(t))},closest:function(e){var t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].querySelectorAll(e),s=0;s<n.length;s+=1)t.push(n[s]);return new l(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].childNodes,s=0;s<n.length;s+=1)e?1===n[s].nodeType&&A(n[s]).is(e)&&t.push(n[s]):1===n[s].nodeType&&t.push(n[s]);return new l(o(t))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,n;for(i=0;i<e.length;i+=1){var s=A(e[i]);for(n=0;n<s.length;n+=1)this[this.length]=s[n],this.length+=1}return this},styles:function(){return this[0]?q.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){A.fn[e]=t[e]});function e(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var i,n,s,F={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var i,n,s;void 0===t&&(t="x");var o=q.getComputedStyle(e,null);return q.WebKitCSSMatrix?(6<(n=o.transform||o.webkitTransform).split(",").length&&(n=n.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),s=new q.WebKitCSSMatrix("none"===n?"":n)):i=(s=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(n=q.WebKitCSSMatrix?s.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=q.WebKitCSSMatrix?s.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0},parseUrlQuery:function(e){var t,i,n,s,o={},r=e||q.location.href;if("string"==typeof r&&r.length)for(s=(i=(r=-1<r.indexOf("?")?r.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<s;t+=1)n=i[t].replace(/#\S+/g,"").split("="),o[decodeURIComponent(n[0])]=void 0===n[1]?void 0:decodeURIComponent(n[1])||"";return o},isObject:function(e){return"object"==_typeof(e)&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),n=1;n<e.length;n+=1){var s=e[n];if(null!=s)for(var o=Object.keys(Object(s)),r=0,a=o.length;r<a;r+=1){var l=o[r],d=Object.getOwnPropertyDescriptor(s,l);void 0!==d&&d.enumerable&&(F.isObject(i[l])&&F.isObject(s[l])?F.extend(i[l],s[l]):!F.isObject(i[l])&&F.isObject(s[l])?(i[l]={},F.extend(i[l],s[l])):i[l]=s[l])}}return i}},R=(s=v.createElement("div"),{touch:q.Modernizr&&!0===q.Modernizr.touch||!!("ontouchstart"in q||q.DocumentTouch&&v instanceof q.DocumentTouch),pointerEvents:!(!q.navigator.pointerEnabled&&!q.PointerEvent),prefixedPointerEvents:!!q.navigator.msPointerEnabled,transition:"transition"in(n=s.style)||"webkitTransition"in n||"MozTransition"in n,transforms3d:q.Modernizr&&!0===q.Modernizr.csstransforms3d||("webkitPerspective"in(i=s.style)||"MozPerspective"in i||"OPerspective"in i||"MsPerspective"in i||"perspective"in i),flexbox:function(){for(var e=s.style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),i=0;i<t.length;i+=1)if(t[i]in e)return!0;return!1}(),observer:"MutationObserver"in q||"WebkitMutationObserver"in q,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});q.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in q}),r={components:{configurable:!0}};e.prototype.on=function(e,t,i){var n=this;if("function"!=typeof t)return n;var s=i?"unshift":"push";return e.split(" ").forEach(function(e){n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][s](t)}),n},e.prototype.once=function(n,s,e){var o=this;return"function"!=typeof s?o:o.on(n,function e(){for(var t=[],i=arguments.length;i--;)t[i]=arguments[i];s.apply(o,t),o.off(n,e)},e)},e.prototype.off=function(e,n){var s=this;return s.eventsListeners&&e.split(" ").forEach(function(i){void 0===n?s.eventsListeners[i]=[]:s.eventsListeners[i].forEach(function(e,t){e===n&&s.eventsListeners[i].splice(t,1)})}),s},e.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,n,s,o=this;return o.eventsListeners&&(s="string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],n=e.slice(1,e.length),o):(i=e[0].events,n=e[0].data,e[0].context||o),(Array.isArray(i)?i:i.split(" ")).forEach(function(e){if(o.eventsListeners&&o.eventsListeners[e]){var t=[];o.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(s,n)})}})),o},e.prototype.useModulesParams=function(i){var n=this;n.modules&&Object.keys(n.modules).forEach(function(e){var t=n.modules[e];t.params&&F.extend(i,t.params)})},e.prototype.useModules=function(n){void 0===n&&(n={});var s=this;s.modules&&Object.keys(s.modules).forEach(function(e){var i=s.modules[e],t=n[e]||{};i.instance&&Object.keys(i.instance).forEach(function(e){var t=i.instance[e];s[e]="function"==typeof t?t.bind(s):t}),i.on&&s.on&&Object.keys(i.on).forEach(function(e){s.on(e,i.on[e])}),i.create&&i.create.bind(s)(t)})},r.components.set=function(e){this.use&&this.use(e)},e.installModule=function(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];var n=this;n.prototype.modules||(n.prototype.modules={});var s=t.name||Object.keys(n.prototype.modules).length+"_"+F.now();return(n.prototype.modules[s]=t).proto&&Object.keys(t.proto).forEach(function(e){n.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){n[e]=t.static[e]}),t.install&&t.install.apply(n,e),n},e.use=function(e){for(var t=[],i=arguments.length-1;0<i--;)t[i]=arguments[i+1];var n=this;return Array.isArray(e)?(e.forEach(function(e){return n.installModule(e)}),n):n.installModule.apply(n,[e].concat(t))},Object.defineProperties(e,r);var a={updateSize:function(){var e,t,i=this,n=i.$el;e=void 0!==i.params.width?i.params.width:n[0].clientWidth,t=void 0!==i.params.height?i.params.height:n[0].clientHeight,0===e&&i.isHorizontal()||0===t&&i.isVertical()||(e=e-parseInt(n.css("padding-left"),10)-parseInt(n.css("padding-right"),10),t=t-parseInt(n.css("padding-top"),10)-parseInt(n.css("padding-bottom"),10),F.extend(i,{width:e,height:t,size:i.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=e.params,i=e.$wrapperEl,n=e.size,s=e.rtlTranslate,o=e.wrongRTL,r=e.virtual&&t.virtual.enabled,a=r?e.virtual.slides.length:e.slides.length,l=i.children("."+e.params.slideClass),d=r?e.virtual.slides.length:l.length,c=[],u=[],p=[],h=t.slidesOffsetBefore;"function"==typeof h&&(h=t.slidesOffsetBefore.call(e));var f=t.slidesOffsetAfter;"function"==typeof f&&(f=t.slidesOffsetAfter.call(e));var v=e.snapGrid.length,g=e.snapGrid.length,m=t.spaceBetween,y=-h,b=0,w=0;if(void 0!==n){var x,T;"string"==typeof m&&0<=m.indexOf("%")&&(m=parseFloat(m.replace("%",""))/100*n),e.virtualSize=-m,s?l.css({marginLeft:"",marginTop:""}):l.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(x=Math.floor(d/t.slidesPerColumn)===d/e.params.slidesPerColumn?d:Math.ceil(d/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(x=Math.max(x,t.slidesPerView*t.slidesPerColumn)));for(var S,C=t.slidesPerColumn,E=x/C,k=E-(t.slidesPerColumn*E-d),$=0;$<d;$+=1){T=0;var P=l.eq($);if(1<t.slidesPerColumn){var M=void 0,L=void 0,A=void 0;"column"===t.slidesPerColumnFill?(A=$-(L=Math.floor($/C))*C,(k<L||L===k&&A===C-1)&&C<=(A+=1)&&(A=0,L+=1),M=L+A*x/C,P.css({"-webkit-box-ordinal-group":M,"-moz-box-ordinal-group":M,"-ms-flex-order":M,"-webkit-order":M,order:M})):L=$-(A=Math.floor($/E))*E,P.css("margin-"+(e.isHorizontal()?"top":"left"),0!==A&&t.spaceBetween&&t.spaceBetween+"px").attr("data-swiper-column",L).attr("data-swiper-row",A)}if("none"!==P.css("display")){if("auto"===t.slidesPerView){var D=q.getComputedStyle(P[0],null),z=P[0].style.transform,I=P[0].style.webkitTransform;z&&(P[0].style.transform="none"),I&&(P[0].style.webkitTransform="none"),T=e.isHorizontal()?P[0].getBoundingClientRect().width+parseFloat(D.getPropertyValue("margin-left"))+parseFloat(D.getPropertyValue("margin-right")):P[0].getBoundingClientRect().height+parseFloat(D.getPropertyValue("margin-top"))+parseFloat(D.getPropertyValue("margin-bottom")),z&&(P[0].style.transform=z),I&&(P[0].style.webkitTransform=I),t.roundLengths&&(T=Math.floor(T))}else T=(n-(t.slidesPerView-1)*m)/t.slidesPerView,t.roundLengths&&(T=Math.floor(T)),l[$]&&(e.isHorizontal()?l[$].style.width=T+"px":l[$].style.height=T+"px");l[$]&&(l[$].swiperSlideSize=T),p.push(T),t.centeredSlides?(y=y+T/2+b/2+m,0===b&&0!==$&&(y=y-n/2-m),0===$&&(y=y-n/2-m),Math.abs(y)<.001&&(y=0),t.roundLengths&&(y=Math.floor(y)),w%t.slidesPerGroup==0&&c.push(y),u.push(y)):(t.roundLengths&&(y=Math.floor(y)),w%t.slidesPerGroup==0&&c.push(y),u.push(y),y=y+T+m),e.virtualSize+=T+m,b=T,w+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+f,s&&o&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:e.virtualSize+t.spaceBetween+"px"}),R.flexbox&&!t.setWrapperSize||(e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(e.virtualSize=(T+t.spaceBetween)*x,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){S=[];for(var O=0;O<c.length;O+=1){var H=c[O];t.roundLengths&&(H=Math.floor(H)),c[O]<e.virtualSize+c[0]&&S.push(H)}c=S}if(!t.centeredSlides){S=[];for(var N=0;N<c.length;N+=1){var j=c[N];t.roundLengths&&(j=Math.floor(j)),c[N]<=e.virtualSize-n&&S.push(j)}c=S,1<Math.floor(e.virtualSize-n)-Math.floor(c[c.length-1])&&c.push(e.virtualSize-n)}0===c.length&&(c=[0]),0!==t.spaceBetween&&(e.isHorizontal()?s?l.css({marginLeft:m+"px"}):l.css({marginRight:m+"px"}):l.css({marginBottom:m+"px"})),F.extend(e,{slides:l,snapGrid:c,slidesGrid:u,slidesSizesGrid:p}),d!==a&&e.emit("slidesLengthChange"),c.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),u.length!==g&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i=this,n=[],s=0;if("number"==typeof e?i.setTransition(e):!0===e&&i.setTransition(i.params.speed),"auto"!==i.params.slidesPerView&&1<i.params.slidesPerView)for(t=0;t<Math.ceil(i.params.slidesPerView);t+=1){var o=i.activeIndex+t;if(o>i.slides.length)break;n.push(i.slides.eq(o)[0])}else n.push(i.slides.eq(i.activeIndex)[0]);for(t=0;t<n.length;t+=1)if(void 0!==n[t]){var r=n[t].offsetHeight;s=s<r?r:s}s&&i.$wrapperEl.css("height",s+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,i=t.params,n=t.slides,s=t.rtlTranslate;if(0!==n.length){void 0===n[0].swiperSlideOffset&&t.updateSlidesOffset();var o=-e;s&&(o=e),n.removeClass(i.slideVisibleClass);for(var r=0;r<n.length;r+=1){var a=n[r],l=(o+(i.centeredSlides?t.minTranslate():0)-a.swiperSlideOffset)/(a.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility){var d=-(o-a.swiperSlideOffset),c=d+t.slidesSizesGrid[r];(0<=d&&d<t.size||0<c&&c<=t.size||d<=0&&c>=t.size)&&n.eq(r).addClass(i.slideVisibleClass)}a.progress=s?-l:l}}},updateProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,i=t.params,n=t.maxTranslate()-t.minTranslate(),s=t.progress,o=t.isBeginning,r=t.isEnd,a=o,l=r;r=0==n?o=!(s=0):(o=(s=(e-t.minTranslate())/n)<=0,1<=s),F.extend(t,{progress:s,isBeginning:o,isEnd:r}),(i.watchSlidesProgress||i.watchSlidesVisibility)&&t.updateSlidesProgress(e),o&&!a&&t.emit("reachBeginning toEdge"),r&&!l&&t.emit("reachEnd toEdge"),(a&&!o||l&&!r)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){var e,t=this,i=t.slides,n=t.params,s=t.$wrapperEl,o=t.activeIndex,r=t.realIndex,a=t.virtual&&n.virtual.enabled;i.removeClass(n.slideActiveClass+" "+n.slideNextClass+" "+n.slidePrevClass+" "+n.slideDuplicateActiveClass+" "+n.slideDuplicateNextClass+" "+n.slideDuplicatePrevClass),(e=a?t.$wrapperEl.find("."+n.slideClass+'[data-swiper-slide-index="'+o+'"]'):i.eq(o)).addClass(n.slideActiveClass),n.loop&&(e.hasClass(n.slideDuplicateClass)?s.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+r+'"]').addClass(n.slideDuplicateActiveClass):s.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+r+'"]').addClass(n.slideDuplicateActiveClass));var l=e.nextAll("."+n.slideClass).eq(0).addClass(n.slideNextClass);n.loop&&0===l.length&&(l=i.eq(0)).addClass(n.slideNextClass);var d=e.prevAll("."+n.slideClass).eq(0).addClass(n.slidePrevClass);n.loop&&0===d.length&&(d=i.eq(-1)).addClass(n.slidePrevClass),n.loop&&(l.hasClass(n.slideDuplicateClass)?s.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass):s.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass),d.hasClass(n.slideDuplicateClass)?s.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass):s.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,i=this,n=i.rtlTranslate?i.translate:-i.translate,s=i.slidesGrid,o=i.snapGrid,r=i.params,a=i.activeIndex,l=i.realIndex,d=i.snapIndex,c=e;if(void 0===c){for(var u=0;u<s.length;u+=1)void 0!==s[u+1]?n>=s[u]&&n<s[u+1]-(s[u+1]-s[u])/2?c=u:n>=s[u]&&n<s[u+1]&&(c=u+1):n>=s[u]&&(c=u);r.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}if((t=0<=o.indexOf(n)?o.indexOf(n):Math.floor(c/r.slidesPerGroup))>=o.length&&(t=o.length-1),c!==a){var p=parseInt(i.slides.eq(c).attr("data-swiper-slide-index")||c,10);F.extend(i,{snapIndex:t,realIndex:p,previousIndex:a,activeIndex:c}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),l!==p&&i.emit("realIndexChange"),i.emit("slideChange")}else t!==d&&(i.snapIndex=t,i.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,i=t.params,n=A(e.target).closest("."+i.slideClass)[0],s=!1;if(n)for(var o=0;o<t.slides.length;o+=1)t.slides[o]===n&&(s=!0);if(!n||!s)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=n,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(A(n).attr("data-swiper-slide-index"),10):t.clickedIndex=A(n).index(),i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},d={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,n=this.translate,s=this.$wrapperEl;if(t.virtualTranslate)return i?-n:n;var o=F.getTranslate(s[0],e);return i&&(o=-o),o||0},setTranslate:function(e,t){var i=this,n=i.rtlTranslate,s=i.params,o=i.$wrapperEl,r=i.progress,a=0,l=0;i.isHorizontal()?a=n?-e:e:l=e,s.roundLengths&&(a=Math.floor(a),l=Math.floor(l)),s.virtualTranslate||(R.transforms3d?o.transform("translate3d("+a+"px, "+l+"px, 0px)"):o.transform("translate("+a+"px, "+l+"px)")),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?a:l;var d=i.maxTranslate()-i.minTranslate();(0==d?0:(e-i.minTranslate())/d)!==r&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}},c={slideTo:function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var s=this,o=e;o<0&&(o=0);var r=s.params,a=s.snapGrid,l=s.slidesGrid,d=s.previousIndex,c=s.activeIndex,u=s.rtlTranslate;if(s.animating&&r.preventInteractionOnTransition)return!1;var p=Math.floor(o/r.slidesPerGroup);p>=a.length&&(p=a.length-1),(c||r.initialSlide||0)===(d||0)&&i&&s.emit("beforeSlideChangeStart");var h,f=-a[p];if(s.updateProgress(f),r.normalizeSlideIndex)for(var v=0;v<l.length;v+=1)-Math.floor(100*f)>=Math.floor(100*l[v])&&(o=v);if(s.initialized&&o!==c){if(!s.allowSlideNext&&f<s.translate&&f<s.minTranslate())return!1;if(!s.allowSlidePrev&&f>s.translate&&f>s.maxTranslate()&&(c||0)!==o)return!1}return h=c<o?"next":o<c?"prev":"reset",u&&-f===s.translate||!u&&f===s.translate?(s.updateActiveIndex(o),r.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==r.effect&&s.setTranslate(f),"reset"!=h&&(s.transitionStart(i,h),s.transitionEnd(i,h)),!1):(0!==t&&R.transition?(s.setTransition(t),s.setTranslate(f),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,n),s.transitionStart(i,h),s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(i,h))}),s.$wrapperEl[0].addEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd))):(s.setTransition(0),s.setTranslate(f),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,n),s.transitionStart(i,h),s.transitionEnd(i,h)),!0)},slideToLoop:function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var s=e;return this.params.loop&&(s+=this.loopedSlides),this.slideTo(s,t,i,n)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,s=n.params,o=n.animating;return s.loop?!o&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,n.slideTo(n.activeIndex+s.slidesPerGroup,e,t,i)):n.slideTo(n.activeIndex+s.slidesPerGroup,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,s=n.params,o=n.animating,r=n.snapGrid,a=n.slidesGrid,l=n.rtlTranslate;if(s.loop){if(o)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,u=d(l?n.translate:-n.translate),p=r.map(function(e){return d(e)}),h=(a.map(function(e){return d(e)}),r[p.indexOf(u)],r[p.indexOf(u)-1]);return void 0!==h&&(c=a.indexOf(h))<0&&(c=n.activeIndex-1),n.slideTo(c,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,s=n.activeIndex,o=Math.floor(s/n.params.slidesPerGroup);if(o<n.snapGrid.length-1){var r=n.rtlTranslate?n.translate:-n.translate,a=n.snapGrid[o];(n.snapGrid[o+1]-a)/2<r-a&&(s=n.params.slidesPerGroup)}return n.slideTo(s,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,n=t.$wrapperEl,s="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,o=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(A(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?o<t.loopedSlides-s/2||o>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),o=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),F.nextTick(function(){t.slideTo(o)})):t.slideTo(o):o>t.slides.length-s?(t.loopFix(),o=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),F.nextTick(function(){t.slideTo(o)})):t.slideTo(o)}else t.slideTo(o)}},u={loopCreate:function(){var n=this,e=n.params,t=n.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var s=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var i=e.slidesPerGroup-s.length%e.slidesPerGroup;if(i!==e.slidesPerGroup){for(var o=0;o<i;o+=1){var r=A(v.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(r)}s=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=s.length),n.loopedSlides=parseInt(e.loopedSlides||e.slidesPerView,10),n.loopedSlides+=e.loopAdditionalSlides,n.loopedSlides>s.length&&(n.loopedSlides=s.length);var a=[],l=[];s.each(function(e,t){var i=A(t);e<n.loopedSlides&&l.push(t),e<s.length&&e>=s.length-n.loopedSlides&&a.push(t),i.attr("data-swiper-slide-index",e)});for(var d=0;d<l.length;d+=1)t.append(A(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var c=a.length-1;0<=c;--c)t.prepend(A(a[c].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){var e,t=this,i=t.params,n=t.activeIndex,s=t.slides,o=t.loopedSlides,r=t.allowSlidePrev,a=t.allowSlideNext,l=t.snapGrid,d=t.rtlTranslate;t.allowSlidePrev=!0,t.allowSlideNext=!0;var c=-l[n]-t.getTranslate();n<o?(e=s.length-3*o+n,e+=o,t.slideTo(e,0,!1,!0)&&0!=c&&t.setTranslate((d?-t.translate:t.translate)-c)):("auto"===i.slidesPerView&&2*o<=n||n>=s.length-o)&&(e=-s.length+n+o,e+=o,t.slideTo(e,0,!1,!0)&&0!=c&&t.setTranslate((d?-t.translate:t.translate)-c)),t.allowSlidePrev=r,t.allowSlideNext=a},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass).remove(),i.removeAttr("data-swiper-slide-index")}},p={setGrabCursor:function(e){if(!(R.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked)){var t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){R.touch||this.params.watchOverflow&&this.isLocked||(this.el.style.cursor="")}},h={appendSlide:function(e){var t=this,i=t.$wrapperEl,n=t.params;if(n.loop&&t.loopDestroy(),"object"==_typeof(e)&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&i.append(e[s]);else i.append(e);n.loop&&t.loopCreate(),n.observer&&R.observer||t.update()},prependSlide:function(e){var t=this,i=t.params,n=t.$wrapperEl,s=t.activeIndex;i.loop&&t.loopDestroy();var o=s+1;if("object"==_typeof(e)&&"length"in e){for(var r=0;r<e.length;r+=1)e[r]&&n.prepend(e[r]);o=s+e.length}else n.prepend(e);i.loop&&t.loopCreate(),i.observer&&R.observer||t.update(),t.slideTo(o,0,!1)},addSlide:function(e,t){var i=this,n=i.$wrapperEl,s=i.params,o=i.activeIndex;s.loop&&(o-=i.loopedSlides,i.loopDestroy(),i.slides=n.children("."+s.slideClass));var r=i.slides.length;if(e<=0)i.prependSlide(t);else if(r<=e)i.appendSlide(t);else{for(var a=e<o?o+1:o,l=[],d=r-1;e<=d;--d){var c=i.slides.eq(d);c.remove(),l.unshift(c)}if("object"==_typeof(t)&&"length"in t){for(var u=0;u<t.length;u+=1)t[u]&&n.append(t[u]);a=e<o?o+t.length:o}else n.append(t);for(var p=0;p<l.length;p+=1)n.append(l[p]);s.loop&&i.loopCreate(),s.observer&&R.observer||i.update(),s.loop?i.slideTo(a+i.loopedSlides,0,!1):i.slideTo(a,0,!1)}},removeSlide:function(e){var t=this,i=t.params,n=t.$wrapperEl,s=t.activeIndex;i.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=n.children("."+i.slideClass));var o,r=s;if("object"==_typeof(e)&&"length"in e){for(var a=0;a<e.length;a+=1)o=e[a],t.slides[o]&&t.slides.eq(o).remove(),o<r&&--r;r=Math.max(r,0)}else o=e,t.slides[o]&&t.slides.eq(o).remove(),o<r&&--r,r=Math.max(r,0);i.loop&&t.loopCreate(),i.observer&&R.observer||t.update(),i.loop?t.slideTo(r+t.loopedSlides,0,!1):t.slideTo(r,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},f=function(){var e=q.navigator.userAgent,t={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:q.cordova||q.phonegap,phonegap:q.cordova||q.phonegap},i=e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),n=e.match(/(Android);?[\s\/]+([\d.]+)?/),s=e.match(/(iPad).*OS\s([\d_]+)/),o=e.match(/(iPod)(.*OS\s([\d_]+))?/),r=!s&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(i&&(t.os="windows",t.osVersion=i[2],t.windows=!0),n&&!i&&(t.os="android",t.osVersion=n[2],t.android=!0,t.androidChrome=0<=e.toLowerCase().indexOf("chrome")),(s||r||o)&&(t.os="ios",t.ios=!0),r&&!o&&(t.osVersion=r[2].replace(/_/g,"."),t.iphone=!0),s&&(t.osVersion=s[2].replace(/_/g,"."),t.ipad=!0),o&&(t.osVersion=o[3]?o[3].replace(/_/g,"."):null,t.iphone=!0),t.ios&&t.osVersion&&0<=e.indexOf("Version/")&&"10"===t.osVersion.split(".")[0]&&(t.osVersion=e.toLowerCase().split("version/")[1].split(" ")[0]),t.desktop=!(t.os||t.android||t.webView),t.webView=(r||s||o)&&e.match(/.*AppleWebKit(?!.*Safari)/i),t.os&&"ios"===t.os){var a=t.osVersion.split("."),l=v.querySelector('meta[name="viewport"]');t.minimalUi=!t.webView&&(o||r)&&(7==+a[0]?1<=+a[1]:7<+a[0])&&l&&0<=l.getAttribute("content").indexOf("minimal-ui")}return t.pixelRatio=q.devicePixelRatio||1,t}();function g(){var e=this,t=e.params,i=e.el;if(!i||0!==i.offsetWidth){t.breakpoints&&e.setBreakpoint();var n=e.allowSlideNext,s=e.allowSlidePrev,o=e.snapGrid;if(e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),t.freeMode){var r=Math.min(Math.max(e.translate,e.maxTranslate()),e.minTranslate());e.setTranslate(r),e.updateActiveIndex(),e.updateSlidesClasses(),t.autoHeight&&e.updateAutoHeight()}else e.updateSlidesClasses(),("auto"===t.slidesPerView||1<t.slidesPerView)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0);e.allowSlidePrev=s,e.allowSlideNext=n,e.params.watchOverflow&&o!==e.snapGrid&&e.checkOverflow()}}var m,y={attachEvents:function(){var e=this,t=e.params,i=e.touchEvents,n=e.el,s=e.wrapperEl;e.onTouchStart=function(e){var t=this,i=t.touchEventsData,n=t.params,s=t.touches;if(!t.animating||!n.preventInteractionOnTransition){var o=e;if(o.originalEvent&&(o=o.originalEvent),i.isTouchEvent="touchstart"===o.type,(i.isTouchEvent||!("which"in o)||3!==o.which)&&(!i.isTouched||!i.isMoved))if(n.noSwiping&&A(o.target).closest(n.noSwipingSelector?n.noSwipingSelector:"."+n.noSwipingClass)[0])t.allowClick=!0;else if(!n.swipeHandler||A(o).closest(n.swipeHandler)[0]){s.currentX="touchstart"===o.type?o.targetTouches[0].pageX:o.pageX,s.currentY="touchstart"===o.type?o.targetTouches[0].pageY:o.pageY;var r=s.currentX,a=s.currentY,l=n.edgeSwipeDetection||n.iOSEdgeSwipeDetection,d=n.edgeSwipeThreshold||n.iOSEdgeSwipeThreshold;if(!l||!(r<=d||r>=q.screen.width-d)){if(F.extend(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),s.startX=r,s.startY=a,i.touchStartTime=F.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,0<n.threshold&&(i.allowThresholdMove=!1),"touchstart"!==o.type){var c=!0;A(o.target).is(i.formElements)&&(c=!1),v.activeElement&&A(v.activeElement).is(i.formElements)&&v.activeElement!==o.target&&v.activeElement.blur(),c&&t.allowTouchMove&&o.preventDefault()}t.emit("touchStart",o)}}}}.bind(e),e.onTouchMove=function(e){var t=this,i=t.touchEventsData,n=t.params,s=t.touches,o=t.rtlTranslate,r=e;if(r.originalEvent&&(r=r.originalEvent),i.isTouched){if(!i.isTouchEvent||"mousemove"!==r.type){var a="touchmove"===r.type?r.targetTouches[0].pageX:r.pageX,l="touchmove"===r.type?r.targetTouches[0].pageY:r.pageY;if(r.preventedByNestedSwiper)return s.startX=a,void(s.startY=l);if(!t.allowTouchMove)return t.allowClick=!1,void(i.isTouched&&(F.extend(s,{startX:a,startY:l,currentX:a,currentY:l}),i.touchStartTime=F.now()));if(i.isTouchEvent&&n.touchReleaseOnEdges&&!n.loop)if(t.isVertical()){if(l<s.startY&&t.translate<=t.maxTranslate()||l>s.startY&&t.translate>=t.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(a<s.startX&&t.translate<=t.maxTranslate()||a>s.startX&&t.translate>=t.minTranslate())return;if(i.isTouchEvent&&v.activeElement&&r.target===v.activeElement&&A(r.target).is(i.formElements))return i.isMoved=!0,void(t.allowClick=!1);if(i.allowTouchCallbacks&&t.emit("touchMove",r),!(r.targetTouches&&1<r.targetTouches.length)){s.currentX=a,s.currentY=l;var d,c=s.currentX-s.startX,u=s.currentY-s.startY;if(!(t.params.threshold&&Math.sqrt(Math.pow(c,2)+Math.pow(u,2))<t.params.threshold))if(void 0===i.isScrolling&&(t.isHorizontal()&&s.currentY===s.startY||t.isVertical()&&s.currentX===s.startX?i.isScrolling=!1:25<=c*c+u*u&&(d=180*Math.atan2(Math.abs(u),Math.abs(c))/Math.PI,i.isScrolling=t.isHorizontal()?d>n.touchAngle:90-d>n.touchAngle)),i.isScrolling&&t.emit("touchMoveOpposite",r),void 0===i.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){t.allowClick=!1,r.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&r.stopPropagation(),i.isMoved||(n.loop&&t.loopFix(),i.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!n.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",r)),t.emit("sliderMove",r),i.isMoved=!0;var p=t.isHorizontal()?c:u;s.diff=p,p*=n.touchRatio,o&&(p=-p),t.swipeDirection=0<p?"prev":"next",i.currentTranslate=p+i.startTranslate;var h=!0,f=n.resistanceRatio;if(n.touchReleaseOnEdges&&(f=0),0<p&&i.currentTranslate>t.minTranslate()?(h=!1,n.resistance&&(i.currentTranslate=t.minTranslate()-1+Math.pow(-t.minTranslate()+i.startTranslate+p,f))):p<0&&i.currentTranslate<t.maxTranslate()&&(h=!1,n.resistance&&(i.currentTranslate=t.maxTranslate()+1-Math.pow(t.maxTranslate()-i.startTranslate-p,f))),h&&(r.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),0<n.threshold){if(!(Math.abs(p)>n.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,i.currentTranslate=i.startTranslate,void(s.diff=t.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}n.followFinger&&((n.freeMode||n.watchSlidesProgress||n.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),n.freeMode&&(0===i.velocities.length&&i.velocities.push({position:s[t.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:s[t.isHorizontal()?"currentX":"currentY"],time:F.now()})),t.updateProgress(i.currentTranslate),t.setTranslate(i.currentTranslate))}}}}else i.startMoving&&i.isScrolling&&t.emit("touchMoveOpposite",r)}.bind(e),e.onTouchEnd=function(e){var t=this,i=t.touchEventsData,n=t.params,s=t.touches,o=t.rtlTranslate,r=t.$wrapperEl,a=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c,u=F.now(),p=u-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap",d),p<300&&300<u-i.lastClickTime&&(i.clickTimeout&&clearTimeout(i.clickTimeout),i.clickTimeout=F.nextTick(function(){t&&!t.destroyed&&t.emit("click",d)},300)),p<300&&u-i.lastClickTime<300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),t.emit("doubleTap",d))),i.lastClickTime=F.now(),F.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===s.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,c=n.followFinger?o?t.translate:-t.translate:-i.currentTranslate,n.freeMode){if(c<-t.minTranslate())return void t.slideTo(t.activeIndex);if(c>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){if(1<i.velocities.length){var h=i.velocities.pop(),f=i.velocities.pop(),v=h.position-f.position,g=h.time-f.time;t.velocity=v/g,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(150<g||300<F.now()-h.time)&&(t.velocity=0)}else t.velocity=0;t.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;var m=1e3*n.freeModeMomentumRatio,y=t.velocity*m,b=t.translate+y;o&&(b=-b);var w,x,T=!1,S=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;if(b<t.maxTranslate())n.freeModeMomentumBounce?(b+t.maxTranslate()<-S&&(b=t.maxTranslate()-S),w=t.maxTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.maxTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(b>t.minTranslate())n.freeModeMomentumBounce?(b-t.minTranslate()>S&&(b=t.minTranslate()+S),w=t.minTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.minTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(n.freeModeSticky){for(var C,E=0;E<l.length;E+=1)if(l[E]>-b){C=E;break}b=-(Math.abs(l[C]-b)<Math.abs(l[C-1]-b)||"next"===t.swipeDirection?l[C]:l[C-1])}if(x&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)m=o?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity);else if(n.freeModeSticky)return void t.slideToClosest();n.freeModeMomentumBounce&&T?(t.updateProgress(w),t.setTransition(m),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),t.setTranslate(w),r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(b),t.setTransition(m),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(n.freeModeSticky)return void t.slideToClosest();(!n.freeModeMomentum||p>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var k=0,$=t.slidesSizesGrid[0],P=0;P<a.length;P+=n.slidesPerGroup)void 0!==a[P+n.slidesPerGroup]?c>=a[P]&&c<a[P+n.slidesPerGroup]&&($=a[(k=P)+n.slidesPerGroup]-a[P]):c>=a[P]&&(k=P,$=a[a.length-1]-a[a.length-2]);var M=(c-a[k])/$;if(p>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(M>=n.longSwipesRatio?t.slideTo(k+n.slidesPerGroup):t.slideTo(k)),"prev"===t.swipeDirection&&(M>1-n.longSwipesRatio?t.slideTo(k+n.slidesPerGroup):t.slideTo(k))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo(k+n.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(k)}}}.bind(e),e.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);var o="container"===t.touchEventsTarget?n:s,r=!!t.nested;if(R.touch||!R.pointerEvents&&!R.prefixedPointerEvents){if(R.touch){var a=!("touchstart"!==i.start||!R.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};o.addEventListener(i.start,e.onTouchStart,a),o.addEventListener(i.move,e.onTouchMove,R.passiveListener?{passive:!1,capture:r}:r),o.addEventListener(i.end,e.onTouchEnd,a)}(t.simulateTouch&&!f.ios&&!f.android||t.simulateTouch&&!R.touch&&f.ios)&&(o.addEventListener("mousedown",e.onTouchStart,!1),v.addEventListener("mousemove",e.onTouchMove,r),v.addEventListener("mouseup",e.onTouchEnd,!1))}else o.addEventListener(i.start,e.onTouchStart,!1),v.addEventListener(i.move,e.onTouchMove,r),v.addEventListener(i.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&o.addEventListener("click",e.onClick,!0),e.on(f.ios||f.android?"resize orientationchange observerUpdate":"resize observerUpdate",g,!0)},detachEvents:function(){var e=this,t=e.params,i=e.touchEvents,n=e.el,s=e.wrapperEl,o="container"===t.touchEventsTarget?n:s,r=!!t.nested;if(R.touch||!R.pointerEvents&&!R.prefixedPointerEvents){if(R.touch){var a=!("onTouchStart"!==i.start||!R.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};o.removeEventListener(i.start,e.onTouchStart,a),o.removeEventListener(i.move,e.onTouchMove,r),o.removeEventListener(i.end,e.onTouchEnd,a)}(t.simulateTouch&&!f.ios&&!f.android||t.simulateTouch&&!R.touch&&f.ios)&&(o.removeEventListener("mousedown",e.onTouchStart,!1),v.removeEventListener("mousemove",e.onTouchMove,r),v.removeEventListener("mouseup",e.onTouchEnd,!1))}else o.removeEventListener(i.start,e.onTouchStart,!1),v.removeEventListener(i.move,e.onTouchMove,r),v.removeEventListener(i.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&o.removeEventListener("click",e.onClick,!0),e.off(f.ios||f.android?"resize orientationchange observerUpdate":"resize observerUpdate",g)}},b={setBreakpoint:function(){var e=this,t=e.activeIndex,i=e.initialized,n=e.loopedSlides;void 0===n&&(n=0);var s=e.params,o=s.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var r=e.getBreakpoint(o);if(r&&e.currentBreakpoint!==r){var a=r in o?o[r]:e.originalParams,l=s.loop&&a.slidesPerView!==s.slidesPerView;F.extend(e.params,a),F.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=r,l&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-n+e.loopedSlides,0,!1)),e.emit("breakpoint",a)}}},getBreakpoint:function(e){if(e){var t=!1,i=[];Object.keys(e).forEach(function(e){i.push(e)}),i.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var n=0;n<i.length;n+=1){var s=i[n];s>=q.innerWidth&&!t&&(t=s)}return t||"max"}}},D={isIE:!!q.navigator.userAgent.match(/Trident/g)||!!q.navigator.userAgent.match(/MSIE/g),isSafari:0<=(m=q.navigator.userAgent.toLowerCase()).indexOf("safari")&&m.indexOf("chrome")<0&&m.indexOf("android")<0,isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(q.navigator.userAgent)},w={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},x={update:a,translate:d,transition:{setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this,n=i.activeIndex,s=i.params,o=i.previousIndex;s.autoHeight&&i.updateAutoHeight();var r=t;if(r=r||(o<n?"next":n<o?"prev":"reset"),i.emit("transitionStart"),e&&n!==o){if("reset"===r)return void i.emit("slideResetTransitionStart");i.emit("slideChangeTransitionStart"),"next"===r?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this,n=i.activeIndex,s=i.previousIndex;i.animating=!1,i.setTransition(0);var o=t;if(o=o||(s<n?"next":n<s?"prev":"reset"),i.emit("transitionEnd"),e&&n!==s){if("reset"===o)return void i.emit("slideResetTransitionEnd");i.emit("slideChangeTransitionEnd"),"next"===o?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")}}},slide:c,loop:u,grabCursor:p,manipulation:h,events:y,breakpoints:b,checkOverflow:{checkOverflow:function(){var e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,i=this.params,e=this.rtl,n=this.$el,s=[];s.push(i.direction),i.freeMode&&s.push("free-mode"),R.flexbox||s.push("no-flexbox"),i.autoHeight&&s.push("autoheight"),e&&s.push("rtl"),1<i.slidesPerColumn&&s.push("multirow"),f.android&&s.push("android"),f.ios&&s.push("ios"),D.isIE&&(R.pointerEvents||R.prefixedPointerEvents)&&s.push("wp8-"+i.direction),s.forEach(function(e){t.push(i.containerModifierClass+e)}),n.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,n,s,o){var r;function a(){o&&o()}(!e.complete||!s)&&t?((r=new q.Image).onload=a,r.onerror=a,n&&(r.sizes=n),i&&(r.srcset=i),t&&(r.src=t)):a()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var n=e.imagesToLoad[i];e.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,t)}}}},T={},S=function(u){function p(){for(var e,s,t=[],i=arguments.length;i--;)t[i]=arguments[i];s=(s=1===t.length&&t[0].constructor&&t[0].constructor===Object?t[0]:(e=t[0],t[1]))||{},s=F.extend({},s),e&&!s.el&&(s.el=e),u.call(this,s),Object.keys(x).forEach(function(t){Object.keys(x[t]).forEach(function(e){p.prototype[e]||(p.prototype[e]=x[t][e])})});var o=this;void 0===o.modules&&(o.modules={}),Object.keys(o.modules).forEach(function(e){var t=o.modules[e];if(t.params){var i=Object.keys(t.params)[0],n=t.params[i];if("object"!=_typeof(n))return;if(!(i in s&&"enabled"in n))return;!0===s[i]&&(s[i]={enabled:!0}),"object"!=_typeof(s[i])||"enabled"in s[i]||(s[i].enabled=!0),s[i]||(s[i]={enabled:!1})}});var n=F.extend({},w);o.useModulesParams(n),o.params=F.extend({},n,T,s),o.originalParams=F.extend({},o.params),o.passedParams=F.extend({},s);var r=(o.$=A)(o.params.el);if(e=r[0]){if(1<r.length){var a=[];return r.each(function(e,t){var i=F.extend({},s,{el:t});a.push(new p(i))}),a}e.swiper=o,r.data("swiper",o);var l,d,c=r.children("."+o.params.wrapperClass);return F.extend(o,{$el:r,el:e,$wrapperEl:c,wrapperEl:c[0],classNames:[],slides:A(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===o.params.direction},isVertical:function(){return"vertical"===o.params.direction},rtl:"rtl"===e.dir.toLowerCase()||"rtl"===r.css("direction"),rtlTranslate:"horizontal"===o.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===r.css("direction")),wrongRTL:"-webkit-box"===c.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEvents:(l=["touchstart","touchmove","touchend"],d=["mousedown","mousemove","mouseup"],R.pointerEvents?d=["pointerdown","pointermove","pointerup"]:R.prefixedPointerEvents&&(d=["MSPointerDown","MSPointerMove","MSPointerUp"]),o.touchEventsTouch={start:l[0],move:l[1],end:l[2]},o.touchEventsDesktop={start:d[0],move:d[1],end:d[2]},R.touch||!o.params.simulateTouch?o.touchEventsTouch:o.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:F.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.useModules(),o.params.init&&o.init(),o}}u&&(p.__proto__=u);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return((p.prototype=Object.create(u&&u.prototype)).constructor=p).prototype.slidesPerViewDynamic=function(){var e=this,t=e.params,i=e.slides,n=e.slidesGrid,s=e.size,o=e.activeIndex,r=1;if(t.centeredSlides){for(var a,l=i[o].swiperSlideSize,d=o+1;d<i.length;d+=1)i[d]&&!a&&(r+=1,s<(l+=i[d].swiperSlideSize)&&(a=!0));for(var c=o-1;0<=c;--c)i[c]&&!a&&(r+=1,s<(l+=i[c].swiperSlideSize)&&(a=!0))}else for(var u=o+1;u<i.length;u+=1)n[u]-n[o]<s&&(r+=1);return r},p.prototype.update=function(){var i=this;if(i&&!i.destroyed){var e=i.snapGrid,t=i.params;t.breakpoints&&i.setBreakpoint(),i.updateSize(),i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.params.freeMode?(n(),i.params.autoHeight&&i.updateAutoHeight()):(("auto"===i.params.slidesPerView||1<i.params.slidesPerView)&&i.isEnd&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0))||n(),t.watchOverflow&&e!==i.snapGrid&&i.checkOverflow(),i.emit("update")}function n(){var e=i.rtlTranslate?-1*i.translate:i.translate,t=Math.min(Math.max(e,i.maxTranslate()),i.minTranslate());i.setTranslate(t),i.updateActiveIndex(),i.updateSlidesClasses()}},p.prototype.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))},p.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,n=i.params,s=i.$el,o=i.$wrapperEl,r=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),t&&(i.removeClasses(),s.removeAttr("style"),o.removeAttr("style"),r&&r.length&&r.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),F.deleteProps(i)),i.destroyed=!0),null},p.extendDefaults=function(e){F.extend(T,e)},e.extendedDefaults.get=function(){return T},e.defaults.get=function(){return w},e.Class.get=function(){return u},e.$.get=function(){return A},Object.defineProperties(p,e),p}(e),C={name:"device",proto:{device:f},static:{device:f}},E={name:"support",proto:{support:R},static:{support:R}},k={name:"browser",proto:{browser:D},static:{browser:D}},$={name:"resize",create:function(){var e=this;F.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){q.addEventListener("resize",this.resize.resizeHandler),q.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){q.removeEventListener("resize",this.resize.resizeHandler),q.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},P={func:q.MutationObserver||q.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,n=new P.func(function(e){if(1!==e.length){var t=function(){i.emit("observerUpdate",e[0])};q.requestAnimationFrame?q.requestAnimationFrame(t):q.setTimeout(t,0)}else i.emit("observerUpdate",e[0])});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(n)},init:function(){var e=this;if(R.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),i=0;i<t.length;i+=1)e.observer.attach(t[i]);e.observer.attach(e.$el[0],{childList:!1}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},M={name:"observer",params:{observer:!1,observeParents:!1},create:function(){F.extend(this,{observer:{init:P.init.bind(this),attach:P.attach.bind(this),destroy:P.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},L={update:function(e){var t=this,i=t.params,n=i.slidesPerView,s=i.slidesPerGroup,o=i.centeredSlides,r=t.virtual,a=r.from,l=r.to,d=r.slides,c=r.slidesGrid,u=r.renderSlide,p=r.offset;t.updateActiveIndex();var h,f,v,g=t.activeIndex||0;h=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",v=o?(f=Math.floor(n/2)+s,Math.floor(n/2)+s):(f=n+(s-1),s);var m=Math.max((g||0)-v,0),y=Math.min((g||0)+f,d.length-1),b=(t.slidesGrid[m]||0)-(t.slidesGrid[0]||0);function w(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(F.extend(t.virtual,{from:m,to:y,offset:b,slidesGrid:t.slidesGrid}),a===m&&l===y&&!e)return t.slidesGrid!==c&&b!==p&&t.slides.css(h,b+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:b,from:m,to:y,slides:function(){for(var e=[],t=m;t<=y;t+=1)e.push(d[t]);return e}()}),void w();var x=[],T=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var S=a;S<=l;S+=1)(S<m||y<S)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+S+'"]').remove();for(var C=0;C<d.length;C+=1)m<=C&&C<=y&&(void 0===l||e?T.push(C):(l<C&&T.push(C),C<a&&x.push(C)));T.forEach(function(e){t.$wrapperEl.append(u(d[e],e))}),x.sort(function(e,t){return e<t}).forEach(function(e){t.$wrapperEl.prepend(u(d[e],e))}),t.$wrapperEl.children(".swiper-slide").css(h,b+"px"),w()},renderSlide:function(e,t){var i=this,n=i.params.virtual;if(n.cache&&i.virtual.cache[t])return i.virtual.cache[t];var s=n.renderSlide?A(n.renderSlide.call(i,e,t)):A('<div class="'+i.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",t),n.cache&&(i.virtual.cache[t]=s),s},appendSlide:function(e){this.virtual.slides.push(e),this.virtual.update(!0)},prependSlide:function(e){var t=this;if(t.virtual.slides.unshift(e),t.params.virtual.cache){var i=t.virtual.cache,n={};Object.keys(i).forEach(function(e){n[e+1]=i[e]}),t.virtual.cache=n}t.virtual.update(!0),t.slideNext(0)}},z={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null}},create:function(){var e=this;F.extend(e,{virtual:{update:L.update.bind(e),appendSlide:L.appendSlide.bind(e),prependSlide:L.prependSlide.bind(e),renderSlide:L.renderSlide.bind(e),slides:e.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e=this;if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};F.extend(e.params,t),F.extend(e.originalParams,t),e.virtual.update()}},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},I={handle:function(e){var t=this,i=t.rtlTranslate,n=e;n.originalEvent&&(n=n.originalEvent);var s=n.keyCode||n.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===s||t.isVertical()&&40===s))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===s||t.isVertical()&&38===s))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||v.activeElement&&v.activeElement.nodeName&&("input"===v.activeElement.nodeName.toLowerCase()||"textarea"===v.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(37===s||39===s||38===s||40===s)){var o=!1;if(0<t.$el.parents("."+t.params.slideClass).length&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var r=q.innerWidth,a=q.innerHeight,l=t.$el.offset();i&&(l.left-=t.$el[0].scrollLeft);for(var d=[[l.left,l.top],[l.left+t.width,l.top],[l.left,l.top+t.height],[l.left+t.width,l.top+t.height]],c=0;c<d.length;c+=1){var u=d[c];0<=u[0]&&u[0]<=r&&0<=u[1]&&u[1]<=a&&(o=!0)}if(!o)return}t.isHorizontal()?(37!==s&&39!==s||(n.preventDefault?n.preventDefault():n.returnValue=!1),(39===s&&!i||37===s&&i)&&t.slideNext(),(37===s&&!i||39===s&&i)&&t.slidePrev()):(38!==s&&40!==s||(n.preventDefault?n.preventDefault():n.returnValue=!1),40===s&&t.slideNext(),38===s&&t.slidePrev()),t.emit("keyPress",s)}},enable:function(){this.keyboard.enabled||(A(v).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(A(v).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},O={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){F.extend(this,{keyboard:{enabled:!1,enable:I.enable.bind(this),disable:I.disable.bind(this),handle:I.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}},H={lastScrollTime:F.now(),event:-1<q.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":function(){var e="onwheel",t=e in v;if(!t){var i=v.createElement("div");i.setAttribute(e,"return;"),t="function"==typeof i[e]}return!t&&v.implementation&&v.implementation.hasFeature&&!0!==v.implementation.hasFeature("","")&&(t=v.implementation.hasFeature("Events.wheel","3.0")),t}()?"wheel":"mousewheel",normalize:function(e){var t=0,i=0,n=0,s=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),n=10*t,s=10*i,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||s)&&e.deltaMode&&(1===e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!i&&(i=s<1?-1:1),{spinX:t,spinY:i,pixelX:n,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,n=i.params.mousewheel;if(!i.mouseEntered&&!n.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var s=0,o=i.rtlTranslate?-1:1,r=H.normalize(t);if(n.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(r.pixelX)>Math.abs(r.pixelY)))return!0;s=r.pixelX*o}else{if(!(Math.abs(r.pixelY)>Math.abs(r.pixelX)))return!0;s=r.pixelY}else s=Math.abs(r.pixelX)>Math.abs(r.pixelY)?-r.pixelX*o:-r.pixelY;if(0===s)return!0;if(n.invert&&(s=-s),i.params.freeMode){i.params.loop&&i.loopFix();var a=i.getTranslate()+s*n.sensitivity,l=i.isBeginning,d=i.isEnd;if(a>=i.minTranslate()&&(a=i.minTranslate()),a<=i.maxTranslate()&&(a=i.maxTranslate()),i.setTransition(0),i.setTranslate(a),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!l&&i.isBeginning||!d&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky&&(clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=F.nextTick(function(){i.slideToClosest()},300)),i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),a===i.minTranslate()||a===i.maxTranslate())return!0}else{if(60<F.now()-i.mousewheel.lastScrollTime)if(s<0)if(i.isEnd&&!i.params.loop||i.animating){if(n.releaseOnEdges)return!0}else i.slideNext(),i.emit("scroll",t);else if(i.isBeginning&&!i.params.loop||i.animating){if(n.releaseOnEdges)return!0}else i.slidePrev(),i.emit("scroll",t);i.mousewheel.lastScrollTime=(new q.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable:function(){var e=this;if(!H.event)return!1;if(e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=A(e.params.mousewheel.eventsTarged)),t.on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on(H.event,e.mousewheel.handle),e.mousewheel.enabled=!0},disable:function(){var e=this;if(!H.event)return!1;if(!e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=A(e.params.mousewheel.eventsTarged)),t.off(H.event,e.mousewheel.handle),!(e.mousewheel.enabled=!1)}},N={update:function(){var e=this,t=e.params.navigation;if(!e.params.loop){var i=e.navigation,n=i.$nextEl,s=i.$prevEl;s&&0<s.length&&(e.isBeginning?s.addClass(t.disabledClass):s.removeClass(t.disabledClass),s[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),n&&0<n.length&&(e.isEnd?n.addClass(t.disabledClass):n.removeClass(t.disabledClass),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))}},init:function(){var e,t,i=this,n=i.params.navigation;(n.nextEl||n.prevEl)&&(n.nextEl&&(e=A(n.nextEl),i.params.uniqueNavElements&&"string"==typeof n.nextEl&&1<e.length&&1===i.$el.find(n.nextEl).length&&(e=i.$el.find(n.nextEl))),n.prevEl&&(t=A(n.prevEl),i.params.uniqueNavElements&&"string"==typeof n.prevEl&&1<t.length&&1===i.$el.find(n.prevEl).length&&(t=i.$el.find(n.prevEl))),e&&0<e.length&&e.on("click",function(e){e.preventDefault(),i.isEnd&&!i.params.loop||i.slideNext()}),t&&0<t.length&&t.on("click",function(e){e.preventDefault(),i.isBeginning&&!i.params.loop||i.slidePrev()}),F.extend(i.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;t&&t.length&&(t.off("click"),t.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click"),i.removeClass(this.params.navigation.disabledClass))}},j={update:function(){var e=this,t=e.rtl,s=e.params.pagination;if(s.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var o,i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,r=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((o=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>i-1-2*e.loopedSlides&&(o-=i-2*e.loopedSlides),r-1<o&&(o-=r),o<0&&"bullets"!==e.params.paginationType&&(o=r+o)):o=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===s.type&&e.pagination.bullets&&0<e.pagination.bullets.length){var a,l,d,c=e.pagination.bullets;if(s.dynamicBullets&&(e.pagination.bulletSize=c.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),n.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(s.dynamicMainBullets+4)+"px"),1<s.dynamicMainBullets&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=o-e.previousIndex,e.pagination.dynamicBulletIndex>s.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=s.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),a=o-e.pagination.dynamicBulletIndex,d=((l=a+(Math.min(c.length,s.dynamicMainBullets)-1))+a)/2),c.removeClass(s.bulletActiveClass+" "+s.bulletActiveClass+"-next "+s.bulletActiveClass+"-next-next "+s.bulletActiveClass+"-prev "+s.bulletActiveClass+"-prev-prev "+s.bulletActiveClass+"-main"),1<n.length)c.each(function(e,t){var i=A(t),n=i.index();n===o&&i.addClass(s.bulletActiveClass),s.dynamicBullets&&(a<=n&&n<=l&&i.addClass(s.bulletActiveClass+"-main"),n===a&&i.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),n===l&&i.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next"))});else if(c.eq(o).addClass(s.bulletActiveClass),s.dynamicBullets){for(var u=c.eq(a),p=c.eq(l),h=a;h<=l;h+=1)c.eq(h).addClass(s.bulletActiveClass+"-main");u.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),p.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next")}if(s.dynamicBullets){var f=Math.min(c.length,s.dynamicMainBullets+4),v=(e.pagination.bulletSize*f-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,g=t?"right":"left";c.css(e.isHorizontal()?g:"top",v+"px")}}if("fraction"===s.type&&(n.find("."+s.currentClass).text(s.formatFractionCurrent(o+1)),n.find("."+s.totalClass).text(s.formatFractionTotal(r))),"progressbar"===s.type){var m;m=s.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var y=(o+1)/r,b=1,w=1;"horizontal"==m?b=y:w=y,n.find("."+s.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+b+") scaleY("+w+")").transition(e.params.speed)}"custom"===s.type&&s.renderCustom?(n.html(s.renderCustom(e,o+1,r)),e.emit("paginationRender",e,n[0])):e.emit("paginationUpdate",e,n[0]),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](s.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,s="";if("bullets"===t.type){for(var o=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,r=0;r<o;r+=1)t.renderBullet?s+=t.renderBullet.call(e,r,t.bulletClass):s+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";n.html(s),e.pagination.bullets=n.find("."+t.bulletClass)}"fraction"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',n.html(s)),"progressbar"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',n.html(s)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var i=this,e=i.params.pagination;if(e.el){var t=A(e.el);0!==t.length&&(i.params.uniqueNavElements&&"string"==typeof e.el&&1<t.length&&1===i.$el.find(e.el).length&&(t=i.$el.find(e.el)),"bullets"===e.type&&e.clickable&&t.addClass(e.clickableClass),t.addClass(e.modifierClass+e.type),"bullets"===e.type&&e.dynamicBullets&&(t.addClass(""+e.modifierClass+e.type+"-dynamic"),i.pagination.dynamicBulletIndex=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&t.addClass(e.progressbarOppositeClass),e.clickable&&t.on("click","."+e.bulletClass,function(e){e.preventDefault();var t=A(this).index()*i.params.slidesPerGroup;i.params.loop&&(t+=i.loopedSlides),i.slideTo(t)}),F.extend(i.pagination,{$el:t,el:t[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.pagination.$el;i.removeClass(t.hiddenClass),i.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&i.off("click","."+t.bulletClass)}}},B={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=e.rtlTranslate,n=e.progress,s=t.dragSize,o=t.trackSize,r=t.$dragEl,a=t.$el,l=e.params.scrollbar,d=s,c=(o-s)*n;i?0<(c=-c)?(d=s-c,c=0):o<-c+s&&(d=o+c):c<0?(d=s+c,c=0):o<c+s&&(d=o-c),e.isHorizontal()?(R.transforms3d?r.transform("translate3d("+c+"px, 0, 0)"):r.transform("translateX("+c+"px)"),r[0].style.width=d+"px"):(R.transforms3d?r.transform("translate3d(0px, "+c+"px, 0)"):r.transform("translateY("+c+"px)"),r[0].style.height=d+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),a[0].style.opacity=1,e.scrollbar.timeout=setTimeout(function(){a[0].style.opacity=0,a.transition(400)},1e3))}},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=t.$dragEl,n=t.$el;i[0].style.width="",i[0].style.height="";var s,o=e.isHorizontal()?n[0].offsetWidth:n[0].offsetHeight,r=e.size/e.virtualSize,a=r*(o/e.size);s="auto"===e.params.scrollbar.dragSize?o*r:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?i[0].style.width=s+"px":i[0].style.height=s+"px",n[0].style.display=1<=r?"none":"",e.params.scrollbarHide&&(n[0].style.opacity=0),F.extend(t,{trackSize:o,divider:r,moveDivider:a,dragSize:s}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)}},setDragPosition:function(e){var t,i=this,n=i.scrollbar,s=i.rtlTranslate,o=n.$el,r=n.dragSize,a=n.trackSize;t=((i.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-o.offset()[i.isHorizontal()?"left":"top"]-r/2)/(a-r),t=Math.max(Math.min(t,1),0),s&&(t=1-t);var l=i.minTranslate()+(i.maxTranslate()-i.minTranslate())*t;i.updateProgress(l),i.setTranslate(l),i.updateActiveIndex(),i.updateSlidesClasses()},onDragStart:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar,s=t.$wrapperEl,o=n.$el,r=n.$dragEl;t.scrollbar.isTouched=!0,e.preventDefault(),e.stopPropagation(),s.transition(100),r.transition(100),n.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),o.transition(0),i.hide&&o.css("opacity",1),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,n=t.$el,s=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),n.transition(0),s.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=F.nextTick(function(){n.css("opacity",0),n.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,i=e.touchEvents,n=e.touchEventsDesktop,s=e.params,o=t.$el[0],r=!(!R.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},a=!(!R.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};R.touch||!R.pointerEvents&&!R.prefixedPointerEvents?(R.touch&&(o.addEventListener(i.start,e.scrollbar.onDragStart,r),o.addEventListener(i.move,e.scrollbar.onDragMove,r),o.addEventListener(i.end,e.scrollbar.onDragEnd,a)),(s.simulateTouch&&!f.ios&&!f.android||s.simulateTouch&&!R.touch&&f.ios)&&(o.addEventListener("mousedown",e.scrollbar.onDragStart,r),v.addEventListener("mousemove",e.scrollbar.onDragMove,r),v.addEventListener("mouseup",e.scrollbar.onDragEnd,a))):(o.addEventListener(n.start,e.scrollbar.onDragStart,r),v.addEventListener(n.move,e.scrollbar.onDragMove,r),v.addEventListener(n.end,e.scrollbar.onDragEnd,a))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,i=e.touchEvents,n=e.touchEventsDesktop,s=e.params,o=t.$el[0],r=!(!R.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},a=!(!R.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};R.touch||!R.pointerEvents&&!R.prefixedPointerEvents?(R.touch&&(o.removeEventListener(i.start,e.scrollbar.onDragStart,r),o.removeEventListener(i.move,e.scrollbar.onDragMove,r),o.removeEventListener(i.end,e.scrollbar.onDragEnd,a)),(s.simulateTouch&&!f.ios&&!f.android||s.simulateTouch&&!R.touch&&f.ios)&&(o.removeEventListener("mousedown",e.scrollbar.onDragStart,r),v.removeEventListener("mousemove",e.scrollbar.onDragMove,r),v.removeEventListener("mouseup",e.scrollbar.onDragEnd,a))):(o.removeEventListener(n.start,e.scrollbar.onDragStart,r),v.removeEventListener(n.move,e.scrollbar.onDragMove,r),v.removeEventListener(n.end,e.scrollbar.onDragEnd,a))}},init:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,i=e.$el,n=e.params.scrollbar,s=A(n.el);e.params.uniqueNavElements&&"string"==typeof n.el&&1<s.length&&1===i.find(n.el).length&&(s=i.find(n.el));var o=s.find("."+e.params.scrollbar.dragClass);0===o.length&&(o=A('<div class="'+e.params.scrollbar.dragClass+'"></div>'),s.append(o)),F.extend(t,{$el:s,el:s[0],$dragEl:o,dragEl:o[0]}),n.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},X={setTransform:function(e,t){var i=this.rtl,n=A(e),s=i?-1:1,o=n.attr("data-swiper-parallax")||"0",r=n.attr("data-swiper-parallax-x"),a=n.attr("data-swiper-parallax-y"),l=n.attr("data-swiper-parallax-scale"),d=n.attr("data-swiper-parallax-opacity");if(r||a?(r=r||"0",a=a||"0"):this.isHorizontal()?(r=o,a="0"):(a=o,r="0"),r=0<=r.indexOf("%")?parseInt(r,10)*t*s+"%":r*t*s+"px",a=0<=a.indexOf("%")?parseInt(a,10)*t+"%":a*t+"px",null!=d){var c=d-(d-1)*(1-Math.abs(t));n[0].style.opacity=c}if(null==l)n.transform("translate3d("+r+", "+a+", 0px)");else{var u=l-(l-1)*(1-Math.abs(t));n.transform("translate3d("+r+", "+a+", 0px) scale("+u+")")}},setTranslate:function(){var n=this,e=n.$el,t=n.slides,s=n.progress,o=n.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,t){n.parallax.setTransform(t,s)}),t.each(function(e,t){var i=t.progress;1<n.params.slidesPerGroup&&"auto"!==n.params.slidesPerView&&(i+=Math.ceil(e/2)-s*(o.length-1)),i=Math.min(Math.max(i,-1),1),A(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,t){n.parallax.setTransform(t,i)})})},setTransition:function(s){void 0===s&&(s=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,t){var i=A(t),n=parseInt(i.attr("data-swiper-parallax-duration"),10)||s;0===s&&(n=0),i.transition(n)})}},W={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-t,2)+Math.pow(s-i,2))},onGestureStart:function(e){var t=this,i=t.params.zoom,n=t.zoom,s=n.gesture;if(n.fakeGestureTouched=!1,n.fakeGestureMoved=!1,!R.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;n.fakeGestureTouched=!0,s.scaleStart=W.getDistanceBetweenTouches(e)}s.$slideEl&&s.$slideEl.length||(s.$slideEl=A(e.target).closest(".swiper-slide"),0===s.$slideEl.length&&(s.$slideEl=t.slides.eq(t.activeIndex)),s.$imageEl=s.$slideEl.find("img, svg, canvas"),s.$imageWrapEl=s.$imageEl.parent("."+i.containerClass),s.maxRatio=s.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==s.$imageWrapEl.length)?(s.$imageEl.transition(0),t.zoom.isScaling=!0):s.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!R.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,n.scaleMove=W.getDistanceBetweenTouches(e)}n.$imageEl&&0!==n.$imageEl.length&&(R.gestures?this.zoom.scale=e.scale*i.currentScale:i.scale=n.scaleMove/n.scaleStart*i.currentScale,i.scale>n.maxRatio&&(i.scale=n.maxRatio-1+Math.pow(i.scale-n.maxRatio+1,.5)),i.scale<t.minRatio&&(i.scale=t.minRatio+1-Math.pow(t.minRatio-i.scale+1,.5)),n.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!R.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!f.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,n.maxRatio),t.minRatio),n.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(n.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,i=t.gesture,n=t.image;i.$imageEl&&0!==i.$imageEl.length&&(n.isTouched||(f.android&&e.preventDefault(),n.isTouched=!0,n.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,i=t.zoom,n=i.gesture,s=i.image,o=i.velocity;if(n.$imageEl&&0!==n.$imageEl.length&&(t.allowClick=!1,s.isTouched&&n.$slideEl)){s.isMoved||(s.width=n.$imageEl[0].offsetWidth,s.height=n.$imageEl[0].offsetHeight,s.startX=F.getTranslate(n.$imageWrapEl[0],"x")||0,s.startY=F.getTranslate(n.$imageWrapEl[0],"y")||0,n.slideWidth=n.$slideEl[0].offsetWidth,n.slideHeight=n.$slideEl[0].offsetHeight,n.$imageWrapEl.transition(0),t.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var r=s.width*i.scale,a=s.height*i.scale;if(!(r<n.slideWidth&&a<n.slideHeight)){if(s.minX=Math.min(n.slideWidth/2-r/2,0),s.maxX=-s.minX,s.minY=Math.min(n.slideHeight/2-a/2,0),s.maxY=-s.minY,s.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),o.prevPositionX||(o.prevPositionX=s.touchesCurrent.x),o.prevPositionY||(o.prevPositionY=s.touchesCurrent.y),o.prevTime||(o.prevTime=Date.now()),o.x=(s.touchesCurrent.x-o.prevPositionX)/(Date.now()-o.prevTime)/2,o.y=(s.touchesCurrent.y-o.prevPositionY)/(Date.now()-o.prevTime)/2,Math.abs(s.touchesCurrent.x-o.prevPositionX)<2&&(o.x=0),Math.abs(s.touchesCurrent.y-o.prevPositionY)<2&&(o.y=0),o.prevPositionX=s.touchesCurrent.x,o.prevPositionY=s.touchesCurrent.y,o.prevTime=Date.now(),n.$imageWrapEl.transform("translate3d("+s.currentX+"px, "+s.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,n=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var s=300,o=300,r=n.x*s,a=i.currentX+r,l=n.y*o,d=i.currentY+l;0!==n.x&&(s=Math.abs((a-i.currentX)/n.x)),0!==n.y&&(o=Math.abs((d-i.currentY)/n.y));var c=Math.max(s,o);i.currentX=a,i.currentY=d;var u=i.width*e.scale,p=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-u/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-p/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(c).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0,e.scale=1,e.currentScale=1)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,n,s,o,r,a,l,d,c,u,p,h,f,v,g,m=this,y=m.zoom,b=m.params.zoom,w=y.gesture,x=y.image;w.$slideEl||(w.$slideEl=m.clickedSlide?A(m.clickedSlide):m.slides.eq(m.activeIndex),w.$imageEl=w.$slideEl.find("img, svg, canvas"),w.$imageWrapEl=w.$imageEl.parent("."+b.containerClass)),w.$imageEl&&0!==w.$imageEl.length&&(w.$slideEl.addClass(""+b.zoomedSlideClass),i=void 0===x.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=x.touchesStart.x,x.touchesStart.y),y.scale=w.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,y.currentScale=w.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,e?(v=w.$slideEl[0].offsetWidth,g=w.$slideEl[0].offsetHeight,n=w.$slideEl.offset().left+v/2-t,s=w.$slideEl.offset().top+g/2-i,a=w.$imageEl[0].offsetWidth,l=w.$imageEl[0].offsetHeight,d=a*y.scale,c=l*y.scale,h=-(u=Math.min(v/2-d/2,0)),f=-(p=Math.min(g/2-c/2,0)),(o=n*y.scale)<u&&(o=u),h<o&&(o=h),(r=s*y.scale)<p&&(r=p),f<r&&(r=f)):r=o=0,w.$imageWrapEl.transition(300).transform("translate3d("+o+"px, "+r+"px,0)"),w.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+y.scale+")"))},out:function(){var e=this,t=e.zoom,i=e.params.zoom,n=t.gesture;n.$slideEl||(n.$slideEl=e.clickedSlide?A(e.clickedSlide):e.slides.eq(e.activeIndex),n.$imageEl=n.$slideEl.find("img, svg, canvas"),n.$imageWrapEl=n.$imageEl.parent("."+i.containerClass)),n.$imageEl&&0!==n.$imageEl.length&&(t.scale=1,t.currentScale=1,n.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),n.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),n.$slideEl.removeClass(""+i.zoomedSlideClass),n.$slideEl=void 0)},enable:function(){var e=this,t=e.zoom;if(!t.enabled){t.enabled=!0;var i=!("touchstart"!==e.touchEvents.start||!R.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};R.gestures?(e.$wrapperEl.on("gesturestart",".swiper-slide",t.onGestureStart,i),e.$wrapperEl.on("gesturechange",".swiper-slide",t.onGestureChange,i),e.$wrapperEl.on("gestureend",".swiper-slide",t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,".swiper-slide",t.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,".swiper-slide",t.onGestureChange,i),e.$wrapperEl.on(e.touchEvents.end,".swiper-slide",t.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){e.zoom.enabled=!1;var i=!("touchstart"!==e.touchEvents.start||!R.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};R.gestures?(e.$wrapperEl.off("gesturestart",".swiper-slide",t.onGestureStart,i),e.$wrapperEl.off("gesturechange",".swiper-slide",t.onGestureChange,i),e.$wrapperEl.off("gestureend",".swiper-slide",t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,".swiper-slide",t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,".swiper-slide",t.onGestureChange,i),e.$wrapperEl.off(e.touchEvents.end,".swiper-slide",t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove)}}},Y={loadInSlide:function(e,l){void 0===l&&(l=!0);var d=this,c=d.params.lazy;if(void 0!==e&&0!==d.slides.length){var u=d.virtual&&d.params.virtual.enabled?d.$wrapperEl.children("."+d.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):d.slides.eq(e),t=u.find("."+c.elementClass+":not(."+c.loadedClass+"):not(."+c.loadingClass+")");!u.hasClass(c.elementClass)||u.hasClass(c.loadedClass)||u.hasClass(c.loadingClass)||(t=t.add(u[0])),0!==t.length&&t.each(function(e,t){var n=A(t);n.addClass(c.loadingClass);var s=n.attr("data-background"),o=n.attr("data-src"),r=n.attr("data-srcset"),a=n.attr("data-sizes");d.loadImage(n[0],o||s,r,a,!1,function(){if(null!=d&&d&&(!d||d.params)&&!d.destroyed){if(s?(n.css("background-image",'url("'+s+'")'),n.removeAttr("data-background")):(r&&(n.attr("srcset",r),n.removeAttr("data-srcset")),a&&(n.attr("sizes",a),n.removeAttr("data-sizes")),o&&(n.attr("src",o),n.removeAttr("data-src"))),n.addClass(c.loadedClass).removeClass(c.loadingClass),u.find("."+c.preloaderClass).remove(),d.params.loop&&l){var e=u.attr("data-swiper-slide-index");if(u.hasClass(d.params.slideDuplicateClass)){var t=d.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+d.params.slideDuplicateClass+")");d.lazy.loadInSlide(t.index(),!1)}else{var i=d.$wrapperEl.children("."+d.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');d.lazy.loadInSlide(i.index(),!1)}}d.emit("lazyImageReady",u[0],n[0])}}),d.emit("lazyImageLoad",u[0],n[0])})}},load:function(){var n=this,t=n.$wrapperEl,i=n.params,s=n.slides,e=n.activeIndex,o=n.virtual&&i.virtual.enabled,r=i.lazy,a=i.slidesPerView;function l(e){if(o){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(s[e])return 1}function d(e){return o?A(e).attr("data-swiper-slide-index"):A(e).index()}if("auto"===a&&(a=0),n.lazy.initialImageLoaded||(n.lazy.initialImageLoaded=!0),n.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(e,t){var i=o?A(t).attr("data-swiper-slide-index"):A(t).index();n.lazy.loadInSlide(i)});else if(1<a)for(var c=e;c<e+a;c+=1)l(c)&&n.lazy.loadInSlide(c);else n.lazy.loadInSlide(e);if(r.loadPrevNext)if(1<a||r.loadPrevNextAmount&&1<r.loadPrevNextAmount){for(var u=r.loadPrevNextAmount,p=a,h=Math.min(e+p+Math.max(u,p),s.length),f=Math.max(e-Math.max(p,u),0),v=e+a;v<h;v+=1)l(v)&&n.lazy.loadInSlide(v);for(var g=f;g<e;g+=1)l(g)&&n.lazy.loadInSlide(g)}else{var m=t.children("."+i.slideNextClass);0<m.length&&n.lazy.loadInSlide(d(m));var y=t.children("."+i.slidePrevClass);0<y.length&&n.lazy.loadInSlide(d(y))}}},G={LinearSpline:function(e,t){var i,n,s,o,r;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=function(e,t){for(n=-1,i=e.length;1<i-n;)e[s=i+n>>1]<=t?n=s:i=s;return i}(this.x,e),o=r-1,(e-this.x[o])*(this.y[r]-this.y[o])/(this.x[r]-this.x[o])+this.y[o]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new G.LinearSpline(t.slidesGrid,e.slidesGrid):new G.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,n,s=this,o=s.controller.control;function r(e){var t=s.rtlTranslate?-s.translate:s.translate;"slide"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),n=-s.controller.spline.interpolate(-t)),n&&"container"!==s.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),n=(t-s.minTranslate())*i+e.minTranslate()),s.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(o))for(var a=0;a<o.length;a+=1)o[a]!==t&&o[a]instanceof S&&r(o[a]);else o instanceof S&&t!==o&&r(o)},setTransition:function(t,e){var i,n=this,s=n.controller.control;function o(e){e.setTransition(t,n),0!==t&&(e.transitionStart(),e.params.autoHeight&&F.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){s&&(e.params.loop&&"slide"===n.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(i=0;i<s.length;i+=1)s[i]!==e&&s[i]instanceof S&&o(s[i]);else s instanceof S&&e!==s&&o(s)}},V={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this,i=t.params.a11y;if(13===e.keyCode){var n=A(e.target);t.navigation&&t.navigation.$nextEl&&n.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(i.lastSlideMessage):t.a11y.notify(i.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&n.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(i.firstSlideMessage):t.a11y.notify(i.prevSlideMessage)),t.pagination&&n.is("."+t.params.pagination.bulletClass)&&n[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop){var t=e.navigation,i=t.$nextEl,n=t.$prevEl;n&&0<n.length&&(e.isBeginning?e.a11y.disableEl(n):e.a11y.enableEl(n)),i&&0<i.length&&(e.isEnd?e.a11y.disableEl(i):e.a11y.enableEl(i))}},updatePagination:function(){var n=this,s=n.params.a11y;n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.bullets.each(function(e,t){var i=A(t);n.a11y.makeElFocusable(i),n.a11y.addElRole(i,"button"),n.a11y.addElLabel(i,s.paginationBulletMessage.replace(/{{index}}/,i.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t,i,n=e.params.a11y;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&(e.a11y.makeElFocusable(t),e.a11y.addElRole(t,"button"),e.a11y.addElLabel(t,n.nextSlideMessage),t.on("keydown",e.a11y.onEnterKey)),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,n.prevSlideMessage),i.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e,t,i=this;i.a11y.liveRegion&&0<i.a11y.liveRegion.length&&i.a11y.liveRegion.remove(),i.navigation&&i.navigation.$nextEl&&(e=i.navigation.$nextEl),i.navigation&&i.navigation.$prevEl&&(t=i.navigation.$prevEl),e&&e.off("keydown",i.a11y.onEnterKey),t&&t.off("keydown",i.a11y.onEnterKey),i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.$el.off("keydown","."+i.params.pagination.bulletClass,i.a11y.onEnterKey)}},_={init:function(){var e=this;if(e.params.history){if(!q.history||!q.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var t=e.history;t.initialized=!0,t.paths=_.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||q.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||q.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=_.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=q.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(this.history.initialized&&this.params.history.enabled){var i=this.slides.eq(t),n=_.slugify(i.attr("data-history"));q.location.pathname.includes(e)||(n=e+"/"+n);var s=q.history.state;s&&s.value===n||(this.params.history.replaceState?q.history.replaceState({value:n},null,n):q.history.pushState({value:n},null,n))}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){var n=this;if(t)for(var s=0,o=n.slides.length;s<o;s+=1){var r=n.slides.eq(s);if(_.slugify(r.attr("data-history"))===t&&!r.hasClass(n.params.slideDuplicateClass)){var a=r.index();n.slideTo(a,e,i)}}else n.slideTo(0,e,i)}},U={onHashCange:function(){var e=this,t=v.location.hash.replace("#","");t!==e.slides.eq(e.activeIndex).attr("data-hash")&&e.slideTo(e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+t+'"]').index())},setHash:function(){var e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&q.history&&q.history.replaceState)q.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||"");else{var t=e.slides.eq(e.activeIndex),i=t.attr("data-hash")||t.attr("data-history");v.location.hash=i||""}},init:function(){var e=this;if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var t=v.location.hash.replace("#","");if(t)for(var i=0,n=e.slides.length;i<n;i+=1){var s=e.slides.eq(i);if((s.attr("data-hash")||s.attr("data-history"))===t&&!s.hasClass(e.params.slideDuplicateClass)){var o=s.index();e.slideTo(o,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&A(q).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&A(q).off("hashchange",this.hashNavigation.onHashCange)}},K={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),e.autoplay.timeout=F.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},i)},start:function(){var e=this;return void 0===e.autoplay.timeout&&!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0)},stop:function(){var e=this;return!!e.autoplay.running&&void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0)},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}},Z={setTranslate:function(){for(var e=this,t=e.slides,i=0;i<t.length;i+=1){var n=e.slides.eq(i),s=-n[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);var o=0;e.isHorizontal()||(o=s,s=0);var r=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(n[0].progress),0):1+Math.min(Math.max(n[0].progress,-1),0);n.css({opacity:r}).transform("translate3d("+s+"px, "+o+"px, 0px)")}},setTransition:function(e){var i=this,t=i.slides,n=i.$wrapperEl;if(t.transition(e),i.params.virtualTranslate&&0!==e){var s=!1;t.transitionEnd(function(){if(!s&&i&&!i.destroyed){s=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)n.trigger(e[t])}})}}},Q={setTranslate:function(){var e,t=this,i=t.$el,n=t.$wrapperEl,s=t.slides,o=t.width,r=t.height,a=t.rtlTranslate,l=t.size,d=t.params.cubeEffect,c=t.isHorizontal(),u=t.virtual&&t.params.virtual.enabled,p=0;d.shadow&&(c?(0===(e=n.find(".swiper-cube-shadow")).length&&(e=A('<div class="swiper-cube-shadow"></div>'),n.append(e)),e.css({height:o+"px"})):0===(e=i.find(".swiper-cube-shadow")).length&&(e=A('<div class="swiper-cube-shadow"></div>'),i.append(e)));for(var h=0;h<s.length;h+=1){var f=s.eq(h),v=h;u&&(v=parseInt(f.attr("data-swiper-slide-index"),10));var g=90*v,m=Math.floor(g/360);a&&(g=-g,m=Math.floor(-g/360));var y=Math.max(Math.min(f[0].progress,1),-1),b=0,w=0,x=0;v%4==0?(b=4*-m*l,x=0):(v-1)%4==0?(b=0,x=4*-m*l):(v-2)%4==0?(b=l+4*m*l,x=l):(v-3)%4==0&&(b=-l,x=3*l+4*l*m),a&&(b=-b),c||(w=b,b=0);var T="rotateX("+(c?0:-g)+"deg) rotateY("+(c?g:0)+"deg) translate3d("+b+"px, "+w+"px, "+x+"px)";if(y<=1&&-1<y&&(p=90*v+90*y,a&&(p=90*-v-90*y)),f.transform(T),d.slideShadows){var S=c?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),C=c?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===S.length&&(S=A('<div class="swiper-slide-shadow-'+(c?"left":"top")+'"></div>'),f.append(S)),0===C.length&&(C=A('<div class="swiper-slide-shadow-'+(c?"right":"bottom")+'"></div>'),f.append(C)),S.length&&(S[0].style.opacity=Math.max(-y,0)),C.length&&(C[0].style.opacity=Math.max(y,0))}}if(n.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow)if(c)e.transform("translate3d(0px, "+(o/2+d.shadowOffset)+"px, "+-o/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")");else{var E=Math.abs(p)-90*Math.floor(Math.abs(p)/90),k=1.5-(Math.sin(2*E*Math.PI/360)/2+Math.cos(2*E*Math.PI/360)/2),$=d.shadowScale,P=d.shadowScale/k,M=d.shadowOffset;e.transform("scale3d("+$+", 1, "+P+") translate3d(0px, "+(r/2+M)+"px, "+-r/2/P+"px) rotateX(-90deg)")}var L=D.isSafari||D.isUiWebView?-l/2:0;n.transform("translate3d(0px,0,"+L+"px) rotateX("+(t.isHorizontal()?0:p)+"deg) rotateY("+(t.isHorizontal()?-p:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},J={setTranslate:function(){for(var e=this,t=e.slides,i=e.rtlTranslate,n=0;n<t.length;n+=1){var s=t.eq(n),o=s[0].progress;e.params.flipEffect.limitRotation&&(o=Math.max(Math.min(s[0].progress,1),-1));var r=-180*o,a=0,l=-s[0].swiperSlideOffset,d=0;if(e.isHorizontal()?i&&(r=-r):(d=l,a=-r,r=l=0),s[0].style.zIndex=-Math.abs(Math.round(o))+t.length,e.params.flipEffect.slideShadows){var c=e.isHorizontal()?s.find(".swiper-slide-shadow-left"):s.find(".swiper-slide-shadow-top"),u=e.isHorizontal()?s.find(".swiper-slide-shadow-right"):s.find(".swiper-slide-shadow-bottom");0===c.length&&(c=A('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),s.append(c)),0===u.length&&(u=A('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),s.append(u)),c.length&&(c[0].style.opacity=Math.max(-o,0)),u.length&&(u[0].style.opacity=Math.max(o,0))}s.transform("translate3d("+l+"px, "+d+"px, 0px) rotateX("+a+"deg) rotateY("+r+"deg)")}},setTransition:function(e){var i=this,t=i.slides,n=i.activeIndex,s=i.$wrapperEl;if(t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),i.params.virtualTranslate&&0!==e){var o=!1;t.eq(n).transitionEnd(function(){if(!o&&i&&!i.destroyed){o=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)s.trigger(e[t])}})}}},ee={setTranslate:function(){for(var e=this,t=e.width,i=e.height,n=e.slides,s=e.$wrapperEl,o=e.slidesSizesGrid,r=e.params.coverflowEffect,a=e.isHorizontal(),l=e.translate,d=a?t/2-l:i/2-l,c=a?r.rotate:-r.rotate,u=r.depth,p=0,h=n.length;p<h;p+=1){var f=n.eq(p),v=o[p],g=(d-f[0].swiperSlideOffset-v/2)/v*r.modifier,m=a?c*g:0,y=a?0:c*g,b=-u*Math.abs(g),w=a?0:r.stretch*g,x=a?r.stretch*g:0;Math.abs(x)<.001&&(x=0),Math.abs(w)<.001&&(w=0),Math.abs(b)<.001&&(b=0),Math.abs(m)<.001&&(m=0),Math.abs(y)<.001&&(y=0);var T="translate3d("+x+"px,"+w+"px,"+b+"px)  rotateX("+y+"deg) rotateY("+m+"deg)";if(f.transform(T),f[0].style.zIndex=1-Math.abs(Math.round(g)),r.slideShadows){var S=a?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),C=a?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===S.length&&(S=A('<div class="swiper-slide-shadow-'+(a?"left":"top")+'"></div>'),f.append(S)),0===C.length&&(C=A('<div class="swiper-slide-shadow-'+(a?"right":"bottom")+'"></div>'),f.append(C)),S.length&&(S[0].style.opacity=0<g?g:0),C.length&&(C[0].style.opacity=0<-g?-g:0)}}(R.pointerEvents||R.prefixedPointerEvents)&&(s[0].style.perspectiveOrigin=d+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},te=[C,E,k,$,M,z,O,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){var e=this;F.extend(e,{mousewheel:{enabled:!1,enable:H.enable.bind(e),disable:H.disable.bind(e),handle:H.handle.bind(e),handleMouseEnter:H.handleMouseEnter.bind(e),handleMouseLeave:H.handleMouseLeave.bind(e),lastScrollTime:F.now()}})},on:{init:function(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){F.extend(this,{navigation:{init:N.init.bind(this),update:N.update.bind(this),destroy:N.destroy.bind(this)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t=this.navigation,i=t.$nextEl,n=t.$prevEl;!this.params.navigation.hideOnClick||A(e.target).is(n)||A(e.target).is(i)||(i&&i.toggleClass(this.params.navigation.hiddenClass),n&&n.toggleClass(this.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){var e=this;F.extend(e,{pagination:{init:j.init.bind(e),render:j.render.bind(e),update:j.update.bind(e),destroy:j.destroy.bind(e),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){!this.params.loop&&void 0!==this.snapIndex||this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){var t=this;t.params.pagination.el&&t.params.pagination.hideOnClick&&0<t.pagination.$el.length&&!A(e.target).hasClass(t.params.pagination.bulletClass)&&t.pagination.$el.toggleClass(t.params.pagination.hiddenClass)}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){var e=this;F.extend(e,{scrollbar:{init:B.init.bind(e),destroy:B.destroy.bind(e),updateSize:B.updateSize.bind(e),setTranslate:B.setTranslate.bind(e),setTransition:B.setTransition.bind(e),enableDraggable:B.enableDraggable.bind(e),disableDraggable:B.disableDraggable.bind(e),setDragPosition:B.setDragPosition.bind(e),onDragStart:B.onDragStart.bind(e),onDragMove:B.onDragMove.bind(e),onDragEnd:B.onDragEnd.bind(e),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){F.extend(this,{parallax:{setTransform:X.setTransform.bind(this),setTranslate:X.setTranslate.bind(this),setTransition:X.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0)},init:function(){this.params.parallax&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var t=this,i={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){i[e]=W[e].bind(t)}),F.extend(t,{zoom:i})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){F.extend(this,{lazy:{initialImageLoaded:!1,load:Y.load.bind(this),loadInSlide:Y.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){var e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){F.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:G.getInterpolateFunction.bind(this),setTranslate:G.setTranslate.bind(this),setTransition:G.setTransition.bind(this)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;F.extend(t,{a11y:{liveRegion:A('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(V).forEach(function(e){t.a11y[e]=V[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){F.extend(this,{history:{init:_.init.bind(this),setHistory:_.setHistory.bind(this),setHistoryPopState:_.setHistoryPopState.bind(this),scrollToSlide:_.scrollToSlide.bind(this),destroy:_.destroy.bind(this)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){F.extend(this,{hashNavigation:{initialized:!1,init:U.init.bind(this),destroy:U.destroy.bind(this),setHash:U.setHash.bind(this),onHashCange:U.onHashCange.bind(this)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;F.extend(t,{autoplay:{running:!1,paused:!1,run:K.run.bind(t),start:K.start.bind(t),stop:K.stop.bind(t),pause:K.pause.bind(t),onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&this.autoplay.start()},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},destroy:function(){this.autoplay.running&&this.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){F.extend(this,{fadeEffect:{setTranslate:Z.setTranslate.bind(this),setTransition:Z.setTransition.bind(this)}})},on:{beforeInit:function(){if("fade"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"fade");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};F.extend(this.params,e),F.extend(this.originalParams,e)}},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){F.extend(this,{cubeEffect:{setTranslate:Q.setTranslate.bind(this),setTransition:Q.setTransition.bind(this)}})},on:{beforeInit:function(){if("cube"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};F.extend(this.params,e),F.extend(this.originalParams,e)}},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){F.extend(this,{flipEffect:{setTranslate:J.setTranslate.bind(this),setTransition:J.setTransition.bind(this)}})},on:{beforeInit:function(){if("flip"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};F.extend(this.params,e),F.extend(this.originalParams,e)}},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){F.extend(this,{coverflowEffect:{setTranslate:ee.setTranslate.bind(this),setTransition:ee.setTransition.bind(this)}})},on:{beforeInit:function(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}}];return void 0===S.use&&(S.use=S.Class.use,S.installModule=S.Class.installModule),S.use(te),S}),function(d,o,v,g){"use strict";function i(e){var t=e.currentTarget,i=e.data?e.data.options:{},n=e.data?e.data.items:[],s=v(t).attr("data-fancybox")||"",o=0;e.preventDefault(),e.stopPropagation(),s?(o=(n=n.length?n.filter('[data-fancybox="'+s+'"]'):v('[data-fancybox="'+s+'"]')).index(t))<0&&(o=0):n=[t],v.fancybox.open(n,i,o)}if(v){if(v.fn.fancybox)return v.error("fancyBox already initialized");var s={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!1,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","close"],idleTime:4,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><button data-fancybox-prev title="{{PREV}}" class="fancybox-button fancybox-button--left"></button><div class="fancybox-infobar__body"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><button data-fancybox-next title="{{NEXT}}" class="fancybox-button fancybox-button--right"></button></div><div class="fancybox-toolbar">{{BUTTONS}}</div><div class="fancybox-navigation"><button data-fancybox-prev title="{{PREV}}" class="fancybox-arrow fancybox-arrow--left" /><button data-fancybox-next title="{{NEXT}}" class="fancybox-arrow fancybox-arrow--right" /></div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"></button>',fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"></button>',thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>'},parentEl:"body",autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0},onInit:v.noop,beforeLoad:v.noop,afterLoad:v.noop,beforeShow:v.noop,afterShow:v.noop,beforeClose:v.noop,afterClose:v.noop,onActivate:v.noop,onDeactivate:v.noop,clickContent:function(e){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{clickContent:function(e){return"image"===e.type&&"toggleControls"},clickSlide:function(e){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e){return"image"===e.type&&"zoom"},dblclickSlide:function(e){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"ZurÃ¼ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es spÃ¤ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder"}}},c=v(d),r=v(o),a=0,u=d.requestAnimationFrame||d.webkitRequestAnimationFrame||d.mozRequestAnimationFrame||d.oRequestAnimationFrame||function(e){return d.setTimeout(e,1e3/60)},p=function(){var e,t=o.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in i)if(t.style[e]!==g)return i[e]}(),h=function(e){return e&&e.length&&e[0].offsetHeight},n=function(e,t,i){var n=this;n.opts=v.extend(!0,{index:i},s,t||{}),t&&v.isArray(t.buttons)&&(n.opts.buttons=t.buttons),n.id=n.opts.id||++a,n.group=[],n.currIndex=parseInt(n.opts.index,10)||0,n.prevIndex=null,n.prevPos=null,n.currPos=0,n.firstRun=null,n.createGroup(e),n.group.length&&(n.$lastFocus=v(o.activeElement).blur(),n.slides={},n.init(e))};v.extend(n.prototype,{init:function(){var e,t,i,n=this,s=n.group[n.currIndex].opts;n.scrollTop=r.scrollTop(),n.scrollLeft=r.scrollLeft(),v.fancybox.getInstance()||v.fancybox.isMobile||"hidden"===v("body").css("overflow")||(e=v("body").width(),v("html").addClass("fancybox-enabled"),1<(e=v("body").width()-e)&&v("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar, .fancybox-enabled body { margin-right: '+e+"px; }</style>")),i="",v.each(s.buttons,function(e,t){i+=s.btnTpl[t]||""}),t=v(n.translate(n,s.baseTpl.replace("{{BUTTONS}}",i))).addClass("fancybox-is-hidden").attr("id","fancybox-container-"+n.id).addClass(s.baseClass).data("FancyBox",n).prependTo(s.parentEl),n.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption"].forEach(function(e){n.$refs[e]=t.find(".fancybox-"+e)}),(!s.arrows||n.group.length<2)&&t.find(".fancybox-navigation").remove(),s.infobar||n.$refs.infobar.remove(),s.toolbar||n.$refs.toolbar.remove(),n.trigger("onInit"),n.activate(),n.jumpTo(n.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var i=n[t];return i===g?e:i})},createGroup:function(e){var d=this,t=v.makeArray(e);v.each(t,function(e,t){var i,n,s,o,r={},a={},l=[];v.isPlainObject(t)?a=(r=t).opts||t:"object"===v.type(t)&&v(t).length?(i=v(t),l=i.data(),a="options"in l?l.options:{},a="object"===v.type(a)?a:{},r.src="src"in l?l.src:a.src||i.attr("href"),["width","height","thumb","type","filter"].forEach(function(e){e in l&&(a[e]=l[e])}),"srcset"in l&&(a.image={srcset:l.srcset}),a.$orig=i,r.type||r.src||(r.type="inline",r.src=t)):r={type:"html",src:t+""},r.opts=v.extend(!0,{},d.opts,a),v.fancybox.isMobile&&(r.opts=v.extend(!0,{},r.opts,r.opts.mobile)),n=r.type||r.opts.type,s=r.src||"",!n&&s&&(s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":s.match(/\.(pdf)((\?|#).*)?$/i)?n="pdf":"#"===s.charAt(0)&&(n="inline")),r.type=n,r.index=d.group.length,r.opts.$orig&&!r.opts.$orig.length&&delete r.opts.$orig,!r.opts.$thumb&&r.opts.$orig&&(r.opts.$thumb=r.opts.$orig.find("img:first")),r.opts.$thumb&&!r.opts.$thumb.length&&delete r.opts.$thumb,"function"===v.type(r.opts.caption)?r.opts.caption=r.opts.caption.apply(t,[d,r]):"caption"in l&&(r.opts.caption=l.caption),r.opts.caption=r.opts.caption===g?"":r.opts.caption+"","ajax"!==n||1<(o=s.split(/\s+/,2)).length&&(r.src=o.shift(),r.opts.filter=o.shift()),"auto"==r.opts.smallBtn&&(-1<v.inArray(n,["html","inline","ajax"])?(r.opts.toolbar=!1,r.opts.smallBtn=!0):r.opts.smallBtn=!1),"pdf"===n&&(r.type="iframe",r.opts.iframe.preload=!1),r.opts.modal&&(r.opts=v.extend(!0,r.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),d.group.push(r)})},addEvents:function(){var n=this;n.removeEvents(),n.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),n.close(e)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),n.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),n.next()}),c.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?u(function(){n.update()}):(n.$refs.stage.hide(),setTimeout(function(){n.$refs.stage.show(),n.update()},500))}),r.on("focusin.fb",function(e){var t=v.fancybox?v.fancybox.getInstance():null;t.isClosing||!t.current||!t.current.opts.trapFocus||v(e.target).hasClass("fancybox-container")||v(e.target).is(o)||t&&"fixed"!==v(e.target).css("position")&&!t.$refs.container.has(e.target).length&&(e.stopPropagation(),t.focus(),c.scrollTop(n.scrollTop).scrollLeft(n.scrollLeft))}),r.on("keydown.fb",function(e){var t=n.current,i=e.keyCode||e.which;if(t&&t.opts.keyboard&&!v(e.target).is("input")&&!v(e.target).is("textarea"))return 8===i||27===i?(e.preventDefault(),void n.close(e)):37===i||38===i?(e.preventDefault(),void n.previous()):39===i||40===i?(e.preventDefault(),void n.next()):void n.trigger("afterKeydown",e,i)}),n.group[n.currIndex].opts.idleTime&&(n.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseenter.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(){n.idleSecondsCounter=0,n.isIdle&&n.showControls(),n.isIdle=!1}),n.idleInterval=d.setInterval(function(){n.idleSecondsCounter++,n.idleSecondsCounter>=n.group[n.currIndex].opts.idleTime&&(n.isIdle=!0,n.idleSecondsCounter=0,n.hideControls())},1e3))},removeEvents:function(){c.off("orientationchange.fb resize.fb"),r.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(d.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,n){var t,i,s,o,r,a,l,d=this,c=d.group.length;if(!(d.isSliding||d.isClosing||d.isAnimating&&d.firstRun)){if(e=parseInt(e,10),!(i=d.current?d.current.opts.loop:d.opts.loop)&&(e<0||c<=e))return!1;if(t=d.firstRun=null===d.firstRun,!(c<2&&!t&&d.isSliding)){if(o=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,s=d.createSlide(e),1<c&&((i||0<s.index)&&d.createSlide(e-1),(i||s.index<c-1)&&d.createSlide(e+1)),d.current=s,d.currIndex=s.index,d.currPos=s.pos,d.trigger("beforeShow",t),d.updateControls(),a=v.fancybox.getTranslate(s.$slide),s.isMoved=(0!==a.left||0!==a.top)&&!s.$slide.hasClass("fancybox-animated"),s.forcedDuration=g,v.isNumeric(n)?s.forcedDuration=n:n=s.opts[t?"animationDuration":"transitionDuration"],n=parseInt(n,10),t)return s.opts.animationEffect&&n&&d.$refs.container.css("transition-duration",n+"ms"),d.$refs.container.removeClass("fancybox-is-hidden"),h(d.$refs.container),d.$refs.container.addClass("fancybox-is-open"),s.$slide.addClass("fancybox-slide--current"),d.loadSlide(s),void d.preload();v.each(d.slides,function(e,t){v.fancybox.stop(t.$slide)}),s.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),s.isMoved?(r=Math.round(s.$slide.width()),v.each(d.slides,function(e,t){var i=t.pos-s.pos;v.fancybox.animate(t.$slide,{top:0,left:i*r+i*t.opts.gutter},n,function(){t.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===d.currPos&&(s.isMoved=!1,d.complete())})})):d.$refs.stage.children().removeAttr("style"),s.isLoaded?d.revealContent(s):d.loadSlide(s),d.preload(),o.pos!==s.pos&&(l="fancybox-slide--"+(o.pos>s.pos?"next":"previous"),o.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),o.isComplete=!1,n&&(s.isMoved||s.opts.transitionEffect)&&(s.isMoved?o.$slide.addClass(l):(l="fancybox-animated "+l+" fancybox-fx-"+s.opts.transitionEffect,v.fancybox.animate(o.$slide,l,n,function(){o.$slide.removeClass(l).removeAttr("style")}))))}}},createSlide:function(e){var t,i,n=this;return i=(i=e%n.group.length)<0?n.group.length+i:i,!n.slides[e]&&n.group[i]&&(t=v('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage),n.slides[e]=v.extend(!0,{},n.group[i],{pos:e,$slide:t,isLoaded:!1}),n.updateSlide(n.slides[e])),n.slides[e]},scaleToActual:function(e,t,i){var n,s,o,r,a,l=this,d=l.current,c=d.$content,u=parseInt(d.$slide.width(),10),p=parseInt(d.$slide.height(),10),h=d.width,f=d.height;"image"!=d.type||d.hasError||!c||l.isAnimating||(v.fancybox.stop(c),l.isAnimating=!0,e=e===g?.5*u:e,t=t===g?.5*p:t,r=h/(n=v.fancybox.getTranslate(c)).width,a=f/n.height,s=.5*u-.5*h,o=.5*p-.5*f,u<h&&(0<(s=n.left*r-(e*r-e))&&(s=0),s<u-h&&(s=u-h)),p<f&&(0<(o=n.top*a-(t*a-t))&&(o=0),o<p-f&&(o=p-f)),l.updateCursor(h,f),v.fancybox.animate(c,{top:o,left:s,scaleX:r,scaleY:a},i||330,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(e){var t,i=this,n=i.current,s=n.$content;"image"!=n.type||n.hasError||!s||i.isAnimating||(v.fancybox.stop(s),i.isAnimating=!0,t=i.getFitPos(n),i.updateCursor(t.width,t.height),v.fancybox.animate(s,{top:t.top,left:t.left,scaleX:t.width/s.width(),scaleY:t.height/s.height()},e||330,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,n,s,o,r=e.$content,a=e.width,l=e.height,d=e.opts.margin;return!(!r||!r.length||!a&&!l)&&("number"===v.type(d)&&(d=[d,d]),2==d.length&&(d=[d[0],d[1],d[0],d[1]]),c.width()<800&&(d=[0,0,0,0]),t=parseInt(this.$refs.stage.width(),10)-(d[1]+d[3]),i=parseInt(this.$refs.stage.height(),10)-(d[0]+d[2]),n=Math.min(1,t/a,i/l),s=Math.floor(n*a),o=Math.floor(n*l),{top:Math.floor(.5*(i-o))+d[0],left:Math.floor(.5*(t-s))+d[3],width:s,height:o})},update:function(){var i=this;v.each(i.slides,function(e,t){i.updateSlide(t)})},updateSlide:function(e){var t=e.$content;t&&(e.width||e.height)&&(v.fancybox.stop(t),v.fancybox.setTranslate(t,this.getFitPos(e)),e.pos===this.currPos&&this.updateCursor()),e.$slide.trigger("refresh"),this.trigger("onUpdate",e)},updateCursor:function(e,t){var i=this.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");this.current&&!this.isClosing&&(this.isZoomable()?(i.addClass("fancybox-is-zoomable"),(e!==g&&t!==g?e<this.current.width&&t<this.current.height:this.isScaledDown())?i.addClass("fancybox-can-zoomIn"):this.current.opts.touch?i.addClass("fancybox-can-drag"):i.addClass("fancybox-can-zoomOut")):this.current.opts.touch&&i.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing)return!!("image"===t.type&&t.isLoaded&&!t.hasError&&("zoom"===t.opts.clickContent||v.isFunction(t.opts.clickContent)&&"zoom"===t.opts.clickContent(t))&&(e=this.getFitPos(t),t.width>e.width||t.height>e.height))},isScaledDown:function(){var e=this.current,t=e.$content,i=!1;return t&&(i=(i=v.fancybox.getTranslate(t)).width<e.width||i.height<e.height),i},canPan:function(){var e=this.current,t=e.$content,i=!1;return t&&(i=this.getFitPos(e),i=1<Math.abs(t.width()-i.width)||1<Math.abs(t.height()-i.height)),i},loadSlide:function(i){var e,t,n,s=this;if(!i.isLoading&&!i.isLoaded){switch(i.isLoading=!0,s.trigger("beforeLoad",i),e=i.type,(t=i.$slide).off("refresh").trigger("onReset").addClass("fancybox-slide--"+(e||"unknown")).addClass(i.opts.slideClass),e){case"image":s.setImage(i);break;case"iframe":s.setIframe(i);break;case"html":s.setContent(i,i.src||i.content);break;case"inline":v(i.src).length?s.setContent(i,v(i.src)):s.setError(i);break;case"ajax":s.showLoading(i),n=v.ajax(v.extend({},i.opts.ajax.settings,{url:i.src,success:function(e,t){"success"===t&&s.setContent(i,e)},error:function(e,t){e&&"abort"!==t&&s.setError(i)}})),t.one("onReset",function(){n.abort()});break;default:s.setError(i)}return!0}},setImage:function(e){var t,i,n,s,o=this,r=e.opts.image.srcset;if(r){n=d.devicePixelRatio||1,s=d.innerWidth*n,(i=r.split(",").map(function(e){var n={};return e.trim().split(/\s+/).forEach(function(e,t){var i=parseInt(e.substring(0,e.length-1),10);return 0===t?n.url=e:void(i&&(n.value=i,n.postfix=e[e.length-1]))}),n})).sort(function(e,t){return e.value-t.value});for(var a=0;a<i.length;a++){var l=i[a];if("w"===l.postfix&&l.value>=s||"x"===l.postfix&&l.value>=n){t=l;break}}!t&&i.length&&(t=i[i.length-1]),t&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value))}e.$content=v('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&(e.opts.thumb||e.opts.$thumb)?(e.width=e.opts.width,e.height=e.opts.height,e.$ghost=v("<img />").one("error",function(){v(this).remove(),e.$ghost=null,o.setBigImage(e)}).one("load",function(){o.afterLoad(e),o.setBigImage(e)}).addClass("fancybox-image").appendTo(e.$content).attr("src",e.opts.thumb||e.opts.$thumb.attr("src"))):o.setBigImage(e)},setBigImage:function(e){var t=this,i=v("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=this.naturalWidth,e.height=this.naturalHeight,e.opts.image.srcset&&i.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.hideLoading(e),e.$ghost?e.timouts=setTimeout(function(){e.timouts=null,e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))):t.afterLoad(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),i[0].complete?i.trigger("load"):i[0].error?i.trigger("error"):e.timouts=setTimeout(function(){i[0].complete||e.hasError||t.showLoading(e)},100)},setIframe:function(o){var r,t=this,a=o.opts.iframe,e=o.$slide;o.$content=v('<div class="fancybox-content'+(a.preload?" fancybox-is-hidden":"")+'"></div>').css(a.css).appendTo(e),r=v(a.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(a.attr).appendTo(o.$content),a.preload?(t.showLoading(o),r.on("load.fb error.fb",function(e){this.isReady=1,o.$slide.trigger("refresh"),t.afterLoad(o)}),e.on("refresh.fb",function(){var e,t,i,n,s=o.$content;if(1===r[0].isReady){try{e=r.contents().find("body")}catch(e){}e&&e.length&&(a.css.width===g||a.css.height===g)&&(t=r[0].contentWindow.document.documentElement.scrollWidth,i=Math.ceil(e.outerWidth(!0)+(s.width()-t)),n=Math.ceil(e.outerHeight(!0)),s.css({width:a.css.width===g?i+(s.outerWidth()-s.innerWidth()):a.css.width,height:a.css.height===g?n+(s.outerHeight()-s.innerHeight()):a.css.height})),s.removeClass("fancybox-is-hidden")}})):this.afterLoad(o),r.attr("src",o.src),!0===o.opts.smallBtn&&o.$content.prepend(t.translate(o,o.opts.btnTpl.smallBtn)),e.one("onReset",function(){try{v(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}v(this).empty(),o.isLoaded=!1})},setContent:function(e,t){var i;this.isClosing||(this.hideLoading(e),e.$slide.empty(),(i=t)&&i.hasOwnProperty&&i instanceof v&&t.parent().length?(t.parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=v("<div></div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"!==v.type(t)||3===(t=v("<div>").append(v.trim(t)).contents())[0].nodeType&&(t=v("<div>").html(t)),e.opts.filter&&(t=v("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(v(this).empty(),e.isLoaded=!1)}),e.$content=v(t).appendTo(e.$slide),e.opts.smallBtn&&!e.$smallBtn&&(e.$smallBtn=v(this.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.removeClass("fancybox-slide--"+e.type),this.setContent(e,this.translate(e,e.opts.errorTpl))},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=v(this.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){this.isClosing||(e.isLoading=!1,e.isLoaded=!0,this.trigger("afterLoad",e),this.hideLoading(e),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&v('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),this.revealContent(e))},revealContent:function(t){var e,i,n,s,o,r=this,a=t.$slide,l=!1;return e=t.opts[r.firstRun?"animationEffect":"transitionEffect"],n=t.opts[r.firstRun?"animationDuration":"transitionDuration"],n=parseInt(t.forcedDuration===g?n:t.forcedDuration,10),!t.isMoved&&t.pos===r.currPos&&n||(e=!1),"zoom"!==e||t.pos===r.currPos&&n&&"image"===t.type&&!t.hasError&&(l=r.getThumbPos(t))||(e="fade"),"zoom"===e?((o=r.getFitPos(t)).scaleX=Math.round(o.width/l.width*100)/100,o.scaleY=Math.round(o.height/l.height*100)/100,delete o.width,delete o.height,"auto"==(s=t.opts.zoomOpacity)&&(s=.1<Math.abs(t.width/t.height-l.width/l.height)),s&&(l.opacity=.1,o.opacity=1),v.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),h(t.$content),void v.fancybox.animate(t.$content,o,n,function(){r.complete()})):(r.updateSlide(t),e?(v.fancybox.stop(a),i="fancybox-animated fancybox-slide--"+(t.pos>r.prevPos?"next":"previous")+" fancybox-fx-"+e,a.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(i),t.$content.removeClass("fancybox-is-hidden"),h(a),void v.fancybox.animate(a,"fancybox-slide--current",n,function(e){a.removeClass(i).removeAttr("style"),t.pos===r.currPos&&r.complete()},!0)):(h(a),t.$content.removeClass("fancybox-is-hidden"),void(t.pos===r.currPos&&r.complete())))},getThumbPos:function(e){var t,i=!1,n=e.opts.$thumb,s=n?n.offset():0;return s&&n[0].ownerDocument===o&&function(e){for(var t=e[0],n=t.getBoundingClientRect(),i=[];null!==t.parentElement;)"hidden"!==v(t.parentElement).css("overflow")&&"auto"!==v(t.parentElement).css("overflow")||i.push(t.parentElement.getBoundingClientRect()),t=t.parentElement;return i.every(function(e){var t=Math.min(n.right,e.right)-Math.max(n.left,e.left),i=Math.min(n.bottom,e.bottom)-Math.max(n.top,e.top);return 0<t&&0<i})&&0<n.bottom&&0<n.right&&n.left<v(d).width()&&n.top<v(d).height()}(n)&&(t=this.$refs.stage.offset(),i={top:s.top-t.top+parseFloat(n.css("border-top-width")||0),left:s.left-t.left+parseFloat(n.css("border-left-width")||0),width:n.width(),height:n.height(),scaleX:1,scaleY:1}),i},complete:function(){var i=this,e=i.current,n={};e.isMoved||!e.isLoaded||e.isComplete||(e.isComplete=!0,e.$slide.siblings().trigger("onReset"),h(e.$slide),e.$slide.addClass("fancybox-slide--complete"),v.each(i.slides,function(e,t){t.pos>=i.currPos-1&&t.pos<=i.currPos+1?n[t.pos]=t:t&&(v.fancybox.stop(t.$slide),t.$slide.unbind().remove())}),i.slides=n,i.updateCursor(),i.trigger("afterShow"),(v(o.activeElement).is("[disabled]")||e.opts.autoFocus&&"image"!=e.type&&"iframe"!==e.type)&&i.focus())},preload:function(){var e,t;this.group.length<2||(e=this.slides[this.currPos+1],t=this.slides[this.currPos-1],e&&"image"===e.type&&this.loadSlide(e),t&&"image"===t.type&&this.loadSlide(t))},focus:function(){var e,t=this.current;this.isClosing||(e=(e=t&&t.isComplete?t.$slide.find("button,:input,[tabindex],a").filter(":not([disabled]):visible:first"):null)&&e.length?e:this.$refs.container).focus()},activate:function(){var t=this;v(".fancybox-container").each(function(){var e=v(this).data("FancyBox");e&&e.uid!==t.uid&&!e.isClosing&&e.trigger("onDeactivate")}),t.current&&(0<t.$refs.container.index()&&t.$refs.container.prependTo(o.body),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function i(){d.cleanUp(e)}var n,s,o,r,a,l,d=this,c=d.current;return!d.isClosing&&(!(d.isClosing=!0)===d.trigger("beforeClose",e)?(d.isClosing=!1,u(function(){d.update()}),!1):(d.removeEvents(),c.timouts&&clearTimeout(c.timouts),o=c.$content,n=c.opts.animationEffect,s=v.isNumeric(t)?t:n?c.opts.animationDuration:0,c.$slide.off(p).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),c.$slide.siblings().trigger("onReset").remove(),s&&d.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),d.hideLoading(c),d.hideControls(),d.updateCursor(),"zoom"!==n||!0!==e&&o&&s&&"image"===c.type&&!c.hasError&&(l=d.getThumbPos(c))||(n="fade"),"zoom"===n?(v.fancybox.stop(o),(a=v.fancybox.getTranslate(o)).width=a.width*a.scaleX,a.height=a.height*a.scaleY,"auto"==(r=c.opts.zoomOpacity)&&(r=.1<Math.abs(c.width/c.height-l.width/l.height)),r&&(l.opacity=0),a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,a.width=l.width,a.height=l.height,v.fancybox.setTranslate(c.$content,a),v.fancybox.animate(c.$content,l,s,i)):n&&s?!0===e?setTimeout(i,s):v.fancybox.animate(c.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+n,s,i):i(),!0))},cleanUp:function(e){var t;this.current.$slide.trigger("onReset"),this.$refs.container.empty().remove(),this.trigger("afterClose",e),this.$lastFocus&&!this.current.focusBack&&this.$lastFocus.focus(),this.current=null,(t=v.fancybox.getInstance())?t.activate():(c.scrollTop(this.scrollTop).scrollLeft(this.scrollLeft),v("html").removeClass("fancybox-enabled"),v("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,n=Array.prototype.slice.call(arguments,1),s=t&&t.opts?t:this.current;return s?n.unshift(s):s=this,n.unshift(this),v.isFunction(s.opts[e])&&(i=s.opts[e].apply(s,n)),!1===i?i:void("afterClose"===e?r.trigger(e+".fb",n):this.$refs.container.trigger(e+".fb",n))},updateControls:function(){var e=this.current,t=e.index,i=e.opts,n=i.caption,s=this.$refs.caption;e.$slide.trigger("refresh"),this.$caption=n&&n.length?s.html(n):null,this.isHiddenControls||this.showControls(),v("[data-fancybox-count]").html(this.group.length),v("[data-fancybox-index]").html(t+1),v("[data-fancybox-prev]").prop("disabled",!i.loop&&t<=0),v("[data-fancybox-next]").prop("disabled",!i.loop&&t>=this.group.length-1)},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this.current?this.current.opts:this.opts,t=this.$refs.container;this.isHiddenControls=!1,this.idleSecondsCounter=0,t.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&1<this.group.length)).toggleClass("fancybox-show-nav",!!(e.arrows&&1<this.group.length)).toggleClass("fancybox-is-modal",!!e.modal),this.$caption?t.addClass("fancybox-show-caption "):t.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),v.fancybox={version:"3.1.20",defaults:s,getInstance:function(e){var t=v('.fancybox-container:not(".fancybox-is-closing"):first').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof n&&("string"===v.type(e)?t[e].apply(t,i):"function"===v.type(e)&&e.apply(t,i),t)},open:function(e,t,i){return new n(e,t,i)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),r.off("click.fb-start")},isMobile:o.createTouch!==g&&/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),use3d:(e=o.createElement("div"),d.getComputedStyle&&d.getComputedStyle(e).getPropertyValue("transform")&&!(o.documentMode&&o.documentMode<11)),getTranslate:function(e){var t;if(!e||!e.length)return!1;if((t=(t=e.eq(0).css("transform"))&&-1!==t.indexOf("matrix")?(t=(t=t.split("(")[1]).split(")")[0]).split(","):[]).length)t=(t=10<t.length?[t[13],t[12],t[0],t[5]]:[t[5],t[4],t[0],t[3]]).map(parseFloat);else{t=[0,0,1,1];var i=/\.*translate\((.*)px,(.*)px\)/i.exec(e.eq(0).attr("style"));i&&(t[0]=parseFloat(i[2]),t[1]=parseFloat(i[1]))}return{top:t[0],left:t[1],scaleX:t[2],scaleY:t[3],opacity:parseFloat(e.css("opacity")),width:e.width(),height:e.height()}},setTranslate:function(e,t){var i="",n={};if(e&&t)return t.left===g&&t.top===g||(i=(t.left===g?e.position().left:t.left)+"px, "+(t.top===g?e.position().top:t.top)+"px",i=this.use3d?"translate3d("+i+", 0px)":"translate("+i+")"),t.scaleX!==g&&t.scaleY!==g&&(i=(i.length?i+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),i.length&&(n.transform=i),t.opacity!==g&&(n.opacity=t.opacity),t.width!==g&&(n.width=t.width),t.height!==g&&(n.height=t.height),e.css(n)},animate:function(t,i,e,n,s){var o=p||"transitionend";v.isFunction(e)&&(n=e,e=null),v.isPlainObject(i)||t.removeAttr("style"),t.on(o,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(t.off(o),v.isPlainObject(i)?i.scaleX!==g&&i.scaleY!==g&&(t.css("transition-duration","0ms"),i.width=t.width()*i.scaleX,i.height=t.height()*i.scaleY,i.scaleX=1,i.scaleY=1,v.fancybox.setTranslate(t,i)):!0!==s&&t.removeClass(i),v.isFunction(n)&&n(e))}),v.isNumeric(e)&&t.css("transition-duration",e+"ms"),v.isPlainObject(i)?v.fancybox.setTranslate(t,i):t.addClass(i),t.data("timer",setTimeout(function(){t.trigger("transitionend")},e+16))},stop:function(e){clearTimeout(e.data("timer")),e.off(p)}},v.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?v("body").off("click.fb-start",t).on("click.fb-start",t,{items:v(t),options:e},i):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},i),this},r.on("click.fb-start","[data-fancybox]",i)}var e}(window,document,window.jQuery),function(h){"use strict";function f(i,e,t){if(i)return t=t||"","object"===h.type(t)&&(t=h.param(t,!0)),h.each(e,function(e,t){i=i.replace("$"+e,t||"")}),t.length&&(i+=(0<i.indexOf("?")?"&":"?")+t),i}var i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},google_maps:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}}};h(document).on("onInit.fb",function(e,t){h.each(t.group,function(e,s){var t,o,r,a,l,d,c,u=s.src||"",p=!1;s.type||(t=h.extend(!0,{},i,s.opts.media),h.each(t,function(e,t){if(r=u.match(t.matcher),d={},c=e,r){if(p=t.type,t.paramPlace&&r[t.paramPlace]){"?"==(l=r[t.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var i=0;i<l.length;++i){var n=l[i].split("=",2);2==n.length&&(d[n[0]]=decodeURIComponent(n[1].replace(/\+/g," ")))}}return a=h.extend(!0,{},t.params,s.opts[e],d),u="function"===h.type(t.url)?t.url.call(this,r,a,s):f(t.url,r,a),o="function"===h.type(t.thumb)?t.thumb.call(this,r,a,s):f(t.thumb,r),"vimeo"===c&&(u=u.replace("&%23","#")),!1}}),p?(s.src=u,s.type=p,s.opts.thumb||s.opts.$thumb&&s.opts.$thumb.length||(s.opts.thumb=o),"iframe"===p&&(h.extend(!0,s.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}}),s.contentProvider=c,s.opts.slideClass+=" fancybox-slide--"+("google_maps"==c?"map":"video"))):s.type="image")})})}(window.jQuery),function(f,a,v){"use strict";function c(e){var t=[];for(var i in e=(e=e.originalEvent||e||f.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[i].pageX?t.push({x:e[i].pageX,y:e[i].pageY}):e[i].clientX&&t.push({x:e[i].clientX,y:e[i].clientY});return t}function g(e,t,i){return t&&e?"x"===i?e.x-t.x:"y"===i?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function l(e){if(e.is("a,button,input,select,textarea")||v.isFunction(e.get(0).onclick))return 1;for(var t=0,i=e[0].attributes,n=i.length;t<n;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return 1}function d(e){for(var t=!1;(i=e.get(0),0,n=f.getComputedStyle(i)["overflow-y"],s=f.getComputedStyle(i)["overflow-x"],o=("scroll"===n||"auto"===n)&&i.scrollHeight>i.clientHeight,r=("scroll"===s||"auto"===s)&&i.scrollWidth>i.clientWidth,!(t=o||r))&&((e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body")););var i,n,s,o,r;return t}function i(e){this.instance=e,this.$bg=e.$refs.bg,this.$stage=e.$refs.stage,this.$container=e.$refs.container,this.destroy(),this.$container.on("touchstart.fb.touch mousedown.fb.touch",v.proxy(this,"ontouchstart"))}var m=f.requestAnimationFrame||f.webkitRequestAnimationFrame||f.mozRequestAnimationFrame||f.oRequestAnimationFrame||function(e){return f.setTimeout(e,1e3/60)},y=f.cancelAnimationFrame||f.webkitCancelAnimationFrame||f.mozCancelAnimationFrame||f.oCancelAnimationFrame||function(e){f.clearTimeout(e)};i.prototype.destroy=function(){this.$container.off(".fb.touch")},i.prototype.ontouchstart=function(e){var t=this,i=v(e.target),n=t.instance,s=n.current,o=s.$content,r="touchstart"==e.type;if(r&&t.$container.off("mousedown.fb.touch"),!s||t.instance.isAnimating||t.instance.isClosing)return e.stopPropagation(),void e.preventDefault();if((!e.originalEvent||2!=e.originalEvent.button)&&i.length&&!l(i)&&!l(i.parent())&&!(e.originalEvent.clientX>i[0].clientWidth+i.offset().left)&&(t.startPoints=c(e),t.startPoints&&!(1<t.startPoints.length&&n.isSliding))){if(t.$target=i,t.$content=o,t.canTap=!0,v(a).off(".fb.touch"),v(a).on(r?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",v.proxy(t,"ontouchend")),v(a).on(r?"touchmove.fb.touch":"mousemove.fb.touch",v.proxy(t,"ontouchmove")),e.stopPropagation(),!n.current.opts.touch&&!n.canPan()||!i.is(t.$stage)&&!t.$stage.find(i).length)return void(i.is("img")&&e.preventDefault());v.fancybox.isMobile&&(d(t.$target)||d(t.$target.parent()))||e.preventDefault(),t.canvasWidth=Math.round(s.$slide[0].clientWidth),t.canvasHeight=Math.round(s.$slide[0].clientHeight),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.sliderStartPos=t.sliderLastPos||{top:0,left:0},t.contentStartPos=v.fancybox.getTranslate(t.$content),t.contentLastPos=null,1!==t.startPoints.length||t.isZooming||(t.canTap=!n.isSliding,"image"===s.type&&(t.contentStartPos.width>t.canvasWidth+1||t.contentStartPos.height>t.canvasHeight+1)?(v.fancybox.stop(t.$content),t.$content.css("transition-duration","0ms"),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-controls--isGrabbing")),2!==t.startPoints.length||n.isAnimating||s.hasError||"image"!==s.type||!s.isLoaded&&!s.$ghost||(t.isZooming=!0,t.isSwiping=!1,t.isPanning=!1,v.fancybox.stop(t.$content),t.$content.css("transition-duration","0ms"),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-v(f).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-v(f).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=g(t.startPoints[0],t.startPoints[1]))}},i.prototype.ontouchmove=function(e){var t=this;if(t.newPoints=c(e),v.fancybox.isMobile&&(d(t.$target)||d(t.$target.parent())))return e.stopPropagation(),void(t.canTap=!1);if((t.instance.current.opts.touch||t.instance.canPan())&&t.newPoints&&t.newPoints.length&&(t.distanceX=g(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=g(t.newPoints[0],t.startPoints[0],"y"),t.distance=g(t.newPoints[0],t.startPoints[0]),0<t.distance)){if(!t.$target.is(t.$stage)&&!t.$stage.find(t.$target).length)return;e.stopPropagation(),e.preventDefault(),t.isSwiping?t.onSwipe():t.isPanning?t.onPan():t.isZooming&&t.onZoom()}},i.prototype.onSwipe=function(){var e,n=this,t=n.isSwiping,i=n.sliderStartPos.left||0;!0===t?10<Math.abs(n.distance)&&(n.canTap=!1,n.instance.group.length<2&&n.instance.opts.touch.vertical?n.isSwiping="y":n.instance.isSliding||!1===n.instance.opts.touch.vertical||"auto"===n.instance.opts.touch.vertical&&800<v(f).width()?n.isSwiping="x":(e=Math.abs(180*Math.atan2(n.distanceY,n.distanceX)/Math.PI),n.isSwiping=45<e&&e<135?"y":"x"),n.instance.isSliding=n.isSwiping,n.startPoints=n.newPoints,v.each(n.instance.slides,function(e,t){v.fancybox.stop(t.$slide),t.$slide.css("transition-duration","0ms"),t.inTransition=!1,t.pos===n.instance.current.pos&&(n.sliderStartPos.left=v.fancybox.getTranslate(t.$slide).left)}),n.instance.SlideShow&&n.instance.SlideShow.isActive&&n.instance.SlideShow.stop()):("x"==t&&(0<n.distanceX&&(n.instance.group.length<2||0===n.instance.current.index&&!n.instance.current.opts.loop)?i+=Math.pow(n.distanceX,.8):n.distanceX<0&&(n.instance.group.length<2||n.instance.current.index===n.instance.group.length-1&&!n.instance.current.opts.loop)?i-=Math.pow(-n.distanceX,.8):i+=n.distanceX),n.sliderLastPos={top:"x"==t?0:n.sliderStartPos.top+n.distanceY,left:i},n.requestId&&(y(n.requestId),n.requestId=null),n.requestId=m(function(){n.sliderLastPos&&(v.each(n.instance.slides,function(e,t){var i=t.pos-n.instance.currPos;v.fancybox.setTranslate(t.$slide,{top:n.sliderLastPos.top,left:n.sliderLastPos.left+i*n.canvasWidth+i*t.opts.gutter})}),n.$container.addClass("fancybox-is-sliding"))}))},i.prototype.onPan=function(){var e,t,i,n=this;n.canTap=!1,e=n.contentStartPos.width>n.canvasWidth?n.contentStartPos.left+n.distanceX:n.contentStartPos.left,t=n.contentStartPos.top+n.distanceY,(i=n.limitMovement(e,t,n.contentStartPos.width,n.contentStartPos.height)).scaleX=n.contentStartPos.scaleX,i.scaleY=n.contentStartPos.scaleY,n.contentLastPos=i,n.requestId&&(y(n.requestId),n.requestId=null),n.requestId=m(function(){v.fancybox.setTranslate(n.$content,n.contentLastPos)})},i.prototype.limitMovement=function(e,t,i,n){var s,o,r,a,l=this.canvasWidth,d=this.canvasHeight,c=this.contentStartPos.left,u=this.contentStartPos.top,p=this.distanceX,h=this.distanceY;return s=Math.max(0,.5*l-.5*i),o=Math.max(0,.5*d-.5*n),r=Math.min(l-i,.5*l-.5*i),a=Math.min(d-n,.5*d-.5*n),l<i&&(0<p&&s<e&&(e=s-1+Math.pow(-s+c+p,.8)||0),p<0&&e<r&&(e=r+1-Math.pow(r-c-p,.8)||0)),d<n&&(0<h&&o<t&&(t=o-1+Math.pow(-o+u+h,.8)||0),h<0&&t<a&&(t=a+1-Math.pow(a-u-h,.8)||0)),{top:t,left:e}},i.prototype.limitPosition=function(e,t,i,n){var s=this.canvasWidth,o=this.canvasHeight;return e=s<i?(e=0<e?0:e)<s-i?s-i:e:Math.max(0,s/2-i/2),{top:t=o<n?(t=0<t?0:t)<o-n?o-n:t:Math.max(0,o/2-n/2),left:e}},i.prototype.onZoom=function(){var e=this,t=e.contentStartPos.width,i=e.contentStartPos.height,n=e.contentStartPos.left,s=e.contentStartPos.top,o=g(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,r=Math.floor(t*o),a=Math.floor(i*o),l=(t-r)*e.percentageOfImageAtPinchPointX,d=(i-a)*e.percentageOfImageAtPinchPointY,c=(e.newPoints[0].x+e.newPoints[1].x)/2-v(f).scrollLeft(),u=(e.newPoints[0].y+e.newPoints[1].y)/2-v(f).scrollTop(),p=c-e.centerPointStartX,h={top:s+(d+(u-e.centerPointStartY)),left:n+(l+p),scaleX:e.contentStartPos.scaleX*o,scaleY:e.contentStartPos.scaleY*o};e.canTap=!1,e.newWidth=r,e.newHeight=a,e.contentLastPos=h,e.requestId&&(y(e.requestId),e.requestId=null),e.requestId=m(function(){v.fancybox.setTranslate(e.$content,e.contentLastPos)})},i.prototype.ontouchend=function(e){var t=this,i=Math.max((new Date).getTime()-t.startTime,1),n=t.isSwiping,s=t.isPanning,o=t.isZooming;return t.endPoints=c(e),t.$container.removeClass("fancybox-controls--isGrabbing"),v(a).off(".fb.touch"),t.requestId&&(y(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.canTap?t.onTap(e):(t.speed=366,t.velocityX=t.distanceX/i*.5,t.velocityY=t.distanceY/i*.5,t.speedX=Math.max(.5*t.speed,Math.min(1.5*t.speed,1/Math.abs(t.velocityX)*t.speed)),void(s?t.endPanning():o?t.endZooming():t.endSwiping(n)))},i.prototype.endSwiping=function(e){var t=this,i=!1;t.instance.isSliding=!1,t.sliderLastPos=null,"y"==e&&50<Math.abs(t.distanceY)?(v.fancybox.animate(t.instance.current.$slide,{top:t.sliderStartPos.top+t.distanceY+150*t.velocityY,opacity:0},150),i=t.instance.close(!0,300)):"x"==e&&50<t.distanceX&&1<t.instance.group.length?i=t.instance.previous(t.speedX):"x"==e&&t.distanceX<-50&&1<t.instance.group.length&&(i=t.instance.next(t.speedX)),!1!==i||"x"!=e&&"y"!=e||t.instance.jumpTo(t.instance.current.index,150),t.$container.removeClass("fancybox-is-sliding")},i.prototype.endPanning=function(){var e,t,i,n=this;n.contentLastPos&&(t=!1===n.instance.current.opts.touch.momentum?(e=n.contentLastPos.left,n.contentLastPos.top):(e=n.contentLastPos.left+n.velocityX*n.speed,n.contentLastPos.top+n.velocityY*n.speed),(i=n.limitPosition(e,t,n.contentStartPos.width,n.contentStartPos.height)).width=n.contentStartPos.width,i.height=n.contentStartPos.height,v.fancybox.animate(n.$content,i,330))},i.prototype.endZooming=function(){var e,t,i,n,s=this,o=s.instance.current,r=s.newWidth,a=s.newHeight;s.contentLastPos&&(e=s.contentLastPos.left,n={top:t=s.contentLastPos.top,left:e,width:r,height:a,scaleX:1,scaleY:1},v.fancybox.setTranslate(s.$content,n),r<s.canvasWidth&&a<s.canvasHeight?s.instance.scaleToFit(150):r>o.width||a>o.height?s.instance.scaleToActual(s.centerPointStartX,s.centerPointStartY,150):(i=s.limitPosition(e,t,r,a),v.fancybox.setTranslate(s.content,v.fancybox.getTranslate(s.$content)),v.fancybox.animate(s.$content,i,150)))},i.prototype.onTap=function(i){function e(e){var t=r.opts[e];if(v.isFunction(t)&&(t=t.apply(o,[r,i])),t)switch(t){case"close":o.close(n.startEvent);break;case"toggleControls":o.toggleControls(!0);break;case"next":o.next();break;case"nextOrClose":1<o.group.length?o.next():o.close(n.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(o.canPan()?o.scaleToFit():o.isScaledDown()?o.scaleToActual(l,d):o.group.length<2&&o.close(n.startEvent))}}var t,n=this,s=v(i.target),o=n.instance,r=o.current,a=i&&c(i)||n.startPoints,l=a[0]?a[0].x-n.$stage.offset().left:0,d=a[0]?a[0].y-n.$stage.offset().top:0;if(!(i.originalEvent&&2==i.originalEvent.button||o.isSliding||l>s[0].clientWidth+s.offset().left)){if(s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(s.is(".fancybox-slide"))t="Slide";else{if(!o.current.$content||!o.current.$content.has(i.target).length)return;t="Content"}if(n.tapped){if(clearTimeout(n.tapped),n.tapped=null,50<Math.abs(l-n.tapX)||50<Math.abs(d-n.tapY)||o.isSliding)return this;e("dblclick"+t)}else n.tapX=l,n.tapY=d,r.opts["dblclick"+t]&&r.opts["dblclick"+t]!==r.opts["click"+t]?n.tapped=setTimeout(function(){n.tapped=null,e("click"+t)},300):e("click"+t);return this}},v(a).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new i(t))}),v(a).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,window.jQuery),function(r,a){"use strict";function i(e){this.instance=e,this.init()}a.extend(i.prototype,{timer:null,isActive:!1,$button:null,speed:3e3,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(){var e=this;e.instance&&e.instance.current&&(e.instance.current.opts.loop||e.instance.currIndex<e.instance.group.length-1)?e.timer=setTimeout(function(){e.instance.next()},e.instance.current.opts.slideShow.speed||e.speed):(e.stop(),e.instance.idleSecondsCounter=0,e.instance.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null},start:function(){var e=this.instance.current;this.instance&&e&&(e.opts.loop||e.index<this.instance.group.length-1)&&(this.isActive=!0,this.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_STOP).addClass("fancybox-button--pause"),e.isComplete&&this.set())},stop:function(){var e=this.instance.current;this.clear(),this.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_START).removeClass("fancybox-button--pause"),this.isActive=!1},toggle:function(){this.isActive?this.stop():this.start()}}),a(r).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new i(t))},"beforeShow.fb":function(e,t,i,n){var s=t&&t.SlideShow;n?s&&i.opts.slideShow.autoStart&&s.start():s&&s.isActive&&s.clear()},"afterShow.fb":function(e,t){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(e,t,i,n,s){var o=t&&t.SlideShow;!o||!i.opts.slideShow||80!==s&&32!==s||a(r.activeElement).is("button,a,input")||(n.preventDefault(),o.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var i=t&&t.SlideShow;i&&i.stop()}}),a(r).on("visibilitychange",function(){var e=a.fancybox.getInstance(),t=e&&e.SlideShow;t&&t.isActive&&(r.hidden?t.clear():t.set())})}(document,window.jQuery),function(o,t){"use strict";var i=function(){var e,t,i,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],s={};for(t=0;t<n.length;t++)if((e=n[t])&&e[1]in o){for(i=0;i<e.length;i++)s[n[0][i]]=e[i];return s}return!1}();if(!i)return t.fancybox.defaults.btnTpl.fullScreen=!1;var s={request:function(e){(e=e||o.documentElement)[i.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){o[i.exitFullscreen]()},toggle:function(e){e=e||o.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(o[i.fullscreenElement])},enabled:function(){return Boolean(o[i.fullscreenEnabled])}};t(o).on({"onInit.fb":function(e,t){var i,n=t.$refs.toolbar.find("[data-fancybox-fullscreen]");t&&!t.FullScreen&&t.group[t.currIndex].opts.fullScreen?((i=t.$refs.container).on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),s.toggle(i[0])}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&s.request(i[0]),t.FullScreen=s):n.hide()},"afterKeydown.fb":function(e,t,i,n,s){t&&t.FullScreen&&70===s&&(n.preventDefault(),t.FullScreen.toggle(t.$refs.container[0]))},"beforeClose.fb":function(e){e&&e.FullScreen&&s.exit()}}),t(o).on(i.fullscreenchange,function(){var e=t.fancybox.getInstance();e.current&&"image"===e.current.type&&e.isAnimating&&(e.current.$content.css("transition","none"),e.isAnimating=!1,e.update(!0,!0,0))})}(document,window.jQuery),function(e,a){"use strict";function i(e){this.instance=e,this.init()}a.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,init:function(){var e=this,t=e.instance.group[0],i=e.instance.group[1];e.$button=e.instance.$refs.toolbar.find("[data-fancybox-thumbs]"),1<e.instance.group.length&&e.instance.group[e.instance.currIndex].opts.thumbs&&("image"==t.type||t.opts.thumb||t.opts.$thumb)&&("image"==i.type||i.opts.thumb||i.opts.$thumb)?(e.$button.on("click",function(){e.toggle()}),e.isActive=!0):(e.$button.hide(),e.isActive=!1)},create:function(){var i,n,e=this.instance;this.$grid=a('<div class="fancybox-thumbs"></div>').appendTo(e.$refs.container),i="<ul>",a.each(e.group,function(e,t){(n=t.opts.thumb||(t.opts.$thumb?t.opts.$thumb.attr("src"):null))||"image"!==t.type||(n=t.src),n&&n.length&&(i+='<li data-index="'+e+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),i+="</ul>",this.$list=a(i).appendTo(this.$grid).on("click","li",function(){e.jumpTo(a(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var e,t,i,n,s=a(this).parent().removeClass("fancybox-thumbs-loading"),o=s.outerWidth(),r=s.outerHeight();e=this.naturalWidth||this.width,n=(t=this.naturalHeight||this.height)/r,1<=(i=e/o)&&1<=n&&(n<i?(e/=n,t=r):(e=o,t/=i)),a(this).css({width:Math.floor(e),height:Math.floor(t),"margin-top":Math.min(0,Math.floor(.3*r-.3*t)),"margin-left":Math.min(0,Math.floor(.5*o-.5*e))}).show()}).each(function(){this.src=a(this).data("src")})},focus:function(){this.instance.current&&this.$list.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active").focus()},close:function(){this.$grid.hide()},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus()):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),a(e).on({"onInit.fb":function(e,t){t&&!t.Thumbs&&(t.Thumbs=new i(t))},"beforeShow.fb":function(e,t,i,n){var s=t&&t.Thumbs;if(s&&s.isActive){if(i.modal)return s.$button.hide(),void s.hide();n&&!0===t.opts.thumbs.autoStart&&s.show(),s.isVisible&&s.focus()}},"afterKeydown.fb":function(e,t,i,n,s){var o=t&&t.Thumbs;o&&o.isActive&&71===s&&(n.preventDefault(),o.toggle())},"beforeClose.fb":function(e,t){var i=t&&t.Thumbs;i&&i.isVisible&&!1!==t.opts.thumbs.hideOnClose&&i.close()}})}(document,window.jQuery),function(o,r,a){"use strict";function s(){var e=r.location.hash.substr(1),t=e.split("-"),i=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return i<1&&(i=1),{hash:e,index:i,gallery:t.join("-")}}function t(e){var t;""!==e.gallery&&((t=a("[data-fancybox='"+a.escapeSelector(e.gallery)+"']").eq(e.index-1)).length?t.trigger("click"):a("#"+a.escapeSelector(e.gallery)).trigger("click"))}function l(e){var t;return!!e&&((t=e.current?e.current.opts:e.opts).$orig?t.$orig.data("fancybox"):t.hash||"")}a.escapeSelector||(a.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})});var d=null,c=null;a(function(){setTimeout(function(){!1!==a.fancybox.defaults.hash&&(a(o).on({"onInit.fb":function(e,t){var i,n;!1!==t.group[t.currIndex].opts.hash&&(i=s(),(n=l(t))&&i.gallery&&n==i.gallery&&(t.currIndex=i.index-1))},"beforeShow.fb":function(e,t,i,n){var s;!1===i.opts.hash||(s=l(t))&&""!==s&&(r.location.hash.indexOf(s)<0&&(t.opts.origHash=r.location.hash),d=s+(1<t.group.length?"-"+(i.index+1):""),"replaceState"in r.history?(c&&clearTimeout(c),c=setTimeout(function(){r.history[n?"pushState":"replaceState"]({},o.title,r.location.pathname+r.location.search+"#"+d),c=null},300)):r.location.hash=d)},"beforeClose.fb":function(e,t,i){var n,s;c&&clearTimeout(c),!1!==i.opts.hash&&(n=l(t),s=t&&t.opts.origHash?t.opts.origHash:"",n&&""!==n&&("replaceState"in history?r.history.replaceState({},o.title,r.location.pathname+r.location.search+s):(r.location.hash=s,a(r).scrollTop(t.scrollTop).scrollLeft(t.scrollLeft))),d=null)}}),a(r).on("hashchange.fb",function(){var e=s();a.fancybox.getInstance()?!d||d===e.gallery+"-"+e.index||1===e.index&&d==e.gallery||(d=null,a.fancybox.close()):""!==e.gallery&&t(e)}),a(r).one("unload.fb popstate.fb",function(){a.fancybox.getInstance("close",!0,0)}),t(s()))},50)})}(document,window,window.jQuery),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==("undefined"==typeof exports?"undefined":_typeof(exports))?require("jquery"):jQuery)}(function(C){var n,e=navigator.userAgent,E=/iphone/i.test(e),s=/chrome/i.test(e),k=/android/i.test(e);C.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},C.fn.extend({caret:function(e,t){var i;if(0!==this.length&&!this.is(":hidden"))return"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&((i=this.createTextRange()).collapse(!0),i.moveEnd("character",t),i.moveStart("character",e),i.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(i=document.selection.createRange(),e=0-i.duplicate().moveStart("character",-1e5),t=e+i.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(t,m){var i,y,b,w,x,T,S;if(!t&&0<this.length){var e=C(this[0]).data(C.mask.dataName);return e?e():void 0}return m=C.extend({autoclear:C.mask.autoclear,placeholder:C.mask.placeholder,completed:null},m),i=C.mask.definitions,y=[],b=T=t.length,w=null,C.each(t.split(""),function(e,t){"?"==t?(T--,b=e):i[t]?(y.push(new RegExp(i[t])),null===w&&(w=y.length-1),e<b&&(x=y.length-1)):y.push(null)}),this.trigger("unmask").each(function(){function r(){if(m.completed){for(var e=w;e<=x;e++)if(y[e]&&f[e]===a(e))return;m.completed.call(h)}}function a(e){return m.placeholder.charAt(e<m.placeholder.length?e:0)}function l(e){for(;++e<T&&!y[e];);return e}function d(e,t){var i,n;if(!(e<0)){for(i=e,n=l(t);i<T;i++)if(y[i]){if(!(n<T&&y[i].test(f[n])))break;f[i]=f[n],f[n]=a(n),n=l(n)}u(),h.caret(Math.max(w,e))}}function o(){p(),h.val()!=g&&h.change()}function c(e,t){var i;for(i=e;i<t&&i<T;i++)y[i]&&(f[i]=a(i))}function u(){h.val(f.join(""))}function p(e){var t,i,n,s=h.val(),o=-1;for(n=t=0;t<T;t++)if(y[t]){for(f[t]=a(t);n++<s.length;)if(i=s.charAt(n-1),y[t].test(i)){f[t]=i,o=t;break}if(n>s.length){c(t+1,T);break}}else f[t]===s.charAt(n)&&n++,t<b&&(o=t);return e?u():o+1<b?m.autoclear||f.join("")===v?(h.val()&&h.val(""),c(0,T)):u():(u(),h.val(h.val().substring(0,o+1))),b?t:w}var h=C(this),f=C.map(t.split(""),function(e,t){return"?"!=e?i[e]?a(t):e:void 0}),v=f.join(""),g=h.val();h.data(C.mask.dataName,function(){return C.map(f,function(e,t){return y[t]&&e!=a(t)?e:null}).join("")}),h.one("unmask",function(){h.off(".mask").removeData(C.mask.dataName)}).on("focus.mask",function(){var e;h.prop("readonly")||(clearTimeout(n),g=h.val(),e=p(),n=setTimeout(function(){h.get(0)===document.activeElement&&(u(),e==t.replace("?","").length?h.caret(0,e):h.caret(e))},10))}).on("blur.mask",o).on("keydown.mask",function(e){if(!h.prop("readonly")){var t,i,n,s=e.which||e.keyCode;S=h.val(),8===s||46===s||E&&127===s?(i=(t=h.caret()).begin,(n=t.end)-i==0&&(i=46!==s?function(e){for(;0<=--e&&!y[e];);return e}(i):n=l(i-1),n=46===s?l(n):n),c(i,n),d(i,n-1),e.preventDefault()):13===s?o.call(this,e):27===s&&(h.val(g),h.caret(0,p()),e.preventDefault())}}).on("keypress.mask",function(e){if(!h.prop("readonly")){var t,i,n,s=e.which||e.keyCode,o=h.caret();if(!(e.ctrlKey||e.altKey||e.metaKey||s<32)&&s&&13!==s){if(o.end-o.begin!=0&&(c(o.begin,o.end),d(o.begin,o.end-1)),(t=l(o.begin-1))<T&&(i=String.fromCharCode(s),y[t].test(i))){if(function(e){var t,i,n,s;for(i=a(t=e);t<T;t++)if(y[t]){if(n=l(t),s=f[t],f[t]=i,!(n<T&&y[n].test(s)))break;i=s}}(t),f[t]=i,u(),n=l(t),k){setTimeout(function(){C.proxy(C.fn.caret,h,n)()},0)}else h.caret(n);o.begin<=x&&r()}e.preventDefault()}}}).on("input.mask paste.mask",function(){h.prop("readonly")||setTimeout(function(){var e=p(!0);h.caret(e),r()},0)}),s&&k&&h.off("input.mask").on("input.mask",function(){var e=h.val(),t=h.caret();if(S&&S.length&&S.length>e.length){for(p(!0);0<t.begin&&!y[t.begin-1];)t.begin--;if(0===t.begin)for(;t.begin<w&&!y[t.begin];)t.begin++;h.caret(t.begin,t.begin)}else{for(p(!0);t.begin<T&&!y[t.begin];)t.begin++;h.caret(t.begin,t.begin)}r()}),p()})}})}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(d){"use strict";var s,o=window.Slick||{};s=0,(o=function(e,t){var i,n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:d(e),appendDots:d(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return d('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},d.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=d(e),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,i=d(e).data("slick")||{},n.options=d.extend({},n.defaults,t,i),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=d.proxy(n.autoPlay,n),n.autoPlayClear=d.proxy(n.autoPlayClear,n),n.autoPlayIterator=d.proxy(n.autoPlayIterator,n),n.changeSlide=d.proxy(n.changeSlide,n),n.clickHandler=d.proxy(n.clickHandler,n),n.selectHandler=d.proxy(n.selectHandler,n),n.setPosition=d.proxy(n.setPosition,n),n.swipeHandler=d.proxy(n.swipeHandler,n),n.dragHandler=d.proxy(n.dragHandler,n),n.keyHandler=d.proxy(n.keyHandler,n),n.instanceUid=s++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},o.prototype.addSlide=o.prototype.slickAdd=function(e,t,i){var n=this;if("boolean"==typeof t)i=t,t=null;else if(t<0||t>=n.slideCount)return!1;n.unload(),"number"==typeof t?0===t&&0===n.$slides.length?d(e).appendTo(n.$slideTrack):i?d(e).insertBefore(n.$slides.eq(t)):d(e).insertAfter(n.$slides.eq(t)):!0===i?d(e).prependTo(n.$slideTrack):d(e).appendTo(n.$slideTrack),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slides.each(function(e,t){d(t).attr("data-slick-index",e)}),n.$slidesCache=n.$slides,n.reinit()},o.prototype.animateHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var e=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.animate({height:e},this.options.speed)}},o.prototype.animateSlide=function(e,t){var i={},n=this;n.animateHeight(),!0===n.options.rtl&&!1===n.options.vertical&&(e=-e),!1===n.transformsEnabled?!1===n.options.vertical?n.$slideTrack.animate({left:e},n.options.speed,n.options.easing,t):n.$slideTrack.animate({top:e},n.options.speed,n.options.easing,t):!1===n.cssTransitions?(!0===n.options.rtl&&(n.currentLeft=-n.currentLeft),d({animStart:n.currentLeft}).animate({animStart:e},{duration:n.options.speed,easing:n.options.easing,step:function(e){e=Math.ceil(e),!1===n.options.vertical?i[n.animType]="translate("+e+"px, 0px)":i[n.animType]="translate(0px,"+e+"px)",n.$slideTrack.css(i)},complete:function(){t&&t.call()}})):(n.applyTransition(),e=Math.ceil(e),!1===n.options.vertical?i[n.animType]="translate3d("+e+"px, 0px, 0px)":i[n.animType]="translate3d(0px,"+e+"px, 0px)",n.$slideTrack.css(i),t&&setTimeout(function(){n.disableTransition(),t.call()},n.options.speed))},o.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=d(e).not(this.$slider)),e},o.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var e=d(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},o.prototype.applyTransition=function(e){var t=this,i={};!1===t.options.fade?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},o.prototype.autoPlay=function(){this.autoPlayClear(),this.slideCount>this.options.slidesToShow&&(this.autoPlayTimer=setInterval(this.autoPlayIterator,this.options.autoplaySpeed))},o.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},o.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},o.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=d(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=d(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},o.prototype.buildDots=function(){var e,t,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),t=d("<ul />").addClass(i.options.dotsClass),e=0;e<=i.getDotCount();e+=1)t.append(d("<li />").append(i.options.customPaging.call(this,i,e)));i.$dots=t.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},o.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){d(t).attr("data-slick-index",e).data("originalStyling",d(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?d('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),d("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},o.prototype.buildRows=function(){var e,t,i,n,s,o,r,a=this;if(n=document.createDocumentFragment(),o=a.$slider.children(),0<a.options.rows){for(r=a.options.slidesPerRow*a.options.rows,s=Math.ceil(o.length/r),e=0;e<s;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var d=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var c=e*r+(t*a.options.slidesPerRow+i);o.get(c)&&d.appendChild(o.get(c))}l.appendChild(d)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},o.prototype.checkResponsive=function(e,t){var i,n,s,o=this,r=!1,a=o.$slider.width(),l=window.innerWidth||d(window).width();if("window"===o.respondTo?s=l:"slider"===o.respondTo?s=a:"min"===o.respondTo&&(s=Math.min(l,a)),o.options.responsive&&o.options.responsive.length&&null!==o.options.responsive){for(i in n=null,o.breakpoints)o.breakpoints.hasOwnProperty(i)&&(!1===o.originalSettings.mobileFirst?s<o.breakpoints[i]&&(n=o.breakpoints[i]):s>o.breakpoints[i]&&(n=o.breakpoints[i]));null!==n?null!==o.activeBreakpoint&&n===o.activeBreakpoint&&!t||(o.activeBreakpoint=n,"unslick"===o.breakpointSettings[n]?o.unslick(n):(o.options=d.extend({},o.originalSettings,o.breakpointSettings[n]),!0===e&&(o.currentSlide=o.options.initialSlide),o.refresh(e)),r=n):null!==o.activeBreakpoint&&(o.activeBreakpoint=null,o.options=o.originalSettings,!0===e&&(o.currentSlide=o.options.initialSlide),o.refresh(e),r=n),e||!1===r||o.$slider.trigger("breakpoint",[o,r])}},o.prototype.changeSlide=function(e,t){var i,n,s=this,o=d(e.currentTarget);switch(o.is("a")&&e.preventDefault(),o.is("li")||(o=o.closest("li")),i=s.slideCount%s.options.slidesToScroll!=0?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,e.data.message){case"previous":n=0==i?s.options.slidesToScroll:s.options.slidesToShow-i,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-n,!1,t);break;case"next":n=0==i?s.options.slidesToScroll:i,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+n,!1,t);break;case"index":var r=0===e.data.index?0:e.data.index||o.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(r),!1,t),o.children().trigger("focus");break;default:return}},o.prototype.checkNavigable=function(e){var t,i;if(i=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var n in t){if(e<t[n]){e=i;break}i=t[n]}return e},o.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(d("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",d.proxy(e.interrupt,e,!0)).off("mouseleave.slick",d.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),d(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&d(e.$slideTrack).children().off("click.slick",e.selectHandler),d(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),d(window).off("resize.slick.slick-"+e.instanceUid,e.resize),d("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),d(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},o.prototype.cleanUpSlideEvents=function(){this.$list.off("mouseenter.slick",d.proxy(this.interrupt,this,!0)),this.$list.off("mouseleave.slick",d.proxy(this.interrupt,this,!1))},o.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},o.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},o.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),d(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){d(this).attr("style",d(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},o.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(t):this.$slides.eq(e).css(t)},o.prototype.fadeSlide=function(e,t){var i=this;!1===i.cssTransitions?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout(function(){i.disableTransition(e),t.call()},i.options.speed))},o.prototype.fadeSlideOut=function(e){!1===this.cssTransitions?this.$slides.eq(e).animate({opacity:0,zIndex:this.options.zIndex-2},this.options.speed,this.options.easing):(this.applyTransition(e),this.$slides.eq(e).css({opacity:0,zIndex:this.options.zIndex-2}))},o.prototype.filterSlides=o.prototype.slickFilter=function(e){null!==e&&(this.$slidesCache=this.$slides,this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.filter(e).appendTo(this.$slideTrack),this.reinit())},o.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(e){e.stopImmediatePropagation();var t=d(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=t.is(":focus"),i.autoPlay())},0)})},o.prototype.getCurrent=o.prototype.slickCurrentSlide=function(){return this.currentSlide},o.prototype.getDotCount=function(){var e=this,t=0,i=0,n=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++n;else for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)n=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else n=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return n-1},o.prototype.getLeft=function(e){var t,i,n,s,o=this,r=0;return o.slideOffset=0,i=o.$slides.first().outerHeight(!0),!0===o.options.infinite?(o.slideCount>o.options.slidesToShow&&(o.slideOffset=o.slideWidth*o.options.slidesToShow*-1,s=-1,!0===o.options.vertical&&!0===o.options.centerMode&&(2===o.options.slidesToShow?s=-1.5:1===o.options.slidesToShow&&(s=-2)),r=i*o.options.slidesToShow*s),o.slideCount%o.options.slidesToScroll!=0&&e+o.options.slidesToScroll>o.slideCount&&o.slideCount>o.options.slidesToShow&&(r=e>o.slideCount?(o.slideOffset=(o.options.slidesToShow-(e-o.slideCount))*o.slideWidth*-1,(o.options.slidesToShow-(e-o.slideCount))*i*-1):(o.slideOffset=o.slideCount%o.options.slidesToScroll*o.slideWidth*-1,o.slideCount%o.options.slidesToScroll*i*-1))):e+o.options.slidesToShow>o.slideCount&&(o.slideOffset=(e+o.options.slidesToShow-o.slideCount)*o.slideWidth,r=(e+o.options.slidesToShow-o.slideCount)*i),o.slideCount<=o.options.slidesToShow&&(r=o.slideOffset=0),!0===o.options.centerMode&&o.slideCount<=o.options.slidesToShow?o.slideOffset=o.slideWidth*Math.floor(o.options.slidesToShow)/2-o.slideWidth*o.slideCount/2:!0===o.options.centerMode&&!0===o.options.infinite?o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)-o.slideWidth:!0===o.options.centerMode&&(o.slideOffset=0,o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)),t=!1===o.options.vertical?e*o.slideWidth*-1+o.slideOffset:e*i*-1+r,!0===o.options.variableWidth&&(n=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow),t=!0===o.options.rtl?n[0]?-1*(o.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===o.options.centerMode&&(n=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow+1),t=!0===o.options.rtl?n[0]?-1*(o.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,t+=(o.$list.width()-n.outerWidth())/2)),t},o.prototype.getOption=o.prototype.slickGetOption=function(e){return this.options[e]},o.prototype.getNavigableIndexes=function(){var e,t=this,i=0,n=0,s=[];for(e=!1===t.options.infinite?t.slideCount:(i=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,2*t.slideCount);i<e;)s.push(i),i=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return s},o.prototype.getSlick=function(){return this},o.prototype.getSlideCount=function(){var i,n,s=this;return n=!0===s.options.centerMode?s.slideWidth*Math.floor(s.options.slidesToShow/2):0,!0===s.options.swipeToSlide?(s.$slideTrack.find(".slick-slide").each(function(e,t){if(t.offsetLeft-n+d(t).outerWidth()/2>-1*s.swipeLeft)return i=t,!1}),Math.abs(d(i).attr("data-slick-index")-s.currentSlide)||1):s.options.slidesToScroll},o.prototype.goTo=o.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},o.prototype.init=function(e){var t=this;d(t.$slider).hasClass("slick-initialized")||(d(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},o.prototype.initADA=function(){var n=this,i=Math.ceil(n.slideCount/n.options.slidesToShow),s=n.getNavigableIndexes().filter(function(e){return 0<=e&&e<n.slideCount});n.$slides.add(n.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==n.$dots&&(n.$slides.not(n.$slideTrack.find(".slick-cloned")).each(function(e){var t=s.indexOf(e);if(d(this).attr({role:"tabpanel",id:"slick-slide"+n.instanceUid+e,tabindex:-1}),-1!==t){var i="slick-slide-control"+n.instanceUid+t;d("#"+i).length&&d(this).attr({"aria-describedby":i})}}),n.$dots.attr("role","tablist").find("li").each(function(e){var t=s[e];d(this).attr({role:"presentation"}),d(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+n.instanceUid+e,"aria-controls":"slick-slide"+n.instanceUid+t,"aria-label":e+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(n.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=n.currentSlide,t=e+n.options.slidesToShow;e<t;e++)n.options.focusOnChange?n.$slides.eq(e).attr({tabindex:"0"}):n.$slides.eq(e).removeAttr("tabindex");n.activateADA()},o.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},o.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(d("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&d("li",e.$dots).on("mouseenter.slick",d.proxy(e.interrupt,e,!0)).on("mouseleave.slick",d.proxy(e.interrupt,e,!1))},o.prototype.initSlideEvents=function(){this.options.pauseOnHover&&(this.$list.on("mouseenter.slick",d.proxy(this.interrupt,this,!0)),this.$list.on("mouseleave.slick",d.proxy(this.interrupt,this,!1)))},o.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),d(document).on(e.visibilityChange,d.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&d(e.$slideTrack).children().on("click.slick",e.selectHandler),d(window).on("orientationchange.slick.slick-"+e.instanceUid,d.proxy(e.orientationChange,e)),d(window).on("resize.slick.slick-"+e.instanceUid,d.proxy(e.resize,e)),d("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),d(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),d(e.setPosition)},o.prototype.initUI=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.show(),this.$nextArrow.show()),!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&this.$dots.show()},o.prototype.keyHandler=function(e){e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===this.options.accessibility?this.changeSlide({data:{message:!0===this.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===this.options.accessibility&&this.changeSlide({data:{message:!0===this.options.rtl?"previous":"next"}}))},o.prototype.lazyLoad=function(){var e,t,i,o=this;function n(e){d("img[data-lazy]",e).each(function(){var e=d(this),t=d(this).attr("data-lazy"),i=d(this).attr("data-srcset"),n=d(this).attr("data-sizes")||o.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){e.animate({opacity:0},100,function(){i&&(e.attr("srcset",i),n&&e.attr("sizes",n)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),o.$slider.trigger("lazyLoaded",[o,e,t])})},s.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,e,t])},s.src=t})}if(!0===o.options.centerMode?i=!0===o.options.infinite?(t=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(t=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),o.options.slidesToShow/2+1+2+o.currentSlide):(t=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,i=Math.ceil(t+o.options.slidesToShow),!0===o.options.fade&&(0<t&&t--,i<=o.slideCount&&i++)),e=o.$slider.find(".slick-slide").slice(t,i),"anticipated"===o.options.lazyLoad)for(var s=t-1,r=i,a=o.$slider.find(".slick-slide"),l=0;l<o.options.slidesToScroll;l++)s<0&&(s=o.slideCount-1),e=(e=e.add(a.eq(s))).add(a.eq(r)),s--,r++;n(e),o.slideCount<=o.options.slidesToShow?n(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?n(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&n(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},o.prototype.loadSlider=function(){this.setPosition(),this.$slideTrack.css({opacity:1}),this.$slider.removeClass("slick-loading"),this.initUI(),"progressive"===this.options.lazyLoad&&this.progressiveLazyLoad()},o.prototype.next=o.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},o.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},o.prototype.pause=o.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},o.prototype.play=o.prototype.slickPlay=function(){this.autoPlay(),this.options.autoplay=!0,this.paused=!1,this.focussed=!1,this.interrupted=!1},o.prototype.postSlide=function(e){var t=this;t.unslicked||(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange&&d(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()))},o.prototype.prev=o.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},o.prototype.preventDefault=function(e){e.preventDefault()},o.prototype.progressiveLazyLoad=function(e){e=e||1;var t,i,n,s,o,r=this,a=d("img[data-lazy]",r.$slider);a.length?(t=a.first(),i=t.attr("data-lazy"),n=t.attr("data-srcset"),s=t.attr("data-sizes")||r.$slider.attr("data-sizes"),(o=document.createElement("img")).onload=function(){n&&(t.attr("srcset",n),s&&t.attr("sizes",s)),t.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,t,i]),r.progressiveLazyLoad()},o.onerror=function(){e<3?setTimeout(function(){r.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,t,i]),r.progressiveLazyLoad())},o.src=i):r.$slider.trigger("allImagesLoaded",[r])},o.prototype.refresh=function(e){var t,i,n=this;i=n.slideCount-n.options.slidesToShow,!n.options.infinite&&n.currentSlide>i&&(n.currentSlide=i),n.slideCount<=n.options.slidesToShow&&(n.currentSlide=0),t=n.currentSlide,n.destroy(!0),d.extend(n,n.initials,{currentSlide:t}),n.init(),e||n.changeSlide({data:{message:"index",index:t}},!1)},o.prototype.registerBreakpoints=function(){var e,t,i,n=this,s=n.options.responsive||null;if("array"===d.type(s)&&s.length){for(e in n.respondTo=n.options.respondTo||"window",s)if(i=n.breakpoints.length-1,s.hasOwnProperty(e)){for(t=s[e].breakpoint;0<=i;)n.breakpoints[i]&&n.breakpoints[i]===t&&n.breakpoints.splice(i,1),i--;n.breakpoints.push(t),n.breakpointSettings[t]=s[e].settings}n.breakpoints.sort(function(e,t){return n.options.mobileFirst?e-t:t-e})}},o.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&d(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},o.prototype.resize=function(){var e=this;d(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=d(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},o.prototype.removeSlide=o.prototype.slickRemove=function(e,t,i){var n=this;if(e="boolean"==typeof e?!0===(t=e)?0:n.slideCount-1:!0===t?--e:e,n.slideCount<1||e<0||e>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(e).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},o.prototype.setCSS=function(e){var t,i,n=this,s={};!0===n.options.rtl&&(e=-e),t="left"==n.positionProp?Math.ceil(e)+"px":"0px",i="top"==n.positionProp?Math.ceil(e)+"px":"0px",s[n.positionProp]=e,!1===n.transformsEnabled||(!(s={})===n.cssTransitions?s[n.animType]="translate("+t+", "+i+")":s[n.animType]="translate3d("+t+", "+i+", 0px)"),n.$slideTrack.css(s)},o.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},o.prototype.setFade=function(){var i,n=this;n.$slides.each(function(e,t){i=n.slideWidth*e*-1,!0===n.options.rtl?d(t).css({position:"relative",right:i,top:0,zIndex:n.options.zIndex-2,opacity:0}):d(t).css({position:"relative",left:i,top:0,zIndex:n.options.zIndex-2,opacity:0})}),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},o.prototype.setHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var e=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.css("height",e)}},o.prototype.setOption=o.prototype.slickSetOption=function(){var e,t,i,n,s,o=this,r=!1;if("object"===d.type(arguments[0])?(i=arguments[0],r=arguments[1],s="multiple"):"string"===d.type(arguments[0])&&(n=arguments[1],r=arguments[2],"responsive"===(i=arguments[0])&&"array"===d.type(arguments[1])?s="responsive":void 0!==arguments[1]&&(s="single")),"single"===s)o.options[i]=n;else if("multiple"===s)d.each(i,function(e,t){o.options[e]=t});else if("responsive"===s)for(t in n)if("array"!==d.type(o.options.responsive))o.options.responsive=[n[t]];else{for(e=o.options.responsive.length-1;0<=e;)o.options.responsive[e].breakpoint===n[t].breakpoint&&o.options.responsive.splice(e,1),e--;o.options.responsive.push(n[t])}r&&(o.unload(),o.reinit())},o.prototype.setPosition=function(){this.setDimensions(),this.setHeight(),!1===this.options.fade?this.setCSS(this.getLeft(this.currentSlide)):this.setFade(),this.$slider.trigger("setPosition",[this])},o.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},o.prototype.setSlideClasses=function(e){var t,i,n,s,o=this;if(i=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),o.$slides.eq(e).addClass("slick-current"),!0===o.options.centerMode){var r=o.options.slidesToShow%2==0?1:0;t=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&(t<=e&&e<=o.slideCount-1-t?o.$slides.slice(e-t+r,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(n=o.options.slidesToShow+e,i.slice(n-t+1+r,n+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-o.options.slidesToShow).addClass("slick-center"):e===o.slideCount-1&&i.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=o.slideCount-o.options.slidesToShow?o.$slides.slice(e,e+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=o.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(s=o.slideCount%o.options.slidesToShow,n=!0===o.options.infinite?o.options.slidesToShow+e:e,o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-e<o.options.slidesToShow?i.slice(n-(o.options.slidesToShow-s),n+s).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},o.prototype.setupInfinite=function(){var e,t,i,n=this;if(!0===n.options.fade&&(n.options.centerMode=!1),!0===n.options.infinite&&!1===n.options.fade&&(t=null,n.slideCount>n.options.slidesToShow)){for(i=!0===n.options.centerMode?n.options.slidesToShow+1:n.options.slidesToShow,e=n.slideCount;e>n.slideCount-i;--e)t=e-1,d(n.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-n.slideCount).prependTo(n.$slideTrack).addClass("slick-cloned");for(e=0;e<i+n.slideCount;e+=1)t=e,d(n.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+n.slideCount).appendTo(n.$slideTrack).addClass("slick-cloned");n.$slideTrack.find(".slick-cloned").find("[id]").each(function(){d(this).attr("id","")})}},o.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},o.prototype.selectHandler=function(e){var t=d(e.target).is(".slick-slide")?d(e.target):d(e.target).parents(".slick-slide"),i=parseInt(t.attr("data-slick-index"));i=i||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},o.prototype.slideHandler=function(e,t,i){var n,s,o,r,a,l,d=this;if(t=t||!1,!(!0===d.animating&&!0===d.options.waitForAnimate||!0===d.options.fade&&d.currentSlide===e))if(!1===t&&d.asNavFor(e),n=e,a=d.getLeft(n),r=d.getLeft(d.currentSlide),d.currentLeft=null===d.swipeLeft?r:d.swipeLeft,!1===d.options.infinite&&!1===d.options.centerMode&&(e<0||e>d.getDotCount()*d.options.slidesToScroll))!1===d.options.fade&&(n=d.currentSlide,!0!==i&&d.slideCount>d.options.slidesToShow?d.animateSlide(r,function(){d.postSlide(n)}):d.postSlide(n));else if(!1===d.options.infinite&&!0===d.options.centerMode&&(e<0||e>d.slideCount-d.options.slidesToScroll))!1===d.options.fade&&(n=d.currentSlide,!0!==i&&d.slideCount>d.options.slidesToShow?d.animateSlide(r,function(){d.postSlide(n)}):d.postSlide(n));else{if(d.options.autoplay&&clearInterval(d.autoPlayTimer),s=n<0?d.slideCount%d.options.slidesToScroll!=0?d.slideCount-d.slideCount%d.options.slidesToScroll:d.slideCount+n:n>=d.slideCount?d.slideCount%d.options.slidesToScroll!=0?0:n-d.slideCount:n,d.animating=!0,d.$slider.trigger("beforeChange",[d,d.currentSlide,s]),o=d.currentSlide,d.currentSlide=s,d.setSlideClasses(d.currentSlide),d.options.asNavFor&&(l=(l=d.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(d.currentSlide),d.updateDots(),d.updateArrows(),!0===d.options.fade)return!0!==i?(d.fadeSlideOut(o),d.fadeSlide(s,function(){d.postSlide(s)})):d.postSlide(s),void d.animateHeight();!0!==i&&d.slideCount>d.options.slidesToShow?d.animateSlide(a,function(){d.postSlide(s)}):d.postSlide(s)}},o.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},o.prototype.swipeDirection=function(){var e,t,i,n;return e=this.touchObject.startX-this.touchObject.curX,t=this.touchObject.startY-this.touchObject.curY,i=Math.atan2(t,e),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&0<=n||n<=360&&315<=n?!1===this.options.rtl?"left":"right":135<=n&&n<=225?!1===this.options.rtl?"right":"left":!0===this.options.verticalSwiping?35<=n&&n<=135?"down":"up":"vertical"},o.prototype.swipeEnd=function(e){var t,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1;if(n.interrupted=!1,n.shouldClick=!(10<n.touchObject.swipeLength),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(t),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},o.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},o.prototype.swipeMove=function(e){var t,i,n,s,o,r,a=this;return o=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||o&&1!==o.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==o?o[0].pageX:e.clientX,a.touchObject.curY=void 0!==o?o[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<r?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),i=a.swipeDirection(),void 0!==e.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,e.preventDefault()),s=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(s=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+n*s:a.swipeLeft=t+n*(a.$list.height()/a.listWidth)*s,!0===a.options.verticalSwiping&&(a.swipeLeft=t+n*s),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},o.prototype.swipeStart=function(e){var t,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,i.dragging=!0},o.prototype.unfilterSlides=o.prototype.slickUnfilter=function(){null!==this.$slidesCache&&(this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.appendTo(this.$slideTrack),this.reinit())},o.prototype.unload=function(){var e=this;d(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},o.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},o.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},o.prototype.updateDots=function(){null!==this.$dots&&(this.$dots.find("li").removeClass("slick-active").end(),this.$dots.find("li").eq(Math.floor(this.currentSlide/this.options.slidesToScroll)).addClass("slick-active"))},o.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},d.fn.slick=function(){var e,t,i=arguments[0],n=Array.prototype.slice.call(arguments,1),s=this.length;for(e=0;e<s;e++)if("object"==typeof i||void 0===i?this[e].slick=new o(this[e],i):t=this[e].slick[i].apply(this[e].slick,n),void 0!==t)return t;return this}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsInN3aXBlci5taW4uanMiLCJqcXVlcnkuZmFuY3lib3gubWluLmpzIiwianF1ZXJ5Lm1hc2tlZGlucHV0LmpzIiwic2xpY2suanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImlzV2luZG93Iiwib2JqIiwiYXJyIiwiZ2V0UHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInNsaWNlIiwiZmxhdCIsImFycmF5IiwiY2FsbCIsImNvbmNhdCIsImFwcGx5IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwibm9kZVR5cGUiLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJpIiwidmFsIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwiaXNBcnJheUxpa2UiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwidmFsdWUiLCJndWlkIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsIl9pIiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidW5sb2FkSGFuZGxlciIsInNldERvY3VtZW50IiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hOYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJqb2luIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwia2V5IiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0IiwiX2FyZ3VtZW50Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIl9jb250ZXh0IiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwiYXJncyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImhhcyIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJoZWFkZXIiLCJidXR0b24iLCJfbWF0Y2hJbmRleGVzIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImJ5RWxlbWVudCIsImRpcnJ1bnNVbmlxdWUiLCJieVNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInJlYWR5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsIm9iamVjdCIsIl8iLCJmbGFnIiwiZmlyZSIsImxvY2tlZCIsIm9uY2UiLCJmaXJlZCIsImZpcmluZyIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJtZW1vcnkiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJtaWdodFRocm93IiwidGhhdCIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJ1cGRhdGVGdW5jIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInJlbWFpbmluZyIsIm1hc3RlciIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiYm9keSIsImhpZGUiLCJ0b2dnbGUiLCJkaXYiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJlcnIiLCJzYWZlQWN0aXZlRWxlbWVudCIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwidHJpZ2dlciIsIkV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsInQiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwic3dhcCIsIm9sZCIsInBpeGVsUG9zaXRpb25WYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInNjcm9sbGJveFNpemVWYWwiLCJwaXhlbEJveFN0eWxlc1ZhbCIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwiY29udGFpbmVyIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJib3hTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0Iiwid2lkdGgiLCJwb3NpdGlvbiIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsImN1ckNTUyIsImNvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJncmlkQXJlYSIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblN0YXJ0IiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3RhcnQiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwib3B0IiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImJpbmQiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsImRvQW5pbWF0aW9uIiwib3B0YWxsIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsInMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGV4dCBzY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsInRyaW0iLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIl90eXBlb2YiLCJTd2lwZXIiLCJmIiwicXVlcnlTZWxlY3RvciIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiQiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImhpc3RvcnkiLCJDdXN0b21FdmVudCIsIkltYWdlIiwic2NyZWVuIiwiTCIsInIiLCJvIiwiQ2xhc3MiLCJEb203IiwiY2xhc3NMaXN0IiwiZG9tN0VsZW1lbnREYXRhU3RvcmFnZSIsInRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb24iLCJ3ZWJraXRUcmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJkb203RXZlbnREYXRhIiwiZCIsImMiLCJ1IiwiaCIsImRvbTdMaXZlTGlzdGVuZXJzIiwibGlzdGVuZXIiLCJwcm94eUxpc3RlbmVyIiwiZG9tN0xpc3RlbmVycyIsImRpc3BhdGNoRXZlbnQiLCJ0cmFuc2l0aW9uRW5kIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbFkiLCJzY3JvbGxYIiwicHJldmlvdXNTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImZvckVhY2giLCJldmVudHNMaXN0ZW5lcnMiLCJYIiwiZGVsZXRlUHJvcHMiLCJuZXh0VGljayIsImdldFRyYW5zbGF0ZSIsIldlYktpdENTU01hdHJpeCIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwibTQxIiwibTQyIiwicGFyc2VVcmxRdWVyeSIsImRlY29kZVVSSUNvbXBvbmVudCIsImlzT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiWSIsInRvdWNoIiwiTW9kZXJuaXpyIiwiRG9jdW1lbnRUb3VjaCIsInBvaW50ZXJFdmVudHMiLCJwb2ludGVyRW5hYmxlZCIsIlBvaW50ZXJFdmVudCIsInByZWZpeGVkUG9pbnRlckV2ZW50cyIsIm1zUG9pbnRlckVuYWJsZWQiLCJ0cmFuc2Zvcm1zM2QiLCJjc3N0cmFuc2Zvcm1zM2QiLCJmbGV4Ym94Iiwib2JzZXJ2ZXIiLCJwYXNzaXZlTGlzdGVuZXIiLCJnZXN0dXJlcyIsImNvbXBvbmVudHMiLCJlbWl0IiwidXNlTW9kdWxlc1BhcmFtcyIsIm1vZHVsZXMiLCJ1c2VNb2R1bGVzIiwiaW5zdGFuY2UiLCJ1c2UiLCJpbnN0YWxsTW9kdWxlIiwiaW5zdGFsbCIsImRlZmluZVByb3BlcnRpZXMiLCJ1cGRhdGVTaXplIiwiJGVsIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwic2l6ZSIsInVwZGF0ZVNsaWRlcyIsIiR3cmFwcGVyRWwiLCJydGxUcmFuc2xhdGUiLCJ3cm9uZ1JUTCIsInZpcnR1YWwiLCJzbGlkZXMiLCJzbGlkZUNsYXNzIiwic2xpZGVzT2Zmc2V0QmVmb3JlIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJzbmFwR3JpZCIsImciLCJzcGFjZUJldHdlZW4iLCJ5IiwieCIsIkUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwic2xpZGVzUGVyQ29sdW1uIiwiZmxvb3IiLCJzbGlkZXNQZXJWaWV3Iiwic2xpZGVzUGVyQ29sdW1uRmlsbCIsIlQiLCJTIiwiQyIsIk0iLCJ6IiwiayIsIlAiLCItd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwIiwiLW1vei1ib3gtb3JkaW5hbC1ncm91cCIsIi1tcy1mbGV4LW9yZGVyIiwiLXdlYmtpdC1vcmRlciIsIkkiLCJEIiwiTyIsInJvdW5kTGVuZ3RocyIsInN3aXBlclNsaWRlU2l6ZSIsImNlbnRlcmVkU2xpZGVzIiwiYWJzIiwic2xpZGVzUGVyR3JvdXAiLCJlZmZlY3QiLCJzZXRXcmFwcGVyU2l6ZSIsIkEiLCJIIiwiRyIsIk4iLCJzbGlkZXNHcmlkIiwic2xpZGVzU2l6ZXNHcmlkIiwid2F0Y2hPdmVyZmxvdyIsImNoZWNrT3ZlcmZsb3ciLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwid2F0Y2hTbGlkZXNWaXNpYmlsaXR5IiwidXBkYXRlU2xpZGVzT2Zmc2V0IiwidXBkYXRlQXV0b0hlaWdodCIsInNldFRyYW5zaXRpb24iLCJhY3RpdmVJbmRleCIsInN3aXBlclNsaWRlT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInVwZGF0ZVNsaWRlc1Byb2dyZXNzIiwidHJhbnNsYXRlIiwic2xpZGVWaXNpYmxlQ2xhc3MiLCJtaW5UcmFuc2xhdGUiLCJ1cGRhdGVQcm9ncmVzcyIsIm1heFRyYW5zbGF0ZSIsImlzQmVnaW5uaW5nIiwiaXNFbmQiLCJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwicmVhbEluZGV4Iiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzIiwic2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyIsImxvb3AiLCJzbGlkZUR1cGxpY2F0ZUNsYXNzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJzbmFwSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4IiwicHJldmlvdXNJbmRleCIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwicHJldmlvdXNUcmFuc2xhdGUiLCJzbGlkZVRvIiwiYW5pbWF0aW5nIiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwiaW5pdGlhbFNsaWRlIiwiaW5pdGlhbGl6ZWQiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2IiwiYXV0b0hlaWdodCIsInRyYW5zaXRpb25TdGFydCIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwiZGVzdHJveWVkIiwic2xpZGVUb0xvb3AiLCJsb29wZWRTbGlkZXMiLCJzbGlkZU5leHQiLCJsb29wRml4IiwiX2NsaWVudExlZnQiLCJzbGlkZVByZXYiLCJzbGlkZVJlc2V0Iiwic2xpZGVUb0Nsb3Nlc3QiLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsImxvb3BDcmVhdGUiLCJsb29wRmlsbEdyb3VwV2l0aEJsYW5rIiwic2xpZGVCbGFua0NsYXNzIiwibG9vcEFkZGl0aW9uYWxTbGlkZXMiLCJsb29wRGVzdHJveSIsInNldEdyYWJDdXJzb3IiLCJzaW11bGF0ZVRvdWNoIiwiaXNMb2NrZWQiLCJjdXJzb3IiLCJ1bnNldEdyYWJDdXJzb3IiLCJhcHBlbmRTbGlkZSIsInVwZGF0ZSIsInByZXBlbmRTbGlkZSIsImFkZFNsaWRlIiwicmVtb3ZlU2xpZGUiLCJyZW1vdmVBbGxTbGlkZXMiLCJpb3MiLCJhbmRyb2lkIiwiYW5kcm9pZENocm9tZSIsImRlc2t0b3AiLCJ3aW5kb3dzIiwiaXBob25lIiwiaXBvZCIsImlwYWQiLCJjb3Jkb3ZhIiwicGhvbmVnYXAiLCJvcyIsIm9zVmVyc2lvbiIsIndlYlZpZXciLCJtaW5pbWFsVWkiLCJwaXhlbFJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImJyZWFrcG9pbnRzIiwic2V0QnJlYWtwb2ludCIsImZyZWVNb2RlIiwibWluIiwiYXR0YWNoRXZlbnRzIiwidG91Y2hFdmVudHMiLCJ3cmFwcGVyRWwiLCJvblRvdWNoU3RhcnQiLCJ0b3VjaEV2ZW50c0RhdGEiLCJpc1RvdWNoRXZlbnQiLCJpc1RvdWNoZWQiLCJpc01vdmVkIiwibm9Td2lwaW5nIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJub1N3aXBpbmdDbGFzcyIsImFsbG93Q2xpY2siLCJzd2lwZUhhbmRsZXIiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiaU9TRWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaU9TRWRnZVN3aXBlVGhyZXNob2xkIiwiYWxsb3dUb3VjaENhbGxiYWNrcyIsImlzU2Nyb2xsaW5nIiwic3RhcnRNb3ZpbmciLCJzdGFydFgiLCJzdGFydFkiLCJ0b3VjaFN0YXJ0VGltZSIsInN3aXBlRGlyZWN0aW9uIiwidGhyZXNob2xkIiwiYWxsb3dUaHJlc2hvbGRNb3ZlIiwiZm9ybUVsZW1lbnRzIiwiYWxsb3dUb3VjaE1vdmUiLCJvblRvdWNoTW92ZSIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInNxcnQiLCJwb3ciLCJhdGFuMiIsInRvdWNoQW5nbGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdGFydFRyYW5zbGF0ZSIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJncmFiQ3Vyc29yIiwidG91Y2hSYXRpbyIsImN1cnJlbnRUcmFuc2xhdGUiLCJyZXNpc3RhbmNlUmF0aW8iLCJyZXNpc3RhbmNlIiwiZm9sbG93RmluZ2VyIiwidmVsb2NpdGllcyIsIm9uVG91Y2hFbmQiLCJsYXN0Q2xpY2tUaW1lIiwiY2xpY2tUaW1lb3V0IiwiZnJlZU1vZGVNb21lbnR1bSIsInZlbG9jaXR5IiwiZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkiLCJmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbyIsImZyZWVNb2RlTW9tZW50dW1SYXRpbyIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbyIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2UiLCJmcmVlTW9kZVN0aWNreSIsImxvbmdTd2lwZXNNcyIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJzaG9ydFN3aXBlcyIsIm9uQ2xpY2siLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwidG91Y2hFdmVudHNUYXJnZXQiLCJwYXNzaXZlTGlzdGVuZXJzIiwicGFzc2l2ZSIsImNhcHR1cmUiLCJtb3ZlIiwiZGV0YWNoRXZlbnRzIiwiZ2V0QnJlYWtwb2ludCIsImN1cnJlbnRCcmVha3BvaW50Iiwib3JpZ2luYWxQYXJhbXMiLCJpbm5lcldpZHRoIiwiaXNJRSIsImlzU2FmYXJpIiwiaXNVaVdlYlZpZXciLCJkaXJlY3Rpb24iLCJ1bmlxdWVOYXZFbGVtZW50cyIsInByZWxvYWRJbWFnZXMiLCJ1cGRhdGVPbkltYWdlc1JlYWR5IiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsIndyYXBwZXJDbGFzcyIsInJ1bkNhbGxiYWNrc09uSW5pdCIsInNsaWRlIiwibWFuaXB1bGF0aW9uIiwibmF2aWdhdGlvbiIsImFkZENsYXNzZXMiLCJydGwiLCJyZW1vdmVDbGFzc2VzIiwiaW1hZ2VzIiwibG9hZEltYWdlIiwic2l6ZXMiLCJzcmNzZXQiLCJpbWFnZXNMb2FkZWQiLCJpbWFnZXNUb0xvYWQiLCJjdXJyZW50U3JjIiwicGFzc2VkUGFyYW1zIiwic3dpcGVyIiwidG91Y2hFdmVudHNUb3VjaCIsInRvdWNoRXZlbnRzRGVza3RvcCIsIl9fcHJvdG9fXyIsImV4dGVuZGVkRGVmYXVsdHMiLCJkZWZhdWx0cyIsImRlc3Ryb3kiLCJleHRlbmREZWZhdWx0cyIsImRldmljZSIsInN0YXRpYyIsImJyb3dzZXIiLCJyZXNpemUiLCJyZXNpemVIYW5kbGVyIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJhdHRhY2giLCJvYnNlcnZlIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVycyIsIm9ic2VydmVQYXJlbnRzIiwiZGlzY29ubmVjdCIsImZyb20iLCJyZW5kZXJTbGlkZSIsImxhenkiLCJyZW5kZXJFeHRlcm5hbCIsImJlZm9yZUluaXQiLCJrZXlib2FyZCIsIm9ubHlJblZpZXdwb3J0IiwiaW5uZXJIZWlnaHQiLCJlbmFibGUiLCJsYXN0U2Nyb2xsVGltZSIsImhhc0ZlYXR1cmUiLCJub3JtYWxpemUiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsImF4aXMiLCJIT1JJWk9OVEFMX0FYSVMiLCJkZWx0YVkiLCJkZWx0YVgiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwicGl4ZWxYIiwicGl4ZWxZIiwiaGFuZGxlTW91c2VFbnRlciIsIm1vdXNlRW50ZXJlZCIsImhhbmRsZU1vdXNlTGVhdmUiLCJtb3VzZXdoZWVsIiwicmVsZWFzZU9uRWRnZXMiLCJmb3JjZVRvQXhpcyIsInNlbnNpdGl2aXR5IiwiYXV0b3BsYXkiLCJhdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uIiwiZ2V0VGltZSIsImV2ZW50c1RhcmdlZCIsIiRuZXh0RWwiLCIkcHJldkVsIiwiZGlzYWJsZWRDbGFzcyIsImxvY2tDbGFzcyIsIm5leHRFbCIsInByZXZFbCIsIlYiLCJwYWdpbmF0aW9uIiwicGFnaW5hdGlvblR5cGUiLCJidWxsZXRzIiwiZHluYW1pY0J1bGxldHMiLCJidWxsZXRTaXplIiwiZHluYW1pY01haW5CdWxsZXRzIiwiZHluYW1pY0J1bGxldEluZGV4IiwiYnVsbGV0QWN0aXZlQ2xhc3MiLCJjdXJyZW50Q2xhc3MiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJ0b3RhbENsYXNzIiwiZm9ybWF0RnJhY3Rpb25Ub3RhbCIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInJlbmRlckN1c3RvbSIsInJlbmRlciIsInJlbmRlckJ1bGxldCIsImJ1bGxldENsYXNzIiwiYnVsbGV0RWxlbWVudCIsInJlbmRlckZyYWN0aW9uIiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJjbGlja2FibGUiLCJjbGlja2FibGVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MiLCJoaWRkZW5DbGFzcyIsIlIiLCJzY3JvbGxiYXIiLCJkcmFnU2l6ZSIsInRyYWNrU2l6ZSIsIiRkcmFnRWwiLCJzY3JvbGxiYXJIaWRlIiwiZGl2aWRlciIsIm1vdmVEaXZpZGVyIiwic2V0RHJhZ1Bvc2l0aW9uIiwib25EcmFnU3RhcnQiLCJkcmFnVGltZW91dCIsIm9uRHJhZ01vdmUiLCJvbkRyYWdFbmQiLCJzbmFwT25SZWxlYXNlIiwiZW5hYmxlRHJhZ2dhYmxlIiwiZGlzYWJsZURyYWdnYWJsZSIsImRyYWdDbGFzcyIsImRyYWdFbCIsImRyYWdnYWJsZSIsIkYiLCJzZXRUcmFuc2Zvcm0iLCJwYXJhbGxheCIsIlciLCJnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzIiwib25HZXN0dXJlU3RhcnQiLCJnZXN0dXJlIiwiZmFrZUdlc3R1cmVUb3VjaGVkIiwiZmFrZUdlc3R1cmVNb3ZlZCIsInNjYWxlU3RhcnQiLCIkc2xpZGVFbCIsIiRpbWFnZUVsIiwiJGltYWdlV3JhcEVsIiwiY29udGFpbmVyQ2xhc3MiLCJtYXhSYXRpbyIsImlzU2NhbGluZyIsIm9uR2VzdHVyZUNoYW5nZSIsInNjYWxlTW92ZSIsImN1cnJlbnRTY2FsZSIsIm1pblJhdGlvIiwib25HZXN0dXJlRW5kIiwidG91Y2hlc1N0YXJ0Iiwic2xpZGVXaWR0aCIsInNsaWRlSGVpZ2h0IiwibWluWCIsIm1heFgiLCJtaW5ZIiwibWF4WSIsInRvdWNoZXNDdXJyZW50IiwicHJldlBvc2l0aW9uWCIsInByZXZQb3NpdGlvblkiLCJwcmV2VGltZSIsIm9uVHJhbnNpdGlvbkVuZCIsIm91dCIsImluIiwiem9vbWVkU2xpZGVDbGFzcyIsInEiLCJsb2FkSW5TbGlkZSIsImVsZW1lbnRDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwicHJlbG9hZGVyQ2xhc3MiLCJpbml0aWFsSW1hZ2VMb2FkZWQiLCJsb2FkUHJldk5leHQiLCJsb2FkUHJldk5leHRBbW91bnQiLCJMaW5lYXJTcGxpbmUiLCJsYXN0SW5kZXgiLCJpbnRlcnBvbGF0ZSIsImdldEludGVycG9sYXRlRnVuY3Rpb24iLCJjb250cm9sbGVyIiwic3BsaW5lIiwiY29udHJvbCIsImJ5IiwiaW52ZXJzZSIsIksiLCJtYWtlRWxGb2N1c2FibGUiLCJhZGRFbFJvbGUiLCJhZGRFbExhYmVsIiwiZGlzYWJsZUVsIiwiZW5hYmxlRWwiLCJvbkVudGVyS2V5IiwiYTExeSIsImxhc3RTbGlkZU1lc3NhZ2UiLCJuZXh0U2xpZGVNZXNzYWdlIiwiZmlyc3RTbGlkZU1lc3NhZ2UiLCJwcmV2U2xpZGVNZXNzYWdlIiwibGl2ZVJlZ2lvbiIsInVwZGF0ZU5hdmlnYXRpb24iLCJ1cGRhdGVQYWdpbmF0aW9uIiwicGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UiLCJVIiwicHVzaFN0YXRlIiwiaGFzaE5hdmlnYXRpb24iLCJwYXRocyIsImdldFBhdGhWYWx1ZXMiLCJzY3JvbGxUb1NsaWRlIiwicmVwbGFjZVN0YXRlIiwic2V0SGlzdG9yeVBvcFN0YXRlIiwicGF0aG5hbWUiLCJzZXRIaXN0b3J5Iiwic2x1Z2lmeSIsImluY2x1ZGVzIiwib25IYXNoQ2FuZ2UiLCJzZXRIYXNoIiwid2F0Y2hTdGF0ZSIsIloiLCJyZXZlcnNlRGlyZWN0aW9uIiwic3RvcE9uTGFzdFNsaWRlIiwicnVubmluZyIsInBhdXNlIiwicGF1c2VkIiwid2FpdEZvclRyYW5zaXRpb24iLCJRIiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsIkoiLCJjdWJlRWZmZWN0Iiwic2hhZG93Iiwic2xpZGVTaGFkb3dzIiwiLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luIiwiLW1vei10cmFuc2Zvcm0tb3JpZ2luIiwiLW1zLXRyYW5zZm9ybS1vcmlnaW4iLCJ0cmFuc2Zvcm0tb3JpZ2luIiwic2hhZG93T2Zmc2V0Iiwic2hhZG93U2NhbGUiLCJzaW4iLCJlZSIsImZsaXBFZmZlY3QiLCJsaW1pdFJvdGF0aW9uIiwidGUiLCJjb3ZlcmZsb3dFZmZlY3QiLCJyb3RhdGUiLCJtb2RpZmllciIsInN0cmV0Y2giLCJwZXJzcGVjdGl2ZU9yaWdpbiIsImFlIiwiaGlkZU9uQ2xpY2siLCJ0b0VkZ2UiLCJmcm9tRWRnZSIsImFjdGl2ZUluZGV4Q2hhbmdlIiwic25hcEluZGV4Q2hhbmdlIiwic2xpZGVzTGVuZ3RoQ2hhbmdlIiwic25hcEdyaWRMZW5ndGhDaGFuZ2UiLCJvYnNlcnZlclVwZGF0ZSIsInRvdWNoU3RhcnQiLCJ0b3VjaEVuZCIsImRvdWJsZVRhcCIsImxvYWRPblRyYW5zaXRpb25TdGFydCIsInNjcm9sbCIsInNjcm9sbGJhckRyYWdNb3ZlIiwibm90aWZpY2F0aW9uQ2xhc3MiLCJwYWdpbmF0aW9uVXBkYXRlIiwiZGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJiZWZvcmVUcmFuc2l0aW9uU3RhcnQiLCJzbGlkZXJGaXJzdE1vdmUiLCJpdGVtcyIsImZhbmN5Ym94IiwiZ3V0dGVyIiwiYXJyb3dzIiwiaW5mb2JhciIsInRvb2xiYXIiLCJpZGxlVGltZSIsInNtYWxsQnRuIiwicHJvdGVjdCIsIm1vZGFsIiwicHJlbG9hZCIsImlmcmFtZSIsInRwbCIsInNjcm9sbGluZyIsImFuaW1hdGlvbkVmZmVjdCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiem9vbU9wYWNpdHkiLCJ0cmFuc2l0aW9uRWZmZWN0IiwiYmFzZUNsYXNzIiwiYmFzZVRwbCIsInNwaW5uZXJUcGwiLCJlcnJvclRwbCIsImJ0blRwbCIsInNsaWRlU2hvdyIsImZ1bGxTY3JlZW4iLCJ0aHVtYnMiLCJjbG9zZSIsInBhcmVudEVsIiwiYXV0b0ZvY3VzIiwiYmFja0ZvY3VzIiwidHJhcEZvY3VzIiwiYXV0b1N0YXJ0IiwidmVydGljYWwiLCJtb21lbnR1bSIsIm1lZGlhIiwiaGlkZU9uQ2xvc2UiLCJvbkluaXQiLCJiZWZvcmVMb2FkIiwiYWZ0ZXJMb2FkIiwiYmVmb3JlU2hvdyIsImFmdGVyU2hvdyIsImJlZm9yZUNsb3NlIiwiYWZ0ZXJDbG9zZSIsIm9uQWN0aXZhdGUiLCJvbkRlYWN0aXZhdGUiLCJjbGlja0NvbnRlbnQiLCJjbGlja1NsaWRlIiwiY2xpY2tPdXRzaWRlIiwiZGJsY2xpY2tDb250ZW50IiwiZGJsY2xpY2tTbGlkZSIsImRibGNsaWNrT3V0c2lkZSIsIm1vYmlsZSIsImkxOG4iLCJlbiIsIkNMT1NFIiwiTkVYVCIsIlBSRVYiLCJFUlJPUiIsIlBMQVlfU1RBUlQiLCJQTEFZX1NUT1AiLCJGVUxMX1NDUkVFTiIsIlRIVU1CUyIsImRlIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIk9UcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJncm91cCIsImN1cnJJbmRleCIsInByZXZJbmRleCIsInByZXZQb3MiLCJjdXJyUG9zIiwiZmlyc3RSdW4iLCJjcmVhdGVHcm91cCIsIiRsYXN0Rm9jdXMiLCJnZXRJbnN0YW5jZSIsImlzTW9iaWxlIiwiJHJlZnMiLCJhY3RpdmF0ZSIsImp1bXBUbyIsIiRvcmlnIiwiY2hhckF0IiwiJHRodW1iIiwiYWRkRXZlbnRzIiwicmVtb3ZlRXZlbnRzIiwicHJldmlvdXMiLCJzdGFnZSIsImlzQ2xvc2luZyIsImlkbGVTZWNvbmRzQ291bnRlciIsImlzSWRsZSIsInNob3dDb250cm9scyIsImlkbGVJbnRlcnZhbCIsInNldEludGVydmFsIiwiaGlkZUNvbnRyb2xzIiwiY2xlYXJJbnRlcnZhbCIsImlzU2xpZGluZyIsImlzQW5pbWF0aW5nIiwiY3JlYXRlU2xpZGUiLCJ1cGRhdGVDb250cm9scyIsIiRzbGlkZSIsImZvcmNlZER1cmF0aW9uIiwibG9hZFNsaWRlIiwiaXNMb2FkZWQiLCJyZXZlYWxDb250ZW50IiwiaXNDb21wbGV0ZSIsInVwZGF0ZVNsaWRlIiwic2NhbGVUb0FjdHVhbCIsIiRjb250ZW50IiwiaGFzRXJyb3IiLCJ1cGRhdGVDdXJzb3IiLCJzY2FsZVgiLCJzY2FsZVkiLCJTbGlkZVNob3ciLCJpc0FjdGl2ZSIsInNjYWxlVG9GaXQiLCJnZXRGaXRQb3MiLCJpc1pvb21hYmxlIiwiaXNTY2FsZWREb3duIiwiY2FuUGFuIiwiaXNMb2FkaW5nIiwic2V0SW1hZ2UiLCJzZXRJZnJhbWUiLCJzZXRDb250ZW50Iiwic2V0RXJyb3IiLCJzaG93TG9hZGluZyIsInN1YnN0cmluZyIsInBvc3RmaXgiLCJ0aHVtYiIsIiRnaG9zdCIsInNldEJpZ0ltYWdlIiwiJGltYWdlIiwidGltb3V0cyIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJoaWRlTG9hZGluZyIsImNvbnRlbnRXaW5kb3ciLCJzY3JvbGxXaWR0aCIsIiRwbGFjZWhvbGRlciIsIiRzbWFsbEJ0biIsIiRzcGlubmVyIiwiZ2V0VGh1bWJQb3MiLCJwYXJlbnRFbGVtZW50IiwiZXZlcnkiLCJib3R0b20iLCJjbGVhblVwIiwiZm9jdXNCYWNrIiwiJGNhcHRpb24iLCJpc0hpZGRlbkNvbnRyb2xzIiwidG9nZ2xlQ29udHJvbHMiLCJjcmVhdGVUb3VjaCIsInVzZTNkIiwiZG9jdW1lbnRNb2RlIiwicHJvcGVydHlOYW1lIiwieW91dHViZSIsImF1dG9oaWRlIiwiZnMiLCJyZWwiLCJoZCIsIndtb2RlIiwiZW5hYmxlanNhcGkiLCJodG1sNSIsInBhcmFtUGxhY2UiLCJ2aW1lbyIsInNob3dfdGl0bGUiLCJzaG93X2J5bGluZSIsInNob3dfcG9ydHJhaXQiLCJmdWxsc2NyZWVuIiwiYXBpIiwibWV0YWNhZmUiLCJkYWlseW1vdGlvbiIsImFkZGl0aW9uYWxJbmZvcyIsInZpbmUiLCJpbnN0YWdyYW0iLCJnb29nbGVfbWFwcyIsImNvbnRlbnRQcm92aWRlciIsIm9uY2xpY2siLCJzdWJzdHIiLCJzY3JvbGxIZWlnaHQiLCIkYmciLCJiZyIsIiRzdGFnZSIsIiRjb250YWluZXIiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvbnRvdWNoc3RhcnQiLCJzdGFydFBvaW50cyIsIiR0YXJnZXQiLCJjYW5UYXAiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImRpc3RhbmNlWCIsImRpc3RhbmNlWSIsImRpc3RhbmNlIiwiaXNQYW5uaW5nIiwiaXNTd2lwaW5nIiwiaXNab29taW5nIiwic2xpZGVyU3RhcnRQb3MiLCJzbGlkZXJMYXN0UG9zIiwiY29udGVudFN0YXJ0UG9zIiwiY29udGVudExhc3RQb3MiLCJjZW50ZXJQb2ludFN0YXJ0WCIsImNlbnRlclBvaW50U3RhcnRZIiwicGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRYIiwicGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRZIiwic3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzIiwib250b3VjaG1vdmUiLCJuZXdQb2ludHMiLCJvblN3aXBlIiwib25QYW4iLCJvblpvb20iLCJpblRyYW5zaXRpb24iLCJyZXF1ZXN0SWQiLCJsaW1pdE1vdmVtZW50IiwibGltaXRQb3NpdGlvbiIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0Iiwib250b3VjaGVuZCIsImVuZFBvaW50cyIsIm9uVGFwIiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwic3BlZWRYIiwiZW5kUGFubmluZyIsImVuZFpvb21pbmciLCJlbmRTd2lwaW5nIiwic3RhcnRFdmVudCIsInRhcHBlZCIsInRhcFgiLCJ0YXBZIiwiR3Vlc3R1cmVzIiwiJGJ1dHRvbiIsImNsZWFyIiwib25Jbml0LmZiIiwiYmVmb3JlU2hvdy5mYiIsImFmdGVyU2hvdy5mYiIsImFmdGVyS2V5ZG93bi5mYiIsImJlZm9yZUNsb3NlLmZiIG9uRGVhY3RpdmF0ZS5mYiIsInJlcXVlc3QiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIkFMTE9XX0tFWUJPQVJEX0lOUFVUIiwiZXhpdCIsImV4aXRGdWxsc2NyZWVuIiwiaXNGdWxsc2NyZWVuIiwiQm9vbGVhbiIsImZ1bGxzY3JlZW5FbGVtZW50IiwiZnVsbHNjcmVlbkVuYWJsZWQiLCJGdWxsU2NyZWVuIiwiYmVmb3JlQ2xvc2UuZmIiLCJmdWxsc2NyZWVuY2hhbmdlIiwiJGdyaWQiLCIkbGlzdCIsImlzVmlzaWJsZSIsIm1hcmdpbi10b3AiLCJtYXJnaW4tbGVmdCIsIlRodW1icyIsImdhbGxlcnkiLCJvcmlnSGFzaCIsInRpdGxlIiwic2VhcmNoIiwicmVxdWlyZSIsImNhcmV0VGltZW91dElkIiwidWEiLCJpUGhvbmUiLCJjaHJvbWUiLCJtYXNrIiwiZGVmaW5pdGlvbnMiLCI5IiwiYXV0b2NsZWFyIiwiZGF0YU5hbWUiLCJwbGFjZWhvbGRlciIsImNhcmV0IiwiYmVnaW4iLCJyYW5nZSIsInNldFNlbGVjdGlvblJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwiY29sbGFwc2UiLCJtb3ZlRW5kIiwibW92ZVN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJjcmVhdGVSYW5nZSIsImR1cGxpY2F0ZSIsInVubWFzayIsImRlZnMiLCJ0ZXN0cyIsInBhcnRpYWxQb3NpdGlvbiIsImZpcnN0Tm9uTWFza1BvcyIsImxhc3RSZXF1aXJlZE5vbk1hc2tQb3MiLCJvbGRWYWwiLCJ0cnlGaXJlQ29tcGxldGVkIiwiYnVmZmVyIiwiZ2V0UGxhY2Vob2xkZXIiLCJzZWVrTmV4dCIsInNoaWZ0TCIsIndyaXRlQnVmZmVyIiwiYmx1ckV2ZW50IiwiY2hlY2tWYWwiLCJmb2N1c1RleHQiLCJjaGFuZ2UiLCJjbGVhckJ1ZmZlciIsImFsbG93IiwibGFzdE1hdGNoIiwiZGVmYXVsdEJ1ZmZlciIsInNlZWtQcmV2Iiwic2hpZnRSIiwiY3VyVmFsIiwiaW5zdGFuY2VVaWQiLCJTbGljayIsImVsZW1lbnQiLCJkYXRhU2V0dGluZ3MiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXNOYXZGb3IiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwic2xpZGVyIiwiZG90cyIsImRvdHNDbGFzcyIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZm9jdXNPbkNoYW5nZSIsImluZmluaXRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicm93cyIsInNsaWRlc1BlclJvdyIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwic3dpcGUiLCJzd2lwZVRvU2xpZGUiLCJ0b3VjaE1vdmUiLCJ0b3VjaFRocmVzaG9sZCIsInVzZUNTUyIsInVzZVRyYW5zZm9ybSIsInZhcmlhYmxlV2lkdGgiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsImluaXRpYWxzIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzbGlkZUNvdW50IiwiJHNsaWRlVHJhY2siLCIkc2xpZGVzIiwic2xpZGluZyIsInNsaWRlT2Zmc2V0Iiwic3dpcGVMZWZ0Iiwic3dpcGluZyIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRTZXR0aW5ncyIsImNzc1RyYW5zaXRpb25zIiwiZm9jdXNzZWQiLCJpbnRlcnJ1cHRlZCIsInBvc2l0aW9uUHJvcCIsInJvd0NvdW50Iiwic2hvdWxkQ2xpY2siLCIkc2xpZGVyIiwiJHNsaWRlc0NhY2hlIiwidHJhbnNmb3JtVHlwZSIsInRyYW5zaXRpb25UeXBlIiwidmlzaWJpbGl0eUNoYW5nZSIsIndpbmRvd1dpZHRoIiwid2luZG93VGltZXIiLCJtb3pIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJhdXRvUGxheSIsImF1dG9QbGF5Q2xlYXIiLCJhdXRvUGxheUl0ZXJhdG9yIiwiY2hhbmdlU2xpZGUiLCJjbGlja0hhbmRsZXIiLCJzZWxlY3RIYW5kbGVyIiwic2V0UG9zaXRpb24iLCJkcmFnSGFuZGxlciIsImtleUhhbmRsZXIiLCJodG1sRXhwciIsInJlZ2lzdGVyQnJlYWtwb2ludHMiLCJhY3RpdmF0ZUFEQSIsImFyaWEtaGlkZGVuIiwic2xpY2tBZGQiLCJtYXJrdXAiLCJhZGRCZWZvcmUiLCJ1bmxvYWQiLCJyZWluaXQiLCJhbmltYXRlSGVpZ2h0IiwidGFyZ2V0SGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwidGFyZ2V0TGVmdCIsImFuaW1Qcm9wcyIsImFuaW1TdGFydCIsImFwcGx5VHJhbnNpdGlvbiIsImRpc2FibGVUcmFuc2l0aW9uIiwiZ2V0TmF2VGFyZ2V0Iiwic2xpY2siLCJzbGlkZUhhbmRsZXIiLCJidWlsZEFycm93cyIsImFyaWEtZGlzYWJsZWQiLCJidWlsZERvdHMiLCJkb3QiLCJnZXREb3RDb3VudCIsImJ1aWxkT3V0Iiwic2V0dXBJbmZpbml0ZSIsInVwZGF0ZURvdHMiLCJzZXRTbGlkZUNsYXNzZXMiLCJidWlsZFJvd3MiLCJuZXdTbGlkZXMiLCJudW1PZlNsaWRlcyIsIm9yaWdpbmFsU2xpZGVzIiwic2xpZGVzUGVyU2VjdGlvbiIsInJvdyIsImNoZWNrUmVzcG9uc2l2ZSIsImZvcmNlVXBkYXRlIiwiYnJlYWtwb2ludCIsInRhcmdldEJyZWFrcG9pbnQiLCJyZXNwb25kVG9XaWR0aCIsInRyaWdnZXJCcmVha3BvaW50Iiwic2xpZGVyV2lkdGgiLCJ1bnNsaWNrIiwicmVmcmVzaCIsImRvbnRBbmltYXRlIiwiaW5kZXhPZmZzZXQiLCJjaGVja05hdmlnYWJsZSIsIm5hdmlnYWJsZXMiLCJwcmV2TmF2aWdhYmxlIiwiZ2V0TmF2aWdhYmxlSW5kZXhlcyIsImNsZWFuVXBFdmVudHMiLCJpbnRlcnJ1cHQiLCJjbGVhblVwU2xpZGVFdmVudHMiLCJvcmllbnRhdGlvbkNoYW5nZSIsImNsZWFuVXBSb3dzIiwiZmFkZVNsaWRlIiwic2xpZGVJbmRleCIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiJHNmIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInRhcmdldFNsaWRlIiwiY29lZiIsInZlcnRpY2FsT2Zmc2V0IiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJpbmRleGVzIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50Iiwic3dpcGVkU2xpZGUiLCJjZW50ZXJPZmZzZXQiLCJnb1RvIiwic2xpY2tHb1RvIiwiY3JlYXRpb24iLCJzZXRQcm9wcyIsInN0YXJ0TG9hZCIsImxvYWRTbGlkZXIiLCJpbml0aWFsaXplRXZlbnRzIiwidXBkYXRlQXJyb3dzIiwiaW5pdEFEQSIsIm51bURvdEdyb3VwcyIsInRhYkNvbnRyb2xJbmRleGVzIiwic2xpZGVDb250cm9sSW5kZXgiLCJyb2xlIiwiYXJpYUJ1dHRvbkNvbnRyb2wiLCJhcmlhLWRlc2NyaWJlZGJ5IiwibWFwcGVkU2xpZGVJbmRleCIsImFyaWEtY29udHJvbHMiLCJhcmlhLWxhYmVsIiwiYXJpYS1zZWxlY3RlZCIsImluaXRBcnJvd0V2ZW50cyIsImluaXREb3RFdmVudHMiLCJpbml0U2xpZGVFdmVudHMiLCJhY3Rpb24iLCJpbml0VUkiLCJ0YWdOYW1lIiwibG9hZFJhbmdlIiwicmFuZ2VTdGFydCIsInJhbmdlRW5kIiwibG9hZEltYWdlcyIsImltYWdlc1Njb3BlIiwiaW1hZ2VTb3VyY2UiLCJpbWFnZVNyY1NldCIsImltYWdlU2l6ZXMiLCJpbWFnZVRvTG9hZCIsInByZXZTbGlkZSIsIm5leHRTbGlkZSIsInByb2dyZXNzaXZlTGF6eUxvYWQiLCJzbGlja05leHQiLCJzbGlja1BhdXNlIiwicGxheSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsInNsaWNrUHJldiIsInRyeUNvdW50IiwiJGltZ3NUb0xvYWQiLCJpbml0aWFsaXppbmciLCJsYXN0VmlzaWJsZUluZGV4IiwicmVzcG9uc2l2ZVNldHRpbmdzIiwid2luZG93RGVsYXkiLCJzbGlja1JlbW92ZSIsInJlbW92ZUJlZm9yZSIsInJlbW92ZUFsbCIsInNldENTUyIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwic2V0RmFkZSIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwiaXRlbSIsImJvZHlTdHlsZSIsIm1zVHJhbnNpdGlvbiIsInBlcnNwZWN0aXZlUHJvcGVydHkiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIk1velBlcnNwZWN0aXZlIiwiYWxsU2xpZGVzIiwicmVtYWluZGVyIiwiZXZlbkNvZWYiLCJpbmZpbml0ZUNvdW50IiwidGFyZ2V0RWxlbWVudCIsInN5bmMiLCJhbmltU2xpZGUiLCJvbGRTbGlkZSIsInNsaWRlTGVmdCIsIm5hdlRhcmdldCIsInhEaXN0IiwieURpc3QiLCJzd2lwZUFuZ2xlIiwiY3VyWCIsImN1clkiLCJzd2lwZUVuZCIsInN3aXBlTGVuZ3RoIiwiZWRnZUhpdCIsIm1pblN3aXBlIiwiZmluZ2VyQ291bnQiLCJzd2lwZVN0YXJ0Iiwic3dpcGVNb3ZlIiwicG9zaXRpb25PZmZzZXQiLCJ2ZXJ0aWNhbFN3aXBlTGVuZ3RoIiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIiwiZnJvbUJyZWFrcG9pbnQiXSwibWFwcGluZ3MiOiJtZUFhQSxTQUFZQSxFQUFRQyxHQUVuQixhQUV1QixpQkFBWEMsUUFBaUQsaUJBQW5CQSxPQUFPQyxRQVNoREQsT0FBT0MsUUFBVUgsRUFBT0ksU0FDdkJILEVBQVNELEdBQVEsR0FDakIsU0FBVUssR0FDVCxJQUFNQSxFQUFFRCxTQUNQLE1BQU0sSUFBSUUsTUFBTyw0Q0FFbEIsT0FBT0wsRUFBU0ksSUFHbEJKLEVBQVNELEdBdEJYLENBMEJ1QixvQkFBWE8sT0FBeUJBLE9BQVNDLEtBQU0sU0FBVUQsRUFBUUUsR0FNdEUsYUF5Q2UsU0FBWEMsRUFBOEJDLEdBQ2hDLE9BQWMsTUFBUEEsR0FBZUEsSUFBUUEsRUFBSUosT0F4Q3BDLElBQUlLLEVBQU0sR0FFTkMsRUFBV0MsT0FBT0MsZUFFbEJDLEVBQVFKLEVBQUlJLE1BRVpDLEVBQU9MLEVBQUlLLEtBQU8sU0FBVUMsR0FDL0IsT0FBT04sRUFBSUssS0FBS0UsS0FBTUQsSUFDbkIsU0FBVUEsR0FDYixPQUFPTixFQUFJUSxPQUFPQyxNQUFPLEdBQUlILElBSTFCSSxFQUFPVixFQUFJVSxLQUVYQyxFQUFVWCxFQUFJVyxRQUVkQyxFQUFhLEdBRWJDLEVBQVdELEVBQVdDLFNBRXRCQyxFQUFTRixFQUFXRyxlQUVwQkMsRUFBYUYsRUFBT0QsU0FFcEJJLEVBQXVCRCxFQUFXVCxLQUFNTCxRQUV4Q2dCLEVBQVUsR0FFVkMsRUFBYSxTQUFxQnBCLEdBTWhDLE1BQXNCLG1CQUFSQSxHQUE4QyxpQkFBakJBLEVBQUlxQixVQVNqRDVCLEVBQVdHLEVBQU9ILFNBSWpCNkIsRUFBNEIsQ0FDL0JDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxPQUFPLEVBQ1BDLFVBQVUsR0FHWCxTQUFTQyxFQUFTQyxFQUFNQyxFQUFNQyxHQUc3QixJQUFJQyxFQUFHQyxFQUNOQyxHQUhESCxFQUFNQSxHQUFPckMsR0FHQ3lDLGNBQWUsVUFHN0IsR0FEQUQsRUFBT0UsS0FBT1AsRUFDVEMsRUFDSixJQUFNRSxLQUFLVCxHQVlWVSxFQUFNSCxFQUFNRSxJQUFPRixFQUFLTyxjQUFnQlAsRUFBS08sYUFBY0wsS0FFMURFLEVBQU9JLGFBQWNOLEVBQUdDLEdBSTNCRixFQUFJUSxLQUFLQyxZQUFhTixHQUFTTyxXQUFXQyxZQUFhUixHQUl6RCxTQUFTUyxFQUFRMUMsR0FDaEIsT0FBWSxNQUFQQSxFQUNHQSxFQUFNLEdBSVEsaUJBQVJBLEdBQW1DLG1CQUFSQSxFQUN4Q2EsRUFBWUMsRUFBU04sS0FBTVIsS0FBVyxnQkFDL0JBLEVBUVQsSUFDQzJDLEVBQVUsUUFHVkMsRUFBUyxTQUFVQyxFQUFVQyxHQUk1QixPQUFPLElBQUlGLEVBQU9HLEdBQUdDLEtBQU1ILEVBQVVDLElBMFZ2QyxTQUFTRyxFQUFhakQsR0FNckIsSUFBSWtELElBQVdsRCxHQUFPLFdBQVlBLEdBQU9BLEVBQUlrRCxPQUM1QzNCLEVBQU9tQixFQUFRMUMsR0FFaEIsT0FBS29CLEVBQVlwQixLQUFTRCxFQUFVQyxLQUlwQixVQUFUdUIsR0FBK0IsSUFBWDJCLEdBQ1IsaUJBQVhBLEdBQWdDLEVBQVRBLEdBQWdCQSxFQUFTLEtBQU9sRCxHQXJXaEU0QyxFQUFPRyxHQUFLSCxFQUFPTyxVQUFZLENBRzlCQyxPQUFRVCxFQUVSVSxZQUFhVCxFQUdiTSxPQUFRLEVBRVJJLFFBQVMsV0FDUixPQUFPakQsRUFBTUcsS0FBTVgsT0FLcEIwRCxJQUFLLFNBQVVDLEdBR2QsT0FBWSxNQUFQQSxFQUNHbkQsRUFBTUcsS0FBTVgsTUFJYjJELEVBQU0sRUFBSTNELEtBQU0yRCxFQUFNM0QsS0FBS3FELFFBQVdyRCxLQUFNMkQsSUFLcERDLFVBQVcsU0FBVUMsR0FHcEIsSUFBSUMsRUFBTWYsRUFBT2dCLE1BQU8vRCxLQUFLd0QsY0FBZUssR0FNNUMsT0FIQUMsRUFBSUUsV0FBYWhFLEtBR1Y4RCxHQUlSRyxLQUFNLFNBQVVDLEdBQ2YsT0FBT25CLEVBQU9rQixLQUFNakUsS0FBTWtFLElBRzNCQyxJQUFLLFNBQVVELEdBQ2QsT0FBT2xFLEtBQUs0RCxVQUFXYixFQUFPb0IsSUFBS25FLEtBQU0sU0FBVW9FLEVBQU1sQyxHQUN4RCxPQUFPZ0MsRUFBU3ZELEtBQU15RCxFQUFNbEMsRUFBR2tDLE9BSWpDNUQsTUFBTyxXQUNOLE9BQU9SLEtBQUs0RCxVQUFXcEQsRUFBTUssTUFBT2IsS0FBTXFFLGFBRzNDQyxNQUFPLFdBQ04sT0FBT3RFLEtBQUt1RSxHQUFJLElBR2pCQyxLQUFNLFdBQ0wsT0FBT3hFLEtBQUt1RSxJQUFLLElBR2xCRSxLQUFNLFdBQ0wsT0FBT3pFLEtBQUs0RCxVQUFXYixFQUFPMkIsS0FBTTFFLEtBQU0sU0FBVTJFLEVBQU96QyxHQUMxRCxPQUFTQSxFQUFJLEdBQU0sTUFJckIwQyxJQUFLLFdBQ0osT0FBTzVFLEtBQUs0RCxVQUFXYixFQUFPMkIsS0FBTTFFLEtBQU0sU0FBVTJFLEVBQU96QyxHQUMxRCxPQUFPQSxFQUFJLE1BSWJxQyxHQUFJLFNBQVVyQyxHQUNiLElBQUkyQyxFQUFNN0UsS0FBS3FELE9BQ2R5QixHQUFLNUMsR0FBTUEsRUFBSSxFQUFJMkMsRUFBTSxHQUMxQixPQUFPN0UsS0FBSzRELFVBQWdCLEdBQUxrQixHQUFVQSxFQUFJRCxFQUFNLENBQUU3RSxLQUFNOEUsSUFBUSxLQUc1REMsSUFBSyxXQUNKLE9BQU8vRSxLQUFLZ0UsWUFBY2hFLEtBQUt3RCxlQUtoQzFDLEtBQU1BLEVBQ05rRSxLQUFNNUUsRUFBSTRFLEtBQ1ZDLE9BQVE3RSxFQUFJNkUsUUFHYmxDLEVBQU9tQyxPQUFTbkMsRUFBT0csR0FBR2dDLE9BQVMsV0FDbEMsSUFBSUMsRUFBU0MsRUFBTXpELEVBQUswRCxFQUFNQyxFQUFhQyxFQUMxQ0MsRUFBU25CLFVBQVcsSUFBTyxHQUMzQm5DLEVBQUksRUFDSm1CLEVBQVNnQixVQUFVaEIsT0FDbkJvQyxHQUFPLEVBc0JSLElBbkJ1QixrQkFBWEQsSUFDWEMsRUFBT0QsRUFHUEEsRUFBU25CLFVBQVduQyxJQUFPLEdBQzNCQSxLQUlzQixpQkFBWHNELEdBQXdCakUsRUFBWWlFLEtBQy9DQSxFQUFTLElBSUx0RCxJQUFNbUIsSUFDVm1DLEVBQVN4RixLQUNUa0MsS0FHT0EsRUFBSW1CLEVBQVFuQixJQUduQixHQUFxQyxPQUE5QmlELEVBQVVkLFVBQVduQyxJQUczQixJQUFNa0QsS0FBUUQsRUFDYkUsRUFBT0YsRUFBU0MsR0FJRixjQUFUQSxHQUF3QkksSUFBV0gsSUFLbkNJLEdBQVFKLElBQVV0QyxFQUFPMkMsY0FBZUwsS0FDMUNDLEVBQWNLLE1BQU1DLFFBQVNQLE1BQy9CMUQsRUFBTTZELEVBQVFKLEdBSWJHLEVBRElELElBQWdCSyxNQUFNQyxRQUFTakUsR0FDM0IsR0FDSTJELEdBQWdCdkMsRUFBTzJDLGNBQWUvRCxHQUcxQ0EsRUFGQSxHQUlUMkQsR0FBYyxFQUdkRSxFQUFRSixHQUFTckMsRUFBT21DLE9BQVFPLEVBQU1GLEVBQU9GLFNBR3pCUSxJQUFUUixJQUNYRyxFQUFRSixHQUFTQyxJQU9yQixPQUFPRyxHQUdSekMsRUFBT21DLE9BQVEsQ0FHZFksUUFBUyxVQUFhaEQsRUFBVWlELEtBQUtDLFVBQVdDLFFBQVMsTUFBTyxJQUdoRUMsU0FBUyxFQUVUQyxNQUFPLFNBQVVDLEdBQ2hCLE1BQU0sSUFBSXRHLE1BQU9zRyxJQUdsQkMsS0FBTSxhQUVOWCxjQUFlLFNBQVV2RixHQUN4QixJQUFJbUcsRUFBT0MsRUFJWCxTQUFNcEcsR0FBZ0Msb0JBQXpCYyxFQUFTTixLQUFNUixRQUk1Qm1HLEVBQVFqRyxFQUFVRixLQVNLLG1CQUR2Qm9HLEVBQU9yRixFQUFPUCxLQUFNMkYsRUFBTyxnQkFBbUJBLEVBQU05QyxjQUNmcEMsRUFBV1QsS0FBTTRGLEtBQVdsRixJQUdsRW1GLGNBQWUsU0FBVXJHLEdBQ3hCLElBQUlpRixFQUVKLElBQU1BLEtBQVFqRixFQUNiLE9BQU8sRUFFUixPQUFPLEdBS1JzRyxXQUFZLFNBQVUxRSxFQUFNb0QsRUFBU2xELEdBQ3BDSCxFQUFTQyxFQUFNLENBQUVILE1BQU91RCxHQUFXQSxFQUFRdkQsT0FBU0ssSUFHckRnQyxLQUFNLFNBQVU5RCxFQUFLK0QsR0FDcEIsSUFBSWIsRUFBUW5CLEVBQUksRUFFaEIsR0FBS2tCLEVBQWFqRCxHQUVqQixJQURBa0QsRUFBU2xELEVBQUlrRCxPQUNMbkIsRUFBSW1CLElBQ3FDLElBQTNDYSxFQUFTdkQsS0FBTVIsRUFBSytCLEdBQUtBLEVBQUcvQixFQUFLK0IsSUFEbkJBLFVBTXBCLElBQU1BLEtBQUsvQixFQUNWLElBQWdELElBQTNDK0QsRUFBU3ZELEtBQU1SLEVBQUsrQixHQUFLQSxFQUFHL0IsRUFBSytCLElBQ3JDLE1BS0gsT0FBTy9CLEdBSVJ1RyxVQUFXLFNBQVV0RyxFQUFLdUcsR0FDekIsSUFBSTdDLEVBQU02QyxHQUFXLEdBYXJCLE9BWFksTUFBUHZHLElBQ0NnRCxFQUFhOUMsT0FBUUYsSUFDekIyQyxFQUFPZ0IsTUFBT0QsRUFDRSxpQkFBUjFELEVBQ1AsQ0FBRUEsR0FBUUEsR0FHWFUsRUFBS0gsS0FBTW1ELEVBQUsxRCxJQUlYMEQsR0FHUjhDLFFBQVMsU0FBVXhDLEVBQU1oRSxFQUFLOEIsR0FDN0IsT0FBYyxNQUFQOUIsR0FBZSxFQUFJVyxFQUFRSixLQUFNUCxFQUFLZ0UsRUFBTWxDLElBS3BENkIsTUFBTyxTQUFVTyxFQUFPdUMsR0FLdkIsSUFKQSxJQUFJaEMsR0FBT2dDLEVBQU94RCxPQUNqQnlCLEVBQUksRUFDSjVDLEVBQUlvQyxFQUFNakIsT0FFSHlCLEVBQUlELEVBQUtDLElBQ2hCUixFQUFPcEMsS0FBUTJFLEVBQVEvQixHQUt4QixPQUZBUixFQUFNakIsT0FBU25CLEVBRVJvQyxHQUdSSSxLQUFNLFNBQVViLEVBQU9LLEVBQVU0QyxHQVNoQyxJQVJBLElBQ0NDLEVBQVUsR0FDVjdFLEVBQUksRUFDSm1CLEVBQVNRLEVBQU1SLE9BQ2YyRCxHQUFrQkYsRUFJWDVFLEVBQUltQixFQUFRbkIsS0FDQWdDLEVBQVVMLEVBQU8zQixHQUFLQSxJQUNoQjhFLEdBQ3hCRCxFQUFRakcsS0FBTStDLEVBQU8zQixJQUl2QixPQUFPNkUsR0FJUjVDLElBQUssU0FBVU4sRUFBT0ssRUFBVStDLEdBQy9CLElBQUk1RCxFQUFRNkQsRUFDWGhGLEVBQUksRUFDSjRCLEVBQU0sR0FHUCxHQUFLVixFQUFhUyxHQUVqQixJQURBUixFQUFTUSxFQUFNUixPQUNQbkIsRUFBSW1CLEVBQVFuQixJQUdMLE9BRmRnRixFQUFRaEQsRUFBVUwsRUFBTzNCLEdBQUtBLEVBQUcrRSxLQUdoQ25ELEVBQUloRCxLQUFNb0csUUFNWixJQUFNaEYsS0FBSzJCLEVBR0ksT0FGZHFELEVBQVFoRCxFQUFVTCxFQUFPM0IsR0FBS0EsRUFBRytFLEtBR2hDbkQsRUFBSWhELEtBQU1vRyxHQU1iLE9BQU96RyxFQUFNcUQsSUFJZHFELEtBQU0sRUFJTjdGLFFBQVNBLElBR2EsbUJBQVg4RixTQUNYckUsRUFBT0csR0FBSWtFLE9BQU9DLFVBQWFqSCxFQUFLZ0gsT0FBT0MsV0FJNUN0RSxFQUFPa0IsS0FBTSx1RUFBdUVxRCxNQUFPLEtBQzNGLFNBQVVDLEVBQUluQyxHQUNicEUsRUFBWSxXQUFhb0UsRUFBTyxLQUFRQSxFQUFLb0MsZ0JBbUI5QyxJQUFJQyxFQVdGLFNBQVUxSCxHQTZJQyxTQUFaMkgsRUFBc0JDLEVBQVFDLEdBQzdCLElBQUlDLEVBQU8sS0FBT0YsRUFBT25ILE1BQU8sR0FBTSxNQUV0QyxPQUFPb0gsSUFTTkMsRUFBTyxFQUNOQyxPQUFPQyxhQUFxQixNQUFQRixHQUNyQkMsT0FBT0MsYUFBY0YsR0FBUSxHQUFLLE1BQWUsS0FBUEEsRUFBZSxRQTJCNUMsU0FBaEJHLElBQ0NDLElBdExGLElBQUkvRixFQUNIWixFQUNBNEcsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFHQVQsRUFDQXJJLEVBQ0ErSSxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBL0IsRUFDQWdDLEVBR0FqRCxFQUFVLFdBQWUsSUFBSWtELEtBQzdCQyxFQUFlbEosRUFBT0gsU0FDdEJzSixFQUFVLEVBQ1ZDLEVBQU8sRUFDUEMsRUFBYUMsS0FDYkMsRUFBYUQsS0FDYkUsRUFBZ0JGLEtBQ2hCRyxFQUF5QkgsS0FDekJJLEVBQVksU0FBVUMsRUFBR0MsR0FJeEIsT0FIS0QsSUFBTUMsSUFDVmpCLEdBQWUsR0FFVCxHQUlSeEgsRUFBVyxHQUFLQyxlQUNoQmYsRUFBTSxHQUNOd0osRUFBTXhKLEVBQUl3SixJQUNWQyxFQUFhekosRUFBSVUsS0FDakJBLEVBQU9WLEVBQUlVLEtBQ1hOLEVBQVFKLEVBQUlJLE1BSVpPLEVBQVUsU0FBVStJLEVBQU0xRixHQUd6QixJQUZBLElBQUlsQyxFQUFJLEVBQ1AyQyxFQUFNaUYsRUFBS3pHLE9BQ0puQixFQUFJMkMsRUFBSzNDLElBQ2hCLEdBQUs0SCxFQUFNNUgsS0FBUWtDLEVBQ2xCLE9BQU9sQyxFQUdULE9BQVEsR0FHVDZILEVBQVcsNkhBTVhDLEVBQWEsc0JBR2JDLEVBQWEsMEJBQTRCRCxFQUN4QywwQ0FHREUsRUFBYSxNQUFRRixFQUFhLEtBQU9DLEVBQWEsT0FBU0QsRUFHOUQsZ0JBQWtCQSxFQUlsQiwyREFBNkRDLEVBQWEsT0FDMUVELEVBQWEsT0FFZEcsRUFBVSxLQUFPRixFQUFhLHdGQU9BQyxFQUFhLGVBTzNDRSxFQUFjLElBQUlDLE9BQVFMLEVBQWEsSUFBSyxLQUM1Q00sRUFBUSxJQUFJRCxPQUFRLElBQU1MLEVBQWEsOEJBQ3RDQSxFQUFhLEtBQU0sS0FFcEJPLEVBQVMsSUFBSUYsT0FBUSxJQUFNTCxFQUFhLEtBQU9BLEVBQWEsS0FDNURRLEVBQWUsSUFBSUgsT0FBUSxJQUFNTCxFQUFhLFdBQWFBLEVBQWEsSUFBTUEsRUFDN0UsS0FDRFMsRUFBVyxJQUFJSixPQUFRTCxFQUFhLE1BRXBDVSxFQUFVLElBQUlMLE9BQVFGLEdBQ3RCUSxFQUFjLElBQUlOLE9BQVEsSUFBTUosRUFBYSxLQUU3Q1csRUFBWSxDQUNYQyxHQUFNLElBQUlSLE9BQVEsTUFBUUosRUFBYSxLQUN2Q2EsTUFBUyxJQUFJVCxPQUFRLFFBQVVKLEVBQWEsS0FDNUNjLElBQU8sSUFBSVYsT0FBUSxLQUFPSixFQUFhLFNBQ3ZDZSxLQUFRLElBQUlYLE9BQVEsSUFBTUgsR0FDMUJlLE9BQVUsSUFBSVosT0FBUSxJQUFNRixHQUM1QmUsTUFBUyxJQUFJYixPQUFRLHlEQUNwQkwsRUFBYSwrQkFBaUNBLEVBQWEsY0FDM0RBLEVBQWEsYUFBZUEsRUFBYSxTQUFVLEtBQ3BEbUIsS0FBUSxJQUFJZCxPQUFRLE9BQVNOLEVBQVcsS0FBTSxLQUk5Q3FCLGFBQWdCLElBQUlmLE9BQVEsSUFBTUwsRUFDakMsbURBQXFEQSxFQUNyRCxtQkFBcUJBLEVBQWEsbUJBQW9CLE1BR3hEcUIsRUFBUSxTQUNSQyxFQUFVLHNDQUNWQyxFQUFVLFNBRVZDLEdBQVUseUJBR1ZDLEdBQWEsbUNBRWJDLEdBQVcsT0FJWEMsR0FBWSxJQUFJdEIsT0FBUSx1QkFBeUJMLEVBQWEsdUJBQXdCLEtBb0J0RjRCLEdBQWEsc0RBQ2JDLEdBQWEsU0FBVUMsRUFBSUMsR0FDMUIsT0FBS0EsRUFHUSxPQUFQRCxFQUNHLElBSURBLEVBQUd0TCxNQUFPLEdBQUksR0FBTSxLQUMxQnNMLEVBQUdFLFdBQVlGLEVBQUd6SSxPQUFTLEdBQUlwQyxTQUFVLElBQU8sSUFJM0MsS0FBTzZLLEdBV2ZHLEdBQXFCQyxHQUNwQixTQUFVOUgsR0FDVCxPQUF5QixJQUFsQkEsRUFBSytILFVBQXFELGFBQWhDL0gsRUFBS2dJLFNBQVM1RSxlQUVoRCxDQUFFNkUsSUFBSyxhQUFjQyxLQUFNLFdBSTdCLElBQ0N4TCxFQUFLRCxNQUNGVCxFQUFNSSxFQUFNRyxLQUFNc0ksRUFBYXNELFlBQ2pDdEQsRUFBYXNELFlBTWRuTSxFQUFLNkksRUFBYXNELFdBQVdsSixRQUFTN0IsU0FDckMsTUFBUWdMLEdBQ1QxTCxFQUFPLENBQUVELE1BQU9ULEVBQUlpRCxPQUduQixTQUFVbUMsRUFBUWlILEdBQ2pCNUMsRUFBV2hKLE1BQU8yRSxFQUFRaEYsRUFBTUcsS0FBTThMLEtBS3ZDLFNBQVVqSCxFQUFRaUgsR0FLakIsSUFKQSxJQUFJM0gsRUFBSVUsRUFBT25DLE9BQ2RuQixFQUFJLEVBR0tzRCxFQUFRVixLQUFRMkgsRUFBS3ZLLE9BQy9Cc0QsRUFBT25DLE9BQVN5QixFQUFJLElBS3ZCLFNBQVMyQyxHQUFRekUsRUFBVUMsRUFBUzBELEVBQVMrRixHQUM1QyxJQUFJQyxFQUFHekssRUFBR2tDLEVBQU13SSxFQUFLQyxFQUFPQyxFQUFRQyxFQUNuQ0MsRUFBYS9KLEdBQVdBLEVBQVFnSyxjQUdoQ3pMLEVBQVd5QixFQUFVQSxFQUFRekIsU0FBVyxFQUt6QyxHQUhBbUYsRUFBVUEsR0FBVyxHQUdJLGlCQUFiM0QsSUFBMEJBLEdBQ3hCLElBQWJ4QixHQUErQixJQUFiQSxHQUErQixLQUFiQSxFQUVwQyxPQUFPbUYsRUFJUixJQUFNK0YsSUFDTHpFLEVBQWFoRixHQUNiQSxFQUFVQSxHQUFXckQsRUFFaEJnSixHQUFpQixDQUlyQixHQUFrQixLQUFicEgsSUFBcUJxTCxFQUFRcEIsR0FBV3lCLEtBQU1sSyxJQUdsRCxHQUFPMkosRUFBSUUsRUFBTyxJQUdqQixHQUFrQixJQUFickwsRUFBaUIsQ0FDckIsS0FBTzRDLEVBQU9uQixFQUFRa0ssZUFBZ0JSLElBVXJDLE9BQU9oRyxFQUxQLEdBQUt2QyxFQUFLZ0osS0FBT1QsRUFFaEIsT0FEQWhHLEVBQVE3RixLQUFNc0QsR0FDUHVDLE9BWVQsR0FBS3FHLElBQWdCNUksRUFBTzRJLEVBQVdHLGVBQWdCUixLQUN0RDVELEVBQVU5RixFQUFTbUIsSUFDbkJBLEVBQUtnSixLQUFPVCxFQUdaLE9BREFoRyxFQUFRN0YsS0FBTXNELEdBQ1B1QyxNQUtILENBQUEsR0FBS2tHLEVBQU8sR0FFbEIsT0FEQS9MLEVBQUtELE1BQU84RixFQUFTMUQsRUFBUW9LLHFCQUFzQnJLLElBQzVDMkQsRUFHRCxJQUFPZ0csRUFBSUUsRUFBTyxLQUFTdkwsRUFBUWdNLHdCQUN6Q3JLLEVBQVFxSyx1QkFHUixPQURBeE0sRUFBS0QsTUFBTzhGLEVBQVMxRCxFQUFRcUssdUJBQXdCWCxJQUM5Q2hHLEVBS1QsR0FBS3JGLEVBQVFpTSxNQUNYL0QsRUFBd0J4RyxFQUFXLFFBQ2pDNkYsSUFBY0EsRUFBVTJFLEtBQU14SyxNQUlsQixJQUFieEIsR0FBcUQsV0FBbkN5QixFQUFRbUosU0FBUzVFLGVBQStCLENBWXBFLEdBVkF1RixFQUFjL0osRUFDZGdLLEVBQWEvSixFQVNLLElBQWJ6QixJQUNGaUosRUFBUytDLEtBQU14SyxJQUFjd0gsRUFBYWdELEtBQU14SyxJQUFlLENBcUJqRSxLQWxCQWdLLEVBQWF0QixHQUFTOEIsS0FBTXhLLElBQWN5SyxHQUFheEssRUFBUU4sYUFDOURNLEtBSW1CQSxHQUFZM0IsRUFBUW9NLFNBR2hDZCxFQUFNM0osRUFBUVYsYUFBYyxPQUNsQ3FLLEVBQU1BLEVBQUkzRyxRQUFTMkYsR0FBWUMsSUFFL0I1SSxFQUFRVCxhQUFjLEtBQVFvSyxFQUFNOUcsSUFNdEM1RCxHQURBNEssRUFBU3pFLEVBQVVyRixJQUNSSyxPQUNIbkIsS0FDUDRLLEVBQVE1SyxJQUFRMEssRUFBTSxJQUFNQSxFQUFNLFVBQWEsSUFDOUNlLEdBQVliLEVBQVE1SyxJQUV0QjZLLEVBQWNELEVBQU9jLEtBQU0sS0FHNUIsSUFJQyxPQUhBOU0sRUFBS0QsTUFBTzhGLEVBQ1hxRyxFQUFXYSxpQkFBa0JkLElBRXZCcEcsRUFDTixNQUFRbUgsR0FDVHRFLEVBQXdCeEcsR0FBVSxHQU5uQyxRQVFNNEosSUFBUTlHLEdBQ1o3QyxFQUFROEssZ0JBQWlCLFFBUTlCLE9BQU94RixFQUFRdkYsRUFBU2lELFFBQVNxRSxFQUFPLE1BQVFySCxFQUFTMEQsRUFBUytGLEdBU25FLFNBQVNyRCxLQUNSLElBQUkyRSxFQUFPLEdBRVgsU0FBU0MsRUFBT0MsRUFBS2hILEdBUXBCLE9BTEs4RyxFQUFLbE4sS0FBTW9OLEVBQU0sS0FBUWhHLEVBQUtpRyxvQkFHM0JGLEVBQU9ELEVBQUtJLFNBRVhILEVBQU9DLEVBQU0sS0FBUWhILEVBRS9CLE9BQU8rRyxFQU9SLFNBQVNJLEdBQWNuTCxHQUV0QixPQURBQSxFQUFJNEMsSUFBWSxFQUNUNUMsRUFPUixTQUFTb0wsR0FBUXBMLEdBQ2hCLElBQUlxTCxFQUFLM08sRUFBU3lDLGNBQWUsWUFFakMsSUFDQyxRQUFTYSxFQUFJcUwsR0FDWixNQUFRL0IsR0FDVCxPQUFPLEVBSFIsUUFPTStCLEVBQUc1TCxZQUNQNEwsRUFBRzVMLFdBQVdDLFlBQWEyTCxHQUk1QkEsRUFBSyxNQVNQLFNBQVNDLEdBQVdDLEVBQU9DLEdBSTFCLElBSEEsSUFBSXRPLEVBQU1xTyxFQUFNbkgsTUFBTyxLQUN0QnBGLEVBQUk5QixFQUFJaUQsT0FFRG5CLEtBQ1BnRyxFQUFLeUcsV0FBWXZPLEVBQUs4QixJQUFRd00sRUFVaEMsU0FBU0UsR0FBY2xGLEVBQUdDLEdBQ3pCLElBQUlrRixFQUFNbEYsR0FBS0QsRUFDZG9GLEVBQU9ELEdBQXNCLElBQWZuRixFQUFFbEksVUFBaUMsSUFBZm1JLEVBQUVuSSxVQUNuQ2tJLEVBQUVxRixZQUFjcEYsRUFBRW9GLFlBR3BCLEdBQUtELEVBQ0osT0FBT0EsRUFJUixHQUFLRCxFQUNKLEtBQVVBLEVBQU1BLEVBQUlHLGFBQ25CLEdBQUtILElBQVFsRixFQUNaLE9BQVEsRUFLWCxPQUFPRCxFQUFJLEdBQUssRUFPakIsU0FBU3VGLEdBQW1Cdk4sR0FDM0IsT0FBTyxTQUFVMEMsR0FFaEIsTUFBZ0IsVUFETEEsRUFBS2dJLFNBQVM1RSxlQUNFcEQsRUFBSzFDLE9BQVNBLEdBUTNDLFNBQVN3TixHQUFvQnhOLEdBQzVCLE9BQU8sU0FBVTBDLEdBQ2hCLElBQUlnQixFQUFPaEIsRUFBS2dJLFNBQVM1RSxjQUN6QixPQUFrQixVQUFUcEMsR0FBNkIsV0FBVEEsSUFBdUJoQixFQUFLMUMsT0FBU0EsR0FRcEUsU0FBU3lOLEdBQXNCaEQsR0FHOUIsT0FBTyxTQUFVL0gsR0FLaEIsTUFBSyxTQUFVQSxFQVNUQSxFQUFLekIsYUFBZ0MsSUFBbEJ5QixFQUFLK0gsU0FHdkIsVUFBVy9ILEVBQ1YsVUFBV0EsRUFBS3pCLFdBQ2J5QixFQUFLekIsV0FBV3dKLFdBQWFBLEVBRTdCL0gsRUFBSytILFdBQWFBLEVBTXBCL0gsRUFBS2dMLGFBQWVqRCxHQUkxQi9ILEVBQUtnTCxjQUFnQmpELEdBQ3JCRixHQUFvQjdILEtBQVcrSCxFQUcxQi9ILEVBQUsrSCxXQUFhQSxFQUtkLFVBQVcvSCxHQUNmQSxFQUFLK0gsV0FBYUEsR0FZNUIsU0FBU2tELEdBQXdCbk0sR0FDaEMsT0FBT21MLEdBQWMsU0FBVWlCLEdBRTlCLE9BREFBLEdBQVlBLEVBQ0xqQixHQUFjLFNBQVUzQixFQUFNM0YsR0FNcEMsSUFMQSxJQUFJakMsRUFDSHlLLEVBQWVyTSxFQUFJLEdBQUl3SixFQUFLckosT0FBUWlNLEdBQ3BDcE4sRUFBSXFOLEVBQWFsTSxPQUdWbkIsS0FDRndLLEVBQVE1SCxFQUFJeUssRUFBY3JOLE1BQzlCd0ssRUFBTTVILEtBQVNpQyxFQUFTakMsR0FBTTRILEVBQU01SCxTQVl6QyxTQUFTMkksR0FBYXhLLEdBQ3JCLE9BQU9BLFFBQW1ELElBQWpDQSxFQUFRb0ssc0JBQXdDcEssRUFrckMxRSxJQUFNZixLQTlxQ05aLEVBQVVtRyxHQUFPbkcsUUFBVSxHQU8zQjhHLEVBQVFYLEdBQU9XLE1BQVEsU0FBVWhFLEdBQ2hDLElBQUlvTCxFQUFZcEwsRUFBS3FMLGFBQ3BCOUcsR0FBWXZFLEVBQUs2SSxlQUFpQjdJLEdBQU9zTCxnQkFLMUMsT0FBUXJFLEVBQU1tQyxLQUFNZ0MsR0FBYTdHLEdBQVdBLEVBQVF5RCxVQUFZLFNBUWpFbkUsRUFBY1IsR0FBT1EsWUFBYyxTQUFVakcsR0FDNUMsSUFBSTJOLEVBQVlDLEVBQ2YzTixFQUFNRCxFQUFPQSxFQUFLaUwsZUFBaUJqTCxFQUFPaUgsRUFPM0MsT0FBS2hILEdBQU9yQyxHQUE2QixJQUFqQnFDLEVBQUlULFVBQW1CUyxFQUFJeU4sa0JBTW5EL0csR0FEQS9JLEVBQVdxQyxHQUNReU4sZ0JBQ25COUcsR0FBa0JSLEVBQU94SSxHQVFwQnFKLEdBQWdCckosSUFDbEJnUSxFQUFZaFEsRUFBU2lRLGNBQWlCRCxFQUFVRSxNQUFRRixJQUdyREEsRUFBVUcsaUJBQ2RILEVBQVVHLGlCQUFrQixTQUFVL0gsR0FBZSxHQUcxQzRILEVBQVVJLGFBQ3JCSixFQUFVSSxZQUFhLFdBQVloSSxJQVNyQzFHLEVBQVFvTSxNQUFRWSxHQUFRLFNBQVVDLEdBRWpDLE9BREE1RixFQUFRakcsWUFBYTZMLEdBQUs3TCxZQUFhOUMsRUFBU3lDLGNBQWUsYUFDekIsSUFBeEJrTSxFQUFHVixtQkFDZlUsRUFBR1YsaUJBQWtCLHVCQUF3QnhLLFNBU2hEL0IsRUFBUTRJLFdBQWFvRSxHQUFRLFNBQVVDLEdBRXRDLE9BREFBLEVBQUcwQixVQUFZLEtBQ1AxQixFQUFHaE0sYUFBYyxlQU8xQmpCLEVBQVErTCxxQkFBdUJpQixHQUFRLFNBQVVDLEdBRWhELE9BREFBLEVBQUc3TCxZQUFhOUMsRUFBU3NRLGNBQWUsTUFDaEMzQixFQUFHbEIscUJBQXNCLEtBQU1oSyxTQUl4Qy9CLEVBQVFnTSx1QkFBeUI5QixHQUFRZ0MsS0FBTTVOLEVBQVMwTix3QkFNeERoTSxFQUFRNk8sUUFBVTdCLEdBQVEsU0FBVUMsR0FFbkMsT0FEQTVGLEVBQVFqRyxZQUFhNkwsR0FBS25CLEdBQUt0SCxHQUN2QmxHLEVBQVN3USxvQkFBc0J4USxFQUFTd1Esa0JBQW1CdEssR0FBVXpDLFNBSXpFL0IsRUFBUTZPLFNBQ1pqSSxFQUFLbUksT0FBTCxHQUFzQixTQUFVakQsR0FDL0IsSUFBSWtELEVBQVNsRCxFQUFHbkgsUUFBUzBGLEdBQVdqRSxHQUNwQyxPQUFPLFNBQVV0RCxHQUNoQixPQUFPQSxFQUFLN0IsYUFBYyxRQUFXK04sSUFHdkNwSSxFQUFLcUksS0FBTCxHQUFvQixTQUFVbkQsRUFBSW5LLEdBQ2pDLFFBQXVDLElBQTNCQSxFQUFRa0ssZ0JBQWtDdkUsRUFBaUIsQ0FDdEUsSUFBSXhFLEVBQU9uQixFQUFRa0ssZUFBZ0JDLEdBQ25DLE9BQU9oSixFQUFPLENBQUVBLEdBQVMsT0FJM0I4RCxFQUFLbUksT0FBTCxHQUF1QixTQUFVakQsR0FDaEMsSUFBSWtELEVBQVNsRCxFQUFHbkgsUUFBUzBGLEdBQVdqRSxHQUNwQyxPQUFPLFNBQVV0RCxHQUNoQixJQUFJcEMsT0FBd0MsSUFBMUJvQyxFQUFLb00sa0JBQ3RCcE0sRUFBS29NLGlCQUFrQixNQUN4QixPQUFPeE8sR0FBUUEsRUFBS2tGLFFBQVVvSixJQU1oQ3BJLEVBQUtxSSxLQUFMLEdBQW9CLFNBQVVuRCxFQUFJbkssR0FDakMsUUFBdUMsSUFBM0JBLEVBQVFrSyxnQkFBa0N2RSxFQUFpQixDQUN0RSxJQUFJNUcsRUFBTUUsRUFBRzJCLEVBQ1pPLEVBQU9uQixFQUFRa0ssZUFBZ0JDLEdBRWhDLEdBQUtoSixFQUFPLENBSVgsSUFEQXBDLEVBQU9vQyxFQUFLb00saUJBQWtCLFFBQ2pCeE8sRUFBS2tGLFFBQVVrRyxFQUMzQixNQUFPLENBQUVoSixHQU1WLElBRkFQLEVBQVFaLEVBQVFtTixrQkFBbUJoRCxHQUNuQ2xMLEVBQUksRUFDTWtDLEVBQU9QLEVBQU8zQixNQUV2QixJQURBRixFQUFPb0MsRUFBS29NLGlCQUFrQixRQUNqQnhPLEVBQUtrRixRQUFVa0csRUFDM0IsTUFBTyxDQUFFaEosR0FLWixNQUFPLE1BTVY4RCxFQUFLcUksS0FBTCxJQUFxQmpQLEVBQVErTCxxQkFDNUIsU0FBVW9ELEVBQUt4TixHQUNkLFlBQTZDLElBQWpDQSxFQUFRb0sscUJBQ1pwSyxFQUFRb0sscUJBQXNCb0QsR0FHMUJuUCxFQUFRaU0sSUFDWnRLLEVBQVE0SyxpQkFBa0I0QyxRQUQzQixHQUtSLFNBQVVBLEVBQUt4TixHQUNkLElBQUltQixFQUNIc00sRUFBTSxHQUNOeE8sRUFBSSxFQUdKeUUsRUFBVTFELEVBQVFvSyxxQkFBc0JvRCxHQUd6QyxHQUFhLE1BQVJBLEVBU0wsT0FBTzlKLEVBUk4sS0FBVXZDLEVBQU91QyxFQUFTekUsTUFDRixJQUFsQmtDLEVBQUs1QyxVQUNUa1AsRUFBSTVQLEtBQU1zRCxHQUlaLE9BQU9zTSxHQU1WeEksRUFBS3FJLEtBQUwsTUFBdUJqUCxFQUFRZ00sd0JBQTBCLFNBQVUyQyxFQUFXaE4sR0FDN0UsUUFBK0MsSUFBbkNBLEVBQVFxSyx3QkFBMEMxRSxFQUM3RCxPQUFPM0YsRUFBUXFLLHVCQUF3QjJDLElBVXpDbkgsRUFBZ0IsR0FPaEJELEVBQVksSUFFTHZILEVBQVFpTSxJQUFNL0IsR0FBUWdDLEtBQU01TixFQUFTaU8scUJBSTNDUyxHQUFRLFNBQVVDLEdBRWpCLElBQUlvQyxFQU9KaEksRUFBUWpHLFlBQWE2TCxHQUFLcUMsVUFBWSxVQUFZOUssRUFBVSxxQkFDMUNBLEVBQVUsa0VBT3ZCeUksRUFBR1YsaUJBQWtCLHdCQUF5QnhLLFFBQ2xEd0YsRUFBVS9ILEtBQU0sU0FBV2tKLEVBQWEsZ0JBS25DdUUsRUFBR1YsaUJBQWtCLGNBQWV4SyxRQUN6Q3dGLEVBQVUvSCxLQUFNLE1BQVFrSixFQUFhLGFBQWVELEVBQVcsS0FJMUR3RSxFQUFHVixpQkFBa0IsUUFBVS9ILEVBQVUsTUFBT3pDLFFBQ3JEd0YsRUFBVS9ILEtBQU0sT0FRakI2UCxFQUFRL1EsRUFBU3lDLGNBQWUsVUFDMUJHLGFBQWMsT0FBUSxJQUM1QitMLEVBQUc3TCxZQUFhaU8sR0FDVnBDLEVBQUdWLGlCQUFrQixhQUFjeEssUUFDeEN3RixFQUFVL0gsS0FBTSxNQUFRa0osRUFBYSxRQUFVQSxFQUFhLEtBQzNEQSxFQUFhLGdCQU1UdUUsRUFBR1YsaUJBQWtCLFlBQWF4SyxRQUN2Q3dGLEVBQVUvSCxLQUFNLFlBTVh5TixFQUFHVixpQkFBa0IsS0FBTy9ILEVBQVUsTUFBT3pDLFFBQ2xEd0YsRUFBVS9ILEtBQU0sWUFLakJ5TixFQUFHVixpQkFBa0IsUUFDckJoRixFQUFVL0gsS0FBTSxpQkFHakJ3TixHQUFRLFNBQVVDLEdBQ2pCQSxFQUFHcUMsVUFBWSxvRkFLZixJQUFJRCxFQUFRL1EsRUFBU3lDLGNBQWUsU0FDcENzTyxFQUFNbk8sYUFBYyxPQUFRLFVBQzVCK0wsRUFBRzdMLFlBQWFpTyxHQUFRbk8sYUFBYyxPQUFRLEtBSXpDK0wsRUFBR1YsaUJBQWtCLFlBQWF4SyxRQUN0Q3dGLEVBQVUvSCxLQUFNLE9BQVNrSixFQUFhLGVBS1csSUFBN0N1RSxFQUFHVixpQkFBa0IsWUFBYXhLLFFBQ3RDd0YsRUFBVS9ILEtBQU0sV0FBWSxhQUs3QjZILEVBQVFqRyxZQUFhNkwsR0FBS3BDLFVBQVcsRUFDYyxJQUE5Q29DLEVBQUdWLGlCQUFrQixhQUFjeEssUUFDdkN3RixFQUFVL0gsS0FBTSxXQUFZLGFBSzdCeU4sRUFBR1YsaUJBQWtCLFFBQ3JCaEYsRUFBVS9ILEtBQU0sWUFJWFEsRUFBUXVQLGdCQUFrQnJGLEdBQVFnQyxLQUFRekcsRUFBVTRCLEVBQVE1QixTQUNsRTRCLEVBQVFtSSx1QkFDUm5JLEVBQVFvSSxvQkFDUnBJLEVBQVFxSSxrQkFDUnJJLEVBQVFzSSxxQkFFUjNDLEdBQVEsU0FBVUMsR0FJakJqTixFQUFRNFAsa0JBQW9CbkssRUFBUXBHLEtBQU00TixFQUFJLEtBSTlDeEgsRUFBUXBHLEtBQU00TixFQUFJLGFBQ2xCekYsRUFBY2hJLEtBQU0sS0FBTXFKLEtBSTVCdEIsRUFBWUEsRUFBVXhGLFFBQVUsSUFBSWdILE9BQVF4QixFQUFVK0UsS0FBTSxNQUM1RDlFLEVBQWdCQSxFQUFjekYsUUFBVSxJQUFJZ0gsT0FBUXZCLEVBQWM4RSxLQUFNLE1BSXhFK0IsRUFBYW5FLEdBQVFnQyxLQUFNN0UsRUFBUXdJLHlCQUtuQ3BJLEVBQVc0RyxHQUFjbkUsR0FBUWdDLEtBQU03RSxFQUFRSSxVQUM5QyxTQUFVVyxFQUFHQyxHQUNaLElBQUl5SCxFQUF1QixJQUFmMUgsRUFBRWxJLFNBQWlCa0ksRUFBRWdHLGdCQUFrQmhHLEVBQ2xEMkgsRUFBTTFILEdBQUtBLEVBQUVoSCxXQUNkLE9BQU8rRyxJQUFNMkgsTUFBV0EsR0FBd0IsSUFBakJBLEVBQUk3UCxZQUNsQzRQLEVBQU1ySSxTQUNMcUksRUFBTXJJLFNBQVVzSSxHQUNoQjNILEVBQUV5SCx5QkFBOEQsR0FBbkN6SCxFQUFFeUgsd0JBQXlCRSxNQUczRCxTQUFVM0gsRUFBR0MsR0FDWixHQUFLQSxFQUNKLEtBQVVBLEVBQUlBLEVBQUVoSCxZQUNmLEdBQUtnSCxJQUFNRCxFQUNWLE9BQU8sRUFJVixPQUFPLEdBT1RELEVBQVlrRyxFQUNaLFNBQVVqRyxFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQWpCLEdBQWUsRUFDUixFQUlSLElBQUk0SSxHQUFXNUgsRUFBRXlILHlCQUEyQnhILEVBQUV3SCx3QkFDOUMsT0FBS0csSUFnQlUsR0FQZkEsR0FBWTVILEVBQUV1RCxlQUFpQnZELEtBQVNDLEVBQUVzRCxlQUFpQnRELEdBQzFERCxFQUFFeUgsd0JBQXlCeEgsR0FHM0IsS0FJR3JJLEVBQVFpUSxjQUFnQjVILEVBQUV3SCx3QkFBeUJ6SCxLQUFRNEgsRUFPekQ1SCxHQUFLOUosR0FBWThKLEVBQUV1RCxlQUFpQmhFLEdBQ3hDRixFQUFVRSxFQUFjUyxJQUNoQixFQU9KQyxHQUFLL0osR0FBWStKLEVBQUVzRCxlQUFpQmhFLEdBQ3hDRixFQUFVRSxFQUFjVSxHQUNqQixFQUlEbEIsRUFDSjFILEVBQVMwSCxFQUFXaUIsR0FBTTNJLEVBQVMwSCxFQUFXa0IsR0FDaEQsRUFHZSxFQUFWMkgsR0FBZSxFQUFJLElBRTNCLFNBQVU1SCxFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQWpCLEdBQWUsRUFDUixFQUdSLElBQUltRyxFQUNIM00sRUFBSSxFQUNKc1AsRUFBTTlILEVBQUUvRyxXQUNSME8sRUFBTTFILEVBQUVoSCxXQUNSOE8sRUFBSyxDQUFFL0gsR0FDUGdJLEVBQUssQ0FBRS9ILEdBR1IsSUFBTTZILElBQVFILEVBTWIsT0FBTzNILEdBQUs5SixHQUFZLEVBQ3ZCK0osR0FBSy9KLEVBQVcsRUFFaEI0UixHQUFPLEVBQ1BILEVBQU0sRUFDTjVJLEVBQ0UxSCxFQUFTMEgsRUFBV2lCLEdBQU0zSSxFQUFTMEgsRUFBV2tCLEdBQ2hELEVBR0ssR0FBSzZILElBQVFILEVBQ25CLE9BQU96QyxHQUFjbEYsRUFBR0MsR0FLekIsSUFEQWtGLEVBQU1uRixFQUNJbUYsRUFBTUEsRUFBSWxNLFlBQ25COE8sRUFBR0UsUUFBUzlDLEdBR2IsSUFEQUEsRUFBTWxGLEVBQ0lrRixFQUFNQSxFQUFJbE0sWUFDbkIrTyxFQUFHQyxRQUFTOUMsR0FJYixLQUFRNEMsRUFBSXZQLEtBQVF3UCxFQUFJeFAsSUFDdkJBLElBR0QsT0FBT0EsRUFHTjBNLEdBQWM2QyxFQUFJdlAsR0FBS3dQLEVBQUl4UCxJQU8zQnVQLEVBQUl2UCxJQUFPK0csR0FBZ0IsRUFDM0J5SSxFQUFJeFAsSUFBTytHLEVBQWUsRUFFMUIsSUFHS3JKLEdBR1I2SCxHQUFPVixRQUFVLFNBQVU2SyxFQUFNQyxHQUNoQyxPQUFPcEssR0FBUW1LLEVBQU0sS0FBTSxLQUFNQyxJQUdsQ3BLLEdBQU9vSixnQkFBa0IsU0FBVXpNLEVBQU13TixHQUd4QyxHQUZBM0osRUFBYTdELEdBRVI5QyxFQUFRdVAsaUJBQW1CakksSUFDOUJZLEVBQXdCb0ksRUFBTyxRQUM3QjlJLElBQWtCQSxFQUFjMEUsS0FBTW9FLE9BQ3RDL0ksSUFBa0JBLEVBQVUyRSxLQUFNb0UsSUFFckMsSUFDQyxJQUFJOU4sRUFBTWlELEVBQVFwRyxLQUFNeUQsRUFBTXdOLEdBRzlCLEdBQUs5TixHQUFPeEMsRUFBUTRQLG1CQUluQjlNLEVBQUt4RSxVQUF1QyxLQUEzQndFLEVBQUt4RSxTQUFTNEIsU0FDL0IsT0FBT3NDLEVBRVAsTUFBUTBJLEdBQ1RoRCxFQUF3Qm9JLEdBQU0sR0FJaEMsT0FBeUQsRUFBbERuSyxHQUFRbUssRUFBTWhTLEVBQVUsS0FBTSxDQUFFd0UsSUFBU2YsUUFHakRvRSxHQUFPc0IsU0FBVyxTQUFVOUYsRUFBU21CLEdBVXBDLE9BSE9uQixFQUFRZ0ssZUFBaUJoSyxJQUFhckQsR0FDNUNxSSxFQUFhaEYsR0FFUDhGLEVBQVU5RixFQUFTbUIsSUFHM0JxRCxHQUFPcUssS0FBTyxTQUFVMU4sRUFBTWdCLElBT3RCaEIsRUFBSzZJLGVBQWlCN0ksSUFBVXhFLEdBQ3RDcUksRUFBYTdELEdBR2QsSUFBSWxCLEVBQUtnRixFQUFLeUcsV0FBWXZKLEVBQUtvQyxlQUc5QnJGLEVBQU1lLEdBQU1oQyxFQUFPUCxLQUFNdUgsRUFBS3lHLFdBQVl2SixFQUFLb0MsZUFDOUN0RSxFQUFJa0IsRUFBTWdCLEdBQU93RCxRQUNqQi9DLEVBRUYsWUFBZUEsSUFBUjFELEVBQ05BLEVBQ0FiLEVBQVE0SSxhQUFldEIsRUFDdEJ4RSxFQUFLN0IsYUFBYzZDLElBQ2pCakQsRUFBTWlDLEVBQUtvTSxpQkFBa0JwTCxLQUFZakQsRUFBSTRQLFVBQzlDNVAsRUFBSStFLE1BQ0osTUFHSk8sR0FBT0UsT0FBUyxTQUFVcUssR0FDekIsT0FBU0EsRUFBTSxJQUFLL0wsUUFBUzJGLEdBQVlDLEtBRzFDcEUsR0FBT3RCLE1BQVEsU0FBVUMsR0FDeEIsTUFBTSxJQUFJdEcsTUFBTywwQ0FBNENzRyxJQU85RHFCLEdBQU93SyxXQUFhLFNBQVV0TCxHQUM3QixJQUFJdkMsRUFDSDhOLEVBQWEsR0FDYnBOLEVBQUksRUFDSjVDLEVBQUksRUFPTCxHQUpBd0csR0FBZ0JwSCxFQUFRNlEsaUJBQ3hCMUosR0FBYW5ILEVBQVE4USxZQUFjekwsRUFBUW5HLE1BQU8sR0FDbERtRyxFQUFRM0IsS0FBTXlFLEdBRVRmLEVBQWUsQ0FDbkIsS0FBVXRFLEVBQU91QyxFQUFTekUsTUFDcEJrQyxJQUFTdUMsRUFBU3pFLEtBQ3RCNEMsRUFBSW9OLEVBQVdwUixLQUFNb0IsSUFHdkIsS0FBUTRDLEtBQ1A2QixFQUFRMUIsT0FBUWlOLEVBQVlwTixHQUFLLEdBUW5DLE9BRkEyRCxFQUFZLEtBRUw5QixHQU9Sd0IsRUFBVVYsR0FBT1UsUUFBVSxTQUFVL0QsR0FDcEMsSUFBSXBDLEVBQ0g4QixFQUFNLEdBQ041QixFQUFJLEVBQ0pWLEVBQVc0QyxFQUFLNUMsU0FFakIsR0FBTUEsR0FRQyxHQUFrQixJQUFiQSxHQUErQixJQUFiQSxHQUErQixLQUFiQSxFQUFrQixDQUlqRSxHQUFpQyxpQkFBckI0QyxFQUFLaU8sWUFDaEIsT0FBT2pPLEVBQUtpTyxZQUlaLElBQU1qTyxFQUFPQSxFQUFLa08sV0FBWWxPLEVBQU1BLEVBQU9BLEVBQUs0SyxZQUMvQ2xMLEdBQU9xRSxFQUFTL0QsUUFHWixHQUFrQixJQUFiNUMsR0FBK0IsSUFBYkEsRUFDN0IsT0FBTzRDLEVBQUttTyxlQW5CWixLQUFVdlEsRUFBT29DLEVBQU1sQyxNQUd0QjRCLEdBQU9xRSxFQUFTbkcsR0FxQmxCLE9BQU84QixJQUdSb0UsRUFBT1QsR0FBTytLLFVBQVksQ0FHekJyRSxZQUFhLEdBRWJzRSxhQUFjcEUsR0FFZHhCLE1BQU9qQyxFQUVQK0QsV0FBWSxHQUVaNEIsS0FBTSxHQUVObUMsU0FBVSxDQUNUQyxJQUFLLENBQUV0RyxJQUFLLGFBQWMvSCxPQUFPLEdBQ2pDc08sSUFBSyxDQUFFdkcsSUFBSyxjQUNad0csSUFBSyxDQUFFeEcsSUFBSyxrQkFBbUIvSCxPQUFPLEdBQ3RDd08sSUFBSyxDQUFFekcsSUFBSyxvQkFHYjBHLFVBQVcsQ0FDVi9ILEtBQVEsU0FBVTZCLEdBV2pCLE9BVkFBLEVBQU8sR0FBTUEsRUFBTyxHQUFJNUcsUUFBUzBGLEdBQVdqRSxHQUc1Q21GLEVBQU8sSUFBUUEsRUFBTyxJQUFPQSxFQUFPLElBQ25DQSxFQUFPLElBQU8sSUFBSzVHLFFBQVMwRixHQUFXakUsR0FFcEIsT0FBZm1GLEVBQU8sS0FDWEEsRUFBTyxHQUFNLElBQU1BLEVBQU8sR0FBTSxLQUcxQkEsRUFBTXJNLE1BQU8sRUFBRyxJQUd4QjBLLE1BQVMsU0FBVTJCLEdBaUNsQixPQXJCQUEsRUFBTyxHQUFNQSxFQUFPLEdBQUlyRixjQUVVLFFBQTdCcUYsRUFBTyxHQUFJck0sTUFBTyxFQUFHLElBR25CcU0sRUFBTyxJQUNacEYsR0FBT3RCLE1BQU8wRyxFQUFPLElBS3RCQSxFQUFPLEtBQVNBLEVBQU8sR0FDdEJBLEVBQU8sSUFBUUEsRUFBTyxJQUFPLEdBQzdCLEdBQXFCLFNBQWZBLEVBQU8sSUFBaUMsUUFBZkEsRUFBTyxLQUN2Q0EsRUFBTyxLQUFXQSxFQUFPLEdBQU1BLEVBQU8sSUFBd0IsUUFBZkEsRUFBTyxLQUczQ0EsRUFBTyxJQUNsQnBGLEdBQU90QixNQUFPMEcsRUFBTyxJQUdmQSxHQUdSNUIsT0FBVSxTQUFVNEIsR0FDbkIsSUFBSW1HLEVBQ0hDLEdBQVlwRyxFQUFPLElBQU9BLEVBQU8sR0FFbEMsT0FBS2pDLEVBQVMsTUFBWTRDLEtBQU1YLEVBQU8sSUFDL0IsTUFJSEEsRUFBTyxHQUNYQSxFQUFPLEdBQU1BLEVBQU8sSUFBT0EsRUFBTyxJQUFPLEdBRzlCb0csR0FBWXZJLEVBQVE4QyxLQUFNeUYsS0FHbkNELEVBQVMzSyxFQUFVNEssR0FBVSxNQUc3QkQsRUFBU0MsRUFBU2xTLFFBQVMsSUFBS2tTLEVBQVM1UCxPQUFTMlAsR0FBV0MsRUFBUzVQLFVBR3hFd0osRUFBTyxHQUFNQSxFQUFPLEdBQUlyTSxNQUFPLEVBQUd3UyxHQUNsQ25HLEVBQU8sR0FBTW9HLEVBQVN6UyxNQUFPLEVBQUd3UyxJQUkxQm5HLEVBQU1yTSxNQUFPLEVBQUcsTUFJekI2UCxPQUFRLENBRVB0RixJQUFPLFNBQVVtSSxHQUNoQixJQUFJOUcsRUFBVzhHLEVBQWlCak4sUUFBUzBGLEdBQVdqRSxHQUFZRixjQUNoRSxNQUE0QixNQUFyQjBMLEVBQ04sV0FDQyxPQUFPLEdBRVIsU0FBVTlPLEdBQ1QsT0FBT0EsRUFBS2dJLFVBQVloSSxFQUFLZ0ksU0FBUzVFLGdCQUFrQjRFLElBSTNEdEIsTUFBUyxTQUFVbUYsR0FDbEIsSUFBSWtELEVBQVUvSixFQUFZNkcsRUFBWSxLQUV0QyxPQUFPa0QsSUFDSkEsRUFBVSxJQUFJOUksT0FBUSxNQUFRTCxFQUMvQixJQUFNaUcsRUFBWSxJQUFNakcsRUFBYSxTQUFhWixFQUNqRDZHLEVBQVcsU0FBVTdMLEdBQ3BCLE9BQU8rTyxFQUFRM0YsS0FDWSxpQkFBbkJwSixFQUFLNkwsV0FBMEI3TCxFQUFLNkwsZ0JBQ2QsSUFBdEI3TCxFQUFLN0IsY0FDWDZCLEVBQUs3QixhQUFjLFVBQ3BCLE9BS055SSxLQUFRLFNBQVU1RixFQUFNZ08sRUFBVUMsR0FDakMsT0FBTyxTQUFValAsR0FDaEIsSUFBSWtQLEVBQVM3TCxHQUFPcUssS0FBTTFOLEVBQU1nQixHQUVoQyxPQUFlLE1BQVZrTyxFQUNnQixPQUFiRixHQUVGQSxJQUlORSxHQUFVLEdBSVUsTUFBYkYsRUFBbUJFLElBQVdELEVBQ3ZCLE9BQWJELEVBQW9CRSxJQUFXRCxFQUNsQixPQUFiRCxFQUFvQkMsR0FBcUMsSUFBNUJDLEVBQU92UyxRQUFTc1MsR0FDaEMsT0FBYkQsRUFBb0JDLElBQW9DLEVBQTNCQyxFQUFPdlMsUUFBU3NTLEdBQ2hDLE9BQWJELEVBQW9CQyxHQUFTQyxFQUFPOVMsT0FBUTZTLEVBQU1oUSxVQUFhZ1EsRUFDbEQsT0FBYkQsR0FBMkYsR0FBckUsSUFBTUUsRUFBT3JOLFFBQVNtRSxFQUFhLEtBQVEsS0FBTXJKLFFBQVNzUyxHQUNuRSxPQUFiRCxJQUFvQkUsSUFBV0QsR0FBU0MsRUFBTzlTLE1BQU8sRUFBRzZTLEVBQU1oUSxPQUFTLEtBQVFnUSxFQUFRLFFBTzNGbkksTUFBUyxTQUFVeEosRUFBTTZSLEVBQU1DLEVBQVdsUCxFQUFPRSxHQUNoRCxJQUFJaVAsRUFBZ0MsUUFBdkIvUixFQUFLbEIsTUFBTyxFQUFHLEdBQzNCa1QsRUFBK0IsU0FBckJoUyxFQUFLbEIsT0FBUSxHQUN2Qm1ULEVBQWtCLFlBQVRKLEVBRVYsT0FBaUIsSUFBVmpQLEdBQXdCLElBQVRFLEVBR3JCLFNBQVVKLEdBQ1QsUUFBU0EsRUFBS3pCLFlBR2YsU0FBVXlCLEVBQU13UCxFQUFVQyxHQUN6QixJQUFJNUYsRUFBTzZGLEVBQWFDLEVBQVkvUixFQUFNZ1MsRUFBV0MsRUFDcEQ1SCxFQUFNb0gsR0FBV0MsRUFBVSxjQUFnQixrQkFDM0NRLEVBQVM5UCxFQUFLekIsV0FDZHlDLEVBQU91TyxHQUFVdlAsRUFBS2dJLFNBQVM1RSxjQUMvQjJNLEdBQVlOLElBQVFGLEVBQ3BCN0UsR0FBTyxFQUVSLEdBQUtvRixFQUFTLENBR2IsR0FBS1QsRUFBUyxDQUNiLEtBQVFwSCxHQUFNLENBRWIsSUFEQXJLLEVBQU9vQyxFQUNHcEMsRUFBT0EsRUFBTXFLLElBQ3RCLEdBQUtzSCxFQUNKM1IsRUFBS29LLFNBQVM1RSxnQkFBa0JwQyxFQUNkLElBQWxCcEQsRUFBS1IsU0FFTCxPQUFPLEVBS1R5UyxFQUFRNUgsRUFBZSxTQUFUM0ssSUFBb0J1UyxHQUFTLGNBRTVDLE9BQU8sRUFNUixHQUhBQSxFQUFRLENBQUVQLEVBQVVRLEVBQU81QixXQUFhNEIsRUFBT0UsV0FHMUNWLEdBQVdTLEdBa0JmLElBSEFyRixHQURBa0YsR0FEQS9GLEdBSEE2RixHQUpBQyxHQURBL1IsRUFBT2tTLEdBQ1lwTyxLQUFlOUQsRUFBTThELEdBQVksS0FJMUI5RCxFQUFLcVMsWUFDNUJOLEVBQVkvUixFQUFLcVMsVUFBYSxLQUVaM1MsSUFBVSxJQUNaLEtBQVF3SCxHQUFXK0UsRUFBTyxLQUN6QkEsRUFBTyxHQUMzQmpNLEVBQU9nUyxHQUFhRSxFQUFPM0gsV0FBWXlILEdBRTdCaFMsSUFBU2dTLEdBQWFoUyxHQUFRQSxFQUFNcUssS0FHM0N5QyxFQUFPa0YsRUFBWSxJQUFPQyxFQUFNckssT0FHbEMsR0FBdUIsSUFBbEI1SCxFQUFLUixZQUFvQnNOLEdBQVE5TSxJQUFTb0MsRUFBTyxDQUNyRDBQLEVBQWFwUyxHQUFTLENBQUV3SCxFQUFTOEssRUFBV2xGLEdBQzVDLFlBeUJGLEdBbEJLcUYsSUFhSnJGLEVBREFrRixHQURBL0YsR0FIQTZGLEdBSkFDLEdBREEvUixFQUFPb0MsR0FDWTBCLEtBQWU5RCxFQUFNOEQsR0FBWSxLQUkxQjlELEVBQUtxUyxZQUM1Qk4sRUFBWS9SLEVBQUtxUyxVQUFhLEtBRVozUyxJQUFVLElBQ1osS0FBUXdILEdBQVcrRSxFQUFPLEtBTWhDLElBQVRhLEVBR0osTUFBVTlNLElBQVNnUyxHQUFhaFMsR0FBUUEsRUFBTXFLLEtBQzNDeUMsRUFBT2tGLEVBQVksSUFBT0MsRUFBTXJLLFVBRTNCK0osRUFDTjNSLEVBQUtvSyxTQUFTNUUsZ0JBQWtCcEMsRUFDZCxJQUFsQnBELEVBQUtSLGNBQ0hzTixJQUdHcUYsS0FNSkwsR0FMQUMsRUFBYS9SLEVBQU04RCxLQUNoQjlELEVBQU04RCxHQUFZLEtBSUs5RCxFQUFLcVMsWUFDNUJOLEVBQVkvUixFQUFLcVMsVUFBYSxLQUVwQjNTLEdBQVMsQ0FBRXdILEVBQVM0RixJQUc3QjlNLElBQVNvQyxNQVVsQixPQURBMEssR0FBUXRLLEtBQ1FGLEdBQVd3SyxFQUFPeEssR0FBVSxHQUFxQixHQUFoQndLLEVBQU94SyxLQUs1RDJHLE9BQVUsU0FBVXFKLEVBQVFoRixHQU0zQixJQUFJaUYsRUFDSHJSLEVBQUtnRixFQUFLaUMsUUFBU21LLElBQVlwTSxFQUFLc00sV0FBWUYsRUFBTzlNLGdCQUN0REMsR0FBT3RCLE1BQU8sdUJBQXlCbU8sR0FLekMsT0FBS3BSLEVBQUk0QyxHQUNENUMsRUFBSW9NLEdBSUssRUFBWnBNLEVBQUdHLFFBQ1BrUixFQUFPLENBQUVELEVBQVFBLEVBQVEsR0FBSWhGLEdBQ3RCcEgsRUFBS3NNLFdBQVdyVCxlQUFnQm1ULEVBQU85TSxlQUM3QzZHLEdBQWMsU0FBVTNCLEVBQU0zRixHQUk3QixJQUhBLElBQUkwTixFQUNIQyxFQUFVeFIsRUFBSXdKLEVBQU00QyxHQUNwQnBOLEVBQUl3UyxFQUFRclIsT0FDTG5CLEtBRVB3SyxFQURBK0gsRUFBTTFULEVBQVMyTCxFQUFNZ0ksRUFBU3hTLE9BQ2I2RSxFQUFTME4sR0FBUUMsRUFBU3hTLE1BRzdDLFNBQVVrQyxHQUNULE9BQU9sQixFQUFJa0IsRUFBTSxFQUFHbVEsS0FJaEJyUixJQUlUaUgsUUFBUyxDQUdSd0ssSUFBT3RHLEdBQWMsU0FBVXJMLEdBSzlCLElBQUkyTixFQUFRLEdBQ1hoSyxFQUFVLEdBQ1ZpTyxFQUFVdE0sRUFBU3RGLEVBQVNpRCxRQUFTcUUsRUFBTyxPQUU3QyxPQUFPc0ssRUFBUzlPLEdBQ2Z1SSxHQUFjLFNBQVUzQixFQUFNM0YsRUFBUzZNLEVBQVVDLEdBTWhELElBTEEsSUFBSXpQLEVBQ0h5USxFQUFZRCxFQUFTbEksRUFBTSxLQUFNbUgsRUFBSyxJQUN0QzNSLEVBQUl3SyxFQUFLckosT0FHRm5CLE1BQ0FrQyxFQUFPeVEsRUFBVzNTLE1BQ3hCd0ssRUFBTXhLLEtBQVM2RSxFQUFTN0UsR0FBTWtDLE1BSWpDLFNBQVVBLEVBQU13UCxFQUFVQyxHQU16QixPQUxBbEQsRUFBTyxHQUFNdk0sRUFDYndRLEVBQVNqRSxFQUFPLEtBQU1rRCxFQUFLbE4sR0FHM0JnSyxFQUFPLEdBQU0sTUFDTGhLLEVBQVFpRCxTQUluQmtMLElBQU96RyxHQUFjLFNBQVVyTCxHQUM5QixPQUFPLFNBQVVvQixHQUNoQixPQUF5QyxFQUFsQ3FELEdBQVF6RSxFQUFVb0IsR0FBT2YsVUFJbEMwRixTQUFZc0YsR0FBYyxTQUFVL0wsR0FFbkMsT0FEQUEsRUFBT0EsRUFBSzJELFFBQVMwRixHQUFXakUsR0FDekIsU0FBVXRELEdBQ2hCLE9BQWtFLEdBQXpEQSxFQUFLaU8sYUFBZWxLLEVBQVMvRCxJQUFTckQsUUFBU3VCLE1BVzFEeVMsS0FBUTFHLEdBQWMsU0FBVTBHLEdBTy9CLE9BSk1wSyxFQUFZNkMsS0FBTXVILEdBQVEsS0FDL0J0TixHQUFPdEIsTUFBTyxxQkFBdUI0TyxHQUV0Q0EsRUFBT0EsRUFBSzlPLFFBQVMwRixHQUFXakUsR0FBWUYsY0FDckMsU0FBVXBELEdBQ2hCLElBQUk0USxFQUNKLEdBQ0MsR0FBT0EsRUFBV3BNLEVBQ2pCeEUsRUFBSzJRLEtBQ0wzUSxFQUFLN0IsYUFBYyxhQUFnQjZCLEVBQUs3QixhQUFjLFFBR3RELE9BREF5UyxFQUFXQSxFQUFTeE4saUJBQ0F1TixHQUEyQyxJQUFuQ0MsRUFBU2pVLFFBQVNnVSxFQUFPLFlBRTNDM1EsRUFBT0EsRUFBS3pCLGFBQWtDLElBQWxCeUIsRUFBSzVDLFVBQzdDLE9BQU8sS0FLVGdFLE9BQVUsU0FBVXBCLEdBQ25CLElBQUk2USxFQUFPbFYsRUFBT21WLFVBQVluVixFQUFPbVYsU0FBU0QsS0FDOUMsT0FBT0EsR0FBUUEsRUFBS3pVLE1BQU8sS0FBUTRELEVBQUtnSixJQUd6QytILEtBQVEsU0FBVS9RLEdBQ2pCLE9BQU9BLElBQVN1RSxHQUdqQnlNLE1BQVMsU0FBVWhSLEdBQ2xCLE9BQU9BLElBQVN4RSxFQUFTeVYsaUJBQ3JCelYsRUFBUzBWLFVBQVkxVixFQUFTMFYsZ0JBQzdCbFIsRUFBSzFDLE1BQVEwQyxFQUFLbVIsT0FBU25SLEVBQUtvUixXQUl0Q0MsUUFBV3RHLElBQXNCLEdBQ2pDaEQsU0FBWWdELElBQXNCLEdBRWxDdUcsUUFBVyxTQUFVdFIsR0FJcEIsSUFBSWdJLEVBQVdoSSxFQUFLZ0ksU0FBUzVFLGNBQzdCLE1BQXNCLFVBQWI0RSxLQUEwQmhJLEVBQUtzUixTQUN4QixXQUFidEosS0FBMkJoSSxFQUFLdVIsVUFHcENBLFNBQVksU0FBVXZSLEdBU3JCLE9BTEtBLEVBQUt6QixZQUVUeUIsRUFBS3pCLFdBQVdpVCxlQUdRLElBQWxCeFIsRUFBS3VSLFVBSWJFLE1BQVMsU0FBVXpSLEdBTWxCLElBQU1BLEVBQU9BLEVBQUtrTyxXQUFZbE8sRUFBTUEsRUFBT0EsRUFBSzRLLFlBQy9DLEdBQUs1SyxFQUFLNUMsU0FBVyxFQUNwQixPQUFPLEVBR1QsT0FBTyxHQUdSMFMsT0FBVSxTQUFVOVAsR0FDbkIsT0FBUThELEVBQUtpQyxRQUFMLE1BQXlCL0YsSUFJbEMwUixPQUFVLFNBQVUxUixHQUNuQixPQUFPbUgsRUFBUWlDLEtBQU1wSixFQUFLZ0ksV0FHM0J1RSxNQUFTLFNBQVV2TSxHQUNsQixPQUFPa0gsRUFBUWtDLEtBQU1wSixFQUFLZ0ksV0FHM0IySixPQUFVLFNBQVUzUixHQUNuQixJQUFJZ0IsRUFBT2hCLEVBQUtnSSxTQUFTNUUsY0FDekIsTUFBZ0IsVUFBVHBDLEdBQWtDLFdBQWRoQixFQUFLMUMsTUFBOEIsV0FBVDBELEdBR3REOUMsS0FBUSxTQUFVOEIsR0FDakIsSUFBSTBOLEVBQ0osTUFBdUMsVUFBaEMxTixFQUFLZ0ksU0FBUzVFLGVBQ04sU0FBZHBELEVBQUsxQyxPQUl1QyxPQUF4Q29RLEVBQU8xTixFQUFLN0IsYUFBYyxVQUNOLFNBQXZCdVAsRUFBS3RLLGdCQUlSbEQsTUFBUytLLEdBQXdCLFdBQ2hDLE1BQU8sQ0FBRSxLQUdWN0ssS0FBUTZLLEdBQXdCLFNBQVUyRyxFQUFlM1MsR0FDeEQsTUFBTyxDQUFFQSxFQUFTLEtBR25Ca0IsR0FBTThLLEdBQXdCLFNBQVUyRyxFQUFlM1MsRUFBUWlNLEdBQzlELE1BQU8sQ0FBRUEsRUFBVyxFQUFJQSxFQUFXak0sRUFBU2lNLEtBRzdDN0ssS0FBUTRLLEdBQXdCLFNBQVVFLEVBQWNsTSxHQUV2RCxJQURBLElBQUluQixFQUFJLEVBQ0FBLEVBQUltQixFQUFRbkIsR0FBSyxFQUN4QnFOLEVBQWF6TyxLQUFNb0IsR0FFcEIsT0FBT3FOLElBR1IzSyxJQUFPeUssR0FBd0IsU0FBVUUsRUFBY2xNLEdBRXRELElBREEsSUFBSW5CLEVBQUksRUFDQUEsRUFBSW1CLEVBQVFuQixHQUFLLEVBQ3hCcU4sRUFBYXpPLEtBQU1vQixHQUVwQixPQUFPcU4sSUFHUjBHLEdBQU01RyxHQUF3QixTQUFVRSxFQUFjbE0sRUFBUWlNLEdBTTdELElBTEEsSUFBSXBOLEVBQUlvTixFQUFXLEVBQ2xCQSxFQUFXak0sRUFDQUEsRUFBWGlNLEVBQ0NqTSxFQUNBaU0sRUFDYSxLQUFMcE4sR0FDVHFOLEVBQWF6TyxLQUFNb0IsR0FFcEIsT0FBT3FOLElBR1IyRyxHQUFNN0csR0FBd0IsU0FBVUUsRUFBY2xNLEVBQVFpTSxHQUU3RCxJQURBLElBQUlwTixFQUFJb04sRUFBVyxFQUFJQSxFQUFXak0sRUFBU2lNLElBQ2pDcE4sRUFBSW1CLEdBQ2JrTSxFQUFhek8sS0FBTW9CLEdBRXBCLE9BQU9xTixPQUtMcEYsUUFBTCxJQUF3QmpDLEVBQUtpQyxRQUFMLEdBR2IsQ0FBRWdNLE9BQU8sRUFBTUMsVUFBVSxFQUFNQyxNQUFNLEVBQU1DLFVBQVUsRUFBTUMsT0FBTyxHQUM1RXJPLEVBQUtpQyxRQUFTakksR0FBTStNLEdBQW1CL00sR0FFeEMsSUFBTUEsSUFBSyxDQUFFc1UsUUFBUSxFQUFNQyxPQUFPLEdBQ2pDdk8sRUFBS2lDLFFBQVNqSSxHQUFNZ04sR0FBb0JoTixHQUl6QyxTQUFTc1MsTUEwRVQsU0FBUzdHLEdBQVkrSSxHQUlwQixJQUhBLElBQUl4VSxFQUFJLEVBQ1AyQyxFQUFNNlIsRUFBT3JULE9BQ2JMLEVBQVcsR0FDSmQsRUFBSTJDLEVBQUszQyxJQUNoQmMsR0FBWTBULEVBQVF4VSxHQUFJZ0YsTUFFekIsT0FBT2xFLEVBR1IsU0FBU2tKLEdBQWUwSSxFQUFTK0IsRUFBWUMsR0FDNUMsSUFBSXZLLEVBQU1zSyxFQUFXdEssSUFDcEJ3SyxFQUFPRixFQUFXckssS0FDbEI0QixFQUFNMkksR0FBUXhLLEVBQ2R5SyxFQUFtQkYsR0FBZ0IsZUFBUjFJLEVBQzNCNkksRUFBVzVOLElBRVosT0FBT3dOLEVBQVdyUyxNQUdqQixTQUFVRixFQUFNbkIsRUFBUzRRLEdBQ3hCLEtBQVV6UCxFQUFPQSxFQUFNaUksSUFDdEIsR0FBdUIsSUFBbEJqSSxFQUFLNUMsVUFBa0JzVixFQUMzQixPQUFPbEMsRUFBU3hRLEVBQU1uQixFQUFTNFEsR0FHakMsT0FBTyxHQUlSLFNBQVV6UCxFQUFNbkIsRUFBUzRRLEdBQ3hCLElBQUltRCxFQUFVbEQsRUFBYUMsRUFDMUJrRCxFQUFXLENBQUUvTixFQUFTNk4sR0FHdkIsR0FBS2xELEdBQ0osS0FBVXpQLEVBQU9BLEVBQU1pSSxJQUN0QixJQUF1QixJQUFsQmpJLEVBQUs1QyxVQUFrQnNWLElBQ3RCbEMsRUFBU3hRLEVBQU1uQixFQUFTNFEsR0FDNUIsT0FBTyxPQUtWLEtBQVV6UCxFQUFPQSxFQUFNaUksSUFDdEIsR0FBdUIsSUFBbEJqSSxFQUFLNUMsVUFBa0JzVixFQVEzQixHQUhBaEQsR0FKQUMsRUFBYTNQLEVBQU0wQixLQUFlMUIsRUFBTTBCLEdBQVksS0FJMUIxQixFQUFLaVEsWUFDNUJOLEVBQVkzUCxFQUFLaVEsVUFBYSxJQUU1QndDLEdBQVFBLElBQVN6UyxFQUFLZ0ksU0FBUzVFLGNBQ25DcEQsRUFBT0EsRUFBTWlJLElBQVNqSSxNQUNoQixDQUFBLElBQU80UyxFQUFXbEQsRUFBYTVGLEtBQ3JDOEksRUFBVSxLQUFROU4sR0FBVzhOLEVBQVUsS0FBUUQsRUFHL0MsT0FBU0UsRUFBVSxHQUFNRCxFQUFVLEdBT25DLElBSEFsRCxFQUFhNUYsR0FBUStJLEdBR0osR0FBTXJDLEVBQVN4USxFQUFNbkIsRUFBUzRRLEdBQzlDLE9BQU8sRUFNWixPQUFPLEdBSVYsU0FBU3FELEdBQWdCQyxHQUN4QixPQUF5QixFQUFsQkEsRUFBUzlULE9BQ2YsU0FBVWUsRUFBTW5CLEVBQVM0USxHQUV4QixJQURBLElBQUkzUixFQUFJaVYsRUFBUzlULE9BQ1RuQixLQUNQLElBQU1pVixFQUFValYsR0FBS2tDLEVBQU1uQixFQUFTNFEsR0FDbkMsT0FBTyxFQUdULE9BQU8sR0FFUnNELEVBQVUsR0FZWixTQUFTQyxHQUFVdkMsRUFBVzFRLEVBQUtrTSxFQUFRcE4sRUFBUzRRLEdBT25ELElBTkEsSUFBSXpQLEVBQ0hpVCxFQUFlLEdBQ2ZuVixFQUFJLEVBQ0oyQyxFQUFNZ1EsRUFBVXhSLE9BQ2hCaVUsRUFBZ0IsTUFBUG5ULEVBRUZqQyxFQUFJMkMsRUFBSzNDLEtBQ1RrQyxFQUFPeVEsRUFBVzNTLE1BQ2xCbU8sSUFBVUEsRUFBUWpNLEVBQU1uQixFQUFTNFEsS0FDdEN3RCxFQUFhdlcsS0FBTXNELEdBQ2RrVCxHQUNKblQsRUFBSXJELEtBQU1vQixLQU1kLE9BQU9tVixFQUdSLFNBQVNFLEdBQVl4RSxFQUFXL1AsRUFBVTRSLEVBQVM0QyxFQUFZQyxFQUFZQyxHQU8xRSxPQU5LRixJQUFlQSxFQUFZMVIsS0FDL0IwUixFQUFhRCxHQUFZQyxJQUVyQkMsSUFBZUEsRUFBWTNSLEtBQy9CMlIsRUFBYUYsR0FBWUUsRUFBWUMsSUFFL0JySixHQUFjLFNBQVUzQixFQUFNL0YsRUFBUzFELEVBQVM0USxHQUN0RCxJQUFJOEQsRUFBTXpWLEVBQUdrQyxFQUNad1QsRUFBUyxHQUNUQyxFQUFVLEdBQ1ZDLEVBQWNuUixFQUFRdEQsT0FHdEJRLEVBQVE2SSxHQTVDWCxTQUEyQjFKLEVBQVUrVSxFQUFVcFIsR0FHOUMsSUFGQSxJQUFJekUsRUFBSSxFQUNQMkMsRUFBTWtULEVBQVMxVSxPQUNSbkIsRUFBSTJDLEVBQUszQyxJQUNoQnVGLEdBQVF6RSxFQUFVK1UsRUFBVTdWLEdBQUt5RSxHQUVsQyxPQUFPQSxFQXNDV3FSLENBQ2ZoVixHQUFZLElBQ1pDLEVBQVF6QixTQUFXLENBQUV5QixHQUFZQSxFQUNqQyxJQUlEZ1YsR0FBWWxGLElBQWVyRyxHQUFTMUosRUFFbkNhLEVBREF1VCxHQUFVdlQsRUFBTytULEVBQVE3RSxFQUFXOVAsRUFBUzRRLEdBRzlDcUUsRUFBYXRELEVBR1o2QyxJQUFnQi9LLEVBQU9xRyxFQUFZK0UsR0FBZU4sR0FHakQsR0FHQTdRLEVBQ0RzUixFQVFGLEdBTEtyRCxHQUNKQSxFQUFTcUQsRUFBV0MsRUFBWWpWLEVBQVM0USxHQUlyQzJELEVBTUosSUFMQUcsRUFBT1AsR0FBVWMsRUFBWUwsR0FDN0JMLEVBQVlHLEVBQU0sR0FBSTFVLEVBQVM0USxHQUcvQjNSLEVBQUl5VixFQUFLdFUsT0FDRG5CLE1BQ0FrQyxFQUFPdVQsRUFBTXpWLE1BQ25CZ1csRUFBWUwsRUFBUzNWLE1BQVcrVixFQUFXSixFQUFTM1YsSUFBUWtDLElBSy9ELEdBQUtzSSxHQUNKLEdBQUsrSyxHQUFjMUUsRUFBWSxDQUM5QixHQUFLMEUsRUFBYSxDQUtqQixJQUZBRSxFQUFPLEdBQ1B6VixFQUFJZ1csRUFBVzdVLE9BQ1BuQixNQUNBa0MsRUFBTzhULEVBQVloVyxLQUd6QnlWLEVBQUs3VyxLQUFRbVgsRUFBVy9WLEdBQU1rQyxHQUdoQ3FULEVBQVksS0FBUVMsRUFBYSxHQUFNUCxFQUFNOUQsR0FLOUMsSUFEQTNSLEVBQUlnVyxFQUFXN1UsT0FDUG5CLE1BQ0FrQyxFQUFPOFQsRUFBWWhXLE1BQ3NDLEdBQTdEeVYsRUFBT0YsRUFBYTFXLEVBQVMyTCxFQUFNdEksR0FBU3dULEVBQVExVixNQUV0RHdLLEVBQU1pTCxLQUFZaFIsRUFBU2dSLEdBQVN2VCxVQU92QzhULEVBQWFkLEdBQ1pjLElBQWV2UixFQUNkdVIsRUFBV2pULE9BQVE2UyxFQUFhSSxFQUFXN1UsUUFDM0M2VSxHQUVHVCxFQUNKQSxFQUFZLEtBQU05USxFQUFTdVIsRUFBWXJFLEdBRXZDL1MsRUFBS0QsTUFBTzhGLEVBQVN1UixLQU16QixTQUFTQyxHQUFtQnpCLEdBeUIzQixJQXhCQSxJQUFJMEIsRUFBY3hELEVBQVM5UCxFQUMxQkQsRUFBTTZSLEVBQU9yVCxPQUNiZ1YsRUFBa0JuUSxFQUFLd0ssU0FBVWdFLEVBQVEsR0FBSWhWLE1BQzdDNFcsRUFBbUJELEdBQW1CblEsRUFBS3dLLFNBQVUsS0FDckR4USxFQUFJbVcsRUFBa0IsRUFBSSxFQUcxQkUsRUFBZXJNLEdBQWUsU0FBVTlILEdBQ3ZDLE9BQU9BLElBQVNnVSxHQUNkRSxHQUFrQixHQUNyQkUsRUFBa0J0TSxHQUFlLFNBQVU5SCxHQUMxQyxPQUF3QyxFQUFqQ3JELEVBQVNxWCxFQUFjaFUsSUFDNUJrVSxHQUFrQixHQUNyQm5CLEVBQVcsQ0FBRSxTQUFVL1MsRUFBTW5CLEVBQVM0USxHQUNyQyxJQUFJL1AsR0FBU3VVLElBQXFCeEUsR0FBTzVRLElBQVl1RixNQUNsRDRQLEVBQWVuVixHQUFVekIsU0FDMUIrVyxFQUNBQyxHQURjcFUsRUFBTW5CLEVBQVM0USxHQUsvQixPQURBdUUsRUFBZSxLQUNSdFUsSUFHRDVCLEVBQUkyQyxFQUFLM0MsSUFDaEIsR0FBTzBTLEVBQVUxTSxFQUFLd0ssU0FBVWdFLEVBQVF4VSxHQUFJUixNQUMzQ3lWLEVBQVcsQ0FBRWpMLEdBQWVnTCxHQUFnQkMsR0FBWXZDLFFBQ2xELENBSU4sSUFIQUEsRUFBVTFNLEVBQUttSSxPQUFRcUcsRUFBUXhVLEdBQUlSLE1BQU9iLE1BQU8sS0FBTTZWLEVBQVF4VSxHQUFJNkUsVUFHckRqQixHQUFZLENBSXpCLElBREFoQixJQUFNNUMsRUFDRTRDLEVBQUlELElBQ05xRCxFQUFLd0ssU0FBVWdFLEVBQVE1UixHQUFJcEQsTUFEaEJvRCxLQUtqQixPQUFPeVMsR0FDRixFQUFKclYsR0FBU2dWLEdBQWdCQyxHQUNyQixFQUFKalYsR0FBU3lMLEdBR1QrSSxFQUNFbFcsTUFBTyxFQUFHMEIsRUFBSSxHQUNkdEIsT0FBUSxDQUFFc0csTUFBZ0MsTUFBekJ3UCxFQUFReFUsRUFBSSxHQUFJUixLQUFlLElBQU0sTUFDdER1RSxRQUFTcUUsRUFBTyxNQUNsQnNLLEVBQ0ExUyxFQUFJNEMsR0FBS3FULEdBQW1CekIsRUFBT2xXLE1BQU8wQixFQUFHNEMsSUFDN0NBLEVBQUlELEdBQU9zVCxHQUFxQnpCLEVBQVNBLEVBQU9sVyxNQUFPc0UsSUFDdkRBLEVBQUlELEdBQU84SSxHQUFZK0ksSUFHekJTLEVBQVNyVyxLQUFNOFQsR0FJakIsT0FBT3NDLEdBQWdCQyxHQUd4QixTQUFTc0IsR0FBMEJDLEVBQWlCQyxHQUduQyxTQUFmQyxFQUF5QmxNLEVBQU16SixFQUFTNFEsRUFBS2xOLEVBQVNrUyxHQUNyRCxJQUFJelUsRUFBTVUsRUFBRzhQLEVBQ1prRSxFQUFlLEVBQ2Y1VyxFQUFJLElBQ0oyUyxFQUFZbkksR0FBUSxHQUNwQnFNLEVBQWEsR0FDYkMsRUFBZ0J4USxFQUdoQjNFLEVBQVE2SSxHQUFRdU0sR0FBYS9RLEVBQUtxSSxLQUFMLElBQW9CLElBQUtzSSxHQUd0REssRUFBa0JoUSxHQUE0QixNQUFqQjhQLEVBQXdCLEVBQUlqVCxLQUFLQyxVQUFZLEdBQzFFbkIsRUFBTWhCLEVBQU1SLE9BY2IsSUFaS3dWLElBTUpyUSxFQUFtQnZGLEdBQVdyRCxHQUFZcUQsR0FBVzRWLEdBTTlDM1csSUFBTTJDLEdBQWdDLE9BQXZCVCxFQUFPUCxFQUFPM0IsSUFBZUEsSUFBTSxDQUN6RCxHQUFLK1csR0FBYTdVLEVBQU8sQ0FXeEIsSUFWQVUsRUFBSSxFQU1FN0IsR0FBV21CLEVBQUs2SSxlQUFpQnJOLElBQ3RDcUksRUFBYTdELEdBQ2J5UCxHQUFPakwsR0FFRWdNLEVBQVU4RCxFQUFpQjVULE1BQ3BDLEdBQUs4UCxFQUFTeFEsRUFBTW5CLEdBQVdyRCxFQUFVaVUsR0FBUSxDQUNoRGxOLEVBQVE3RixLQUFNc0QsR0FDZCxNQUdHeVUsSUFDSjNQLEVBQVVnUSxHQUtQQyxLQUdHL1UsR0FBUXdRLEdBQVd4USxJQUN6QjBVLElBSUlwTSxHQUNKbUksRUFBVS9ULEtBQU1zRCxJQWdCbkIsR0FUQTBVLEdBQWdCNVcsRUFTWGlYLEdBQVNqWCxJQUFNNFcsRUFBZSxDQUVsQyxJQURBaFUsRUFBSSxFQUNNOFAsRUFBVStELEVBQWE3VCxNQUNoQzhQLEVBQVNDLEVBQVdrRSxFQUFZOVYsRUFBUzRRLEdBRzFDLEdBQUtuSCxFQUFPLENBR1gsR0FBb0IsRUFBZm9NLEVBQ0osS0FBUTVXLEtBQ0MyUyxFQUFXM1MsSUFBTzZXLEVBQVk3VyxLQUNyQzZXLEVBQVk3VyxHQUFNMEgsRUFBSWpKLEtBQU1nRyxJQU0vQm9TLEVBQWEzQixHQUFVMkIsR0FJeEJqWSxFQUFLRCxNQUFPOEYsRUFBU29TLEdBR2hCRixJQUFjbk0sR0FBNEIsRUFBcEJxTSxFQUFXMVYsUUFDRyxFQUF0Q3lWLEVBQWVILEVBQVl0VixRQUU3Qm9FLEdBQU93SyxXQUFZdEwsR0FVckIsT0FMS2tTLElBQ0ozUCxFQUFVZ1EsRUFDVjFRLEVBQW1Cd1EsR0FHYm5FLEVBcEhULElBQUlzRSxFQUE2QixFQUFyQlIsRUFBWXRWLE9BQ3ZCNFYsRUFBcUMsRUFBekJQLEVBQWdCclYsT0FzSDdCLE9BQU84VixFQUNOOUssR0FBY3VLLEdBQ2RBLEVBdUxGLE9BdHBCQXBFLEdBQVdsUixVQUFZNEUsRUFBS2tSLFFBQVVsUixFQUFLaUMsUUFDM0NqQyxFQUFLc00sV0FBYSxJQUFJQSxHQUV0Qm5NLEVBQVdaLEdBQU9ZLFNBQVcsU0FBVXJGLEVBQVVxVyxHQUNoRCxJQUFJM0UsRUFBUzdILEVBQU82SixFQUFRaFYsRUFDM0I0WCxFQUFPeE0sRUFBUXlNLEVBQ2ZDLEVBQVNsUSxFQUFZdEcsRUFBVyxLQUVqQyxHQUFLd1csRUFDSixPQUFPSCxFQUFZLEVBQUlHLEVBQU9oWixNQUFPLEdBT3RDLElBSkE4WSxFQUFRdFcsRUFDUjhKLEVBQVMsR0FDVHlNLEVBQWFyUixFQUFLNkssVUFFVnVHLEdBQVEsQ0EyQmYsSUFBTTVYLEtBeEJBZ1QsS0FBYTdILEVBQVF0QyxFQUFPMkMsS0FBTW9NLE1BQ2xDek0sSUFHSnlNLEVBQVFBLEVBQU05WSxNQUFPcU0sRUFBTyxHQUFJeEosU0FBWWlXLEdBRTdDeE0sRUFBT2hNLEtBQVE0VixFQUFTLEtBR3pCaEMsR0FBVSxHQUdIN0gsRUFBUXJDLEVBQWEwQyxLQUFNb00sTUFDakM1RSxFQUFVN0gsRUFBTXVCLFFBQ2hCc0ksRUFBTzVWLEtBQU0sQ0FDWm9HLE1BQU93TixFQUdQaFQsS0FBTW1MLEVBQU8sR0FBSTVHLFFBQVNxRSxFQUFPLE9BRWxDZ1AsRUFBUUEsRUFBTTlZLE1BQU9rVSxFQUFRclIsU0FJaEI2RSxFQUFLbUksU0FDWHhELEVBQVFqQyxFQUFXbEosR0FBT3dMLEtBQU1vTSxLQUFnQkMsRUFBWTdYLE1BQ2hFbUwsRUFBUTBNLEVBQVk3WCxHQUFRbUwsTUFDOUI2SCxFQUFVN0gsRUFBTXVCLFFBQ2hCc0ksRUFBTzVWLEtBQU0sQ0FDWm9HLE1BQU93TixFQUNQaFQsS0FBTUEsRUFDTnFGLFFBQVM4RixJQUVWeU0sRUFBUUEsRUFBTTlZLE1BQU9rVSxFQUFRclIsU0FJL0IsSUFBTXFSLEVBQ0wsTUFPRixPQUFPMkUsRUFDTkMsRUFBTWpXLE9BQ05pVyxFQUNDN1IsR0FBT3RCLE1BQU9uRCxHQUdkc0csRUFBWXRHLEVBQVU4SixHQUFTdE0sTUFBTyxJQTRaekM4SCxFQUFVYixHQUFPYSxRQUFVLFNBQVV0RixFQUFVNkosR0FDOUMsSUFBSTNLLEVBQ0h5VyxFQUFjLEdBQ2RELEVBQWtCLEdBQ2xCYyxFQUFTalEsRUFBZXZHLEVBQVcsS0FFcEMsSUFBTXdXLEVBQVMsQ0FPZCxJQURBdFgsR0FGQzJLLEVBREtBLEdBQ0d4RSxFQUFVckYsSUFFVEssT0FDRm5CLE1BQ1BzWCxFQUFTckIsR0FBbUJ0TCxFQUFPM0ssS0FDdEI0RCxHQUNaNlMsRUFBWTdYLEtBQU0wWSxHQUVsQmQsRUFBZ0I1WCxLQUFNMFksSUFLeEJBLEVBQVNqUSxFQUNSdkcsRUFDQXlWLEdBQTBCQyxFQUFpQkMsS0FJckMzVixTQUFXQSxFQUVuQixPQUFPd1csR0FZUmpSLEVBQVNkLEdBQU9jLE9BQVMsU0FBVXZGLEVBQVVDLEVBQVMwRCxFQUFTK0YsR0FDOUQsSUFBSXhLLEVBQUd3VSxFQUFRK0MsRUFBTy9YLEVBQU02TyxFQUMzQm1KLEVBQStCLG1CQUFiMVcsR0FBMkJBLEVBQzdDNkosR0FBU0gsR0FBUXJFLEVBQVlyRixFQUFXMFcsRUFBUzFXLFVBQVlBLEdBTTlELEdBSkEyRCxFQUFVQSxHQUFXLEdBSUMsSUFBakJrRyxFQUFNeEosT0FBZSxDQUl6QixHQUFxQixHQURyQnFULEVBQVM3SixFQUFPLEdBQU1BLEVBQU8sR0FBSXJNLE1BQU8sSUFDNUI2QyxRQUErQyxRQUEvQm9XLEVBQVEvQyxFQUFRLElBQU1oVixNQUM1QixJQUFyQnVCLEVBQVF6QixVQUFrQm9ILEdBQWtCVixFQUFLd0ssU0FBVWdFLEVBQVEsR0FBSWhWLE1BQVMsQ0FJaEYsS0FGQXVCLEdBQVlpRixFQUFLcUksS0FBTCxHQUFtQmtKLEVBQU0xUyxRQUFTLEdBQzVDZCxRQUFTMEYsR0FBV2pFLEdBQWF6RSxJQUFhLElBQU0sSUFFckQsT0FBTzBELEVBR0krUyxJQUNYelcsRUFBVUEsRUFBUU4sWUFHbkJLLEVBQVdBLEVBQVN4QyxNQUFPa1csRUFBT3RJLFFBQVFsSCxNQUFNN0QsUUFLakQsSUFEQW5CLEVBQUkwSSxFQUFTLGFBQW1CNEMsS0FBTXhLLEdBQWEsRUFBSTBULEVBQU9yVCxPQUN0RG5CLE1BQ1B1WCxFQUFRL0MsRUFBUXhVLElBR1hnRyxFQUFLd0ssU0FBWWhSLEVBQU8rWCxFQUFNL1gsUUFHbkMsSUFBTzZPLEVBQU9ySSxFQUFLcUksS0FBTTdPLE1BR2pCZ0wsRUFBTzZELEVBQ2JrSixFQUFNMVMsUUFBUyxHQUFJZCxRQUFTMEYsR0FBV2pFLEdBQ3ZDZ0UsR0FBUzhCLEtBQU1rSixFQUFRLEdBQUloVixPQUFVK0wsR0FBYXhLLEVBQVFOLGFBQ3pETSxJQUNJLENBS0wsR0FGQXlULEVBQU96UixPQUFRL0MsRUFBRyxLQUNsQmMsRUFBVzBKLEVBQUtySixRQUFVc0ssR0FBWStJLElBR3JDLE9BREE1VixFQUFLRCxNQUFPOEYsRUFBUytGLEdBQ2QvRixFQUdSLE9BZUosT0FQRStTLEdBQVlwUixFQUFTdEYsRUFBVTZKLElBQ2hDSCxFQUNBekosR0FDQzJGLEVBQ0RqQyxHQUNDMUQsR0FBV3lJLEdBQVM4QixLQUFNeEssSUFBY3lLLEdBQWF4SyxFQUFRTixhQUFnQk0sR0FFeEUwRCxHQU1SckYsRUFBUThRLFdBQWF0TSxFQUFRd0IsTUFBTyxJQUFLdEMsS0FBTXlFLEdBQVltRSxLQUFNLE1BQVM5SCxFQUkxRXhFLEVBQVE2USxtQkFBcUJ6SixFQUc3QlQsSUFJQTNHLEVBQVFpUSxhQUFlakQsR0FBUSxTQUFVQyxHQUd4QyxPQUE0RSxFQUFyRUEsRUFBRzRDLHdCQUF5QnZSLEVBQVN5QyxjQUFlLGVBTXREaU0sR0FBUSxTQUFVQyxHQUV2QixPQURBQSxFQUFHcUMsVUFBWSxtQkFDaUMsTUFBekNyQyxFQUFHK0QsV0FBVy9QLGFBQWMsV0FFbkNpTSxHQUFXLHlCQUEwQixTQUFVcEssRUFBTWdCLEVBQU1nRCxHQUMxRCxJQUFNQSxFQUNMLE9BQU9oRSxFQUFLN0IsYUFBYzZDLEVBQTZCLFNBQXZCQSxFQUFLb0MsY0FBMkIsRUFBSSxLQU9qRWxHLEVBQVE0SSxZQUFlb0UsR0FBUSxTQUFVQyxHQUc5QyxPQUZBQSxFQUFHcUMsVUFBWSxXQUNmckMsRUFBRytELFdBQVc5UCxhQUFjLFFBQVMsSUFDWSxLQUExQytMLEVBQUcrRCxXQUFXL1AsYUFBYyxZQUVuQ2lNLEdBQVcsUUFBUyxTQUFVcEssRUFBTXVWLEVBQU92UixHQUMxQyxJQUFNQSxHQUF5QyxVQUFoQ2hFLEVBQUtnSSxTQUFTNUUsY0FDNUIsT0FBT3BELEVBQUt3VixlQU9UdEwsR0FBUSxTQUFVQyxHQUN2QixPQUF3QyxNQUFqQ0EsRUFBR2hNLGFBQWMsZUFFeEJpTSxHQUFXekUsRUFBVSxTQUFVM0YsRUFBTWdCLEVBQU1nRCxHQUMxQyxJQUFJakcsRUFDSixJQUFNaUcsRUFDTCxPQUF3QixJQUFqQmhFLEVBQU1nQixHQUFrQkEsRUFBS29DLGVBQ2pDckYsRUFBTWlDLEVBQUtvTSxpQkFBa0JwTCxLQUFZakQsRUFBSTRQLFVBQzlDNVAsRUFBSStFLE1BQ0osT0FLRU8sR0ExNEVMLENBNDRFRzFILEdBSUxnRCxFQUFPd04sS0FBTzlJLEVBQ2QxRSxFQUFPNk8sS0FBT25LLEVBQU8rSyxVQUdyQnpQLEVBQU82TyxLQUFNLEtBQVE3TyxFQUFPNk8sS0FBS3pILFFBQ2pDcEgsRUFBT2tQLFdBQWFsUCxFQUFPOFcsT0FBU3BTLEVBQU93SyxXQUMzQ2xQLEVBQU9ULEtBQU9tRixFQUFPVSxRQUNyQnBGLEVBQU8rVyxTQUFXclMsRUFBT1csTUFDekJyRixFQUFPZ0csU0FBV3RCLEVBQU9zQixTQUN6QmhHLEVBQU9nWCxlQUFpQnRTLEVBQU9FLE9BS3JCLFNBQU4wRSxFQUFnQmpJLEVBQU1pSSxFQUFLMk4sR0FJOUIsSUFIQSxJQUFJdEYsRUFBVSxHQUNidUYsT0FBcUJwVSxJQUFWbVUsR0FFRjVWLEVBQU9BLEVBQU1pSSxLQUE2QixJQUFsQmpJLEVBQUs1QyxVQUN0QyxHQUF1QixJQUFsQjRDLEVBQUs1QyxTQUFpQixDQUMxQixHQUFLeVksR0FBWWxYLEVBQVFxQixHQUFPOFYsR0FBSUYsR0FDbkMsTUFFRHRGLEVBQVE1VCxLQUFNc0QsR0FHaEIsT0FBT3NRLEVBSU8sU0FBWHlGLEVBQXFCQyxFQUFHaFcsR0FHM0IsSUFGQSxJQUFJc1EsRUFBVSxHQUVOMEYsRUFBR0EsRUFBSUEsRUFBRXBMLFlBQ0ksSUFBZm9MLEVBQUU1WSxVQUFrQjRZLElBQU1oVyxHQUM5QnNRLEVBQVE1VCxLQUFNc1osR0FJaEIsT0FBTzFGLEVBekJSLElBNkJJMkYsRUFBZ0J0WCxFQUFPNk8sS0FBSy9FLE1BQU16QixhQUl0QyxTQUFTZ0IsRUFBVWhJLEVBQU1nQixHQUV2QixPQUFPaEIsRUFBS2dJLFVBQVloSSxFQUFLZ0ksU0FBUzVFLGdCQUFrQnBDLEVBQUtvQyxjQUcvRCxJQUFJOFMsRUFBZSxrRUFLbkIsU0FBU0MsRUFBUTFJLEVBQVUySSxFQUFXN0YsR0FDckMsT0FBS3BULEVBQVlpWixHQUNUelgsRUFBTzJCLEtBQU1tTixFQUFVLFNBQVV6TixFQUFNbEMsR0FDN0MsUUFBU3NZLEVBQVU3WixLQUFNeUQsRUFBTWxDLEVBQUdrQyxLQUFXdVEsSUFLMUM2RixFQUFVaFosU0FDUHVCLEVBQU8yQixLQUFNbU4sRUFBVSxTQUFVek4sR0FDdkMsT0FBU0EsSUFBU29XLElBQWdCN0YsSUFLVixpQkFBZDZGLEVBQ0p6WCxFQUFPMkIsS0FBTW1OLEVBQVUsU0FBVXpOLEdBQ3ZDLE9BQTRDLEVBQW5DckQsRUFBUUosS0FBTTZaLEVBQVdwVyxLQUFrQnVRLElBSy9DNVIsRUFBT3NOLE9BQVFtSyxFQUFXM0ksRUFBVThDLEdBRzVDNVIsRUFBT3NOLE9BQVMsU0FBVXVCLEVBQU0vTixFQUFPOFEsR0FDdEMsSUFBSXZRLEVBQU9QLEVBQU8sR0FNbEIsT0FKSzhRLElBQ0ovQyxFQUFPLFFBQVVBLEVBQU8sS0FHSCxJQUFqQi9OLEVBQU1SLFFBQWtDLElBQWxCZSxFQUFLNUMsU0FDeEJ1QixFQUFPd04sS0FBS00sZ0JBQWlCek0sRUFBTXdOLEdBQVMsQ0FBRXhOLEdBQVMsR0FHeERyQixFQUFPd04sS0FBS3hKLFFBQVM2SyxFQUFNN08sRUFBTzJCLEtBQU1iLEVBQU8sU0FBVU8sR0FDL0QsT0FBeUIsSUFBbEJBLEVBQUs1QyxhQUlkdUIsRUFBT0csR0FBR2dDLE9BQVEsQ0FDakJxTCxLQUFNLFNBQVV2TixHQUNmLElBQUlkLEVBQUc0QixFQUNOZSxFQUFNN0UsS0FBS3FELE9BQ1hvWCxFQUFPemEsS0FFUixHQUF5QixpQkFBYmdELEVBQ1gsT0FBT2hELEtBQUs0RCxVQUFXYixFQUFRQyxHQUFXcU4sT0FBUSxXQUNqRCxJQUFNbk8sRUFBSSxFQUFHQSxFQUFJMkMsRUFBSzNDLElBQ3JCLEdBQUthLEVBQU9nRyxTQUFVMFIsRUFBTXZZLEdBQUtsQyxNQUNoQyxPQUFPLEtBUVgsSUFGQThELEVBQU05RCxLQUFLNEQsVUFBVyxJQUVoQjFCLEVBQUksRUFBR0EsRUFBSTJDLEVBQUszQyxJQUNyQmEsRUFBT3dOLEtBQU12TixFQUFVeVgsRUFBTXZZLEdBQUs0QixHQUduQyxPQUFhLEVBQU5lLEVBQVU5QixFQUFPa1AsV0FBWW5PLEdBQVFBLEdBRTdDdU0sT0FBUSxTQUFVck4sR0FDakIsT0FBT2hELEtBQUs0RCxVQUFXMlcsRUFBUXZhLEtBQU1nRCxHQUFZLElBQUksS0FFdEQyUixJQUFLLFNBQVUzUixHQUNkLE9BQU9oRCxLQUFLNEQsVUFBVzJXLEVBQVF2YSxLQUFNZ0QsR0FBWSxJQUFJLEtBRXREa1gsR0FBSSxTQUFVbFgsR0FDYixRQUFTdVgsRUFDUnZhLEtBSW9CLGlCQUFiZ0QsR0FBeUJxWCxFQUFjN00sS0FBTXhLLEdBQ25ERCxFQUFRQyxHQUNSQSxHQUFZLElBQ2IsR0FDQ0ssVUFTSixJQUFJcVgsRUFNSGpQLEVBQWEsdUNBRU4xSSxFQUFPRyxHQUFHQyxLQUFPLFNBQVVILEVBQVVDLEVBQVNrUyxHQUNwRCxJQUFJdEksRUFBT3pJLEVBR1gsSUFBTXBCLEVBQ0wsT0FBT2hELEtBUVIsR0FIQW1WLEVBQU9BLEdBQVF1RixFQUdVLGlCQUFiMVgsRUFvRUwsT0FBS0EsRUFBU3hCLFVBQ3BCeEIsS0FBTSxHQUFNZ0QsRUFDWmhELEtBQUtxRCxPQUFTLEVBQ1ByRCxNQUlJdUIsRUFBWXlCLFFBQ0Q2QyxJQUFmc1AsRUFBS3dGLE1BQ1h4RixFQUFLd0YsTUFBTzNYLEdBR1pBLEVBQVVELEdBR0xBLEVBQU8yRCxVQUFXMUQsRUFBVWhELE1BdEVsQyxLQVBDNk0sRUFMc0IsTUFBbEI3SixFQUFVLElBQ3NCLE1BQXBDQSxFQUFVQSxFQUFTSyxPQUFTLElBQ1QsR0FBbkJMLEVBQVNLLE9BR0QsQ0FBRSxLQUFNTCxFQUFVLE1BR2xCeUksRUFBV3lCLEtBQU1sSyxNQUlWNkosRUFBTyxJQUFRNUosRUE2Q3hCLE9BQU1BLEdBQVdBLEVBQVFNLFFBQ3RCTixHQUFXa1MsR0FBTzVFLEtBQU12TixHQUsxQmhELEtBQUt3RCxZQUFhUCxHQUFVc04sS0FBTXZOLEdBaER6QyxHQUFLNkosRUFBTyxHQUFNLENBWWpCLEdBWEE1SixFQUFVQSxhQUFtQkYsRUFBU0UsRUFBUyxHQUFNQSxFQUlyREYsRUFBT2dCLE1BQU8vRCxLQUFNK0MsRUFBTzZYLFVBQzFCL04sRUFBTyxHQUNQNUosR0FBV0EsRUFBUXpCLFNBQVd5QixFQUFRZ0ssZUFBaUJoSyxFQUFVckQsR0FDakUsSUFJSTBhLEVBQVc5TSxLQUFNWCxFQUFPLEtBQVM5SixFQUFPMkMsY0FBZXpDLEdBQzNELElBQU00SixLQUFTNUosRUFHVDFCLEVBQVl2QixLQUFNNk0sSUFDdEI3TSxLQUFNNk0sR0FBUzVKLEVBQVM0SixJQUl4QjdNLEtBQUs4UixLQUFNakYsRUFBTzVKLEVBQVM0SixJQUs5QixPQUFPN00sS0FZUCxPQVJBb0UsRUFBT3hFLEVBQVN1TixlQUFnQk4sRUFBTyxPQUt0QzdNLEtBQU0sR0FBTW9FLEVBQ1pwRSxLQUFLcUQsT0FBUyxHQUVSckQsT0FpQ1BzRCxVQUFZUCxFQUFPRyxHQUd4QndYLEVBQWEzWCxFQUFRbkQsR0FHckIsSUFBSWliLEVBQWUsaUNBR2xCQyxFQUFtQixDQUNsQkMsVUFBVSxFQUNWQyxVQUFVLEVBQ1YxTyxNQUFNLEVBQ04yTyxNQUFNLEdBb0ZSLFNBQVNDLEVBQVNyTSxFQUFLeEMsR0FDdEIsTUFBVXdDLEVBQU1BLEVBQUt4QyxLQUE0QixJQUFqQndDLEVBQUlyTixXQUNwQyxPQUFPcU4sRUFuRlI5TCxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQjRQLElBQUssU0FBVXRQLEdBQ2QsSUFBSTJWLEVBQVVwWSxFQUFReUMsRUFBUXhGLE1BQzdCb2IsRUFBSUQsRUFBUTlYLE9BRWIsT0FBT3JELEtBQUtxUSxPQUFRLFdBRW5CLElBREEsSUFBSW5PLEVBQUksRUFDQUEsRUFBSWtaLEVBQUdsWixJQUNkLEdBQUthLEVBQU9nRyxTQUFVL0ksS0FBTW1iLEVBQVNqWixJQUNwQyxPQUFPLEtBTVhtWixRQUFTLFNBQVU3SSxFQUFXdlAsR0FDN0IsSUFBSTRMLEVBQ0gzTSxFQUFJLEVBQ0prWixFQUFJcGIsS0FBS3FELE9BQ1RxUixFQUFVLEdBQ1Z5RyxFQUErQixpQkFBZDNJLEdBQTBCelAsRUFBUXlQLEdBR3BELElBQU02SCxFQUFjN00sS0FBTWdGLEdBQ3pCLEtBQVF0USxFQUFJa1osRUFBR2xaLElBQ2QsSUFBTTJNLEVBQU03TyxLQUFNa0MsR0FBSzJNLEdBQU9BLElBQVE1TCxFQUFTNEwsRUFBTUEsRUFBSWxNLFdBR3hELEdBQUtrTSxFQUFJck4sU0FBVyxLQUFRMlosR0FDSCxFQUF4QkEsRUFBUUcsTUFBT3pNLEdBR0UsSUFBakJBLEVBQUlyTixVQUNIdUIsRUFBT3dOLEtBQUtNLGdCQUFpQmhDLEVBQUsyRCxJQUFnQixDQUVuRGtDLEVBQVE1VCxLQUFNK04sR0FDZCxNQU1KLE9BQU83TyxLQUFLNEQsVUFBNEIsRUFBakI4USxFQUFRclIsT0FBYU4sRUFBT2tQLFdBQVl5QyxHQUFZQSxJQUk1RTRHLE1BQU8sU0FBVWxYLEdBR2hCLE9BQU1BLEVBS2UsaUJBQVRBLEVBQ0pyRCxFQUFRSixLQUFNb0MsRUFBUXFCLEdBQVFwRSxLQUFNLElBSXJDZSxFQUFRSixLQUFNWCxLQUdwQm9FLEVBQUtiLE9BQVNhLEVBQU0sR0FBTUEsR0FaakJwRSxLQUFNLElBQU9BLEtBQU0sR0FBSTJDLFdBQWUzQyxLQUFLc0UsUUFBUWlYLFVBQVVsWSxRQUFVLEdBZ0JsRm1ZLElBQUssU0FBVXhZLEVBQVVDLEdBQ3hCLE9BQU9qRCxLQUFLNEQsVUFDWGIsRUFBT2tQLFdBQ05sUCxFQUFPZ0IsTUFBTy9ELEtBQUswRCxNQUFPWCxFQUFRQyxFQUFVQyxPQUsvQ3dZLFFBQVMsU0FBVXpZLEdBQ2xCLE9BQU9oRCxLQUFLd2IsSUFBaUIsTUFBWnhZLEVBQ2hCaEQsS0FBS2dFLFdBQWFoRSxLQUFLZ0UsV0FBV3FNLE9BQVFyTixPQVU3Q0QsRUFBT2tCLEtBQU0sQ0FDWmlRLE9BQVEsU0FBVTlQLEdBQ2pCLElBQUk4UCxFQUFTOVAsRUFBS3pCLFdBQ2xCLE9BQU91UixHQUE4QixLQUFwQkEsRUFBTzFTLFNBQWtCMFMsRUFBUyxNQUVwRHdILFFBQVMsU0FBVXRYLEdBQ2xCLE9BQU9pSSxFQUFLakksRUFBTSxlQUVuQnVYLGFBQWMsU0FBVXZYLEVBQU1tRCxFQUFJeVMsR0FDakMsT0FBTzNOLEVBQUtqSSxFQUFNLGFBQWM0VixJQUVqQzFOLEtBQU0sU0FBVWxJLEdBQ2YsT0FBTzhXLEVBQVM5VyxFQUFNLGdCQUV2QjZXLEtBQU0sU0FBVTdXLEdBQ2YsT0FBTzhXLEVBQVM5VyxFQUFNLG9CQUV2QndYLFFBQVMsU0FBVXhYLEdBQ2xCLE9BQU9pSSxFQUFLakksRUFBTSxnQkFFbkJtWCxRQUFTLFNBQVVuWCxHQUNsQixPQUFPaUksRUFBS2pJLEVBQU0sb0JBRW5CeVgsVUFBVyxTQUFVelgsRUFBTW1ELEVBQUl5UyxHQUM5QixPQUFPM04sRUFBS2pJLEVBQU0sY0FBZTRWLElBRWxDOEIsVUFBVyxTQUFVMVgsRUFBTW1ELEVBQUl5UyxHQUM5QixPQUFPM04sRUFBS2pJLEVBQU0sa0JBQW1CNFYsSUFFdENHLFNBQVUsU0FBVS9WLEdBQ25CLE9BQU8rVixHQUFZL1YsRUFBS3pCLFlBQWMsSUFBSzJQLFdBQVlsTyxJQUV4RDJXLFNBQVUsU0FBVTNXLEdBQ25CLE9BQU8rVixFQUFVL1YsRUFBS2tPLGFBRXZCMEksU0FBVSxTQUFVNVcsR0FDbkIsT0FBNkIsTUFBeEJBLEVBQUsyWCxpQkFLVDFiLEVBQVUrRCxFQUFLMlgsaUJBRVIzWCxFQUFLMlgsaUJBTVIzUCxFQUFVaEksRUFBTSxjQUNwQkEsRUFBT0EsRUFBSzRYLFNBQVc1WCxHQUdqQnJCLEVBQU9nQixNQUFPLEdBQUlLLEVBQUttSSxlQUU3QixTQUFVbkgsRUFBTWxDLEdBQ2xCSCxFQUFPRyxHQUFJa0MsR0FBUyxTQUFVNFUsRUFBT2hYLEdBQ3BDLElBQUkwUixFQUFVM1IsRUFBT29CLElBQUtuRSxLQUFNa0QsRUFBSThXLEdBdUJwQyxNQXJCMEIsVUFBckI1VSxFQUFLNUUsT0FBUSxLQUNqQndDLEVBQVdnWCxHQUdQaFgsR0FBZ0MsaUJBQWJBLElBQ3ZCMFIsRUFBVTNSLEVBQU9zTixPQUFRck4sRUFBVTBSLElBR2pCLEVBQWQxVSxLQUFLcUQsU0FHSHlYLEVBQWtCMVYsSUFDdkJyQyxFQUFPa1AsV0FBWXlDLEdBSWZtRyxFQUFhck4sS0FBTXBJLElBQ3ZCc1AsRUFBUXVILFdBSUhqYyxLQUFLNEQsVUFBVzhRLE1BR3pCLElBQUl3SCxFQUFrQixvQkFzT3RCLFNBQVNDLEVBQVVDLEdBQ2xCLE9BQU9BLEVBRVIsU0FBU0MsRUFBU0MsR0FDakIsTUFBTUEsRUFHUCxTQUFTQyxFQUFZclYsRUFBT3NWLEVBQVNDLEVBQVFDLEdBQzVDLElBQUlDLEVBRUosSUFHTXpWLEdBQVMzRixFQUFjb2IsRUFBU3pWLEVBQU0wVixTQUMxQ0QsRUFBT2hjLEtBQU11RyxHQUFRaUMsS0FBTXFULEdBQVVLLEtBQU1KLEdBR2hDdlYsR0FBUzNGLEVBQWNvYixFQUFTelYsRUFBTTRWLE1BQ2pESCxFQUFPaGMsS0FBTXVHLEVBQU9zVixFQUFTQyxHQVE3QkQsRUFBUTNiLFdBQU9nRixFQUFXLENBQUVxQixHQUFRMUcsTUFBT2tjLElBTTNDLE1BQVF4VixHQUlUdVYsRUFBTzViLFdBQU9nRixFQUFXLENBQUVxQixLQXZPN0JuRSxFQUFPZ2EsVUFBWSxTQUFVNVgsR0E5QjdCLElBQXdCQSxFQUNuQjZYLEVBaUNKN1gsRUFBNkIsaUJBQVpBLEdBbENNQSxFQW1DUEEsRUFsQ1o2WCxFQUFTLEdBQ2JqYSxFQUFPa0IsS0FBTWtCLEVBQVEwSCxNQUFPcVAsSUFBbUIsR0FBSSxTQUFVZSxFQUFHQyxHQUMvREYsRUFBUUUsSUFBUyxJQUVYRixHQStCTmphLEVBQU9tQyxPQUFRLEdBQUlDLEdBd0JaLFNBQVBnWSxJQVFDLElBTEFDLEVBQVNBLEdBQVVqWSxFQUFRa1ksS0FJM0JDLEVBQVFDLEdBQVMsRUFDVEMsRUFBTW5hLE9BQVFvYSxHQUFlLEVBRXBDLElBREFDLEVBQVNGLEVBQU1wUCxVQUNMcVAsRUFBYzNULEVBQUt6RyxTQUdtQyxJQUExRHlHLEVBQU0yVCxHQUFjNWMsTUFBTzZjLEVBQVEsR0FBS0EsRUFBUSxLQUNwRHZZLEVBQVF3WSxjQUdSRixFQUFjM1QsRUFBS3pHLE9BQ25CcWEsR0FBUyxHQU1OdlksRUFBUXVZLFNBQ2JBLEdBQVMsR0FHVkgsR0FBUyxFQUdKSCxJQUlIdFQsRUFESTRULEVBQ0csR0FJQSxJQTdEWCxJQUNDSCxFQUdBRyxFQUdBSixFQUdBRixFQUdBdFQsRUFBTyxHQUdQMFQsRUFBUSxHQUdSQyxHQUFlLEVBZ0RmaEQsRUFBTyxDQUdOZSxJQUFLLFdBMkJKLE9BMUJLMVIsSUFHQzRULElBQVdILElBQ2ZFLEVBQWMzVCxFQUFLekcsT0FBUyxFQUM1Qm1hLEVBQU0xYyxLQUFNNGMsSUFHYixTQUFXbEMsRUFBS2pILEdBQ2Z4UixFQUFPa0IsS0FBTXNRLEVBQU0sU0FBVTBJLEVBQUdoVyxHQUMxQjFGLEVBQVkwRixHQUNWOUIsRUFBUTBVLFFBQVdZLEVBQUszRixJQUFLN04sSUFDbEM2QyxFQUFLaEosS0FBTW1HLEdBRURBLEdBQU9BLEVBQUk1RCxRQUE0QixXQUFsQlIsRUFBUW9FLElBR3hDdVUsRUFBS3ZVLEtBVFIsQ0FZSzVDLFdBRUFxWixJQUFXSCxHQUNmSixLQUdLbmQsTUFJUjRkLE9BQVEsV0FZUCxPQVhBN2EsRUFBT2tCLEtBQU1JLFVBQVcsU0FBVTRZLEVBQUdoVyxHQUVwQyxJQURBLElBQUlxVSxHQUNzRCxHQUFoREEsRUFBUXZZLEVBQU82RCxRQUFTSyxFQUFLNkMsRUFBTXdSLEtBQzVDeFIsRUFBSzdFLE9BQVFxVyxFQUFPLEdBR2ZBLEdBQVNtQyxHQUNiQSxNQUlJemQsTUFLUjhVLElBQUssU0FBVTVSLEdBQ2QsT0FBT0EsR0FDd0IsRUFBOUJILEVBQU82RCxRQUFTMUQsRUFBSTRHLEdBQ04sRUFBZEEsRUFBS3pHLFFBSVB3UyxNQUFPLFdBSU4sT0FGQy9MLEVBRElBLEdBQ0csR0FFRDlKLE1BTVI2ZCxRQUFTLFdBR1IsT0FGQVQsRUFBU0ksRUFBUSxHQUNqQjFULEVBQU80VCxFQUFTLEdBQ1QxZCxNQUVSbU0sU0FBVSxXQUNULE9BQVFyQyxHQU1UZ1UsS0FBTSxXQUtMLE9BSkFWLEVBQVNJLEVBQVEsR0FDWEUsR0FBV0gsSUFDaEJ6VCxFQUFPNFQsRUFBUyxJQUVWMWQsTUFFUm9kLE9BQVEsV0FDUCxRQUFTQSxHQUlWVyxTQUFVLFNBQVU5YSxFQUFTc1IsR0FTNUIsT0FSTTZJLElBRUw3SSxFQUFPLENBQUV0UixHQURUc1IsRUFBT0EsR0FBUSxJQUNRL1QsTUFBUStULEVBQUsvVCxRQUFVK1QsR0FDOUNpSixFQUFNMWMsS0FBTXlULEdBQ05nSixHQUNMSixLQUdLbmQsTUFJUm1kLEtBQU0sV0FFTCxPQURBMUMsRUFBS3NELFNBQVUvZCxLQUFNcUUsV0FDZHJFLE1BSVJzZCxNQUFPLFdBQ04sUUFBU0EsSUFJWixPQUFPN0MsR0E0Q1IxWCxFQUFPbUMsT0FBUSxDQUVkOFksU0FBVSxTQUFVQyxHQUNuQixJQUFJQyxFQUFTLENBSVgsQ0FBRSxTQUFVLFdBQVluYixFQUFPZ2EsVUFBVyxVQUN6Q2hhLEVBQU9nYSxVQUFXLFVBQVksR0FDL0IsQ0FBRSxVQUFXLE9BQVFoYSxFQUFPZ2EsVUFBVyxlQUN0Q2hhLEVBQU9nYSxVQUFXLGVBQWlCLEVBQUcsWUFDdkMsQ0FBRSxTQUFVLE9BQVFoYSxFQUFPZ2EsVUFBVyxlQUNyQ2hhLEVBQU9nYSxVQUFXLGVBQWlCLEVBQUcsYUFFeENvQixFQUFRLFVBQ1J2QixFQUFVLENBQ1R1QixNQUFPLFdBQ04sT0FBT0EsR0FFUkMsT0FBUSxXQUVQLE9BREFDLEVBQVNsVixLQUFNOUUsV0FBWXdZLEtBQU14WSxXQUMxQnJFLE1BRVJzZSxNQUFTLFNBQVVwYixHQUNsQixPQUFPMFosRUFBUUUsS0FBTSxLQUFNNVosSUFJNUJxYixLQUFNLFdBQ0wsSUFBSUMsRUFBTW5hLFVBRVYsT0FBT3RCLEVBQU9pYixTQUFVLFNBQVVTLEdBQ2pDMWIsRUFBT2tCLEtBQU1pYSxFQUFRLFNBQVUzVyxFQUFJbVgsR0FHbEMsSUFBSXhiLEVBQUszQixFQUFZaWQsRUFBS0UsRUFBTyxNQUFXRixFQUFLRSxFQUFPLElBS3hETCxFQUFVSyxFQUFPLElBQU8sV0FDdkIsSUFBSUMsRUFBV3piLEdBQU1BLEVBQUdyQyxNQUFPYixLQUFNcUUsV0FDaENzYSxHQUFZcGQsRUFBWW9kLEVBQVMvQixTQUNyQytCLEVBQVMvQixVQUNQZ0MsU0FBVUgsRUFBU0ksUUFDbkIxVixLQUFNc1YsRUFBU2pDLFNBQ2ZLLEtBQU00QixFQUFTaEMsUUFFakJnQyxFQUFVQyxFQUFPLEdBQU0sUUFDdEIxZSxLQUNBa0QsRUFBSyxDQUFFeWIsR0FBYXRhLGVBS3hCbWEsRUFBTSxPQUNINUIsV0FFTEUsS0FBTSxTQUFVZ0MsRUFBYUMsRUFBWUMsR0FDeEMsSUFBSUMsRUFBVyxFQUNmLFNBQVN6QyxFQUFTMEMsRUFBT2IsRUFBVTNQLEVBQVN5USxHQUMzQyxPQUFPLFdBR1EsU0FBYkMsSUFDQyxJQUFJVCxFQUFVN0IsRUFLZCxLQUFLb0MsRUFBUUQsR0FBYixDQVFBLElBSkFOLEVBQVdqUSxFQUFRN04sTUFBT3dlLEVBQU05SyxNQUlkOEosRUFBU3pCLFVBQzFCLE1BQU0sSUFBSTBDLFVBQVcsNEJBT3RCeEMsRUFBTzZCLElBS2dCLGlCQUFiQSxHQUNZLG1CQUFiQSxJQUNSQSxFQUFTN0IsS0FHTHZiLEVBQVl1YixHQUdYcUMsRUFDSnJDLEVBQUtuYyxLQUNKZ2UsRUFDQW5DLEVBQVN5QyxFQUFVWixFQUFVbEMsRUFBVWdELEdBQ3ZDM0MsRUFBU3lDLEVBQVVaLEVBQVVoQyxFQUFTOEMsS0FPdkNGLElBRUFuQyxFQUFLbmMsS0FDSmdlLEVBQ0FuQyxFQUFTeUMsRUFBVVosRUFBVWxDLEVBQVVnRCxHQUN2QzNDLEVBQVN5QyxFQUFVWixFQUFVaEMsRUFBUzhDLEdBQ3RDM0MsRUFBU3lDLEVBQVVaLEVBQVVsQyxFQUM1QmtDLEVBQVNrQixlQVNQN1EsSUFBWXlOLElBQ2hCa0QsT0FBT3haLEVBQ1AwTyxFQUFPLENBQUVvSyxLQUtSUSxHQUFXZCxFQUFTbUIsYUFBZUgsRUFBTTlLLEtBdkU5QyxJQUFJOEssRUFBT3JmLEtBQ1Z1VSxFQUFPbFEsVUEyRVBvYixFQUFVTixFQUNUQyxFQUNBLFdBQ0MsSUFDQ0EsSUFDQyxNQUFRNVMsR0FFSnpKLEVBQU9pYixTQUFTMEIsZUFDcEIzYyxFQUFPaWIsU0FBUzBCLGNBQWVsVCxFQUM5QmlULEVBQVFFLFlBTVFWLEdBQWJDLEVBQVEsSUFJUHhRLElBQVkyTixJQUNoQmdELE9BQU94WixFQUNQME8sRUFBTyxDQUFFL0gsSUFHVjZSLEVBQVN1QixXQUFZUCxFQUFNOUssTUFTM0IySyxFQUNKTyxLQUtLMWMsRUFBT2liLFNBQVM2QixlQUNwQkosRUFBUUUsV0FBYTVjLEVBQU9pYixTQUFTNkIsZ0JBRXRDOWYsRUFBTytmLFdBQVlMLEtBS3RCLE9BQU8xYyxFQUFPaWIsU0FBVSxTQUFVUyxHQUdqQ1AsRUFBUSxHQUFLLEdBQUkxQyxJQUNoQmdCLEVBQ0MsRUFDQWlDLEVBQ0FsZCxFQUFZeWQsR0FDWEEsRUFDQTdDLEVBQ0RzQyxFQUFTYyxhQUtYckIsRUFBUSxHQUFLLEdBQUkxQyxJQUNoQmdCLEVBQ0MsRUFDQWlDLEVBQ0FsZCxFQUFZdWQsR0FDWEEsRUFDQTNDLElBS0grQixFQUFRLEdBQUssR0FBSTFDLElBQ2hCZ0IsRUFDQyxFQUNBaUMsRUFDQWxkLEVBQVl3ZCxHQUNYQSxFQUNBMUMsTUFHQU8sV0FLTEEsUUFBUyxTQUFVemMsR0FDbEIsT0FBYyxNQUFQQSxFQUFjNEMsRUFBT21DLE9BQVEvRSxFQUFLeWMsR0FBWUEsSUFHdkR5QixFQUFXLEdBa0VaLE9BL0RBdGIsRUFBT2tCLEtBQU1pYSxFQUFRLFNBQVVoYyxFQUFHd2MsR0FDakMsSUFBSTVVLEVBQU80VSxFQUFPLEdBQ2pCcUIsRUFBY3JCLEVBQU8sR0FLdEI5QixFQUFTOEIsRUFBTyxJQUFRNVUsRUFBSzBSLElBR3hCdUUsR0FDSmpXLEVBQUswUixJQUNKLFdBSUMyQyxFQUFRNEIsR0FLVDdCLEVBQVEsRUFBSWhjLEdBQUssR0FBSTJiLFFBSXJCSyxFQUFRLEVBQUloYyxHQUFLLEdBQUkyYixRQUdyQkssRUFBUSxHQUFLLEdBQUlKLEtBR2pCSSxFQUFRLEdBQUssR0FBSUosTUFPbkJoVSxFQUFLMFIsSUFBS2tELEVBQU8sR0FBSXZCLE1BS3JCa0IsRUFBVUssRUFBTyxJQUFRLFdBRXhCLE9BREFMLEVBQVVLLEVBQU8sR0FBTSxRQUFVMWUsT0FBU3FlLE9BQVd4WSxFQUFZN0YsS0FBTXFFLFdBQ2hFckUsTUFNUnFlLEVBQVVLLEVBQU8sR0FBTSxRQUFXNVUsRUFBS2lVLFdBSXhDbkIsRUFBUUEsUUFBU3lCLEdBR1pKLEdBQ0pBLEVBQUt0ZCxLQUFNMGQsRUFBVUEsR0FJZkEsR0FJUjJCLEtBQU0sU0FBVUMsR0FpQkQsU0FBYkMsRUFBdUJoZSxHQUN0QixPQUFPLFNBQVVnRixHQUNoQmlaLEVBQWlCamUsR0FBTWxDLEtBQ3ZCb2dCLEVBQWVsZSxHQUF5QixFQUFuQm1DLFVBQVVoQixPQUFhN0MsRUFBTUcsS0FBTTBELFdBQWM2QyxJQUM1RG1aLEdBQ1RDLEVBQU9kLFlBQWFXLEVBQWlCQyxJQXJCekMsSUFHQ0MsRUFBWWhjLFVBQVVoQixPQUd0Qm5CLEVBQUltZSxFQUdKRixFQUFrQnhhLE1BQU96RCxHQUN6QmtlLEVBQWdCNWYsRUFBTUcsS0FBTTBELFdBRzVCaWMsRUFBU3ZkLEVBQU9pYixXQWNqQixHQUFLcUMsR0FBYSxJQUNqQjlELEVBQVkwRCxFQUFhSyxFQUFPblgsS0FBTStXLEVBQVloZSxJQUFNc2EsUUFBUzhELEVBQU83RCxRQUN0RTRELEdBR3NCLFlBQW5CQyxFQUFPbkMsU0FDWDVjLEVBQVk2ZSxFQUFlbGUsSUFBT2tlLEVBQWVsZSxHQUFJNGEsT0FFckQsT0FBT3dELEVBQU94RCxPQUtoQixLQUFRNWEsS0FDUHFhLEVBQVk2RCxFQUFlbGUsR0FBS2dlLEVBQVloZSxHQUFLb2UsRUFBTzdELFFBR3pELE9BQU82RCxFQUFPMUQsYUFPaEIsSUFBSTJELEVBQWMseURBRWxCeGQsRUFBT2liLFNBQVMwQixjQUFnQixTQUFVdlosRUFBT3FhLEdBSTNDemdCLEVBQU8wZ0IsU0FBVzFnQixFQUFPMGdCLFFBQVFDLE1BQVF2YSxHQUFTb2EsRUFBWS9TLEtBQU1ySCxFQUFNZixPQUM5RXJGLEVBQU8wZ0IsUUFBUUMsS0FBTSw4QkFBZ0N2YSxFQUFNd2EsUUFBU3hhLEVBQU1xYSxNQUFPQSxJQU9uRnpkLEVBQU82ZCxlQUFpQixTQUFVemEsR0FDakNwRyxFQUFPK2YsV0FBWSxXQUNsQixNQUFNM1osS0FRUixJQUFJMGEsRUFBWTlkLEVBQU9pYixXQWtEdkIsU0FBUzhDLElBQ1JsaEIsRUFBU21oQixvQkFBcUIsbUJBQW9CRCxHQUNsRC9nQixFQUFPZ2hCLG9CQUFxQixPQUFRRCxHQUNwQy9kLEVBQU80WCxRQW5EUjVYLEVBQU9HLEdBQUd5WCxNQUFRLFNBQVV6WCxHQVkzQixPQVZBMmQsRUFDRS9ELEtBQU01WixHQUtOb2IsTUFBTyxTQUFVblksR0FDakJwRCxFQUFPNmQsZUFBZ0J6YSxLQUdsQm5HLE1BR1IrQyxFQUFPbUMsT0FBUSxDQUdkZ0IsU0FBUyxFQUlUOGEsVUFBVyxFQUdYckcsTUFBTyxTQUFVc0csS0FHRixJQUFUQSxJQUFrQmxlLEVBQU9pZSxVQUFZamUsRUFBT21ELFdBS2pEbkQsRUFBT21ELFNBQVUsS0FHWithLEdBQXNDLElBQW5CbGUsRUFBT2llLFdBSy9CSCxFQUFVckIsWUFBYTVmLEVBQVUsQ0FBRW1ELE9BSXJDQSxFQUFPNFgsTUFBTW1DLEtBQU8rRCxFQUFVL0QsS0FhRCxhQUF4QmxkLEVBQVNzaEIsWUFDYSxZQUF4QnRoQixFQUFTc2hCLGFBQTZCdGhCLEVBQVM4UCxnQkFBZ0J5UixTQUdqRXBoQixFQUFPK2YsV0FBWS9jLEVBQU80WCxRQUsxQi9hLEVBQVNtUSxpQkFBa0IsbUJBQW9CK1EsR0FHL0MvZ0IsRUFBT2dRLGlCQUFrQixPQUFRK1EsSUFRbEMsSUFBSU0sRUFBUyxTQUFVdmQsRUFBT1gsRUFBSWdMLEVBQUtoSCxFQUFPbWEsRUFBV0MsRUFBVUMsR0FDbEUsSUFBSXJmLEVBQUksRUFDUDJDLEVBQU1oQixFQUFNUixPQUNabWUsRUFBYyxNQUFQdFQsRUFHUixHQUF1QixXQUFsQnJMLEVBQVFxTCxHQUVaLElBQU1oTSxLQURObWYsR0FBWSxFQUNEblQsRUFDVmtULEVBQVF2ZCxFQUFPWCxFQUFJaEIsRUFBR2dNLEVBQUtoTSxJQUFLLEVBQU1vZixFQUFVQyxRQUkzQyxRQUFlMWIsSUFBVnFCLElBQ1htYSxHQUFZLEVBRU45ZixFQUFZMkYsS0FDakJxYSxHQUFNLEdBR0ZDLElBS0h0ZSxFQUZJcWUsR0FDSnJlLEVBQUd2QyxLQUFNa0QsRUFBT3FELEdBQ1gsT0FJTHNhLEVBQU90ZSxFQUNGLFNBQVVrQixFQUFNcWQsRUFBTXZhLEdBQzFCLE9BQU9zYSxFQUFLN2dCLEtBQU1vQyxFQUFRcUIsR0FBUThDLE1BS2hDaEUsR0FDSixLQUFRaEIsRUFBSTJDLEVBQUszQyxJQUNoQmdCLEVBQ0NXLEVBQU8zQixHQUFLZ00sRUFBS3FULEVBQ2pCcmEsRUFDQUEsRUFBTXZHLEtBQU1rRCxFQUFPM0IsR0FBS0EsRUFBR2dCLEVBQUlXLEVBQU8zQixHQUFLZ00sS0FNL0MsT0FBS21ULEVBQ0d4ZCxFQUlIMmQsRUFDR3RlLEVBQUd2QyxLQUFNa0QsR0FHVmdCLEVBQU0zQixFQUFJVyxFQUFPLEdBQUtxSyxHQUFRb1QsR0FLbENJLEVBQVksUUFDZkMsRUFBYSxZQUdkLFNBQVNDLEVBQVlDLEVBQU1DLEdBQzFCLE9BQU9BLEVBQU9DLGNBTWYsU0FBU0MsRUFBV0MsR0FDbkIsT0FBT0EsRUFBT2hjLFFBQVN5YixFQUFXLE9BQVF6YixRQUFTMGIsRUFBWUMsR0FFL0MsU0FBYk0sRUFBdUJDLEdBUTFCLE9BQTBCLElBQW5CQSxFQUFNM2dCLFVBQXFDLElBQW5CMmdCLEVBQU0zZ0IsWUFBc0IyZ0IsRUFBTTNnQixTQU1sRSxTQUFTNGdCLElBQ1JwaUIsS0FBSzhGLFFBQVUvQyxFQUFPK0MsUUFBVXNjLEVBQUtDLE1BR3RDRCxFQUFLQyxJQUFNLEVBRVhELEVBQUs5ZSxVQUFZLENBRWhCMkssTUFBTyxTQUFVa1UsR0FHaEIsSUFBSWpiLEVBQVFpYixFQUFPbmlCLEtBQUs4RixTQTRCeEIsT0F6Qk1vQixJQUNMQSxFQUFRNUcsT0FBT2dpQixPQUFRLE1BS2xCSixFQUFZQyxLQUlYQSxFQUFNM2dCLFNBQ1YyZ0IsRUFBT25pQixLQUFLOEYsU0FBWW9CLEVBTXhCNUcsT0FBT2lpQixlQUFnQkosRUFBT25pQixLQUFLOEYsUUFBUyxDQUMzQ29CLE1BQU9BLEVBQ1BzYixjQUFjLE1BTVh0YixHQUVSdWIsSUFBSyxTQUFVTixFQUFPTyxFQUFNeGIsR0FDM0IsSUFBSXliLEVBQ0gxVSxFQUFRak8sS0FBS2lPLE1BQU9rVSxHQUlyQixHQUFxQixpQkFBVE8sRUFDWHpVLEVBQU8rVCxFQUFXVSxJQUFXeGIsT0FNN0IsSUFBTXliLEtBQVFELEVBQ2J6VSxFQUFPK1QsRUFBV1csSUFBV0QsRUFBTUMsR0FHckMsT0FBTzFVLEdBRVJ2SyxJQUFLLFNBQVV5ZSxFQUFPalUsR0FDckIsWUFBZXJJLElBQVJxSSxFQUNObE8sS0FBS2lPLE1BQU9rVSxHQUdaQSxFQUFPbmlCLEtBQUs4RixVQUFhcWMsRUFBT25pQixLQUFLOEYsU0FBV2tjLEVBQVc5VCxLQUU3RGtULE9BQVEsU0FBVWUsRUFBT2pVLEVBQUtoSCxHQWE3QixZQUFhckIsSUFBUnFJLEdBQ0NBLEdBQXNCLGlCQUFSQSxRQUFnQ3JJLElBQVZxQixFQUVsQ2xILEtBQUswRCxJQUFLeWUsRUFBT2pVLElBU3pCbE8sS0FBS3lpQixJQUFLTixFQUFPalUsRUFBS2hILFFBSUxyQixJQUFWcUIsRUFBc0JBLEVBQVFnSCxJQUV0QzBQLE9BQVEsU0FBVXVFLEVBQU9qVSxHQUN4QixJQUFJaE0sRUFDSCtMLEVBQVFrVSxFQUFPbmlCLEtBQUs4RixTQUVyQixRQUFlRCxJQUFWb0ksRUFBTCxDQUlBLFFBQWFwSSxJQUFScUksRUFBb0IsQ0FrQnhCaE0sR0FYQ2dNLEVBSkl2SSxNQUFNQyxRQUFTc0ksR0FJYkEsRUFBSS9KLElBQUs2ZCxJQUVmOVQsRUFBTThULEVBQVc5VCxNQUlKRCxFQUNaLENBQUVDLEdBQ0FBLEVBQUlyQixNQUFPcVAsSUFBbUIsSUFHMUI3WSxPQUVSLEtBQVFuQixZQUNBK0wsRUFBT0MsRUFBS2hNLFNBS1IyRCxJQUFScUksSUFBcUJuTCxFQUFPeUQsY0FBZXlILEtBTTFDa1UsRUFBTTNnQixTQUNWMmdCLEVBQU9uaUIsS0FBSzhGLGNBQVlELFNBRWpCc2MsRUFBT25pQixLQUFLOEYsWUFJdEI4YyxRQUFTLFNBQVVULEdBQ2xCLElBQUlsVSxFQUFRa1UsRUFBT25pQixLQUFLOEYsU0FDeEIsWUFBaUJELElBQVZvSSxJQUF3QmxMLEVBQU95RCxjQUFleUgsS0FHdkQsSUFBSTRVLEVBQVcsSUFBSVQsRUFFZlUsRUFBVyxJQUFJVixFQWNmVyxFQUFTLGdDQUNaQyxFQUFhLFNBMkJkLFNBQVNDLEVBQVU3ZSxFQUFNOEosRUFBS3dVLEdBQzdCLElBQUl0ZCxFQTFCYXNkLEVBOEJqQixRQUFjN2MsSUFBVDZjLEdBQXdDLElBQWxCdGUsRUFBSzVDLFNBSS9CLEdBSEE0RCxFQUFPLFFBQVU4SSxFQUFJakksUUFBUytjLEVBQVksT0FBUXhiLGNBRzdCLGlCQUZyQmtiLEVBQU90ZSxFQUFLN0IsYUFBYzZDLElBRU0sQ0FDL0IsSUFDQ3NkLEVBbkNXLFVBREdBLEVBb0NFQSxJQS9CTCxVQUFUQSxJQUlTLFNBQVRBLEVBQ0csS0FJSEEsS0FBVUEsRUFBTyxJQUNiQSxFQUdKSyxFQUFPdlYsS0FBTWtWLEdBQ1ZRLEtBQUtDLE1BQU9ULEdBR2JBLEdBZUgsTUFBUWxXLElBR1ZzVyxFQUFTTCxJQUFLcmUsRUFBTThKLEVBQUt3VSxRQUV6QkEsT0FBTzdjLEVBR1QsT0FBTzZjLEVBR1IzZixFQUFPbUMsT0FBUSxDQUNkMGQsUUFBUyxTQUFVeGUsR0FDbEIsT0FBTzBlLEVBQVNGLFFBQVN4ZSxJQUFVeWUsRUFBU0QsUUFBU3hlLElBR3REc2UsS0FBTSxTQUFVdGUsRUFBTWdCLEVBQU1zZCxHQUMzQixPQUFPSSxFQUFTMUIsT0FBUWhkLEVBQU1nQixFQUFNc2QsSUFHckNVLFdBQVksU0FBVWhmLEVBQU1nQixHQUMzQjBkLEVBQVNsRixPQUFReFosRUFBTWdCLElBS3hCaWUsTUFBTyxTQUFVamYsRUFBTWdCLEVBQU1zZCxHQUM1QixPQUFPRyxFQUFTekIsT0FBUWhkLEVBQU1nQixFQUFNc2QsSUFHckNZLFlBQWEsU0FBVWxmLEVBQU1nQixHQUM1QnlkLEVBQVNqRixPQUFReFosRUFBTWdCLE1BSXpCckMsRUFBT0csR0FBR2dDLE9BQVEsQ0FDakJ3ZCxLQUFNLFNBQVV4VSxFQUFLaEgsR0FDcEIsSUFBSWhGLEVBQUdrRCxFQUFNc2QsRUFDWnRlLEVBQU9wRSxLQUFNLEdBQ2J5TyxFQUFRckssR0FBUUEsRUFBSzhGLFdBR3RCLFFBQWFyRSxJQUFScUksRUEwQkwsTUFBb0IsaUJBQVJBLEVBQ0psTyxLQUFLaUUsS0FBTSxXQUNqQjZlLEVBQVNMLElBQUt6aUIsS0FBTWtPLEtBSWZrVCxFQUFRcGhCLEtBQU0sU0FBVWtILEdBQzlCLElBQUl3YixFQU9KLEdBQUt0ZSxRQUFrQnlCLElBQVZxQixFQUtaLFlBQWNyQixLQURkNmMsRUFBT0ksRUFBU3BmLElBQUtVLEVBQU04SixVQVFickksS0FEZDZjLEVBQU9PLEVBQVU3ZSxFQUFNOEosSUFMZndVLE9BV1IsRUFJRDFpQixLQUFLaUUsS0FBTSxXQUdWNmUsRUFBU0wsSUFBS3ppQixLQUFNa08sRUFBS2hILE1BRXhCLEtBQU1BLEVBQTBCLEVBQW5CN0MsVUFBVWhCLE9BQVksTUFBTSxHQWpFM0MsR0FBS3JELEtBQUtxRCxTQUNUcWYsRUFBT0ksRUFBU3BmLElBQUtVLEdBRUUsSUFBbEJBLEVBQUs1QyxXQUFtQnFoQixFQUFTbmYsSUFBS1UsRUFBTSxpQkFBbUIsQ0FFbkUsSUFEQWxDLEVBQUl1TSxFQUFNcEwsT0FDRm5CLEtBSUZ1TSxFQUFPdk0sSUFFc0IsS0FEakNrRCxFQUFPcUosRUFBT3ZNLEdBQUlrRCxNQUNSckUsUUFBUyxXQUNsQnFFLEVBQU80YyxFQUFXNWMsRUFBSzVFLE1BQU8sSUFDOUJ5aUIsRUFBVTdlLEVBQU1nQixFQUFNc2QsRUFBTXRkLEtBSS9CeWQsRUFBU0osSUFBS3JlLEVBQU0sZ0JBQWdCLEdBSXRDLE9BQU9zZSxHQStDVFUsV0FBWSxTQUFVbFYsR0FDckIsT0FBT2xPLEtBQUtpRSxLQUFNLFdBQ2pCNmUsRUFBU2xGLE9BQVE1ZCxLQUFNa08sUUFNMUJuTCxFQUFPbUMsT0FBUSxDQUNkc1ksTUFBTyxTQUFVcFosRUFBTTFDLEVBQU1naEIsR0FDNUIsSUFBSWxGLEVBRUosR0FBS3BaLEVBWUosT0FYQTFDLEdBQVNBLEdBQVEsTUFBUyxRQUMxQjhiLEVBQVFxRixFQUFTbmYsSUFBS1UsRUFBTTFDLEdBR3ZCZ2hCLEtBQ0VsRixHQUFTN1gsTUFBTUMsUUFBUzhjLEdBQzdCbEYsRUFBUXFGLEVBQVN6QixPQUFRaGQsRUFBTTFDLEVBQU1xQixFQUFPMkQsVUFBV2djLElBRXZEbEYsRUFBTTFjLEtBQU00aEIsSUFHUGxGLEdBQVMsSUFJbEIrRixRQUFTLFNBQVVuZixFQUFNMUMsR0FDeEJBLEVBQU9BLEdBQVEsS0FFZixJQUFJOGIsRUFBUXphLEVBQU95YSxNQUFPcFosRUFBTTFDLEdBQy9COGhCLEVBQWNoRyxFQUFNbmEsT0FDcEJILEVBQUtzYSxFQUFNcFAsUUFDWHFWLEVBQVExZ0IsRUFBTzJnQixZQUFhdGYsRUFBTTFDLEdBTXZCLGVBQVB3QixJQUNKQSxFQUFLc2EsRUFBTXBQLFFBQ1hvVixLQUdJdGdCLElBSVUsT0FBVHhCLEdBQ0o4YixFQUFNN0wsUUFBUyxxQkFJVDhSLEVBQU1FLEtBQ2J6Z0IsRUFBR3ZDLEtBQU15RCxFQXBCRixXQUNOckIsRUFBT3dnQixRQUFTbmYsRUFBTTFDLElBbUJGK2hCLEtBR2hCRCxHQUFlQyxHQUNwQkEsRUFBTTVOLE1BQU1zSCxRQUtkdUcsWUFBYSxTQUFVdGYsRUFBTTFDLEdBQzVCLElBQUl3TSxFQUFNeE0sRUFBTyxhQUNqQixPQUFPbWhCLEVBQVNuZixJQUFLVSxFQUFNOEosSUFBUzJVLEVBQVN6QixPQUFRaGQsRUFBTThKLEVBQUssQ0FDL0QySCxNQUFPOVMsRUFBT2dhLFVBQVcsZUFBZ0J2QixJQUFLLFdBQzdDcUgsRUFBU2pGLE9BQVF4WixFQUFNLENBQUUxQyxFQUFPLFFBQVN3TSxXQU03Q25MLEVBQU9HLEdBQUdnQyxPQUFRLENBQ2pCc1ksTUFBTyxTQUFVOWIsRUFBTWdoQixHQUN0QixJQUFJa0IsRUFBUyxFQVFiLE1BTnFCLGlCQUFUbGlCLElBQ1hnaEIsRUFBT2hoQixFQUNQQSxFQUFPLEtBQ1BraUIsS0FHSXZmLFVBQVVoQixPQUFTdWdCLEVBQ2hCN2dCLEVBQU95YSxNQUFPeGQsS0FBTSxHQUFLMEIsUUFHakJtRSxJQUFUNmMsRUFDTjFpQixLQUNBQSxLQUFLaUUsS0FBTSxXQUNWLElBQUl1WixFQUFRemEsRUFBT3lhLE1BQU94ZCxLQUFNMEIsRUFBTWdoQixHQUd0QzNmLEVBQU8yZ0IsWUFBYTFqQixLQUFNMEIsR0FFWixPQUFUQSxHQUFnQyxlQUFmOGIsRUFBTyxJQUM1QnphLEVBQU93Z0IsUUFBU3ZqQixLQUFNMEIsTUFJMUI2aEIsUUFBUyxTQUFVN2hCLEdBQ2xCLE9BQU8xQixLQUFLaUUsS0FBTSxXQUNqQmxCLEVBQU93Z0IsUUFBU3ZqQixLQUFNMEIsTUFHeEJtaUIsV0FBWSxTQUFVbmlCLEdBQ3JCLE9BQU8xQixLQUFLd2QsTUFBTzliLEdBQVEsS0FBTSxLQUtsQ2tiLFFBQVMsU0FBVWxiLEVBQU12QixHQU1iLFNBQVZxYyxNQUNXc0gsR0FDVEMsRUFBTXZFLFlBQWEzTixFQUFVLENBQUVBLElBUGxDLElBQUluQixFQUNIb1QsRUFBUSxFQUNSQyxFQUFRaGhCLEVBQU9pYixXQUNmbk0sRUFBVzdSLEtBQ1hrQyxFQUFJbEMsS0FBS3FELE9BYVYsSUFOcUIsaUJBQVQzQixJQUNYdkIsRUFBTXVCLEVBQ05BLE9BQU9tRSxHQUVSbkUsRUFBT0EsR0FBUSxLQUVQUSxNQUNQd08sRUFBTW1TLEVBQVNuZixJQUFLbU8sRUFBVTNQLEdBQUtSLEVBQU8sZ0JBQzlCZ1AsRUFBSW1GLFFBQ2ZpTyxJQUNBcFQsRUFBSW1GLE1BQU0yRixJQUFLZ0IsSUFJakIsT0FEQUEsSUFDT3VILEVBQU1uSCxRQUFTemMsTUFHeEIsSUFBSTZqQixHQUFTLHNDQUF3Q0MsT0FFakRDLEdBQVUsSUFBSTdaLE9BQVEsaUJBQW1CMlosR0FBTyxjQUFlLEtBRy9ERyxHQUFZLENBQUUsTUFBTyxRQUFTLFNBQVUsUUFFeEN6VSxHQUFrQjlQLEVBQVM4UCxnQkFJMUIwVSxHQUFhLFNBQVVoZ0IsR0FDekIsT0FBT3JCLEVBQU9nRyxTQUFVM0UsRUFBSzZJLGNBQWU3SSxJQUU3Q2lnQixHQUFXLENBQUVBLFVBQVUsR0FPbkIzVSxHQUFnQjRVLGNBQ3BCRixHQUFhLFNBQVVoZ0IsR0FDdEIsT0FBT3JCLEVBQU9nRyxTQUFVM0UsRUFBSzZJLGNBQWU3SSxJQUMzQ0EsRUFBS2tnQixZQUFhRCxNQUFlamdCLEVBQUs2SSxnQkFHMUMsSUFBSXNYLEdBQXFCLFNBQVVuZ0IsRUFBTW1LLEdBT3ZDLE1BQThCLFVBSDlCbkssRUFBT21LLEdBQU1uSyxHQUdEb2dCLE1BQU1DLFNBQ00sS0FBdkJyZ0IsRUFBS29nQixNQUFNQyxTQU1YTCxHQUFZaGdCLElBRXNCLFNBQWxDckIsRUFBTzJoQixJQUFLdGdCLEVBQU0sWUFLckIsU0FBU3VnQixHQUFXdmdCLEVBQU11ZSxFQUFNaUMsRUFBWUMsR0FDM0MsSUFBSUMsRUFBVUMsRUFDYkMsRUFBZ0IsR0FDaEJDLEVBQWVKLEVBQ2QsV0FDQyxPQUFPQSxFQUFNaFcsT0FFZCxXQUNDLE9BQU85TCxFQUFPMmhCLElBQUt0Z0IsRUFBTXVlLEVBQU0sS0FFakN1QyxFQUFVRCxJQUNWRSxFQUFPUCxHQUFjQSxFQUFZLEtBQVM3aEIsRUFBT3FpQixVQUFXekMsR0FBUyxHQUFLLE1BRzFFMEMsRUFBZ0JqaEIsRUFBSzVDLFdBQ2xCdUIsRUFBT3FpQixVQUFXekMsSUFBbUIsT0FBVHdDLElBQWtCRCxJQUNoRGhCLEdBQVFoWCxLQUFNbkssRUFBTzJoQixJQUFLdGdCLEVBQU11ZSxJQUVsQyxHQUFLMEMsR0FBaUJBLEVBQWUsS0FBUUYsRUFBTyxDQVluRCxJQVJBRCxHQUFvQixFQUdwQkMsRUFBT0EsR0FBUUUsRUFBZSxHQUc5QkEsR0FBaUJILEdBQVcsRUFFcEJGLEtBSVBqaUIsRUFBT3loQixNQUFPcGdCLEVBQU11ZSxFQUFNMEMsRUFBZ0JGLElBQ25DLEVBQUlKLElBQVksR0FBTUEsRUFBUUUsSUFBaUJDLEdBQVcsTUFBVyxJQUMzRUYsRUFBZ0IsR0FFakJLLEdBQWdDTixFQUlqQ00sR0FBZ0MsRUFDaEN0aUIsRUFBT3loQixNQUFPcGdCLEVBQU11ZSxFQUFNMEMsRUFBZ0JGLEdBRzFDUCxFQUFhQSxHQUFjLEdBZ0I1QixPQWJLQSxJQUNKUyxHQUFpQkEsSUFBa0JILEdBQVcsRUFHOUNKLEVBQVdGLEVBQVksR0FDdEJTLEdBQWtCVCxFQUFZLEdBQU0sR0FBTUEsRUFBWSxJQUNyREEsRUFBWSxHQUNUQyxJQUNKQSxFQUFNTSxLQUFPQSxFQUNiTixFQUFNNVEsTUFBUW9SLEVBQ2RSLEVBQU05ZixJQUFNK2YsSUFHUEEsRUFJUixJQUFJUSxHQUFvQixHQXlCeEIsU0FBU0MsR0FBVTFULEVBQVUyVCxHQU81QixJQU5BLElBQUlmLEVBQVNyZ0IsRUF4QmNBLEVBQ3ZCdVQsRUFDSDFWLEVBQ0FtSyxFQUNBcVksRUFxQkFnQixFQUFTLEdBQ1RuSyxFQUFRLEVBQ1JqWSxFQUFTd08sRUFBU3hPLE9BR1hpWSxFQUFRalksRUFBUWlZLEtBQ3ZCbFgsRUFBT3lOLEVBQVV5SixJQUNOa0osUUFJWEMsRUFBVXJnQixFQUFLb2dCLE1BQU1DLFFBQ2hCZSxHQUthLFNBQVpmLElBQ0pnQixFQUFRbkssR0FBVXVILEVBQVNuZixJQUFLVSxFQUFNLFlBQWUsS0FDL0NxaEIsRUFBUW5LLEtBQ2JsWCxFQUFLb2dCLE1BQU1DLFFBQVUsS0FHSyxLQUF2QnJnQixFQUFLb2dCLE1BQU1DLFNBQWtCRixHQUFvQm5nQixLQUNyRHFoQixFQUFRbkssSUE3Q1ZtSixFQUZBeGlCLEVBREcwVixPQUFBQSxFQUNIMVYsR0FGMEJtQyxFQWlEYUEsR0EvQzVCNkksY0FDWGIsRUFBV2hJLEVBQUtnSSxVQUNoQnFZLEVBQVVhLEdBQW1CbFosTUFNOUJ1TCxFQUFPMVYsRUFBSXlqQixLQUFLaGpCLFlBQWFULEVBQUlJLGNBQWUrSixJQUNoRHFZLEVBQVUxaEIsRUFBTzJoQixJQUFLL00sRUFBTSxXQUU1QkEsRUFBS2hWLFdBQVdDLFlBQWErVSxHQUVaLFNBQVo4TSxJQUNKQSxFQUFVLFNBRVhhLEdBQW1CbFosR0FBYXFZLE1Ba0NiLFNBQVpBLElBQ0pnQixFQUFRbkssR0FBVSxPQUdsQnVILEVBQVNKLElBQUtyZSxFQUFNLFVBQVdxZ0IsS0FNbEMsSUFBTW5KLEVBQVEsRUFBR0EsRUFBUWpZLEVBQVFpWSxJQUNSLE1BQW5CbUssRUFBUW5LLEtBQ1p6SixFQUFVeUosR0FBUWtKLE1BQU1DLFFBQVVnQixFQUFRbkssSUFJNUMsT0FBT3pKLEVBR1I5TyxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQnNnQixLQUFNLFdBQ0wsT0FBT0QsR0FBVXZsQixNQUFNLElBRXhCMmxCLEtBQU0sV0FDTCxPQUFPSixHQUFVdmxCLE9BRWxCNGxCLE9BQVEsU0FBVXpILEdBQ2pCLE1BQXNCLGtCQUFWQSxFQUNKQSxFQUFRbmUsS0FBS3dsQixPQUFTeGxCLEtBQUsybEIsT0FHNUIzbEIsS0FBS2lFLEtBQU0sV0FDWnNnQixHQUFvQnZrQixNQUN4QitDLEVBQVEvQyxNQUFPd2xCLE9BRWZ6aUIsRUFBUS9DLE1BQU8ybEIsWUFLbkIsSUFVRUUsR0FDQWxWLEdBWEVtVixHQUFtQix3QkFFbkJDLEdBQWEsaUNBRWJDLEdBQWdCLHFDQU1sQkgsR0FEY2ptQixFQUFTcW1CLHlCQUNSdmpCLFlBQWE5QyxFQUFTeUMsY0FBZSxTQUNwRHNPLEdBQVEvUSxFQUFTeUMsY0FBZSxVQU0zQkcsYUFBYyxPQUFRLFNBQzVCbU8sR0FBTW5PLGFBQWMsVUFBVyxXQUMvQm1PLEdBQU1uTyxhQUFjLE9BQVEsS0FFNUJxakIsR0FBSW5qQixZQUFhaU8sSUFJakJyUCxFQUFRNGtCLFdBQWFMLEdBQUlNLFdBQVcsR0FBT0EsV0FBVyxHQUFPL1IsVUFBVXNCLFFBSXZFbVEsR0FBSWpWLFVBQVkseUJBQ2hCdFAsRUFBUThrQixpQkFBbUJQLEdBQUlNLFdBQVcsR0FBTy9SLFVBQVV3RixhQUszRGlNLEdBQUlqVixVQUFZLG9CQUNoQnRQLEVBQVEra0IsU0FBV1IsR0FBSXpSLFVBS3hCLElBQUlrUyxHQUFVLENBS2JDLE1BQU8sQ0FBRSxFQUFHLFVBQVcsWUFDdkJDLElBQUssQ0FBRSxFQUFHLG9CQUFxQix1QkFDL0JDLEdBQUksQ0FBRSxFQUFHLGlCQUFrQixvQkFDM0JDLEdBQUksQ0FBRSxFQUFHLHFCQUFzQix5QkFFL0JDLFNBQVUsQ0FBRSxFQUFHLEdBQUksS0FZcEIsU0FBU0MsR0FBUTNqQixFQUFTd04sR0FJekIsSUFBSTNNLEVBWUosT0FUQ0EsT0FENEMsSUFBakNiLEVBQVFvSyxxQkFDYnBLLEVBQVFvSyxxQkFBc0JvRCxHQUFPLFVBRUksSUFBN0J4TixFQUFRNEssaUJBQ3BCNUssRUFBUTRLLGlCQUFrQjRDLEdBQU8sS0FHakMsUUFHTTVLLElBQVI0SyxHQUFxQkEsR0FBT3JFLEVBQVVuSixFQUFTd04sR0FDNUMxTixFQUFPZ0IsTUFBTyxDQUFFZCxHQUFXYSxHQUc1QkEsRUFLUixTQUFTK2lCLEdBQWVoakIsRUFBT2lqQixHQUk5QixJQUhBLElBQUk1a0IsRUFBSSxFQUNQa1osRUFBSXZYLEVBQU1SLE9BRUhuQixFQUFJa1osRUFBR2xaLElBQ2QyZ0IsRUFBU0osSUFDUjVlLEVBQU8zQixHQUNQLGNBQ0M0a0IsR0FBZWpFLEVBQVNuZixJQUFLb2pCLEVBQWE1a0IsR0FBSyxlQTFDbkRva0IsR0FBUVMsTUFBUVQsR0FBUVUsTUFBUVYsR0FBUVcsU0FBV1gsR0FBUVksUUFBVVosR0FBUUMsTUFDN0VELEdBQVFhLEdBQUtiLEdBQVFJLEdBR2ZwbEIsRUFBUStrQixTQUNiQyxHQUFRYyxTQUFXZCxHQUFRRCxPQUFTLENBQUUsRUFBRywrQkFBZ0MsY0EyQzFFLElBQUloYixHQUFRLFlBRVosU0FBU2djLEdBQWV4akIsRUFBT1osRUFBU3FrQixFQUFTQyxFQUFXQyxHQU8zRCxJQU5BLElBQUlwakIsRUFBTXNNLEVBQUtELEVBQUtnWCxFQUFNQyxFQUFVNWlCLEVBQ25DNmlCLEVBQVcxa0IsRUFBUWdqQix5QkFDbkIyQixFQUFRLEdBQ1IxbEIsRUFBSSxFQUNKa1osRUFBSXZYLEVBQU1SLE9BRUhuQixFQUFJa1osRUFBR2xaLElBR2QsSUFGQWtDLEVBQU9QLEVBQU8zQixLQUVRLElBQVRrQyxFQUdaLEdBQXdCLFdBQW5CdkIsRUFBUXVCLEdBSVpyQixFQUFPZ0IsTUFBTzZqQixFQUFPeGpCLEVBQUs1QyxTQUFXLENBQUU0QyxHQUFTQSxRQUcxQyxHQUFNaUgsR0FBTW1DLEtBQU1wSixHQUlsQixDQVVOLElBVEFzTSxFQUFNQSxHQUFPaVgsRUFBU2psQixZQUFhTyxFQUFRWixjQUFlLFFBRzFEb08sR0FBUXNWLEdBQVM3WSxLQUFNOUksSUFBVSxDQUFFLEdBQUksS0FBUSxHQUFJb0QsY0FDbkRpZ0IsRUFBT25CLEdBQVM3VixJQUFTNlYsR0FBUUssU0FDakNqVyxFQUFJRSxVQUFZNlcsRUFBTSxHQUFNMWtCLEVBQU84a0IsY0FBZXpqQixHQUFTcWpCLEVBQU0sR0FHakUzaUIsRUFBSTJpQixFQUFNLEdBQ0YzaUIsS0FDUDRMLEVBQU1BLEVBQUkwRCxVQUtYclIsRUFBT2dCLE1BQU82akIsRUFBT2xYLEVBQUluRSxhQUd6Qm1FLEVBQU1pWCxFQUFTclYsWUFHWEQsWUFBYyxRQXpCbEJ1VixFQUFNOW1CLEtBQU1tQyxFQUFRNmtCLGVBQWdCMWpCLElBa0N2QyxJQUhBdWpCLEVBQVN0VixZQUFjLEdBRXZCblEsRUFBSSxFQUNNa0MsRUFBT3dqQixFQUFPMWxCLE1BR3ZCLEdBQUtxbEIsSUFBa0QsRUFBckN4a0IsRUFBTzZELFFBQVN4QyxFQUFNbWpCLEdBQ2xDQyxHQUNKQSxFQUFRMW1CLEtBQU1zRCxRQWdCaEIsR0FYQXNqQixFQUFXdEQsR0FBWWhnQixHQUd2QnNNLEVBQU1rVyxHQUFRZSxFQUFTamxCLFlBQWEwQixHQUFRLFVBR3ZDc2pCLEdBQ0piLEdBQWVuVyxHQUlYNFcsRUFFSixJQURBeGlCLEVBQUksRUFDTVYsRUFBT3NNLEVBQUs1TCxNQUNoQmtoQixHQUFZeFksS0FBTXBKLEVBQUsxQyxNQUFRLEtBQ25DNGxCLEVBQVF4bUIsS0FBTXNELEdBTWxCLE9BQU91akIsRUFJUixJQUNDSSxHQUFZLE9BQ1pDLEdBQWMsaURBQ2RDLEdBQWlCLHNCQUVsQixTQUFTQyxLQUNSLE9BQU8sRUFHUixTQUFTQyxLQUNSLE9BQU8sRUFTUixTQUFTQyxHQUFZaGtCLEVBQU0xQyxHQUMxQixPQUFTMEMsSUFNVixXQUNDLElBQ0MsT0FBT3hFLEVBQVN5VixjQUNmLE1BQVFnVCxLQVRRQyxLQUFxQyxVQUFUNW1CLEdBWS9DLFNBQVM2bUIsR0FBSW5rQixFQUFNb2tCLEVBQU94bEIsRUFBVTBmLEVBQU14ZixFQUFJdWxCLEdBQzdDLElBQUlDLEVBQVFobkIsRUFHWixHQUFzQixpQkFBVjhtQixFQUFxQixDQVNoQyxJQUFNOW1CLElBTm1CLGlCQUFic0IsSUFHWDBmLEVBQU9BLEdBQVExZixFQUNmQSxPQUFXNkMsR0FFRTJpQixFQUNiRCxHQUFJbmtCLEVBQU0xQyxFQUFNc0IsRUFBVTBmLEVBQU04RixFQUFPOW1CLEdBQVErbUIsR0FFaEQsT0FBT3JrQixFQXNCUixHQW5CYSxNQUFSc2UsR0FBc0IsTUFBTnhmLEdBR3BCQSxFQUFLRixFQUNMMGYsRUFBTzFmLE9BQVc2QyxHQUNELE1BQU4zQyxJQUNjLGlCQUFiRixHQUdYRSxFQUFLd2YsRUFDTEEsT0FBTzdjLElBSVAzQyxFQUFLd2YsRUFDTEEsRUFBTzFmLEVBQ1BBLE9BQVc2QyxLQUdELElBQVAzQyxFQUNKQSxFQUFLaWxCLFFBQ0MsSUFBTWpsQixFQUNaLE9BQU9rQixFQWVSLE9BWmEsSUFBUnFrQixJQUNKQyxFQUFTeGxCLEdBQ1RBLEVBQUssU0FBVXlsQixHQUlkLE9BREE1bEIsSUFBUzZsQixJQUFLRCxHQUNQRCxFQUFPN25CLE1BQU9iLEtBQU1xRSxhQUl6QjhDLEtBQU91aEIsRUFBT3ZoQixPQUFVdWhCLEVBQU92aEIsS0FBT3BFLEVBQU9vRSxTQUUxQy9DLEVBQUtILEtBQU0sV0FDakJsQixFQUFPNGxCLE1BQU1uTixJQUFLeGIsS0FBTXdvQixFQUFPdGxCLEVBQUl3ZixFQUFNMWYsS0ErYTNDLFNBQVM2bEIsR0FBZ0J0YSxFQUFJN00sRUFBTTBtQixHQUc1QkEsR0FRTnZGLEVBQVNKLElBQUtsVSxFQUFJN00sR0FBTSxHQUN4QnFCLEVBQU80bEIsTUFBTW5OLElBQUtqTixFQUFJN00sRUFBTSxDQUMzQjhOLFdBQVcsRUFDWGQsUUFBUyxTQUFVaWEsR0FDbEIsSUFBSUcsRUFBVXhWLEVBQ2J5VixFQUFRbEcsRUFBU25mLElBQUsxRCxLQUFNMEIsR0FFN0IsR0FBeUIsRUFBbEJpbkIsRUFBTUssV0FBbUJocEIsS0FBTTBCLElBS3JDLEdBQU1xbkIsRUFBTTFsQixRQWlDRU4sRUFBTzRsQixNQUFNeEosUUFBU3pkLElBQVUsSUFBS3VuQixjQUNsRE4sRUFBTU8sdUJBZk4sR0FkQUgsRUFBUXZvQixFQUFNRyxLQUFNMEQsV0FDcEJ3ZSxFQUFTSixJQUFLemlCLEtBQU0wQixFQUFNcW5CLEdBSzFCRCxFQUFXVixFQUFZcG9CLEtBQU0wQixHQUM3QjFCLEtBQU0wQixLQUVEcW5CLEtBREx6VixFQUFTdVAsRUFBU25mLElBQUsxRCxLQUFNMEIsS0FDSm9uQixFQUN4QmpHLEVBQVNKLElBQUt6aUIsS0FBTTBCLEdBQU0sR0FFMUI0UixFQUFTLEdBRUx5VixJQUFVelYsRUFLZCxPQUZBcVYsRUFBTVEsMkJBQ05SLEVBQU1TLGlCQUNDOVYsRUFBT3BNLFdBZUw2aEIsRUFBTTFsQixTQUdqQndmLEVBQVNKLElBQUt6aUIsS0FBTTBCLEVBQU0sQ0FDekJ3RixNQUFPbkUsRUFBTzRsQixNQUFNVSxRQUluQnRtQixFQUFPbUMsT0FBUTZqQixFQUFPLEdBQUtobUIsRUFBT3VtQixNQUFNaG1CLFdBQ3hDeWxCLEVBQU12b0IsTUFBTyxHQUNiUixRQUtGMm9CLEVBQU1RLHFDQXpFMEJ0akIsSUFBN0JnZCxFQUFTbmYsSUFBSzZLLEVBQUk3TSxJQUN0QnFCLEVBQU80bEIsTUFBTW5OLElBQUtqTixFQUFJN00sRUFBTXdtQixJQTVhL0JubEIsRUFBTzRsQixNQUFRLENBRWRucEIsT0FBUSxHQUVSZ2MsSUFBSyxTQUFVcFgsRUFBTW9rQixFQUFPOVosRUFBU2dVLEVBQU0xZixHQUUxQyxJQUFJdW1CLEVBQWFDLEVBQWE5WSxFQUM3QitZLEVBQVFDLEVBQUdDLEVBQ1h4SyxFQUFTeUssRUFBVWxvQixFQUFNbW9CLEVBQVlDLEVBQ3JDQyxFQUFXbEgsRUFBU25mLElBQUtVLEdBRzFCLEdBQU04ZCxFQUFZOWQsR0F1Q2xCLElBbENLc0ssRUFBUUEsVUFFWkEsR0FEQTZhLEVBQWM3YSxHQUNRQSxRQUN0QjFMLEVBQVd1bUIsRUFBWXZtQixVQUtuQkEsR0FDSkQsRUFBT3dOLEtBQUtNLGdCQUFpQm5CLEdBQWlCMU0sR0FJekMwTCxFQUFRdkgsT0FDYnVILEVBQVF2SCxLQUFPcEUsRUFBT29FLFNBSWZzaUIsRUFBU00sRUFBU04sVUFDekJBLEVBQVNNLEVBQVNOLE9BQVNucEIsT0FBT2dpQixPQUFRLFFBRW5Da0gsRUFBY08sRUFBU0MsVUFDOUJSLEVBQWNPLEVBQVNDLE9BQVMsU0FBVXhkLEdBSXpDLFlBQXlCLElBQVh6SixHQUEwQkEsRUFBTzRsQixNQUFNc0IsWUFBY3pkLEVBQUU5SyxLQUNwRXFCLEVBQU80bEIsTUFBTXVCLFNBQVNycEIsTUFBT3VELEVBQU1DLGdCQUFjd0IsSUFNcEQ2akIsR0FEQWxCLEdBQVVBLEdBQVMsSUFBSzNiLE1BQU9xUCxJQUFtQixDQUFFLEtBQzFDN1ksT0FDRnFtQixLQUVQaG9CLEVBQU9vb0IsR0FEUHBaLEVBQU11WCxHQUFlL2EsS0FBTXNiLEVBQU9rQixLQUFTLElBQ3BCLEdBQ3ZCRyxHQUFlblosRUFBSyxJQUFPLElBQUtwSixNQUFPLEtBQU10QyxPQUd2Q3RELElBS055ZCxFQUFVcGMsRUFBTzRsQixNQUFNeEosUUFBU3pkLElBQVUsR0FHMUNBLEdBQVNzQixFQUFXbWMsRUFBUThKLGFBQWU5SixFQUFRZ0wsV0FBY3pvQixFQUdqRXlkLEVBQVVwYyxFQUFPNGxCLE1BQU14SixRQUFTemQsSUFBVSxHQUcxQ2lvQixFQUFZNW1CLEVBQU9tQyxPQUFRLENBQzFCeEQsS0FBTUEsRUFDTm9vQixTQUFVQSxFQUNWcEgsS0FBTUEsRUFDTmhVLFFBQVNBLEVBQ1R2SCxLQUFNdUgsRUFBUXZILEtBQ2RuRSxTQUFVQSxFQUNWb0ksYUFBY3BJLEdBQVlELEVBQU82TyxLQUFLL0UsTUFBTXpCLGFBQWFvQyxLQUFNeEssR0FDL0R3TSxVQUFXcWEsRUFBV2pjLEtBQU0sTUFDMUIyYixJQUdLSyxFQUFXSCxFQUFRL25CLE9BQzFCa29CLEVBQVdILEVBQVEvbkIsR0FBUyxJQUNuQjBvQixjQUFnQixFQUduQmpMLEVBQVFrTCxRQUNpRCxJQUE5RGxMLEVBQVFrTCxNQUFNMXBCLEtBQU15RCxFQUFNc2UsRUFBTW1ILEVBQVlMLElBRXZDcGxCLEVBQUsyTCxrQkFDVDNMLEVBQUsyTCxpQkFBa0JyTyxFQUFNOG5CLElBSzNCckssRUFBUTNELE1BQ1oyRCxFQUFRM0QsSUFBSTdhLEtBQU15RCxFQUFNdWxCLEdBRWxCQSxFQUFVamIsUUFBUXZILE9BQ3ZCd2lCLEVBQVVqYixRQUFRdkgsS0FBT3VILEVBQVF2SCxPQUs5Qm5FLEVBQ0o0bUIsRUFBUzNrQixPQUFRMmtCLEVBQVNRLGdCQUFpQixFQUFHVCxHQUU5Q0MsRUFBUzlvQixLQUFNNm9CLEdBSWhCNW1CLEVBQU80bEIsTUFBTW5wQixPQUFRa0MsSUFBUyxJQU1oQ2tjLE9BQVEsU0FBVXhaLEVBQU1va0IsRUFBTzlaLEVBQVMxTCxFQUFVc25CLEdBRWpELElBQUl4bEIsRUFBR3lsQixFQUFXN1osRUFDakIrWSxFQUFRQyxFQUFHQyxFQUNYeEssRUFBU3lLLEVBQVVsb0IsRUFBTW1vQixFQUFZQyxFQUNyQ0MsRUFBV2xILEVBQVNELFFBQVN4ZSxJQUFVeWUsRUFBU25mLElBQUtVLEdBRXRELEdBQU0ybEIsSUFBZU4sRUFBU00sRUFBU04sUUFBdkMsQ0FPQSxJQURBQyxHQURBbEIsR0FBVUEsR0FBUyxJQUFLM2IsTUFBT3FQLElBQW1CLENBQUUsS0FDMUM3WSxPQUNGcW1CLEtBTVAsR0FKQWhvQixFQUFPb29CLEdBRFBwWixFQUFNdVgsR0FBZS9hLEtBQU1zYixFQUFPa0IsS0FBUyxJQUNwQixHQUN2QkcsR0FBZW5aLEVBQUssSUFBTyxJQUFLcEosTUFBTyxLQUFNdEMsT0FHdkN0RCxFQUFOLENBZUEsSUFSQXlkLEVBQVVwYyxFQUFPNGxCLE1BQU14SixRQUFTemQsSUFBVSxHQUUxQ2tvQixFQUFXSCxFQURYL25CLEdBQVNzQixFQUFXbWMsRUFBUThKLGFBQWU5SixFQUFRZ0wsV0FBY3pvQixJQUNwQyxHQUM3QmdQLEVBQU1BLEVBQUssSUFDVixJQUFJckcsT0FBUSxVQUFZd2YsRUFBV2pjLEtBQU0saUJBQW9CLFdBRzlEMmMsRUFBWXpsQixFQUFJOGtCLEVBQVN2bUIsT0FDakJ5QixLQUNQNmtCLEVBQVlDLEVBQVU5a0IsSUFFZndsQixHQUFlUixJQUFhSCxFQUFVRyxVQUN6Q3BiLEdBQVdBLEVBQVF2SCxPQUFTd2lCLEVBQVV4aUIsTUFDdEN1SixJQUFPQSxFQUFJbEQsS0FBTW1jLEVBQVVuYSxZQUMzQnhNLEdBQVlBLElBQWEybUIsRUFBVTNtQixXQUN4QixPQUFiQSxJQUFxQjJtQixFQUFVM21CLFlBQ2hDNG1CLEVBQVMza0IsT0FBUUgsRUFBRyxHQUVmNmtCLEVBQVUzbUIsVUFDZDRtQixFQUFTUSxnQkFFTGpMLEVBQVF2QixRQUNadUIsRUFBUXZCLE9BQU9qZCxLQUFNeUQsRUFBTXVsQixJQU96QlksSUFBY1gsRUFBU3ZtQixTQUNyQjhiLEVBQVFxTCxXQUNrRCxJQUEvRHJMLEVBQVFxTCxTQUFTN3BCLEtBQU15RCxFQUFNeWxCLEVBQVlFLEVBQVNDLFNBRWxEam5CLEVBQU8wbkIsWUFBYXJtQixFQUFNMUMsRUFBTXFvQixFQUFTQyxlQUduQ1AsRUFBUS9uQixTQTFDZixJQUFNQSxLQUFRK25CLEVBQ2IxbUIsRUFBTzRsQixNQUFNL0ssT0FBUXhaLEVBQU0xQyxFQUFPOG1CLEVBQU9rQixHQUFLaGIsRUFBUzFMLEdBQVUsR0E4Qy9ERCxFQUFPeUQsY0FBZWlqQixJQUMxQjVHLEVBQVNqRixPQUFReFosRUFBTSxtQkFJekI4bEIsU0FBVSxTQUFVUSxHQUVuQixJQUFJeG9CLEVBQUc0QyxFQUFHaEIsRUFBSzRRLEVBQVNpVixFQUFXZ0IsRUFDbENwVyxFQUFPLElBQUk1TyxNQUFPdEIsVUFBVWhCLFFBRzVCc2xCLEVBQVE1bEIsRUFBTzRsQixNQUFNaUMsSUFBS0YsR0FFMUJkLEdBQ0UvRyxFQUFTbmYsSUFBSzFELEtBQU0sV0FBY00sT0FBT2dpQixPQUFRLE9BQy9DcUcsRUFBTWpuQixPQUFVLEdBQ3BCeWQsRUFBVXBjLEVBQU80bEIsTUFBTXhKLFFBQVN3SixFQUFNam5CLE9BQVUsR0FLakQsSUFGQTZTLEVBQU0sR0FBTW9VLEVBRU56bUIsRUFBSSxFQUFHQSxFQUFJbUMsVUFBVWhCLE9BQVFuQixJQUNsQ3FTLEVBQU1yUyxHQUFNbUMsVUFBV25DLEdBTXhCLEdBSEF5bUIsRUFBTWtDLGVBQWlCN3FCLE1BR2xCbWYsRUFBUTJMLGNBQTJELElBQTVDM0wsRUFBUTJMLFlBQVlucUIsS0FBTVgsS0FBTTJvQixHQUE1RCxDQVNBLElBSkFnQyxFQUFlNW5CLEVBQU80bEIsTUFBTWlCLFNBQVNqcEIsS0FBTVgsS0FBTTJvQixFQUFPaUIsR0FHeEQxbkIsRUFBSSxHQUNNd1MsRUFBVWlXLEVBQWN6b0IsUUFBWXltQixFQUFNb0Msd0JBSW5ELElBSEFwQyxFQUFNcUMsY0FBZ0J0VyxFQUFRdFEsS0FFOUJVLEVBQUksR0FDTTZrQixFQUFZalYsRUFBUWtWLFNBQVU5a0IsUUFDdEM2akIsRUFBTXNDLGlDQUlEdEMsRUFBTXVDLGFBQXNDLElBQXhCdkIsRUFBVW5hLFlBQ25DbVosRUFBTXVDLFdBQVcxZCxLQUFNbWMsRUFBVW5hLGFBRWpDbVosRUFBTWdCLFVBQVlBLEVBQ2xCaEIsRUFBTWpHLEtBQU9pSCxFQUFVakgsVUFLVjdjLEtBSGIvQixJQUFVZixFQUFPNGxCLE1BQU14SixRQUFTd0ssRUFBVUcsV0FBYyxJQUFLRSxRQUM1REwsRUFBVWpiLFNBQVU3TixNQUFPNlQsRUFBUXRRLEtBQU1tUSxNQUdULEtBQXpCb1UsRUFBTXJWLE9BQVN4UCxLQUNyQjZrQixFQUFNUyxpQkFDTlQsRUFBTU8sb0JBWVgsT0FKSy9KLEVBQVFnTSxjQUNaaE0sRUFBUWdNLGFBQWF4cUIsS0FBTVgsS0FBTTJvQixHQUczQkEsRUFBTXJWLFNBR2RzVyxTQUFVLFNBQVVqQixFQUFPaUIsR0FDMUIsSUFBSTFuQixFQUFHeW5CLEVBQVczWCxFQUFLb1osRUFBaUJDLEVBQ3ZDVixFQUFlLEdBQ2ZQLEVBQWdCUixFQUFTUSxjQUN6QnZiLEVBQU04WixFQUFNbmpCLE9BR2IsR0FBSzRrQixHQUlKdmIsRUFBSXJOLFlBT2MsVUFBZm1uQixFQUFNam5CLE1BQW9DLEdBQWhCaW5CLEVBQU01UyxRQUVuQyxLQUFRbEgsSUFBUTdPLEtBQU02TyxFQUFNQSxFQUFJbE0sWUFBYzNDLEtBSTdDLEdBQXNCLElBQWpCNk8sRUFBSXJOLFdBQW9DLFVBQWZtbkIsRUFBTWpuQixPQUFxQyxJQUFqQm1OLEVBQUkxQyxVQUFzQixDQUdqRixJQUZBaWYsRUFBa0IsR0FDbEJDLEVBQW1CLEdBQ2JucEIsRUFBSSxFQUFHQSxFQUFJa29CLEVBQWVsb0IsU0FNRTJELElBQTVCd2xCLEVBRkxyWixHQUhBMlgsRUFBWUMsRUFBVTFuQixJQUdOYyxTQUFXLE9BRzFCcW9CLEVBQWtCclosR0FBUTJYLEVBQVV2ZSxjQUNDLEVBQXBDckksRUFBUWlQLEVBQUtoUyxNQUFPc2IsTUFBT3pNLEdBQzNCOUwsRUFBT3dOLEtBQU15QixFQUFLaFMsS0FBTSxLQUFNLENBQUU2TyxJQUFReEwsUUFFckNnb0IsRUFBa0JyWixJQUN0Qm9aLEVBQWdCdHFCLEtBQU02b0IsR0FHbkJ5QixFQUFnQi9uQixRQUNwQnNuQixFQUFhN3BCLEtBQU0sQ0FBRXNELEtBQU15SyxFQUFLK2EsU0FBVXdCLElBWTlDLE9BTEF2YyxFQUFNN08sS0FDRG9xQixFQUFnQlIsRUFBU3ZtQixRQUM3QnNuQixFQUFhN3BCLEtBQU0sQ0FBRXNELEtBQU15SyxFQUFLK2EsU0FBVUEsRUFBU3BwQixNQUFPNHBCLEtBR3BETyxHQUdSVyxRQUFTLFNBQVVsbUIsRUFBTW1tQixHQUN4QmpyQixPQUFPaWlCLGVBQWdCeGYsRUFBT3VtQixNQUFNaG1CLFVBQVc4QixFQUFNLENBQ3BEb21CLFlBQVksRUFDWmhKLGNBQWMsRUFFZDllLElBQUtuQyxFQUFZZ3FCLEdBQ2hCLFdBQ0MsR0FBS3ZyQixLQUFLeXJCLGNBQ1IsT0FBT0YsRUFBTXZyQixLQUFLeXJCLGdCQUdyQixXQUNDLEdBQUt6ckIsS0FBS3lyQixjQUNSLE9BQU96ckIsS0FBS3lyQixjQUFlcm1CLElBSS9CcWQsSUFBSyxTQUFVdmIsR0FDZDVHLE9BQU9paUIsZUFBZ0J2aUIsS0FBTW9GLEVBQU0sQ0FDbENvbUIsWUFBWSxFQUNaaEosY0FBYyxFQUNka0osVUFBVSxFQUNWeGtCLE1BQU9BLFFBTVgwakIsSUFBSyxTQUFVYSxHQUNkLE9BQU9BLEVBQWUxb0IsRUFBTytDLFNBQzVCMmxCLEVBQ0EsSUFBSTFvQixFQUFPdW1CLE1BQU9tQyxJQUdwQnRNLFFBQVMsQ0FDUndNLEtBQU0sQ0FHTEMsVUFBVSxHQUVYQyxNQUFPLENBR054QixNQUFPLFNBQVUzSCxHQUloQixJQUFJblUsRUFBS3ZPLE1BQVEwaUIsRUFXakIsT0FSS29ELEdBQWV0WSxLQUFNZSxFQUFHN00sT0FDNUI2TSxFQUFHc2QsT0FBU3pmLEVBQVVtQyxFQUFJLFVBRzFCc2EsR0FBZ0J0YSxFQUFJLFFBQVMyWixLQUl2QixHQUVSbUIsUUFBUyxTQUFVM0csR0FJbEIsSUFBSW5VLEVBQUt2TyxNQUFRMGlCLEVBVWpCLE9BUEtvRCxHQUFldFksS0FBTWUsRUFBRzdNLE9BQzVCNk0sRUFBR3NkLE9BQVN6ZixFQUFVbUMsRUFBSSxVQUUxQnNhLEdBQWdCdGEsRUFBSSxVQUlkLEdBS1JvWSxTQUFVLFNBQVVnQyxHQUNuQixJQUFJbmpCLEVBQVNtakIsRUFBTW5qQixPQUNuQixPQUFPc2dCLEdBQWV0WSxLQUFNaEksRUFBTzlELE9BQ2xDOEQsRUFBT3FtQixPQUFTemYsRUFBVTVHLEVBQVEsVUFDbENxZCxFQUFTbmYsSUFBSzhCLEVBQVEsVUFDdEI0RyxFQUFVNUcsRUFBUSxPQUlyQnNtQixhQUFjLENBQ2JYLGFBQWMsU0FBVXhDLFFBSUQ5aUIsSUFBakI4aUIsRUFBTXJWLFFBQXdCcVYsRUFBTThDLGdCQUN4QzlDLEVBQU04QyxjQUFjTSxZQUFjcEQsRUFBTXJWLFlBOEY3Q3ZRLEVBQU8wbkIsWUFBYyxTQUFVcm1CLEVBQU0xQyxFQUFNc29CLEdBR3JDNWxCLEVBQUsyYyxxQkFDVDNjLEVBQUsyYyxvQkFBcUJyZixFQUFNc29CLElBSWxDam5CLEVBQU91bUIsTUFBUSxTQUFVM25CLEVBQUtxcUIsR0FHN0IsS0FBUWhzQixnQkFBZ0IrQyxFQUFPdW1CLE9BQzlCLE9BQU8sSUFBSXZtQixFQUFPdW1CLE1BQU8zbkIsRUFBS3FxQixHQUkxQnJxQixHQUFPQSxFQUFJRCxNQUNmMUIsS0FBS3lyQixjQUFnQjlwQixFQUNyQjNCLEtBQUswQixLQUFPQyxFQUFJRCxLQUloQjFCLEtBQUtpc0IsbUJBQXFCdHFCLEVBQUl1cUIsdUJBQ0hybUIsSUFBekJsRSxFQUFJdXFCLG1CQUdnQixJQUFwQnZxQixFQUFJb3FCLFlBQ0w3RCxHQUNBQyxHQUtEbm9CLEtBQUt3RixPQUFXN0QsRUFBSTZELFFBQWtDLElBQXhCN0QsRUFBSTZELE9BQU9oRSxTQUN4Q0csRUFBSTZELE9BQU83QyxXQUNYaEIsRUFBSTZELE9BRUx4RixLQUFLZ3JCLGNBQWdCcnBCLEVBQUlxcEIsY0FDekJockIsS0FBS21zQixjQUFnQnhxQixFQUFJd3FCLGVBSXpCbnNCLEtBQUswQixLQUFPQyxFQUlScXFCLEdBQ0pqcEIsRUFBT21DLE9BQVFsRixLQUFNZ3NCLEdBSXRCaHNCLEtBQUtvc0IsVUFBWXpxQixHQUFPQSxFQUFJeXFCLFdBQWFwakIsS0FBS3FqQixNQUc5Q3JzQixLQUFNK0MsRUFBTytDLFVBQVksR0FLMUIvQyxFQUFPdW1CLE1BQU1obUIsVUFBWSxDQUN4QkUsWUFBYVQsRUFBT3VtQixNQUNwQjJDLG1CQUFvQjlELEdBQ3BCNEMscUJBQXNCNUMsR0FDdEI4Qyw4QkFBK0I5QyxHQUMvQm1FLGFBQWEsRUFFYmxELGVBQWdCLFdBQ2YsSUFBSTVjLEVBQUl4TSxLQUFLeXJCLGNBRWJ6ckIsS0FBS2lzQixtQkFBcUIvRCxHQUVyQjFiLElBQU14TSxLQUFLc3NCLGFBQ2Y5ZixFQUFFNGMsa0JBR0pGLGdCQUFpQixXQUNoQixJQUFJMWMsRUFBSXhNLEtBQUt5ckIsY0FFYnpyQixLQUFLK3FCLHFCQUF1QjdDLEdBRXZCMWIsSUFBTXhNLEtBQUtzc0IsYUFDZjlmLEVBQUUwYyxtQkFHSkMseUJBQTBCLFdBQ3pCLElBQUkzYyxFQUFJeE0sS0FBS3lyQixjQUVienJCLEtBQUtpckIsOEJBQWdDL0MsR0FFaEMxYixJQUFNeE0sS0FBS3NzQixhQUNmOWYsRUFBRTJjLDJCQUdIbnBCLEtBQUtrcEIsb0JBS1BubUIsRUFBT2tCLEtBQU0sQ0FDWnNvQixRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsWUFBWSxFQUNaQyxnQkFBZ0IsRUFDaEJDLFNBQVMsRUFDVEMsUUFBUSxFQUNSQyxZQUFZLEVBQ1pDLFNBQVMsRUFDVEMsT0FBTyxFQUNQQyxPQUFPLEVBQ1BDLFVBQVUsRUFDVkMsTUFBTSxFQUNOQyxNQUFRLEVBQ1JwckIsTUFBTSxFQUNOcXJCLFVBQVUsRUFDVmxmLEtBQUssRUFDTG1mLFNBQVMsRUFDVHRYLFFBQVEsRUFDUnVYLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxXQUFXLEVBQ1hDLGFBQWEsRUFDYkMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLGVBQWUsRUFDZkMsV0FBVyxFQUNYQyxTQUFTLEVBRVRDLE1BQU8sU0FBVXZGLEdBQ2hCLElBQUk1UyxFQUFTNFMsRUFBTTVTLE9BR25CLE9BQW9CLE1BQWY0UyxFQUFNdUYsT0FBaUJuRyxHQUFVdmEsS0FBTW1iLEVBQU1qbkIsTUFDeEIsTUFBbEJpbkIsRUFBTXlFLFNBQW1CekUsRUFBTXlFLFNBQVd6RSxFQUFNMEUsU0FJbEQxRSxFQUFNdUYsWUFBb0Jyb0IsSUFBWGtRLEdBQXdCaVMsR0FBWXhhLEtBQU1tYixFQUFNam5CLE1BQ3RELEVBQVRxVSxFQUNHLEVBR00sRUFBVEEsRUFDRyxFQUdNLEVBQVRBLEVBQ0csRUFHRCxFQUdENFMsRUFBTXVGLFFBRVpuckIsRUFBTzRsQixNQUFNMkMsU0FFaEJ2b0IsRUFBT2tCLEtBQU0sQ0FBRW1SLE1BQU8sVUFBVytZLEtBQU0sWUFBYyxTQUFVenNCLEVBQU11bkIsR0FDcEVsbUIsRUFBTzRsQixNQUFNeEosUUFBU3pkLEdBQVMsQ0FHOUIyb0IsTUFBTyxXQVFOLE9BSEF4QixHQUFnQjdvQixLQUFNMEIsRUFBTTBtQixLQUdyQixHQUVSaUIsUUFBUyxXQU1SLE9BSEFSLEdBQWdCN29CLEtBQU0wQixJQUdmLEdBR1J1bkIsYUFBY0EsS0FZaEJsbUIsRUFBT2tCLEtBQU0sQ0FDWm1xQixXQUFZLFlBQ1pDLFdBQVksV0FDWkMsYUFBYyxjQUNkQyxhQUFjLGNBQ1osU0FBVUMsRUFBTTVELEdBQ2xCN25CLEVBQU80bEIsTUFBTXhKLFFBQVNxUCxHQUFTLENBQzlCdkYsYUFBYzJCLEVBQ2RULFNBQVVTLEVBRVZaLE9BQVEsU0FBVXJCLEdBQ2pCLElBQUk3a0IsRUFFSDJxQixFQUFVOUYsRUFBTXdELGNBQ2hCeEMsRUFBWWhCLEVBQU1nQixVQVNuQixPQUxNOEUsSUFBYUEsSUFOVHp1QixNQU1nQytDLEVBQU9nRyxTQU52Qy9JLEtBTXlEeXVCLE1BQ2xFOUYsRUFBTWpuQixLQUFPaW9CLEVBQVVHLFNBQ3ZCaG1CLEVBQU02bEIsRUFBVWpiLFFBQVE3TixNQUFPYixLQUFNcUUsV0FDckNza0IsRUFBTWpuQixLQUFPa3BCLEdBRVA5bUIsTUFLVmYsRUFBT0csR0FBR2dDLE9BQVEsQ0FFakJxakIsR0FBSSxTQUFVQyxFQUFPeGxCLEVBQVUwZixFQUFNeGYsR0FDcEMsT0FBT3FsQixHQUFJdm9CLEtBQU13b0IsRUFBT3hsQixFQUFVMGYsRUFBTXhmLElBRXpDdWxCLElBQUssU0FBVUQsRUFBT3hsQixFQUFVMGYsRUFBTXhmLEdBQ3JDLE9BQU9xbEIsR0FBSXZvQixLQUFNd29CLEVBQU94bEIsRUFBVTBmLEVBQU14ZixFQUFJLElBRTdDMGxCLElBQUssU0FBVUosRUFBT3hsQixFQUFVRSxHQUMvQixJQUFJeW1CLEVBQVdqb0IsRUFDZixHQUFLOG1CLEdBQVNBLEVBQU1ZLGdCQUFrQlosRUFBTW1CLFVBVzNDLE9BUkFBLEVBQVluQixFQUFNbUIsVUFDbEI1bUIsRUFBUXlsQixFQUFNcUMsZ0JBQWlCakMsSUFDOUJlLEVBQVVuYSxVQUNUbWEsRUFBVUcsU0FBVyxJQUFNSCxFQUFVbmEsVUFDckNtYSxFQUFVRyxTQUNYSCxFQUFVM21CLFNBQ1YybUIsRUFBVWpiLFNBRUoxTyxLQUVSLEdBQXNCLGlCQUFWd29CLEVBaUJaLE9BVGtCLElBQWJ4bEIsR0FBMEMsbUJBQWJBLElBR2pDRSxFQUFLRixFQUNMQSxPQUFXNkMsSUFFQSxJQUFQM0MsSUFDSkEsRUFBS2lsQixJQUVDbm9CLEtBQUtpRSxLQUFNLFdBQ2pCbEIsRUFBTzRsQixNQUFNL0ssT0FBUTVkLEtBQU13b0IsRUFBT3RsQixFQUFJRixLQWZ0QyxJQUFNdEIsS0FBUThtQixFQUNieG9CLEtBQUs0b0IsSUFBS2xuQixFQUFNc0IsRUFBVXdsQixFQUFPOW1CLElBRWxDLE9BQU8xQixRQWtCVixJQUtDMHVCLEdBQWUsd0JBR2ZDLEdBQVcsb0NBQ1hDLEdBQWUsMkNBR2hCLFNBQVNDLEdBQW9CenFCLEVBQU00WCxHQUNsQyxPQUFLNVAsRUFBVWhJLEVBQU0sVUFDcEJnSSxFQUErQixLQUFyQjRQLEVBQVF4YSxTQUFrQndhLEVBQVVBLEVBQVExSixXQUFZLE9BRTNEdlAsRUFBUXFCLEdBQU8yVyxTQUFVLFNBQVcsSUFHckMzVyxFQUlSLFNBQVMwcUIsR0FBZTFxQixHQUV2QixPQURBQSxFQUFLMUMsTUFBeUMsT0FBaEMwQyxFQUFLN0IsYUFBYyxTQUFzQixJQUFNNkIsRUFBSzFDLEtBQzNEMEMsRUFFUixTQUFTMnFCLEdBQWUzcUIsR0FPdkIsTUFOMkMsV0FBcENBLEVBQUsxQyxNQUFRLElBQUtsQixNQUFPLEVBQUcsR0FDbEM0RCxFQUFLMUMsS0FBTzBDLEVBQUsxQyxLQUFLbEIsTUFBTyxHQUU3QjRELEVBQUsySixnQkFBaUIsUUFHaEIzSixFQUdSLFNBQVM0cUIsR0FBZ0JydEIsRUFBS3N0QixHQUM3QixJQUFJL3NCLEVBQUdrWixFQUFHMVosRUFBZ0J3dEIsRUFBVUMsRUFBVTFGLEVBRTlDLEdBQXVCLElBQWxCd0YsRUFBS3p0QixTQUFWLENBS0EsR0FBS3FoQixFQUFTRCxRQUFTamhCLEtBRXRCOG5CLEVBRFc1RyxFQUFTbmYsSUFBSy9CLEdBQ1A4bkIsUUFLakIsSUFBTS9uQixLQUZObWhCLEVBQVNqRixPQUFRcVIsRUFBTSxpQkFFVHhGLEVBQ2IsSUFBTXZuQixFQUFJLEVBQUdrWixFQUFJcU8sRUFBUS9uQixHQUFPMkIsT0FBUW5CLEVBQUlrWixFQUFHbFosSUFDOUNhLEVBQU80bEIsTUFBTW5OLElBQUt5VCxFQUFNdnRCLEVBQU0rbkIsRUFBUS9uQixHQUFRUSxJQU83QzRnQixFQUFTRixRQUFTamhCLEtBQ3RCdXRCLEVBQVdwTSxFQUFTMUIsT0FBUXpmLEdBQzVCd3RCLEVBQVdwc0IsRUFBT21DLE9BQVEsR0FBSWdxQixHQUU5QnBNLEVBQVNMLElBQUt3TSxFQUFNRSxLQWtCdEIsU0FBU0MsR0FBVUMsRUFBWTlhLEVBQU1yUSxFQUFVc2pCLEdBRzlDalQsRUFBTzlULEVBQU04VCxHQUViLElBQUlvVCxFQUFVcmpCLEVBQU9nakIsRUFBU2dJLEVBQVl0dEIsRUFBTUMsRUFDL0NDLEVBQUksRUFDSmtaLEVBQUlpVSxFQUFXaHNCLE9BQ2Zrc0IsRUFBV25VLEVBQUksRUFDZmxVLEVBQVFxTixFQUFNLEdBQ2RpYixFQUFrQmp1QixFQUFZMkYsR0FHL0IsR0FBS3NvQixHQUNHLEVBQUpwVSxHQUEwQixpQkFBVmxVLElBQ2hCNUYsRUFBUTRrQixZQUFjeUksR0FBU25oQixLQUFNdEcsR0FDeEMsT0FBT21vQixFQUFXcHJCLEtBQU0sU0FBVXFYLEdBQ2pDLElBQUliLEVBQU80VSxFQUFXOXFCLEdBQUkrVyxHQUNyQmtVLElBQ0pqYixFQUFNLEdBQU1yTixFQUFNdkcsS0FBTVgsS0FBTXNiLEVBQU9iLEVBQUtnVixTQUUzQ0wsR0FBVTNVLEVBQU1sRyxFQUFNclEsRUFBVXNqQixLQUlsQyxHQUFLcE0sSUFFSjlXLEdBREFxakIsRUFBV04sR0FBZTlTLEVBQU04YSxFQUFZLEdBQUlwaUIsZUFBZSxFQUFPb2lCLEVBQVk3SCxJQUNqRWxWLFdBRW1CLElBQS9CcVYsRUFBU3BiLFdBQVdsSixTQUN4QnNrQixFQUFXcmpCLEdBSVBBLEdBQVNrakIsR0FBVSxDQU92QixJQUxBOEgsR0FEQWhJLEVBQVV2a0IsRUFBT29CLElBQUt5aUIsR0FBUWUsRUFBVSxVQUFZbUgsS0FDL0J6ckIsT0FLYm5CLEVBQUlrWixFQUFHbFosSUFDZEYsRUFBTzJsQixFQUVGemxCLElBQU1xdEIsSUFDVnZ0QixFQUFPZSxFQUFPd0MsTUFBT3ZELEdBQU0sR0FBTSxHQUc1QnN0QixHQUlKdnNCLEVBQU9nQixNQUFPdWpCLEVBQVNWLEdBQVE1a0IsRUFBTSxZQUl2Q2tDLEVBQVN2RCxLQUFNMHVCLEVBQVludEIsR0FBS0YsRUFBTUUsR0FHdkMsR0FBS290QixFQU9KLElBTkFydEIsRUFBTXFsQixFQUFTQSxFQUFRamtCLE9BQVMsR0FBSTRKLGNBR3BDbEssRUFBT29CLElBQUttakIsRUFBU3lILElBR2Y3c0IsRUFBSSxFQUFHQSxFQUFJb3RCLEVBQVlwdEIsSUFDNUJGLEVBQU9zbEIsRUFBU3BsQixHQUNYOGpCLEdBQVl4WSxLQUFNeEwsRUFBS04sTUFBUSxNQUNsQ21oQixFQUFTekIsT0FBUXBmLEVBQU0sZUFDeEJlLEVBQU9nRyxTQUFVOUcsRUFBS0QsS0FFakJBLEVBQUtMLEtBQThDLFlBQXJDSyxFQUFLTixNQUFRLElBQUs4RixjQUcvQnpFLEVBQU8yc0IsV0FBYTF0QixFQUFLSCxVQUM3QmtCLEVBQU8yc0IsU0FBVTF0QixFQUFLTCxJQUFLLENBQzFCQyxNQUFPSSxFQUFLSixPQUFTSSxFQUFLTyxhQUFjLFVBQ3RDTixHQUdKSCxFQUFTRSxFQUFLcVEsWUFBWXBNLFFBQVMyb0IsR0FBYyxJQUFNNXNCLEVBQU1DLElBUW5FLE9BQU9vdEIsRUFHUixTQUFTelIsR0FBUXhaLEVBQU1wQixFQUFVMnNCLEdBS2hDLElBSkEsSUFBSTN0QixFQUNINGxCLEVBQVE1a0IsRUFBV0QsRUFBT3NOLE9BQVFyTixFQUFVb0IsR0FBU0EsRUFDckRsQyxFQUFJLEVBRTRCLE9BQXZCRixFQUFPNGxCLEVBQU8xbEIsSUFBZUEsSUFDaEN5dEIsR0FBOEIsSUFBbEIzdEIsRUFBS1IsVUFDdEJ1QixFQUFPNnNCLFVBQVdoSixHQUFRNWtCLElBR3RCQSxFQUFLVyxhQUNKZ3RCLEdBQVl2TCxHQUFZcGlCLElBQzVCNmtCLEdBQWVELEdBQVE1a0IsRUFBTSxXQUU5QkEsRUFBS1csV0FBV0MsWUFBYVosSUFJL0IsT0FBT29DLEVBR1JyQixFQUFPbUMsT0FBUSxDQUNkMmlCLGNBQWUsU0FBVTRILEdBQ3hCLE9BQU9BLEdBR1JscUIsTUFBTyxTQUFVbkIsRUFBTXlyQixFQUFlQyxHQUNyQyxJQUFJNXRCLEVBQUdrWixFQUFHMlUsRUFBYUMsRUFwSU5ydUIsRUFBS3N0QixFQUNuQjdpQixFQW9JRjdHLEVBQVFuQixFQUFLK2hCLFdBQVcsR0FDeEI4SixFQUFTN0wsR0FBWWhnQixHQUd0QixLQUFNOUMsRUFBUThrQixnQkFBc0MsSUFBbEJoaUIsRUFBSzVDLFVBQW9DLEtBQWxCNEMsRUFBSzVDLFVBQzNEdUIsRUFBTytXLFNBQVUxVixJQU1uQixJQUhBNHJCLEVBQWVwSixHQUFRcmhCLEdBR2pCckQsRUFBSSxFQUFHa1osR0FGYjJVLEVBQWNuSixHQUFReGlCLElBRU9mLE9BQVFuQixFQUFJa1osRUFBR2xaLElBaEo1QlAsRUFpSkxvdUIsRUFBYTd0QixHQWpKSCtzQixFQWlKUWUsRUFBYzl0QixHQTdJM0IsV0FIZGtLLEVBQVc2aUIsRUFBSzdpQixTQUFTNUUsZ0JBR0FzZSxHQUFldFksS0FBTTdMLEVBQUlELE1BQ3JEdXRCLEVBQUt2WixRQUFVL1QsRUFBSStULFFBR0ssVUFBYnRKLEdBQXFDLGFBQWJBLElBQ25DNmlCLEVBQUtyVixhQUFlalksRUFBSWlZLGNBNkl4QixHQUFLaVcsRUFDSixHQUFLQyxFQUlKLElBSEFDLEVBQWNBLEdBQWVuSixHQUFReGlCLEdBQ3JDNHJCLEVBQWVBLEdBQWdCcEosR0FBUXJoQixHQUVqQ3JELEVBQUksRUFBR2taLEVBQUkyVSxFQUFZMXNCLE9BQVFuQixFQUFJa1osRUFBR2xaLElBQzNDOHNCLEdBQWdCZSxFQUFhN3RCLEdBQUs4dEIsRUFBYzl0QixTQUdqRDhzQixHQUFnQjVxQixFQUFNbUIsR0FXeEIsT0FMMkIsR0FEM0J5cUIsRUFBZXBKLEdBQVFyaEIsRUFBTyxXQUNabEMsUUFDakJ3akIsR0FBZW1KLEdBQWVDLEdBQVVySixHQUFReGlCLEVBQU0sV0FJaERtQixHQUdScXFCLFVBQVcsU0FBVS9yQixHQUtwQixJQUpBLElBQUk2ZSxFQUFNdGUsRUFBTTFDLEVBQ2Z5ZCxFQUFVcGMsRUFBTzRsQixNQUFNeEosUUFDdkJqZCxFQUFJLE9BRTZCMkQsS0FBeEJ6QixFQUFPUCxFQUFPM0IsSUFBcUJBLElBQzVDLEdBQUtnZ0IsRUFBWTlkLEdBQVMsQ0FDekIsR0FBT3NlLEVBQU90ZSxFQUFNeWUsRUFBUy9jLFNBQWMsQ0FDMUMsR0FBSzRjLEVBQUsrRyxPQUNULElBQU0vbkIsS0FBUWdoQixFQUFLK0csT0FDYnRLLEVBQVN6ZCxHQUNicUIsRUFBTzRsQixNQUFNL0ssT0FBUXhaLEVBQU0xQyxHQUkzQnFCLEVBQU8wbkIsWUFBYXJtQixFQUFNMUMsRUFBTWdoQixFQUFLc0gsUUFPeEM1bEIsRUFBTXllLEVBQVMvYyxjQUFZRCxFQUV2QnpCLEVBQU0wZSxFQUFTaGQsV0FJbkIxQixFQUFNMGUsRUFBU2hkLGNBQVlELE9BT2hDOUMsRUFBT0csR0FBR2dDLE9BQVEsQ0FDakJnckIsT0FBUSxTQUFVbHRCLEdBQ2pCLE9BQU80YSxHQUFRNWQsS0FBTWdELEdBQVUsSUFHaEM0YSxPQUFRLFNBQVU1YSxHQUNqQixPQUFPNGEsR0FBUTVkLEtBQU1nRCxJQUd0QlYsS0FBTSxTQUFVNEUsR0FDZixPQUFPa2EsRUFBUXBoQixLQUFNLFNBQVVrSCxHQUM5QixZQUFpQnJCLElBQVZxQixFQUNObkUsRUFBT1QsS0FBTXRDLE1BQ2JBLEtBQUs2VixRQUFRNVIsS0FBTSxXQUNLLElBQWxCakUsS0FBS3dCLFVBQW9DLEtBQWxCeEIsS0FBS3dCLFVBQXFDLElBQWxCeEIsS0FBS3dCLFdBQ3hEeEIsS0FBS3FTLFlBQWNuTCxNQUdwQixLQUFNQSxFQUFPN0MsVUFBVWhCLFNBRzNCOHNCLE9BQVEsV0FDUCxPQUFPZixHQUFVcHZCLEtBQU1xRSxVQUFXLFNBQVVELEdBQ3BCLElBQWxCcEUsS0FBS3dCLFVBQW9DLEtBQWxCeEIsS0FBS3dCLFVBQXFDLElBQWxCeEIsS0FBS3dCLFVBQzNDcXRCLEdBQW9CN3VCLEtBQU1vRSxHQUNoQzFCLFlBQWEwQixNQUt2QmdzQixRQUFTLFdBQ1IsT0FBT2hCLEdBQVVwdkIsS0FBTXFFLFVBQVcsU0FBVUQsR0FDM0MsR0FBdUIsSUFBbEJwRSxLQUFLd0IsVUFBb0MsS0FBbEJ4QixLQUFLd0IsVUFBcUMsSUFBbEJ4QixLQUFLd0IsU0FBaUIsQ0FDekUsSUFBSWdFLEVBQVNxcEIsR0FBb0I3dUIsS0FBTW9FLEdBQ3ZDb0IsRUFBTzZxQixhQUFjanNCLEVBQU1vQixFQUFPOE0sZ0JBS3JDZ2UsT0FBUSxXQUNQLE9BQU9sQixHQUFVcHZCLEtBQU1xRSxVQUFXLFNBQVVELEdBQ3RDcEUsS0FBSzJDLFlBQ1QzQyxLQUFLMkMsV0FBVzB0QixhQUFjanNCLEVBQU1wRSxTQUt2Q3V3QixNQUFPLFdBQ04sT0FBT25CLEdBQVVwdkIsS0FBTXFFLFVBQVcsU0FBVUQsR0FDdENwRSxLQUFLMkMsWUFDVDNDLEtBQUsyQyxXQUFXMHRCLGFBQWNqc0IsRUFBTXBFLEtBQUtnUCxnQkFLNUM2RyxNQUFPLFdBSU4sSUFIQSxJQUFJelIsRUFDSGxDLEVBQUksRUFFMkIsT0FBdEJrQyxFQUFPcEUsS0FBTWtDLElBQWVBLElBQ2QsSUFBbEJrQyxFQUFLNUMsV0FHVHVCLEVBQU82c0IsVUFBV2hKLEdBQVF4aUIsR0FBTSxJQUdoQ0EsRUFBS2lPLFlBQWMsSUFJckIsT0FBT3JTLE1BR1J1RixNQUFPLFNBQVVzcUIsRUFBZUMsR0FJL0IsT0FIQUQsRUFBaUMsTUFBakJBLEdBQWdDQSxFQUNoREMsRUFBeUMsTUFBckJBLEVBQTRCRCxFQUFnQkMsRUFFekQ5dkIsS0FBS21FLElBQUssV0FDaEIsT0FBT3BCLEVBQU93QyxNQUFPdkYsS0FBTTZ2QixFQUFlQyxNQUk1Q0wsS0FBTSxTQUFVdm9CLEdBQ2YsT0FBT2thLEVBQVFwaEIsS0FBTSxTQUFVa0gsR0FDOUIsSUFBSTlDLEVBQU9wRSxLQUFNLElBQU8sR0FDdkJrQyxFQUFJLEVBQ0prWixFQUFJcGIsS0FBS3FELE9BRVYsUUFBZXdDLElBQVZxQixHQUF5QyxJQUFsQjlDLEVBQUs1QyxTQUNoQyxPQUFPNEMsRUFBS3dNLFVBSWIsR0FBc0IsaUJBQVYxSixJQUF1QnduQixHQUFhbGhCLEtBQU10RyxLQUNwRG9mLElBQVdQLEdBQVM3WSxLQUFNaEcsSUFBVyxDQUFFLEdBQUksS0FBUSxHQUFJTSxlQUFrQixDQUUxRU4sRUFBUW5FLEVBQU84a0IsY0FBZTNnQixHQUU5QixJQUNDLEtBQVFoRixFQUFJa1osRUFBR2xaLElBSVMsS0FIdkJrQyxFQUFPcEUsS0FBTWtDLElBQU8sSUFHVlYsV0FDVHVCLEVBQU82c0IsVUFBV2hKLEdBQVF4aUIsR0FBTSxJQUNoQ0EsRUFBS3dNLFVBQVkxSixHQUluQjlDLEVBQU8sRUFHTixNQUFRb0ksS0FHTnBJLEdBQ0pwRSxLQUFLNlYsUUFBUXNhLE9BQVFqcEIsSUFFcEIsS0FBTUEsRUFBTzdDLFVBQVVoQixTQUczQm10QixZQUFhLFdBQ1osSUFBSWhKLEVBQVUsR0FHZCxPQUFPNEgsR0FBVXB2QixLQUFNcUUsVUFBVyxTQUFVRCxHQUMzQyxJQUFJOFAsRUFBU2xVLEtBQUsyQyxXQUViSSxFQUFPNkQsUUFBUzVHLEtBQU13bkIsR0FBWSxJQUN0Q3prQixFQUFPNnNCLFVBQVdoSixHQUFRNW1CLE9BQ3JCa1UsR0FDSkEsRUFBT3VjLGFBQWNyc0IsRUFBTXBFLFFBSzNCd25CLE1BSUx6a0IsRUFBT2tCLEtBQU0sQ0FDWnlzQixTQUFVLFNBQ1ZDLFVBQVcsVUFDWE4sYUFBYyxTQUNkTyxZQUFhLFFBQ2JDLFdBQVksZUFDVixTQUFVenJCLEVBQU0wckIsR0FDbEIvdEIsRUFBT0csR0FBSWtDLEdBQVMsU0FBVXBDLEdBTzdCLElBTkEsSUFBSWEsRUFDSEMsRUFBTSxHQUNOaXRCLEVBQVNodUIsRUFBUUMsR0FDakJ3QixFQUFPdXNCLEVBQU8xdEIsT0FBUyxFQUN2Qm5CLEVBQUksRUFFR0EsR0FBS3NDLEVBQU10QyxJQUNsQjJCLEVBQVEzQixJQUFNc0MsRUFBT3hFLEtBQU9BLEtBQUt1RixPQUFPLEdBQ3hDeEMsRUFBUWd1QixFQUFRN3VCLElBQU80dUIsR0FBWWp0QixHQUluQy9DLEVBQUtELE1BQU9pRCxFQUFLRCxFQUFNSCxPQUd4QixPQUFPMUQsS0FBSzRELFVBQVdFLE1BbUJkLFNBQVBrdEIsR0FBaUI1c0IsRUFBTWUsRUFBU2pCLEdBQ25DLElBQUlKLEVBQUtzQixFQUNSNnJCLEVBQU0sR0FHUCxJQUFNN3JCLEtBQVFELEVBQ2I4ckIsRUFBSzdyQixHQUFTaEIsRUFBS29nQixNQUFPcGYsR0FDMUJoQixFQUFLb2dCLE1BQU9wZixHQUFTRCxFQUFTQyxHQU0vQixJQUFNQSxLQUhOdEIsRUFBTUksRUFBU3ZELEtBQU15RCxHQUdQZSxFQUNiZixFQUFLb2dCLE1BQU9wZixHQUFTNnJCLEVBQUs3ckIsR0FHM0IsT0FBT3RCLEVBakNSLElBNkZLb3RCLEdBQWtCQyxHQUFzQkMsR0FBa0JDLEdBQzdEQyxHQUF5QkMsR0FDekJDLEdBQ0EzTCxHQWhHRTRMLEdBQVksSUFBSXBuQixPQUFRLEtBQU8yWixHQUFPLGtCQUFtQixLQUV6RDBOLEdBQVksU0FBVXR0QixHQUt4QixJQUFJOG9CLEVBQU85b0IsRUFBSzZJLGNBQWM0QyxZQU05QixPQUpNcWQsR0FBU0EsRUFBS3lFLFNBQ25CekUsRUFBT250QixHQUdEbXRCLEVBQUswRSxpQkFBa0J4dEIsSUF3QjVCeXRCLEdBQVksSUFBSXhuQixPQUFROFosR0FBVXZXLEtBQU0sS0FBTyxLQVFsRCxTQUFTa2tCLEtBR1IsR0FBTWpNLEdBQU4sQ0FJQTJMLEdBQVVoTixNQUFNdU4sUUFBVSwrRUFFMUJsTSxHQUFJckIsTUFBTXVOLFFBQ1QsNEhBR0RyaUIsR0FBZ0JoTixZQUFhOHVCLElBQVk5dUIsWUFBYW1qQixJQUV0RCxJQUFJbU0sRUFBV2p5QixFQUFPNnhCLGlCQUFrQi9MLElBQ3hDcUwsR0FBb0MsT0FBakJjLEVBQVNsaUIsSUFHNUJ5aEIsR0FBc0UsS0FBOUNVLEdBQW9CRCxFQUFTRSxZQUlyRHJNLEdBQUlyQixNQUFNMk4sTUFBUSxNQUNsQmQsR0FBNkQsS0FBekNZLEdBQW9CRCxFQUFTRyxPQUlqRGhCLEdBQWdFLEtBQXpDYyxHQUFvQkQsRUFBU0ksT0FNcER2TSxHQUFJckIsTUFBTTZOLFNBQVcsV0FDckJqQixHQUFpRSxLQUE5Q2EsR0FBb0JwTSxHQUFJeU0sWUFBYyxHQUV6RDVpQixHQUFnQjlNLFlBQWE0dUIsSUFJN0IzTCxHQUFNLE1BR1AsU0FBU29NLEdBQW9CTSxHQUM1QixPQUFPeHNCLEtBQUt5c0IsTUFBT0MsV0FBWUYsSUF5RWpDLFNBQVNHLEdBQVF0dUIsRUFBTWdCLEVBQU11dEIsR0FDNUIsSUFBSVAsRUFBT1EsRUFBVUMsRUFBVS91QixFQU05QjBnQixFQUFRcGdCLEVBQUtvZ0IsTUFxQ2QsT0FuQ0FtTyxFQUFXQSxHQUFZakIsR0FBV3R0QixNQVFwQixNQUZiTixFQUFNNnVCLEVBQVNHLGlCQUFrQjF0QixJQUFVdXRCLEVBQVV2dEIsS0FFakNnZixHQUFZaGdCLEtBQy9CTixFQUFNZixFQUFPeWhCLE1BQU9wZ0IsRUFBTWdCLEtBUXJCOUQsRUFBUXl4QixrQkFBb0J0QixHQUFVamtCLEtBQU0xSixJQUFTK3RCLEdBQVVya0IsS0FBTXBJLEtBRzFFZ3RCLEVBQVE1TixFQUFNNE4sTUFDZFEsRUFBV3BPLEVBQU1vTyxTQUNqQkMsRUFBV3JPLEVBQU1xTyxTQUdqQnJPLEVBQU1vTyxTQUFXcE8sRUFBTXFPLFNBQVdyTyxFQUFNNE4sTUFBUXR1QixFQUNoREEsRUFBTTZ1QixFQUFTUCxNQUdmNU4sRUFBTTROLE1BQVFBLEVBQ2Q1TixFQUFNb08sU0FBV0EsRUFDakJwTyxFQUFNcU8sU0FBV0EsU0FJSmh0QixJQUFSL0IsRUFJTkEsRUFBTSxHQUNOQSxFQUlGLFNBQVNrdkIsR0FBY0MsRUFBYUMsR0FHbkMsTUFBTyxDQUNOeHZCLElBQUssV0FDSixJQUFLdXZCLElBU0wsT0FBU2p6QixLQUFLMEQsSUFBTXd2QixHQUFTcnlCLE1BQU9iLEtBQU1xRSxrQkFMbENyRSxLQUFLMEQsTUFsSWQ4dEIsR0FBWTV4QixFQUFTeUMsY0FBZSxRQUNwQ3dqQixHQUFNam1CLEVBQVN5QyxjQUFlLFFBR3JCbWlCLFFBTVZxQixHQUFJckIsTUFBTTJPLGVBQWlCLGNBQzNCdE4sR0FBSU0sV0FBVyxHQUFPM0IsTUFBTTJPLGVBQWlCLEdBQzdDN3hCLEVBQVE4eEIsZ0JBQStDLGdCQUE3QnZOLEdBQUlyQixNQUFNMk8sZUFFcENwd0IsRUFBT21DLE9BQVE1RCxFQUFTLENBQ3ZCK3hCLGtCQUFtQixXQUVsQixPQURBdkIsS0FDT1gsSUFFUjRCLGVBQWdCLFdBRWYsT0FEQWpCLEtBQ09ULElBRVJpQyxjQUFlLFdBRWQsT0FEQXhCLEtBQ09aLElBRVJxQyxtQkFBb0IsV0FFbkIsT0FEQXpCLEtBQ09QLElBRVJpQyxjQUFlLFdBRWQsT0FEQTFCLEtBQ09WLElBUVJxQyxxQkFBc0IsV0FDckIsSUFBSUMsRUFBT2pOLEVBQUlrTixFQUFTQyxFQW9CeEIsT0FuQmdDLE1BQTNCdEMsS0FDSm9DLEVBQVE5ekIsRUFBU3lDLGNBQWUsU0FDaENva0IsRUFBSzdtQixFQUFTeUMsY0FBZSxNQUM3QnN4QixFQUFVL3pCLEVBQVN5QyxjQUFlLE9BRWxDcXhCLEVBQU1sUCxNQUFNdU4sUUFBVSxrQ0FDdEJ0TCxFQUFHakMsTUFBTXFQLE9BQVMsTUFDbEJGLEVBQVFuUCxNQUFNcVAsT0FBUyxNQUV2Qm5rQixHQUNFaE4sWUFBYWd4QixHQUNiaHhCLFlBQWErakIsR0FDYi9qQixZQUFhaXhCLEdBRWZDLEVBQVU3ekIsRUFBTzZ4QixpQkFBa0JuTCxHQUNuQzZLLEdBQXVELEVBQTdCd0MsU0FBVUYsRUFBUUMsUUFFNUNua0IsR0FBZ0I5TSxZQUFhOHdCLElBRXZCcEMsT0ErRVYsSUFBSXlDLEdBQWMsQ0FBRSxTQUFVLE1BQU8sTUFDcENDLEdBQWFwMEIsRUFBU3lDLGNBQWUsT0FBUW1pQixNQUM3Q3lQLEdBQWMsR0FrQmYsU0FBU0MsR0FBZTl1QixHQUN2QixJQUFJK3VCLEVBQVFweEIsRUFBT3F4QixTQUFVaHZCLElBQVU2dUIsR0FBYTd1QixHQUVwRCxPQUFLK3VCLElBR0EvdUIsS0FBUTR1QixHQUNMNXVCLEVBRUQ2dUIsR0FBYTd1QixHQXhCckIsU0FBeUJBLEdBTXhCLElBSEEsSUFBSWl2QixFQUFVanZCLEVBQU0sR0FBSTJjLGNBQWdCM2MsRUFBSzVFLE1BQU8sR0FDbkQwQixFQUFJNnhCLEdBQVkxd0IsT0FFVG5CLEtBRVAsSUFEQWtELEVBQU8ydUIsR0FBYTd4QixHQUFNbXlCLEtBQ2JMLEdBQ1osT0FBTzV1QixFQWVvQmt2QixDQUFnQmx2QixJQUFVQSxHQUl4RCxJQUtDbXZCLEdBQWUsNEJBQ2ZDLEdBQWMsTUFDZEMsR0FBVSxDQUFFcEMsU0FBVSxXQUFZcUMsV0FBWSxTQUFValEsUUFBUyxTQUNqRWtRLEdBQXFCLENBQ3BCQyxjQUFlLElBQ2ZDLFdBQVksT0FHZCxTQUFTQyxHQUFtQm53QixFQUFPdUMsRUFBTzZ0QixHQUl6QyxJQUFJaHVCLEVBQVVtZCxHQUFRaFgsS0FBTWhHLEdBQzVCLE9BQU9ILEVBR05oQixLQUFLaXZCLElBQUssRUFBR2p1QixFQUFTLElBQVFndUIsR0FBWSxLQUFVaHVCLEVBQVMsSUFBTyxNQUNwRUcsRUFHRixTQUFTK3RCLEdBQW9CN3dCLEVBQU04d0IsRUFBV0MsRUFBS0MsRUFBYUMsRUFBUUMsR0FDdkUsSUFBSXB6QixFQUFrQixVQUFkZ3pCLEVBQXdCLEVBQUksRUFDbkNLLEVBQVEsRUFDUkMsRUFBUSxFQUdULEdBQUtMLEtBQVVDLEVBQWMsU0FBVyxXQUN2QyxPQUFPLEVBR1IsS0FBUWx6QixFQUFJLEVBQUdBLEdBQUssRUFHTixXQUFSaXpCLElBQ0pLLEdBQVN6eUIsRUFBTzJoQixJQUFLdGdCLEVBQU0rd0IsRUFBTWhSLEdBQVdqaUIsSUFBSyxFQUFNbXpCLElBSWxERCxHQW1CUSxZQUFSRCxJQUNKSyxHQUFTenlCLEVBQU8yaEIsSUFBS3RnQixFQUFNLFVBQVkrZixHQUFXamlCLElBQUssRUFBTW16QixJQUlqRCxXQUFSRixJQUNKSyxHQUFTenlCLEVBQU8yaEIsSUFBS3RnQixFQUFNLFNBQVcrZixHQUFXamlCLEdBQU0sU0FBUyxFQUFNbXpCLE1BdEJ2RUcsR0FBU3p5QixFQUFPMmhCLElBQUt0Z0IsRUFBTSxVQUFZK2YsR0FBV2ppQixJQUFLLEVBQU1tekIsR0FHaEQsWUFBUkYsRUFDSkssR0FBU3p5QixFQUFPMmhCLElBQUt0Z0IsRUFBTSxTQUFXK2YsR0FBV2ppQixHQUFNLFNBQVMsRUFBTW16QixHQUl0RUUsR0FBU3h5QixFQUFPMmhCLElBQUt0Z0IsRUFBTSxTQUFXK2YsR0FBV2ppQixHQUFNLFNBQVMsRUFBTW16QixJQW9DekUsT0FoQk1ELEdBQThCLEdBQWZFLElBSXBCRSxHQUFTenZCLEtBQUtpdkIsSUFBSyxFQUFHanZCLEtBQUswdkIsS0FDMUJyeEIsRUFBTSxTQUFXOHdCLEVBQVcsR0FBSW5ULGNBQWdCbVQsRUFBVTEwQixNQUFPLElBQ2pFODBCLEVBQ0FFLEVBQ0FELEVBQ0EsTUFJTSxHQUdEQyxFQUdSLFNBQVNFLEdBQWtCdHhCLEVBQU04d0IsRUFBV0ssR0FHM0MsSUFBSUYsRUFBUzNELEdBQVd0dEIsR0FLdkJneEIsSUFEbUI5ekIsRUFBUSt4QixxQkFBdUJrQyxJQUVFLGVBQW5EeHlCLEVBQU8yaEIsSUFBS3RnQixFQUFNLGFBQWEsRUFBT2l4QixHQUN2Q00sRUFBbUJQLEVBRW5CanpCLEVBQU11d0IsR0FBUXR1QixFQUFNOHdCLEVBQVdHLEdBQy9CTyxFQUFhLFNBQVdWLEVBQVcsR0FBSW5ULGNBQWdCbVQsRUFBVTEwQixNQUFPLEdBSXpFLEdBQUtpeEIsR0FBVWprQixLQUFNckwsR0FBUSxDQUM1QixJQUFNb3pCLEVBQ0wsT0FBT3B6QixFQUVSQSxFQUFNLE9BeUNQLFFBbENRYixFQUFRK3hCLHFCQUF1QitCLElBTXJDOXpCLEVBQVFteUIsd0JBQTBCcm5CLEVBQVVoSSxFQUFNLE9BSTNDLFNBQVJqQyxJQUlDc3dCLFdBQVl0d0IsSUFBMEQsV0FBakRZLEVBQU8yaEIsSUFBS3RnQixFQUFNLFdBQVcsRUFBT2l4QixLQUcxRGp4QixFQUFLeXhCLGlCQUFpQnh5QixTQUV0Qit4QixFQUFpRSxlQUFuRHJ5QixFQUFPMmhCLElBQUt0Z0IsRUFBTSxhQUFhLEVBQU9peEIsSUFLcERNLEVBQW1CQyxLQUFjeHhCLEtBRWhDakMsRUFBTWlDLEVBQU13eEIsTUFLZHp6QixFQUFNc3dCLFdBQVl0d0IsSUFBUyxHQUkxQjh5QixHQUNDN3dCLEVBQ0E4d0IsRUFDQUssSUFBV0gsRUFBYyxTQUFXLFdBQ3BDTyxFQUNBTixFQUdBbHpCLEdBRUUsS0ErU0wsU0FBUzJ6QixHQUFPMXhCLEVBQU1lLEVBQVN3ZCxFQUFNNWQsRUFBS2d4QixHQUN6QyxPQUFPLElBQUlELEdBQU14eUIsVUFBVUgsS0FBTWlCLEVBQU1lLEVBQVN3ZCxFQUFNNWQsRUFBS2d4QixHQTdTNURoekIsRUFBT21DLE9BQVEsQ0FJZDh3QixTQUFVLENBQ1RDLFFBQVMsQ0FDUnZ5QixJQUFLLFNBQVVVLEVBQU11dUIsR0FDcEIsR0FBS0EsRUFBVyxDQUdmLElBQUk3dUIsRUFBTTR1QixHQUFRdHVCLEVBQU0sV0FDeEIsTUFBZSxLQUFSTixFQUFhLElBQU1BLE1BTzlCc2hCLFVBQVcsQ0FDVjhRLHlCQUEyQixFQUMzQkMsYUFBZSxFQUNmQyxhQUFlLEVBQ2ZDLFVBQVksRUFDWkMsWUFBYyxFQUNkekIsWUFBYyxFQUNkMEIsVUFBWSxFQUNaQyxZQUFjLEVBQ2RDLGVBQWlCLEVBQ2pCQyxpQkFBbUIsRUFDbkJDLFNBQVcsRUFDWEMsWUFBYyxFQUNkQyxjQUFnQixFQUNoQkMsWUFBYyxFQUNkYixTQUFXLEVBQ1hjLE9BQVMsRUFDVEMsU0FBVyxFQUNYQyxRQUFVLEVBQ1ZDLFFBQVUsRUFDVkMsTUFBUSxHQUtUL0MsU0FBVSxHQUdWNVAsTUFBTyxTQUFVcGdCLEVBQU1nQixFQUFNOEIsRUFBT3F1QixHQUduQyxHQUFNbnhCLEdBQTBCLElBQWxCQSxFQUFLNUMsVUFBb0MsSUFBbEI0QyxFQUFLNUMsVUFBbUI0QyxFQUFLb2dCLE1BQWxFLENBS0EsSUFBSTFnQixFQUFLcEMsRUFBTStoQixFQUNkMlQsRUFBV3BWLEVBQVc1YyxHQUN0Qml5QixFQUFlN0MsR0FBWWhuQixLQUFNcEksR0FDakNvZixFQUFRcGdCLEVBQUtvZ0IsTUFhZCxHQVJNNlMsSUFDTGp5QixFQUFPOHVCLEdBQWVrRCxJQUl2QjNULEVBQVExZ0IsRUFBT2l6QixTQUFVNXdCLElBQVVyQyxFQUFPaXpCLFNBQVVvQixRQUdyQ3Z4QixJQUFWcUIsRUEwQ0osT0FBS3VjLEdBQVMsUUFBU0EsUUFDd0I1ZCxLQUE1Qy9CLEVBQU0yZixFQUFNL2YsSUFBS1UsR0FBTSxFQUFPbXhCLElBRXpCenhCLEVBSUQwZ0IsRUFBT3BmLEdBN0NBLFlBSGQxRCxTQUFjd0YsS0FHY3BELEVBQU1vZ0IsR0FBUWhYLEtBQU1oRyxLQUFhcEQsRUFBSyxLQUNqRW9ELEVBQVF5ZCxHQUFXdmdCLEVBQU1nQixFQUFNdEIsR0FHL0JwQyxFQUFPLFVBSU0sTUFBVHdGLEdBQWlCQSxHQUFVQSxJQU9sQixXQUFUeEYsR0FBc0IyMUIsSUFDMUJud0IsR0FBU3BELEdBQU9BLEVBQUssS0FBU2YsRUFBT3FpQixVQUFXZ1MsR0FBYSxHQUFLLE9BSTdEOTFCLEVBQVE4eEIsaUJBQTZCLEtBQVZsc0IsR0FBaUQsSUFBakM5QixFQUFLckUsUUFBUyxnQkFDOUR5akIsRUFBT3BmLEdBQVMsV0FJWHFlLEdBQVksUUFBU0EsUUFDc0I1ZCxLQUE5Q3FCLEVBQVF1YyxFQUFNaEIsSUFBS3JlLEVBQU04QyxFQUFPcXVCLE1BRTdCOEIsRUFDSjdTLEVBQU04UyxZQUFhbHlCLEVBQU04QixHQUV6QnNkLEVBQU9wZixHQUFTOEIsTUFrQnBCd2QsSUFBSyxTQUFVdGdCLEVBQU1nQixFQUFNbXdCLEVBQU9GLEdBQ2pDLElBQUlsekIsRUFBS3dCLEVBQUs4ZixFQUNiMlQsRUFBV3BWLEVBQVc1YyxHQTZCdkIsT0E1QmdCb3ZCLEdBQVlobkIsS0FBTXBJLEtBTWpDQSxFQUFPOHVCLEdBQWVrRCxLQUl2QjNULEVBQVExZ0IsRUFBT2l6QixTQUFVNXdCLElBQVVyQyxFQUFPaXpCLFNBQVVvQixLQUd0QyxRQUFTM1QsSUFDdEJ0aEIsRUFBTXNoQixFQUFNL2YsSUFBS1UsR0FBTSxFQUFNbXhCLFNBSWpCMXZCLElBQVIxRCxJQUNKQSxFQUFNdXdCLEdBQVF0dUIsRUFBTWdCLEVBQU1pd0IsSUFJZCxXQUFSbHpCLEdBQW9CaUQsS0FBUXV2QixLQUNoQ3h5QixFQUFNd3lCLEdBQW9CdnZCLElBSVosS0FBVm13QixHQUFnQkEsR0FDcEI1eEIsRUFBTTh1QixXQUFZdHdCLElBQ0QsSUFBVm96QixHQUFrQmdDLFNBQVU1ekIsR0FBUUEsR0FBTyxFQUFJeEIsR0FHaERBLEtBSVRZLEVBQU9rQixLQUFNLENBQUUsU0FBVSxTQUFXLFNBQVVzRCxFQUFJMnRCLEdBQ2pEbnlCLEVBQU9pekIsU0FBVWQsR0FBYyxDQUM5Qnh4QixJQUFLLFNBQVVVLEVBQU11dUIsRUFBVTRDLEdBQzlCLEdBQUs1QyxFQUlKLE9BQU80QixHQUFhL21CLEtBQU16SyxFQUFPMmhCLElBQUt0Z0IsRUFBTSxhQVF4Q0EsRUFBS3l4QixpQkFBaUJ4eUIsUUFBV2UsRUFBS296Qix3QkFBd0JwRixNQUloRXNELEdBQWtCdHhCLEVBQU04d0IsRUFBV0ssR0FIbkN2RSxHQUFNNXNCLEVBQU1xd0IsR0FBUyxXQUNwQixPQUFPaUIsR0FBa0J0eEIsRUFBTTh3QixFQUFXSyxNQU0vQzlTLElBQUssU0FBVXJlLEVBQU04QyxFQUFPcXVCLEdBQzNCLElBQUl4dUIsRUFDSHN1QixFQUFTM0QsR0FBV3R0QixHQUlwQnF6QixHQUFzQm4yQixFQUFRa3lCLGlCQUNULGFBQXBCNkIsRUFBT2hELFNBSVIrQyxHQURrQnFDLEdBQXNCbEMsSUFFWSxlQUFuRHh5QixFQUFPMmhCLElBQUt0Z0IsRUFBTSxhQUFhLEVBQU9peEIsR0FDdkNOLEVBQVdRLEVBQ1ZOLEdBQ0M3d0IsRUFDQTh3QixFQUNBSyxFQUNBSCxFQUNBQyxHQUVELEVBcUJGLE9BakJLRCxHQUFlcUMsSUFDbkIxQyxHQUFZaHZCLEtBQUswdkIsS0FDaEJyeEIsRUFBTSxTQUFXOHdCLEVBQVcsR0FBSW5ULGNBQWdCbVQsRUFBVTEwQixNQUFPLElBQ2pFaXlCLFdBQVk0QyxFQUFRSCxJQUNwQkQsR0FBb0I3d0IsRUFBTTh3QixFQUFXLFVBQVUsRUFBT0csR0FDdEQsS0FLR04sSUFBY2h1QixFQUFVbWQsR0FBUWhYLEtBQU1oRyxLQUNiLFFBQTNCSCxFQUFTLElBQU8sUUFFbEIzQyxFQUFLb2dCLE1BQU8wUSxHQUFjaHVCLEVBQzFCQSxFQUFRbkUsRUFBTzJoQixJQUFLdGdCLEVBQU04d0IsSUFHcEJKLEdBQW1CMXdCLEVBQU04QyxFQUFPNnRCLE9BSzFDaHlCLEVBQU9pekIsU0FBUzlELFdBQWFjLEdBQWMxeEIsRUFBUWl5QixtQkFDbEQsU0FBVW52QixFQUFNdXVCLEdBQ2YsR0FBS0EsRUFDSixPQUFTRixXQUFZQyxHQUFRdHVCLEVBQU0sZ0JBQ2xDQSxFQUFLb3pCLHdCQUF3QkUsS0FDNUIxRyxHQUFNNXNCLEVBQU0sQ0FBRTh0QixXQUFZLEdBQUssV0FDOUIsT0FBTzl0QixFQUFLb3pCLHdCQUF3QkUsUUFFbEMsT0FNUjMwQixFQUFPa0IsS0FBTSxDQUNaMHpCLE9BQVEsR0FDUkMsUUFBUyxHQUNUQyxPQUFRLFNBQ04sU0FBVUMsRUFBUUMsR0FDcEJoMUIsRUFBT2l6QixTQUFVOEIsRUFBU0MsR0FBVyxDQUNwQ0MsT0FBUSxTQUFVOXdCLEdBT2pCLElBTkEsSUFBSWhGLEVBQUksRUFDUCsxQixFQUFXLEdBR1hDLEVBQXlCLGlCQUFWaHhCLEVBQXFCQSxFQUFNSSxNQUFPLEtBQVEsQ0FBRUosR0FFcERoRixFQUFJLEVBQUdBLElBQ2QrMUIsRUFBVUgsRUFBUzNULEdBQVdqaUIsR0FBTTYxQixHQUNuQ0csRUFBT2gyQixJQUFPZzJCLEVBQU9oMkIsRUFBSSxJQUFPZzJCLEVBQU8sR0FHekMsT0FBT0QsSUFJTyxXQUFYSCxJQUNKLzBCLEVBQU9pekIsU0FBVThCLEVBQVNDLEdBQVN0VixJQUFNcVMsTUFJM0MveEIsRUFBT0csR0FBR2dDLE9BQVEsQ0FDakJ3ZixJQUFLLFNBQVV0ZixFQUFNOEIsR0FDcEIsT0FBT2thLEVBQVFwaEIsS0FBTSxTQUFVb0UsRUFBTWdCLEVBQU04QixHQUMxQyxJQUFJbXVCLEVBQVF4d0IsRUFDWFYsRUFBTSxHQUNOakMsRUFBSSxFQUVMLEdBQUt5RCxNQUFNQyxRQUFTUixHQUFTLENBSTVCLElBSEFpd0IsRUFBUzNELEdBQVd0dEIsR0FDcEJTLEVBQU1PLEVBQUsvQixPQUVIbkIsRUFBSTJDLEVBQUszQyxJQUNoQmlDLEVBQUtpQixFQUFNbEQsSUFBUWEsRUFBTzJoQixJQUFLdGdCLEVBQU1nQixFQUFNbEQsSUFBSyxFQUFPbXpCLEdBR3hELE9BQU9seEIsRUFHUixZQUFpQjBCLElBQVZxQixFQUNObkUsRUFBT3loQixNQUFPcGdCLEVBQU1nQixFQUFNOEIsR0FDMUJuRSxFQUFPMmhCLElBQUt0Z0IsRUFBTWdCLElBQ2pCQSxFQUFNOEIsRUFBMEIsRUFBbkI3QyxVQUFVaEIsWUFRNUJOLEVBQU8reUIsTUFBUUEsSUFFVHh5QixVQUFZLENBQ2pCRSxZQUFhc3lCLEdBQ2IzeUIsS0FBTSxTQUFVaUIsRUFBTWUsRUFBU3dkLEVBQU01ZCxFQUFLZ3hCLEVBQVE1USxHQUNqRG5sQixLQUFLb0UsS0FBT0EsRUFDWnBFLEtBQUsyaUIsS0FBT0EsRUFDWjNpQixLQUFLKzFCLE9BQVNBLEdBQVVoekIsRUFBT2d6QixPQUFPcFAsU0FDdEMzbUIsS0FBS21GLFFBQVVBLEVBQ2ZuRixLQUFLaVUsTUFBUWpVLEtBQUtxc0IsSUFBTXJzQixLQUFLNk8sTUFDN0I3TyxLQUFLK0UsSUFBTUEsRUFDWC9FLEtBQUttbEIsS0FBT0EsSUFBVXBpQixFQUFPcWlCLFVBQVd6QyxHQUFTLEdBQUssT0FFdkQ5VCxJQUFLLFdBQ0osSUFBSTRVLEVBQVFxUyxHQUFNcUMsVUFBV240QixLQUFLMmlCLE1BRWxDLE9BQU9jLEdBQVNBLEVBQU0vZixJQUNyQitmLEVBQU0vZixJQUFLMUQsTUFDWDgxQixHQUFNcUMsVUFBVXhSLFNBQVNqakIsSUFBSzFELE9BRWhDbzRCLElBQUssU0FBVUMsR0FDZCxJQUFJQyxFQUNIN1UsRUFBUXFTLEdBQU1xQyxVQUFXbjRCLEtBQUsyaUIsTUFvQi9CLE9BbEJLM2lCLEtBQUttRixRQUFRb3pCLFNBQ2pCdjRCLEtBQUt3NEIsSUFBTUYsRUFBUXYxQixFQUFPZ3pCLE9BQVEvMUIsS0FBSysxQixRQUN0Q3NDLEVBQVNyNEIsS0FBS21GLFFBQVFvekIsU0FBV0YsRUFBUyxFQUFHLEVBQUdyNEIsS0FBS21GLFFBQVFvekIsVUFHOUR2NEIsS0FBS3c0QixJQUFNRixFQUFRRCxFQUVwQnI0QixLQUFLcXNCLEtBQVFyc0IsS0FBSytFLElBQU0vRSxLQUFLaVUsT0FBVXFrQixFQUFRdDRCLEtBQUtpVSxNQUUvQ2pVLEtBQUttRixRQUFRc3pCLE1BQ2pCejRCLEtBQUttRixRQUFRc3pCLEtBQUs5M0IsS0FBTVgsS0FBS29FLEtBQU1wRSxLQUFLcXNCLElBQUtyc0IsTUFHekN5akIsR0FBU0EsRUFBTWhCLElBQ25CZ0IsRUFBTWhCLElBQUt6aUIsTUFFWDgxQixHQUFNcUMsVUFBVXhSLFNBQVNsRSxJQUFLemlCLE1BRXhCQSxPQUlUODFCLEdBQU14eUIsVUFBVUgsS0FBS0csVUFBWXd5QixHQUFNeHlCLFVBRXZDd3lCLEdBQU1xQyxVQUFZLENBQ2pCeFIsU0FBVSxDQUNUampCLElBQUssU0FBVW1oQixHQUNkLElBQUl2UixFQUlKLE9BQTZCLElBQXhCdVIsRUFBTXpnQixLQUFLNUMsVUFDYSxNQUE1QnFqQixFQUFNemdCLEtBQU15Z0IsRUFBTWxDLE9BQW9ELE1BQWxDa0MsRUFBTXpnQixLQUFLb2dCLE1BQU9LLEVBQU1sQyxNQUNyRGtDLEVBQU16Z0IsS0FBTXlnQixFQUFNbEMsT0FPMUJyUCxFQUFTdlEsRUFBTzJoQixJQUFLRyxFQUFNemdCLEtBQU15Z0IsRUFBTWxDLEtBQU0sTUFHaEIsU0FBWHJQLEVBQXdCQSxFQUFKLEdBRXZDbVAsSUFBSyxTQUFVb0MsR0FLVDloQixFQUFPMjFCLEdBQUdELEtBQU01VCxFQUFNbEMsTUFDMUI1ZixFQUFPMjFCLEdBQUdELEtBQU01VCxFQUFNbEMsTUFBUWtDLEdBQ0ssSUFBeEJBLEVBQU16Z0IsS0FBSzVDLFdBQ3JCdUIsRUFBT2l6QixTQUFVblIsRUFBTWxDLE9BQzRCLE1BQW5Ea0MsRUFBTXpnQixLQUFLb2dCLE1BQU8wUCxHQUFlclAsRUFBTWxDLE9BR3hDa0MsRUFBTXpnQixLQUFNeWdCLEVBQU1sQyxNQUFTa0MsRUFBTXdILElBRmpDdHBCLEVBQU95aEIsTUFBT0ssRUFBTXpnQixLQUFNeWdCLEVBQU1sQyxLQUFNa0MsRUFBTXdILElBQU14SCxFQUFNTSxTQVU1RDJRLEdBQU1xQyxVQUFVUSxVQUFZN0MsR0FBTXFDLFVBQVVTLFdBQWEsQ0FDeERuVyxJQUFLLFNBQVVvQyxHQUNUQSxFQUFNemdCLEtBQUs1QyxVQUFZcWpCLEVBQU16Z0IsS0FBS3pCLGFBQ3RDa2lCLEVBQU16Z0IsS0FBTXlnQixFQUFNbEMsTUFBU2tDLEVBQU13SCxPQUtwQ3RwQixFQUFPZ3pCLE9BQVMsQ0FDZjhDLE9BQVEsU0FBVUMsR0FDakIsT0FBT0EsR0FFUkMsTUFBTyxTQUFVRCxHQUNoQixNQUFPLEdBQU0veUIsS0FBS2l6QixJQUFLRixFQUFJL3lCLEtBQUtrekIsSUFBTyxHQUV4Q3RTLFNBQVUsU0FHWDVqQixFQUFPMjFCLEdBQUs1QyxHQUFNeHlCLFVBQVVILEtBRzVCSixFQUFPMjFCLEdBQUdELEtBQU8sR0FLakIsSUFDQ1MsR0FBT0MsR0FrckJIeG9CLEdBRUh5b0IsR0FuckJEQyxHQUFXLHlCQUNYQyxHQUFPLGNBRVIsU0FBU0MsS0FDSEosTUFDcUIsSUFBcEJ2NUIsRUFBUzQ1QixRQUFvQno1QixFQUFPMDVCLHNCQUN4QzE1QixFQUFPMDVCLHNCQUF1QkYsSUFFOUJ4NUIsRUFBTytmLFdBQVl5WixHQUFVeDJCLEVBQU8yMUIsR0FBR2dCLFVBR3hDMzJCLEVBQU8yMUIsR0FBR2lCLFFBS1osU0FBU0MsS0FJUixPQUhBNzVCLEVBQU8rZixXQUFZLFdBQ2xCb1osUUFBUXJ6QixJQUVBcXpCLEdBQVFsd0IsS0FBS3FqQixNQUl2QixTQUFTd04sR0FBT240QixFQUFNbzRCLEdBQ3JCLElBQUk1TCxFQUNIaHNCLEVBQUksRUFDSnVNLEVBQVEsQ0FBRW9sQixPQUFRbnlCLEdBS25CLElBREFvNEIsRUFBZUEsRUFBZSxFQUFJLEVBQzFCNTNCLEVBQUksRUFBR0EsR0FBSyxFQUFJNDNCLEVBRXZCcnJCLEVBQU8sVUFEUHlmLEVBQVEvSixHQUFXamlCLEtBQ1N1TSxFQUFPLFVBQVl5ZixHQUFVeHNCLEVBTzFELE9BSktvNEIsSUFDSnJyQixFQUFNd25CLFFBQVV4bkIsRUFBTTJqQixNQUFRMXdCLEdBR3hCK00sRUFHUixTQUFTc3JCLEdBQWE3eUIsRUFBT3liLEVBQU1xWCxHQUtsQyxJQUpBLElBQUluVixFQUNId0ssR0FBZTRLLEdBQVVDLFNBQVV2WCxJQUFVLElBQUsvaEIsT0FBUXE1QixHQUFVQyxTQUFVLE1BQzlFNWUsRUFBUSxFQUNSalksRUFBU2dzQixFQUFXaHNCLE9BQ2JpWSxFQUFRalksRUFBUWlZLElBQ3ZCLEdBQU91SixFQUFRd0ssRUFBWS9ULEdBQVEzYSxLQUFNcTVCLEVBQVdyWCxFQUFNemIsR0FHekQsT0FBTzJkLEVBc05WLFNBQVNvVixHQUFXNzFCLEVBQU0rMUIsRUFBWWgxQixHQUNyQyxJQUFJbU8sRUFDSDhtQixFQUNBOWUsRUFBUSxFQUNSalksRUFBUzQyQixHQUFVSSxXQUFXaDNCLE9BQzlCZ2IsRUFBV3RiLEVBQU9pYixXQUFXSSxPQUFRLGtCQUc3QnViLEVBQUt2MUIsT0FFYnUxQixFQUFPLFdBQ04sR0FBS1MsRUFDSixPQUFPLEVBWVIsSUFWQSxJQUFJRSxFQUFjcEIsSUFBU1UsS0FDMUJ2WixFQUFZdGEsS0FBS2l2QixJQUFLLEVBQUdnRixFQUFVTyxVQUFZUCxFQUFVekIsU0FBVytCLEdBS3BFakMsRUFBVSxHQURIaFksRUFBWTJaLEVBQVV6QixVQUFZLEdBRXpDamQsRUFBUSxFQUNSalksRUFBUzIyQixFQUFVUSxPQUFPbjNCLE9BRW5CaVksRUFBUWpZLEVBQVFpWSxJQUN2QjBlLEVBQVVRLE9BQVFsZixHQUFROGMsSUFBS0MsR0FNaEMsT0FIQWhhLEVBQVNrQixXQUFZbmIsRUFBTSxDQUFFNDFCLEVBQVczQixFQUFTaFksSUFHNUNnWSxFQUFVLEdBQUtoMUIsRUFDWmdkLEdBSUZoZCxHQUNMZ2IsRUFBU2tCLFdBQVluYixFQUFNLENBQUU0MUIsRUFBVyxFQUFHLElBSTVDM2IsRUFBU21CLFlBQWFwYixFQUFNLENBQUU0MUIsS0FDdkIsSUFFUkEsRUFBWTNiLEVBQVN6QixRQUFTLENBQzdCeFksS0FBTUEsRUFDTjRuQixNQUFPanBCLEVBQU9tQyxPQUFRLEdBQUlpMUIsR0FDMUJNLEtBQU0xM0IsRUFBT21DLFFBQVEsRUFBTSxDQUMxQncxQixjQUFlLEdBQ2YzRSxPQUFRaHpCLEVBQU9nekIsT0FBT3BQLFVBQ3BCeGhCLEdBQ0h3MUIsbUJBQW9CUixFQUNwQlMsZ0JBQWlCejFCLEVBQ2pCbzFCLFVBQVdyQixJQUFTVSxLQUNwQnJCLFNBQVVwekIsRUFBUW96QixTQUNsQmlDLE9BQVEsR0FDUlQsWUFBYSxTQUFVcFgsRUFBTTVkLEdBQzVCLElBQUk4ZixFQUFROWhCLEVBQU8reUIsTUFBTzF4QixFQUFNNDFCLEVBQVVTLEtBQU05WCxFQUFNNWQsRUFDcERpMUIsRUFBVVMsS0FBS0MsY0FBZS9YLElBQVVxWCxFQUFVUyxLQUFLMUUsUUFFekQsT0FEQWlFLEVBQVVRLE9BQU8xNUIsS0FBTStqQixHQUNoQkEsR0FFUmxCLEtBQU0sU0FBVWtYLEdBQ2YsSUFBSXZmLEVBQVEsRUFJWGpZLEVBQVN3M0IsRUFBVWIsRUFBVVEsT0FBT24zQixPQUFTLEVBQzlDLEdBQUsrMkIsRUFDSixPQUFPcDZCLEtBR1IsSUFEQW82QixHQUFVLEVBQ0Y5ZSxFQUFRalksRUFBUWlZLElBQ3ZCMGUsRUFBVVEsT0FBUWxmLEdBQVE4YyxJQUFLLEdBVWhDLE9BTkt5QyxHQUNKeGMsRUFBU2tCLFdBQVluYixFQUFNLENBQUU0MUIsRUFBVyxFQUFHLElBQzNDM2IsRUFBU21CLFlBQWFwYixFQUFNLENBQUU0MUIsRUFBV2EsS0FFekN4YyxFQUFTdUIsV0FBWXhiLEVBQU0sQ0FBRTQxQixFQUFXYSxJQUVsQzc2QixRQUdUZ3NCLEVBQVFnTyxFQUFVaE8sTUFJbkIsS0EvSEQsU0FBcUJBLEVBQU8wTyxHQUMzQixJQUFJcGYsRUFBT2xXLEVBQU0yd0IsRUFBUTd1QixFQUFPdWMsRUFHaEMsSUFBTW5JLEtBQVMwUSxFQWVkLEdBYkErSixFQUFTMkUsRUFEVHQxQixFQUFPNGMsRUFBVzFHLElBRWxCcFUsRUFBUThrQixFQUFPMVEsR0FDVjNWLE1BQU1DLFFBQVNzQixLQUNuQjZ1QixFQUFTN3VCLEVBQU8sR0FDaEJBLEVBQVE4a0IsRUFBTzFRLEdBQVVwVSxFQUFPLElBRzVCb1UsSUFBVWxXLElBQ2Q0bUIsRUFBTzVtQixHQUFTOEIsU0FDVDhrQixFQUFPMVEsS0FHZm1JLEVBQVExZ0IsRUFBT2l6QixTQUFVNXdCLEtBQ1gsV0FBWXFlLEVBTXpCLElBQU1uSSxLQUxOcFUsRUFBUXVjLEVBQU11VSxPQUFROXdCLFVBQ2Y4a0IsRUFBTzVtQixHQUlDOEIsRUFDTm9VLEtBQVMwUSxJQUNoQkEsRUFBTzFRLEdBQVVwVSxFQUFPb1UsR0FDeEJvZixFQUFlcGYsR0FBVXlhLFFBSTNCMkUsRUFBZXQxQixHQUFTMndCLEVBNkYxQitFLENBQVk5TyxFQUFPZ08sRUFBVVMsS0FBS0MsZUFFMUJwZixFQUFRalksRUFBUWlZLElBRXZCLEdBREFoSSxFQUFTMm1CLEdBQVVJLFdBQVkvZSxHQUFRM2EsS0FBTXE1QixFQUFXNTFCLEVBQU00bkIsRUFBT2dPLEVBQVVTLE1BTTlFLE9BSktsNUIsRUFBWStSLEVBQU9xUSxRQUN2QjVnQixFQUFPMmdCLFlBQWFzVyxFQUFVNTFCLEtBQU00MUIsRUFBVVMsS0FBS2pkLE9BQVFtRyxLQUMxRHJRLEVBQU9xUSxLQUFLb1gsS0FBTXpuQixJQUViQSxFQXlCVCxPQXJCQXZRLEVBQU9vQixJQUFLNm5CLEVBQU8rTixHQUFhQyxHQUUzQno0QixFQUFZeTRCLEVBQVVTLEtBQUt4bUIsUUFDL0IrbEIsRUFBVVMsS0FBS3htQixNQUFNdFQsS0FBTXlELEVBQU00MUIsR0FJbENBLEVBQ0VwYixTQUFVb2IsRUFBVVMsS0FBSzdiLFVBQ3pCelYsS0FBTTZ3QixFQUFVUyxLQUFLdHhCLEtBQU02d0IsRUFBVVMsS0FBS08sVUFDMUNuZSxLQUFNbWQsRUFBVVMsS0FBSzVkLE1BQ3JCdUIsT0FBUTRiLEVBQVVTLEtBQUtyYyxRQUV6QnJiLEVBQU8yMUIsR0FBR3VDLE1BQ1RsNEIsRUFBT21DLE9BQVF5MEIsRUFBTSxDQUNwQnYxQixLQUFNQSxFQUNOODJCLEtBQU1sQixFQUNOeGMsTUFBT3djLEVBQVVTLEtBQUtqZCxTQUlqQndjLEVBR1JqM0IsRUFBT2szQixVQUFZbDNCLEVBQU9tQyxPQUFRKzBCLEdBQVcsQ0FFNUNDLFNBQVUsQ0FDVGlCLElBQUssQ0FBRSxTQUFVeFksRUFBTXpiLEdBQ3RCLElBQUkyZCxFQUFRN2tCLEtBQUsrNUIsWUFBYXBYLEVBQU16YixHQUVwQyxPQURBeWQsR0FBV0UsRUFBTXpnQixLQUFNdWUsRUFBTXVCLEdBQVFoWCxLQUFNaEcsR0FBUzJkLEdBQzdDQSxLQUlUdVcsUUFBUyxTQUFVcFAsRUFBTzluQixHQVl6QixJQUpBLElBQUl5ZSxFQUNIckgsRUFBUSxFQUNSalksR0FQQTJvQixFQUZJenFCLEVBQVl5cUIsSUFDaEI5bkIsRUFBVzhuQixFQUNILENBQUUsTUFFRkEsRUFBTW5mLE1BQU9xUCxJQUtON1ksT0FFUmlZLEVBQVFqWSxFQUFRaVksSUFDdkJxSCxFQUFPcUosRUFBTzFRLEdBQ2QyZSxHQUFVQyxTQUFVdlgsR0FBU3NYLEdBQVVDLFNBQVV2WCxJQUFVLEdBQzNEc1gsR0FBVUMsU0FBVXZYLEdBQU9oUixRQUFTek4sSUFJdENtMkIsV0FBWSxDQTNXYixTQUEyQmoyQixFQUFNNG5CLEVBQU95TyxHQUN2QyxJQUFJOVgsRUFBTXpiLEVBQU8wZSxFQUFRbkMsRUFBTzRYLEVBQVNDLEVBQVdDLEVBQWdCOVcsRUFDbkUrVyxFQUFRLFVBQVd4UCxHQUFTLFdBQVlBLEVBQ3hDa1AsRUFBT2w3QixLQUNQd3VCLEVBQU8sR0FDUGhLLEVBQVFwZ0IsRUFBS29nQixNQUNiZ1YsRUFBU3AxQixFQUFLNUMsVUFBWStpQixHQUFvQm5nQixHQUM5Q3EzQixFQUFXNVksRUFBU25mLElBQUtVLEVBQU0sVUE2QmhDLElBQU11ZSxLQTFCQThYLEVBQUtqZCxRQUVhLE9BRHZCaUcsRUFBUTFnQixFQUFPMmdCLFlBQWF0ZixFQUFNLE9BQ3ZCczNCLFdBQ1ZqWSxFQUFNaVksU0FBVyxFQUNqQkwsRUFBVTVYLEVBQU01TixNQUFNc0gsS0FDdEJzRyxFQUFNNU4sTUFBTXNILEtBQU8sV0FDWnNHLEVBQU1pWSxVQUNYTCxNQUlINVgsRUFBTWlZLFdBRU5SLEVBQUs5YyxPQUFRLFdBR1o4YyxFQUFLOWMsT0FBUSxXQUNacUYsRUFBTWlZLFdBQ0EzNEIsRUFBT3lhLE1BQU9wWixFQUFNLE1BQU9mLFFBQ2hDb2dCLEVBQU01TixNQUFNc0gsWUFPRjZPLEVBRWIsR0FEQTlrQixFQUFROGtCLEVBQU9ySixHQUNWMFcsR0FBUzdyQixLQUFNdEcsR0FBVSxDQUc3QixVQUZPOGtCLEVBQU9ySixHQUNkaUQsRUFBU0EsR0FBb0IsV0FBVjFlLEVBQ2RBLEtBQVlzeUIsRUFBUyxPQUFTLFFBQVcsQ0FJN0MsR0FBZSxTQUFWdHlCLElBQW9CdTBCLFFBQWlDNTFCLElBQXJCNDFCLEVBQVU5WSxHQUs5QyxTQUpBNlcsR0FBUyxFQU9YaEwsRUFBTTdMLEdBQVM4WSxHQUFZQSxFQUFVOVksSUFBVTVmLEVBQU95aEIsTUFBT3BnQixFQUFNdWUsR0FNckUsSUFEQTJZLEdBQWF2NEIsRUFBT3lELGNBQWV3bEIsTUFDaEJqcEIsRUFBT3lELGNBQWVnb0IsR0E4RHpDLElBQU03TCxLQXpERDZZLEdBQTJCLElBQWxCcDNCLEVBQUs1QyxXQU1sQmk1QixFQUFLa0IsU0FBVyxDQUFFblgsRUFBTW1YLFNBQVVuWCxFQUFNb1gsVUFBV3BYLEVBQU1xWCxXQUlsQyxPQUR2Qk4sRUFBaUJFLEdBQVlBLEVBQVNoWCxXQUVyQzhXLEVBQWlCMVksRUFBU25mLElBQUtVLEVBQU0sWUFHckIsVUFEakJxZ0IsRUFBVTFoQixFQUFPMmhCLElBQUt0Z0IsRUFBTSxjQUV0Qm0zQixFQUNKOVcsRUFBVThXLEdBSVZoVyxHQUFVLENBQUVuaEIsSUFBUSxHQUNwQm0zQixFQUFpQm4zQixFQUFLb2dCLE1BQU1DLFNBQVc4VyxFQUN2QzlXLEVBQVUxaEIsRUFBTzJoQixJQUFLdGdCLEVBQU0sV0FDNUJtaEIsR0FBVSxDQUFFbmhCLE9BS0csV0FBWnFnQixHQUFvQyxpQkFBWkEsR0FBZ0QsTUFBbEI4VyxJQUNyQixTQUFoQ3g0QixFQUFPMmhCLElBQUt0Z0IsRUFBTSxXQUdoQmszQixJQUNMSixFQUFLL3hCLEtBQU0sV0FDVnFiLEVBQU1DLFFBQVU4VyxJQUVNLE1BQWxCQSxJQUNKOVcsRUFBVUQsRUFBTUMsUUFDaEI4VyxFQUE2QixTQUFaOVcsRUFBcUIsR0FBS0EsSUFHN0NELEVBQU1DLFFBQVUsaUJBS2RnVyxFQUFLa0IsV0FDVG5YLEVBQU1tWCxTQUFXLFNBQ2pCVCxFQUFLOWMsT0FBUSxXQUNab0csRUFBTW1YLFNBQVdsQixFQUFLa0IsU0FBVSxHQUNoQ25YLEVBQU1vWCxVQUFZbkIsRUFBS2tCLFNBQVUsR0FDakNuWCxFQUFNcVgsVUFBWXBCLEVBQUtrQixTQUFVLE1BS25DTCxHQUFZLEVBQ0U5TSxFQUdQOE0sSUFDQUcsRUFDQyxXQUFZQSxJQUNoQmpDLEVBQVNpQyxFQUFTakMsUUFHbkJpQyxFQUFXNVksRUFBU3pCLE9BQVFoZCxFQUFNLFNBQVUsQ0FBRXFnQixRQUFTOFcsSUFJbkQzVixJQUNKNlYsRUFBU2pDLFFBQVVBLEdBSWZBLEdBQ0pqVSxHQUFVLENBQUVuaEIsSUFBUSxHQUtyQjgyQixFQUFLL3hCLEtBQU0sV0FTVixJQUFNd1osS0FKQTZXLEdBQ0xqVSxHQUFVLENBQUVuaEIsSUFFYnllLEVBQVNqRixPQUFReFosRUFBTSxVQUNUb3FCLEVBQ2J6ckIsRUFBT3loQixNQUFPcGdCLEVBQU11ZSxFQUFNNkwsRUFBTTdMLE9BTW5DMlksRUFBWXZCLEdBQWFQLEVBQVNpQyxFQUFVOVksR0FBUyxFQUFHQSxFQUFNdVksR0FDdER2WSxLQUFROFksSUFDZkEsRUFBVTlZLEdBQVMyWSxFQUFVcm5CLE1BQ3hCdWxCLElBQ0o4QixFQUFVdjJCLElBQU11MkIsRUFBVXJuQixNQUMxQnFuQixFQUFVcm5CLE1BQVEsTUF1TXJCNm5CLFVBQVcsU0FBVTUzQixFQUFVa3NCLEdBQ3pCQSxFQUNKNkosR0FBVUksV0FBVzFvQixRQUFTek4sR0FFOUIrMUIsR0FBVUksV0FBV3Y1QixLQUFNb0QsTUFLOUJuQixFQUFPZzVCLE1BQVEsU0FBVUEsRUFBT2hHLEVBQVE3eUIsR0FDdkMsSUFBSWsyQixFQUFNMkMsR0FBMEIsaUJBQVZBLEVBQXFCaDVCLEVBQU9tQyxPQUFRLEdBQUk2MkIsR0FBVSxDQUMzRWYsU0FBVTkzQixJQUFPQSxHQUFNNnlCLEdBQ3RCeDBCLEVBQVl3NkIsSUFBV0EsRUFDeEJ4RCxTQUFVd0QsRUFDVmhHLE9BQVE3eUIsR0FBTTZ5QixHQUFVQSxJQUFXeDBCLEVBQVl3MEIsSUFBWUEsR0FvQzVELE9BaENLaHpCLEVBQU8yMUIsR0FBRzlQLElBQ2R3USxFQUFJYixTQUFXLEVBR2MsaUJBQWpCYSxFQUFJYixXQUNWYSxFQUFJYixZQUFZeDFCLEVBQU8yMUIsR0FBR3NELE9BQzlCNUMsRUFBSWIsU0FBV3gxQixFQUFPMjFCLEdBQUdzRCxPQUFRNUMsRUFBSWIsVUFHckNhLEVBQUliLFNBQVd4MUIsRUFBTzIxQixHQUFHc0QsT0FBT3JWLFVBTWpCLE1BQWJ5UyxFQUFJNWIsUUFBK0IsSUFBZDRiLEVBQUk1YixRQUM3QjRiLEVBQUk1YixNQUFRLE1BSWI0YixFQUFJbkksSUFBTW1JLEVBQUk0QixTQUVkNUIsRUFBSTRCLFNBQVcsV0FDVHo1QixFQUFZNjNCLEVBQUluSSxNQUNwQm1JLEVBQUluSSxJQUFJdHdCLEtBQU1YLE1BR1ZvNUIsRUFBSTViLE9BQ1J6YSxFQUFPd2dCLFFBQVN2akIsS0FBTW81QixFQUFJNWIsUUFJckI0YixHQUdScjJCLEVBQU9HLEdBQUdnQyxPQUFRLENBQ2pCKzJCLE9BQVEsU0FBVUYsRUFBT0csRUFBSW5HLEVBQVE3eEIsR0FHcEMsT0FBT2xFLEtBQUtxUSxPQUFRa1UsSUFBcUJHLElBQUssVUFBVyxHQUFJYyxPQUczRHpnQixNQUFNbzNCLFFBQVMsQ0FBRWxHLFFBQVNpRyxHQUFNSCxFQUFPaEcsRUFBUTd4QixJQUVsRGk0QixRQUFTLFNBQVV4WixFQUFNb1osRUFBT2hHLEVBQVE3eEIsR0FHeEIsU0FBZGs0QixJQUdDLElBQUlsQixFQUFPakIsR0FBV2o2QixLQUFNK0MsRUFBT21DLE9BQVEsR0FBSXlkLEdBQVEwWixJQUdsRHhtQixHQUFTZ04sRUFBU25mLElBQUsxRCxLQUFNLFlBQ2pDazdCLEVBQUt2WCxNQUFNLEdBVGQsSUFBSTlOLEVBQVE5UyxFQUFPeUQsY0FBZW1jLEdBQ2pDMFosRUFBU3Q1QixFQUFPZzVCLE1BQU9BLEVBQU9oRyxFQUFRN3hCLEdBYXZDLE9BRkNrNEIsRUFBWUUsT0FBU0YsRUFFZnZtQixJQUEwQixJQUFqQndtQixFQUFPN2UsTUFDdEJ4ZCxLQUFLaUUsS0FBTW00QixHQUNYcDhCLEtBQUt3ZCxNQUFPNmUsRUFBTzdlLE1BQU80ZSxJQUU1QnpZLEtBQU0sU0FBVWppQixFQUFNbWlCLEVBQVlnWCxHQUNqQixTQUFaMEIsRUFBc0I5WSxHQUN6QixJQUFJRSxFQUFPRixFQUFNRSxZQUNWRixFQUFNRSxLQUNiQSxFQUFNa1gsR0FZUCxNQVRxQixpQkFBVG41QixJQUNYbTVCLEVBQVVoWCxFQUNWQSxFQUFhbmlCLEVBQ2JBLE9BQU9tRSxHQUVIZ2UsR0FDSjdqQixLQUFLd2QsTUFBTzliLEdBQVEsS0FBTSxJQUdwQjFCLEtBQUtpRSxLQUFNLFdBQ2pCLElBQUlzZixHQUFVLEVBQ2JqSSxFQUFnQixNQUFSNVosR0FBZ0JBLEVBQU8sYUFDL0I4NkIsRUFBU3o1QixFQUFPeTVCLE9BQ2hCOVosRUFBT0csRUFBU25mLElBQUsxRCxNQUV0QixHQUFLc2IsRUFDQ29ILEVBQU1wSCxJQUFXb0gsRUFBTXBILEdBQVFxSSxNQUNuQzRZLEVBQVc3WixFQUFNcEgsU0FHbEIsSUFBTUEsS0FBU29ILEVBQ1RBLEVBQU1wSCxJQUFXb0gsRUFBTXBILEdBQVFxSSxNQUFRMlYsR0FBSzlyQixLQUFNOE4sSUFDdERpaEIsRUFBVzdaLEVBQU1wSCxJQUtwQixJQUFNQSxFQUFRa2hCLEVBQU9uNUIsT0FBUWlZLEtBQ3ZCa2hCLEVBQVFsaEIsR0FBUWxYLE9BQVNwRSxNQUNuQixNQUFSMEIsR0FBZ0I4NkIsRUFBUWxoQixHQUFRa0MsUUFBVTliLElBRTVDODZCLEVBQVFsaEIsR0FBUTRmLEtBQUt2WCxLQUFNa1gsR0FDM0J0WCxHQUFVLEVBQ1ZpWixFQUFPdjNCLE9BQVFxVyxFQUFPLEtBT25CaUksR0FBWXNYLEdBQ2hCOTNCLEVBQU93Z0IsUUFBU3ZqQixLQUFNMEIsTUFJekI0NkIsT0FBUSxTQUFVNTZCLEdBSWpCLE9BSGMsSUFBVEEsSUFDSkEsRUFBT0EsR0FBUSxNQUVUMUIsS0FBS2lFLEtBQU0sV0FDakIsSUFBSXFYLEVBQ0hvSCxFQUFPRyxFQUFTbmYsSUFBSzFELE1BQ3JCd2QsRUFBUWtGLEVBQU1oaEIsRUFBTyxTQUNyQitoQixFQUFRZixFQUFNaGhCLEVBQU8sY0FDckI4NkIsRUFBU3o1QixFQUFPeTVCLE9BQ2hCbjVCLEVBQVNtYSxFQUFRQSxFQUFNbmEsT0FBUyxFQWFqQyxJQVZBcWYsRUFBSzRaLFFBQVMsRUFHZHY1QixFQUFPeWEsTUFBT3hkLEtBQU0wQixFQUFNLElBRXJCK2hCLEdBQVNBLEVBQU1FLE1BQ25CRixFQUFNRSxLQUFLaGpCLEtBQU1YLE1BQU0sR0FJbEJzYixFQUFRa2hCLEVBQU9uNUIsT0FBUWlZLEtBQ3ZCa2hCLEVBQVFsaEIsR0FBUWxYLE9BQVNwRSxNQUFRdzhCLEVBQVFsaEIsR0FBUWtDLFFBQVU5YixJQUMvRDg2QixFQUFRbGhCLEdBQVE0ZixLQUFLdlgsTUFBTSxHQUMzQjZZLEVBQU92M0IsT0FBUXFXLEVBQU8sSUFLeEIsSUFBTUEsRUFBUSxFQUFHQSxFQUFRalksRUFBUWlZLElBQzNCa0MsRUFBT2xDLElBQVdrQyxFQUFPbEMsR0FBUWdoQixRQUNyQzllLEVBQU9sQyxHQUFRZ2hCLE9BQU8zN0IsS0FBTVgsYUFLdkIwaUIsRUFBSzRaLFlBS2Z2NUIsRUFBT2tCLEtBQU0sQ0FBRSxTQUFVLE9BQVEsUUFBVSxTQUFVc0QsRUFBSW5DLEdBQ3hELElBQUlxM0IsRUFBUTE1QixFQUFPRyxHQUFJa0MsR0FDdkJyQyxFQUFPRyxHQUFJa0MsR0FBUyxTQUFVMjJCLEVBQU9oRyxFQUFRN3hCLEdBQzVDLE9BQWdCLE1BQVQ2M0IsR0FBa0Msa0JBQVZBLEVBQzlCVSxFQUFNNTdCLE1BQU9iLEtBQU1xRSxXQUNuQnJFLEtBQUttOEIsUUFBU3RDLEdBQU96MEIsR0FBTSxHQUFRMjJCLEVBQU9oRyxFQUFRN3hCLE1BS3JEbkIsRUFBT2tCLEtBQU0sQ0FDWnk0QixVQUFXN0MsR0FBTyxRQUNsQjhDLFFBQVM5QyxHQUFPLFFBQ2hCK0MsWUFBYS9DLEdBQU8sVUFDcEJnRCxPQUFRLENBQUU1RyxRQUFTLFFBQ25CNkcsUUFBUyxDQUFFN0csUUFBUyxRQUNwQjhHLFdBQVksQ0FBRTlHLFFBQVMsV0FDckIsU0FBVTd3QixFQUFNNG1CLEdBQ2xCanBCLEVBQU9HLEdBQUlrQyxHQUFTLFNBQVUyMkIsRUFBT2hHLEVBQVE3eEIsR0FDNUMsT0FBT2xFLEtBQUttOEIsUUFBU25RLEVBQU8rUCxFQUFPaEcsRUFBUTd4QixNQUk3Q25CLEVBQU95NUIsT0FBUyxHQUNoQno1QixFQUFPMjFCLEdBQUdpQixLQUFPLFdBQ2hCLElBQUlzQixFQUNILzRCLEVBQUksRUFDSnM2QixFQUFTejVCLEVBQU95NUIsT0FJakIsSUFGQXRELEdBQVFsd0IsS0FBS3FqQixNQUVMbnFCLEVBQUlzNkIsRUFBT241QixPQUFRbkIsS0FDMUIrNEIsRUFBUXVCLEVBQVF0NkIsT0FHQ3M2QixFQUFRdDZCLEtBQVErNEIsR0FDaEN1QixFQUFPdjNCLE9BQVEvQyxJQUFLLEdBSWhCczZCLEVBQU9uNUIsUUFDWk4sRUFBTzIxQixHQUFHL1UsT0FFWHVWLFFBQVFyekIsR0FHVDlDLEVBQU8yMUIsR0FBR3VDLE1BQVEsU0FBVUEsR0FDM0JsNEIsRUFBT3k1QixPQUFPMTdCLEtBQU1tNkIsR0FDcEJsNEIsRUFBTzIxQixHQUFHemtCLFNBR1hsUixFQUFPMjFCLEdBQUdnQixTQUFXLEdBQ3JCMzJCLEVBQU8yMUIsR0FBR3prQixNQUFRLFdBQ1prbEIsS0FJTEEsSUFBYSxFQUNiSSxPQUdEeDJCLEVBQU8yMUIsR0FBRy9VLEtBQU8sV0FDaEJ3VixHQUFhLE1BR2RwMkIsRUFBTzIxQixHQUFHc0QsT0FBUyxDQUNsQmdCLEtBQU0sSUFDTkMsS0FBTSxJQUdOdFcsU0FBVSxLQU1YNWpCLEVBQU9HLEdBQUdnNkIsTUFBUSxTQUFVQyxFQUFNejdCLEdBSWpDLE9BSEF5N0IsRUFBT3A2QixFQUFPMjFCLElBQUszMUIsRUFBTzIxQixHQUFHc0QsT0FBUW1CLElBQWlCQSxFQUN0RHo3QixFQUFPQSxHQUFRLEtBRVIxQixLQUFLd2QsTUFBTzliLEVBQU0sU0FBVTRLLEVBQU1tWCxHQUN4QyxJQUFJMlosRUFBVXI5QixFQUFPK2YsV0FBWXhULEVBQU02d0IsR0FDdkMxWixFQUFNRSxLQUFPLFdBQ1o1akIsRUFBT3M5QixhQUFjRCxPQU9uQnpzQixHQUFRL1EsRUFBU3lDLGNBQWUsU0FFbkMrMkIsR0FEU3g1QixFQUFTeUMsY0FBZSxVQUNwQkssWUFBYTlDLEVBQVN5QyxjQUFlLFdBRW5Ec08sR0FBTWpQLEtBQU8sV0FJYkosRUFBUWc4QixRQUEwQixLQUFoQjNzQixHQUFNekosTUFJeEI1RixFQUFRaThCLFlBQWNuRSxHQUFJempCLFVBSTFCaEYsR0FBUS9RLEVBQVN5QyxjQUFlLFVBQzFCNkUsTUFBUSxJQUNkeUosR0FBTWpQLEtBQU8sUUFDYkosRUFBUWs4QixXQUE2QixNQUFoQjdzQixHQUFNekosTUFJNUIsSUFBSXUyQixHQUNIOXVCLEdBQWE1TCxFQUFPNk8sS0FBS2pELFdBRTFCNUwsRUFBT0csR0FBR2dDLE9BQVEsQ0FDakI0TSxLQUFNLFNBQVUxTSxFQUFNOEIsR0FDckIsT0FBT2thLEVBQVFwaEIsS0FBTStDLEVBQU8rTyxLQUFNMU0sRUFBTThCLEVBQTBCLEVBQW5CN0MsVUFBVWhCLFNBRzFEcTZCLFdBQVksU0FBVXQ0QixHQUNyQixPQUFPcEYsS0FBS2lFLEtBQU0sV0FDakJsQixFQUFPMjZCLFdBQVkxOUIsS0FBTW9GLFFBSzVCckMsRUFBT21DLE9BQVEsQ0FDZDRNLEtBQU0sU0FBVTFOLEVBQU1nQixFQUFNOEIsR0FDM0IsSUFBSXBELEVBQUsyZixFQUNSa2EsRUFBUXY1QixFQUFLNUMsU0FHZCxHQUFlLElBQVZtOEIsR0FBeUIsSUFBVkEsR0FBeUIsSUFBVkEsRUFLbkMsWUFBa0MsSUFBdEJ2NUIsRUFBSzdCLGFBQ1RRLEVBQU80ZixLQUFNdmUsRUFBTWdCLEVBQU04QixJQUtsQixJQUFWeTJCLEdBQWdCNTZCLEVBQU8rVyxTQUFVMVYsS0FDckNxZixFQUFRMWdCLEVBQU82NkIsVUFBV3g0QixFQUFLb0MsaUJBQzVCekUsRUFBTzZPLEtBQUsvRSxNQUFNMUIsS0FBS3FDLEtBQU1wSSxHQUFTcTRCLFFBQVc1M0IsU0FHdENBLElBQVZxQixFQUNXLE9BQVZBLE9BQ0puRSxFQUFPMjZCLFdBQVl0NUIsRUFBTWdCLEdBSXJCcWUsR0FBUyxRQUFTQSxRQUN1QjVkLEtBQTNDL0IsRUFBTTJmLEVBQU1oQixJQUFLcmUsRUFBTThDLEVBQU85QixJQUN6QnRCLEdBR1JNLEVBQUs1QixhQUFjNEMsRUFBTThCLEVBQVEsSUFDMUJBLEtBR0h1YyxHQUFTLFFBQVNBLEdBQStDLFFBQXBDM2YsRUFBTTJmLEVBQU0vZixJQUFLVSxFQUFNZ0IsTUFPM0MsT0FIZHRCLEVBQU1mLEVBQU93TixLQUFLdUIsS0FBTTFOLEVBQU1nQixTQUdUUyxFQU5iL0IsSUFTVDg1QixVQUFXLENBQ1ZsOEIsS0FBTSxDQUNMK2dCLElBQUssU0FBVXJlLEVBQU04QyxHQUNwQixJQUFNNUYsRUFBUWs4QixZQUF3QixVQUFWdDJCLEdBQzNCa0YsRUFBVWhJLEVBQU0sU0FBWSxDQUM1QixJQUFJakMsRUFBTWlDLEVBQUs4QyxNQUtmLE9BSkE5QyxFQUFLNUIsYUFBYyxPQUFRMEUsR0FDdEIvRSxJQUNKaUMsRUFBSzhDLE1BQVEvRSxHQUVQK0UsTUFNWHcyQixXQUFZLFNBQVV0NUIsRUFBTThDLEdBQzNCLElBQUk5QixFQUNIbEQsRUFBSSxFQUlKMjdCLEVBQVkzMkIsR0FBU0EsRUFBTTJGLE1BQU9xUCxHQUVuQyxHQUFLMmhCLEdBQStCLElBQWxCejVCLEVBQUs1QyxTQUN0QixLQUFVNEQsRUFBT3k0QixFQUFXMzdCLE1BQzNCa0MsRUFBSzJKLGdCQUFpQjNJLE1BTzFCcTRCLEdBQVcsQ0FDVmhiLElBQUssU0FBVXJlLEVBQU04QyxFQUFPOUIsR0FRM0IsT0FQZSxJQUFWOEIsRUFHSm5FLEVBQU8yNkIsV0FBWXQ1QixFQUFNZ0IsR0FFekJoQixFQUFLNUIsYUFBYzRDLEVBQU1BLEdBRW5CQSxJQUlUckMsRUFBT2tCLEtBQU1sQixFQUFPNk8sS0FBSy9FLE1BQU0xQixLQUFLOFksT0FBT3BYLE1BQU8sUUFBVSxTQUFVdEYsRUFBSW5DLEdBQ3pFLElBQUkwNEIsRUFBU252QixHQUFZdkosSUFBVXJDLEVBQU93TixLQUFLdUIsS0FFL0NuRCxHQUFZdkosR0FBUyxTQUFVaEIsRUFBTWdCLEVBQU1nRCxHQUMxQyxJQUFJdEUsRUFBS2ttQixFQUNSK1QsRUFBZ0IzNEIsRUFBS29DLGNBWXRCLE9BVk1ZLElBR0w0aEIsRUFBU3JiLEdBQVlvdkIsR0FDckJwdkIsR0FBWW92QixHQUFrQmo2QixFQUM5QkEsRUFBcUMsTUFBL0JnNkIsRUFBUTE1QixFQUFNZ0IsRUFBTWdELEdBQ3pCMjFCLEVBQ0EsS0FDRHB2QixHQUFZb3ZCLEdBQWtCL1QsR0FFeEJsbUIsS0FPVCxJQUFJazZCLEdBQWEsc0NBQ2hCQyxHQUFhLGdCQXlJYixTQUFTQyxHQUFrQmgzQixHQUUxQixPQURhQSxFQUFNMkYsTUFBT3FQLElBQW1CLElBQy9CdE8sS0FBTSxLQUl0QixTQUFTdXdCLEdBQVUvNUIsR0FDbEIsT0FBT0EsRUFBSzdCLGNBQWdCNkIsRUFBSzdCLGFBQWMsVUFBYSxHQUc3RCxTQUFTNjdCLEdBQWdCbDNCLEdBQ3hCLE9BQUt2QixNQUFNQyxRQUFTc0IsR0FDWkEsRUFFYyxpQkFBVkEsR0FDSkEsRUFBTTJGLE1BQU9xUCxJQUVkLEdBeEpSblosRUFBT0csR0FBR2dDLE9BQVEsQ0FDakJ5ZCxLQUFNLFNBQVV2ZCxFQUFNOEIsR0FDckIsT0FBT2thLEVBQVFwaEIsS0FBTStDLEVBQU80ZixLQUFNdmQsRUFBTThCLEVBQTBCLEVBQW5CN0MsVUFBVWhCLFNBRzFEZzdCLFdBQVksU0FBVWo1QixHQUNyQixPQUFPcEYsS0FBS2lFLEtBQU0sa0JBQ1ZqRSxLQUFNK0MsRUFBT3U3QixRQUFTbDVCLElBQVVBLFFBSzFDckMsRUFBT21DLE9BQVEsQ0FDZHlkLEtBQU0sU0FBVXZlLEVBQU1nQixFQUFNOEIsR0FDM0IsSUFBSXBELEVBQUsyZixFQUNSa2EsRUFBUXY1QixFQUFLNUMsU0FHZCxHQUFlLElBQVZtOEIsR0FBeUIsSUFBVkEsR0FBeUIsSUFBVkEsRUFXbkMsT0FQZSxJQUFWQSxHQUFnQjU2QixFQUFPK1csU0FBVTFWLEtBR3JDZ0IsRUFBT3JDLEVBQU91N0IsUUFBU2w1QixJQUFVQSxFQUNqQ3FlLEVBQVExZ0IsRUFBT28xQixVQUFXL3lCLFNBR1pTLElBQVZxQixFQUNDdWMsR0FBUyxRQUFTQSxRQUN1QjVkLEtBQTNDL0IsRUFBTTJmLEVBQU1oQixJQUFLcmUsRUFBTThDLEVBQU85QixJQUN6QnRCLEVBR0NNLEVBQU1nQixHQUFTOEIsRUFHcEJ1YyxHQUFTLFFBQVNBLEdBQStDLFFBQXBDM2YsRUFBTTJmLEVBQU0vZixJQUFLVSxFQUFNZ0IsSUFDakR0QixFQUdETSxFQUFNZ0IsSUFHZCt5QixVQUFXLENBQ1YzaUIsU0FBVSxDQUNUOVIsSUFBSyxTQUFVVSxHQU9kLElBQUltNkIsRUFBV3g3QixFQUFPd04sS0FBS3VCLEtBQU0xTixFQUFNLFlBRXZDLE9BQUttNkIsRUFDR3pLLFNBQVV5SyxFQUFVLElBSTNCUCxHQUFXeHdCLEtBQU1wSixFQUFLZ0ksV0FDdEI2eEIsR0FBV3p3QixLQUFNcEosRUFBS2dJLFdBQ3RCaEksRUFBS21SLEtBRUUsR0FHQSxLQUtYK29CLFFBQVMsQ0FDUkUsSUFBTyxVQUNQQyxNQUFTLGVBWUxuOUIsRUFBUWk4QixjQUNieDZCLEVBQU9vMUIsVUFBVXhpQixTQUFXLENBQzNCalMsSUFBSyxTQUFVVSxHQUlkLElBQUk4UCxFQUFTOVAsRUFBS3pCLFdBSWxCLE9BSEt1UixHQUFVQSxFQUFPdlIsWUFDckJ1UixFQUFPdlIsV0FBV2lULGNBRVosTUFFUjZNLElBQUssU0FBVXJlLEdBSWQsSUFBSThQLEVBQVM5UCxFQUFLekIsV0FDYnVSLElBQ0pBLEVBQU8wQixjQUVGMUIsRUFBT3ZSLFlBQ1h1UixFQUFPdlIsV0FBV2lULGtCQU92QjdTLEVBQU9rQixLQUFNLENBQ1osV0FDQSxXQUNBLFlBQ0EsY0FDQSxjQUNBLFVBQ0EsVUFDQSxTQUNBLGNBQ0EsbUJBQ0UsV0FDRmxCLEVBQU91N0IsUUFBU3QrQixLQUFLd0gsZUFBa0J4SCxPQTRCeEMrQyxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQnc1QixTQUFVLFNBQVV4M0IsR0FDbkIsSUFBSXkzQixFQUFTdjZCLEVBQU15SyxFQUFLK3ZCLEVBQVVDLEVBQU8vNUIsRUFBR2c2QixFQUMzQzU4QixFQUFJLEVBRUwsR0FBS1gsRUFBWTJGLEdBQ2hCLE9BQU9sSCxLQUFLaUUsS0FBTSxTQUFVYSxHQUMzQi9CLEVBQVEvQyxNQUFPMCtCLFNBQVV4M0IsRUFBTXZHLEtBQU1YLEtBQU04RSxFQUFHcTVCLEdBQVVuK0IsVUFNMUQsSUFGQTIrQixFQUFVUCxHQUFnQmwzQixJQUViN0QsT0FDWixLQUFVZSxFQUFPcEUsS0FBTWtDLE1BSXRCLEdBSEEwOEIsRUFBV1QsR0FBVS81QixHQUNyQnlLLEVBQXdCLElBQWxCekssRUFBSzVDLFVBQW9CLElBQU0wOEIsR0FBa0JVLEdBQWEsSUFFekQsQ0FFVixJQURBOTVCLEVBQUksRUFDTSs1QixFQUFRRixFQUFTNzVCLE1BQ3JCK0osRUFBSTlOLFFBQVMsSUFBTTg5QixFQUFRLEtBQVEsSUFDdkNod0IsR0FBT2d3QixFQUFRLEtBTVpELEtBRExFLEVBQWFaLEdBQWtCcnZCLEtBRTlCekssRUFBSzVCLGFBQWMsUUFBU3M4QixHQU1oQyxPQUFPOStCLE1BR1IrK0IsWUFBYSxTQUFVNzNCLEdBQ3RCLElBQUl5M0IsRUFBU3Y2QixFQUFNeUssRUFBSyt2QixFQUFVQyxFQUFPLzVCLEVBQUdnNkIsRUFDM0M1OEIsRUFBSSxFQUVMLEdBQUtYLEVBQVkyRixHQUNoQixPQUFPbEgsS0FBS2lFLEtBQU0sU0FBVWEsR0FDM0IvQixFQUFRL0MsTUFBTysrQixZQUFhNzNCLEVBQU12RyxLQUFNWCxLQUFNOEUsRUFBR3E1QixHQUFVbitCLFVBSTdELElBQU1xRSxVQUFVaEIsT0FDZixPQUFPckQsS0FBSzhSLEtBQU0sUUFBUyxJQUs1QixJQUZBNnNCLEVBQVVQLEdBQWdCbDNCLElBRWI3RCxPQUNaLEtBQVVlLEVBQU9wRSxLQUFNa0MsTUFNdEIsR0FMQTA4QixFQUFXVCxHQUFVLzVCLEdBR3JCeUssRUFBd0IsSUFBbEJ6SyxFQUFLNUMsVUFBb0IsSUFBTTA4QixHQUFrQlUsR0FBYSxJQUV6RCxDQUVWLElBREE5NUIsRUFBSSxFQUNNKzVCLEVBQVFGLEVBQVM3NUIsTUFHMUIsTUFBNEMsRUFBcEMrSixFQUFJOU4sUUFBUyxJQUFNODlCLEVBQVEsTUFDbENod0IsRUFBTUEsRUFBSTVJLFFBQVMsSUFBTTQ0QixFQUFRLElBQUssS0FNbkNELEtBRExFLEVBQWFaLEdBQWtCcnZCLEtBRTlCekssRUFBSzVCLGFBQWMsUUFBU3M4QixHQU1oQyxPQUFPOStCLE1BR1JnL0IsWUFBYSxTQUFVOTNCLEVBQU8rM0IsR0FDN0IsSUFBSXY5QixTQUFjd0YsRUFDakJnNEIsRUFBd0IsVUFBVHg5QixHQUFxQmlFLE1BQU1DLFFBQVNzQixHQUVwRCxNQUF5QixrQkFBYiszQixHQUEwQkMsRUFDOUJELEVBQVdqL0IsS0FBSzArQixTQUFVeDNCLEdBQVVsSCxLQUFLKytCLFlBQWE3M0IsR0FHekQzRixFQUFZMkYsR0FDVGxILEtBQUtpRSxLQUFNLFNBQVUvQixHQUMzQmEsRUFBUS9DLE1BQU9nL0IsWUFDZDkzQixFQUFNdkcsS0FBTVgsS0FBTWtDLEVBQUdpOEIsR0FBVW4rQixNQUFRaS9CLEdBQ3ZDQSxLQUtJai9CLEtBQUtpRSxLQUFNLFdBQ2pCLElBQUlnTSxFQUFXL04sRUFBR3VZLEVBQU0wa0IsRUFFeEIsR0FBS0QsRUFPSixJQUpBaDlCLEVBQUksRUFDSnVZLEVBQU8xWCxFQUFRL0MsTUFDZm0vQixFQUFhZixHQUFnQmwzQixHQUVuQitJLEVBQVlrdkIsRUFBWWo5QixNQUc1QnVZLEVBQUsya0IsU0FBVW52QixHQUNuQndLLEVBQUtza0IsWUFBYTl1QixHQUVsQndLLEVBQUtpa0IsU0FBVXp1QixhQUtJcEssSUFBVnFCLEdBQWdDLFdBQVR4RixLQUNsQ3VPLEVBQVlrdUIsR0FBVW4rQixRQUlyQjZpQixFQUFTSixJQUFLemlCLEtBQU0sZ0JBQWlCaVEsR0FPakNqUSxLQUFLd0MsY0FDVHhDLEtBQUt3QyxhQUFjLFNBQ2xCeU4sSUFBdUIsSUFBVi9JLEdBRWIyYixFQUFTbmYsSUFBSzFELEtBQU0sa0JBRHBCLFFBUUxvL0IsU0FBVSxTQUFVcDhCLEdBQ25CLElBQUlpTixFQUFXN0wsRUFDZGxDLEVBQUksRUFHTCxJQURBK04sRUFBWSxJQUFNak4sRUFBVyxJQUNuQm9CLEVBQU9wRSxLQUFNa0MsTUFDdEIsR0FBdUIsSUFBbEJrQyxFQUFLNUMsV0FDb0UsR0FBM0UsSUFBTTA4QixHQUFrQkMsR0FBVS81QixJQUFXLEtBQU1yRCxRQUFTa1AsR0FDN0QsT0FBTyxFQUlWLE9BQU8sS0FPVCxJQUFJb3ZCLEdBQVUsTUFFZHQ4QixFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQi9DLElBQUssU0FBVStFLEdBQ2QsSUFBSXVjLEVBQU8zZixFQUFLMHJCLEVBQ2ZwckIsRUFBT3BFLEtBQU0sR0FFZCxPQUFNcUUsVUFBVWhCLFFBMEJoQm1zQixFQUFrQmp1QixFQUFZMkYsR0FFdkJsSCxLQUFLaUUsS0FBTSxTQUFVL0IsR0FDM0IsSUFBSUMsRUFFbUIsSUFBbEJuQyxLQUFLd0IsV0FXRSxPQU5YVyxFQURJcXRCLEVBQ0V0b0IsRUFBTXZHLEtBQU1YLEtBQU1rQyxFQUFHYSxFQUFRL0MsTUFBT21DLE9BRXBDK0UsR0FLTi9FLEVBQU0sR0FFb0IsaUJBQVJBLEVBQ2xCQSxHQUFPLEdBRUl3RCxNQUFNQyxRQUFTekQsS0FDMUJBLEVBQU1ZLEVBQU9vQixJQUFLaEMsRUFBSyxTQUFVK0UsR0FDaEMsT0FBZ0IsTUFBVEEsRUFBZ0IsR0FBS0EsRUFBUSxPQUl0Q3VjLEVBQVExZ0IsRUFBT3U4QixTQUFVdC9CLEtBQUswQixPQUFVcUIsRUFBT3U4QixTQUFVdC9CLEtBQUtvTSxTQUFTNUUsaUJBR3JELFFBQVNpYyxRQUErQzVkLElBQXBDNGQsRUFBTWhCLElBQUt6aUIsS0FBTW1DLEVBQUssV0FDM0RuQyxLQUFLa0gsTUFBUS9FLE9BekRUaUMsR0FDSnFmLEVBQVExZ0IsRUFBT3U4QixTQUFVbDdCLEVBQUsxQyxPQUM3QnFCLEVBQU91OEIsU0FBVWw3QixFQUFLZ0ksU0FBUzVFLGlCQUcvQixRQUFTaWMsUUFDZ0M1ZCxLQUF2Qy9CLEVBQU0yZixFQUFNL2YsSUFBS1UsRUFBTSxVQUVsQk4sRUFNWSxpQkFIcEJBLEVBQU1NLEVBQUs4QyxPQUlIcEQsRUFBSW1DLFFBQVNvNUIsR0FBUyxJQUloQixNQUFQdjdCLEVBQWMsR0FBS0EsT0FHM0IsS0F5Q0hmLEVBQU9tQyxPQUFRLENBQ2RvNkIsU0FBVSxDQUNUalosT0FBUSxDQUNQM2lCLElBQUssU0FBVVUsR0FFZCxJQUFJakMsRUFBTVksRUFBT3dOLEtBQUt1QixLQUFNMU4sRUFBTSxTQUNsQyxPQUFjLE1BQVBqQyxFQUNOQSxFQU1BKzdCLEdBQWtCbjdCLEVBQU9ULEtBQU04QixNQUdsQ21FLE9BQVEsQ0FDUDdFLElBQUssU0FBVVUsR0FDZCxJQUFJOEMsRUFBT21mLEVBQVFua0IsRUFDbEJpRCxFQUFVZixFQUFLZSxRQUNmbVcsRUFBUWxYLEVBQUt3UixjQUNiNlMsRUFBb0IsZUFBZHJrQixFQUFLMUMsS0FDWCtqQixFQUFTZ0QsRUFBTSxLQUFPLEdBQ3RCdU0sRUFBTXZNLEVBQU1uTixFQUFRLEVBQUluVyxFQUFROUIsT0FVakMsSUFQQ25CLEVBRElvWixFQUFRLEVBQ1IwWixFQUdBdk0sRUFBTW5OLEVBQVEsRUFJWHBaLEVBQUk4eUIsRUFBSzl5QixJQUtoQixLQUpBbWtCLEVBQVNsaEIsRUFBU2pELElBSUp5VCxVQUFZelQsSUFBTW9aLEtBRzdCK0ssRUFBT2xhLFlBQ0xrYSxFQUFPMWpCLFdBQVd3SixXQUNuQkMsRUFBVWlhLEVBQU8xakIsV0FBWSxhQUFpQixDQU1qRCxHQUhBdUUsRUFBUW5FLEVBQVFzakIsR0FBU2xrQixNQUdwQnNtQixFQUNKLE9BQU92aEIsRUFJUnVlLEVBQU8za0IsS0FBTW9HLEdBSWYsT0FBT3VlLEdBR1JoRCxJQUFLLFNBQVVyZSxFQUFNOEMsR0FNcEIsSUFMQSxJQUFJcTRCLEVBQVdsWixFQUNkbGhCLEVBQVVmLEVBQUtlLFFBQ2ZzZ0IsRUFBUzFpQixFQUFPMkQsVUFBV1EsR0FDM0JoRixFQUFJaUQsRUFBUTlCLE9BRUxuQixPQUNQbWtCLEVBQVNsaEIsRUFBU2pELElBSU55VCxVQUN1RCxFQUFsRTVTLEVBQU82RCxRQUFTN0QsRUFBT3U4QixTQUFTalosT0FBTzNpQixJQUFLMmlCLEdBQVVaLE1BRXREOFosR0FBWSxHQVVkLE9BSE1BLElBQ0xuN0IsRUFBS3dSLGVBQWlCLEdBRWhCNlAsT0FPWDFpQixFQUFPa0IsS0FBTSxDQUFFLFFBQVMsWUFBYyxXQUNyQ2xCLEVBQU91OEIsU0FBVXQvQixNQUFTLENBQ3pCeWlCLElBQUssU0FBVXJlLEVBQU04QyxHQUNwQixHQUFLdkIsTUFBTUMsUUFBU3NCLEdBQ25CLE9BQVM5QyxFQUFLc1IsU0FBMkQsRUFBakQzUyxFQUFPNkQsUUFBUzdELEVBQVFxQixHQUFPakMsTUFBTytFLEtBSTNENUYsRUFBUWc4QixVQUNidjZCLEVBQU91OEIsU0FBVXQvQixNQUFPMEQsSUFBTSxTQUFVVSxHQUN2QyxPQUF3QyxPQUFqQ0EsRUFBSzdCLGFBQWMsU0FBcUIsS0FBTzZCLEVBQUs4QyxVQVc5RDVGLEVBQVFrK0IsUUFBVSxjQUFlei9CLEVBSU4sU0FBMUIwL0IsR0FBb0NqekIsR0FDbkNBLEVBQUUwYyxrQkFGSixJQUFJd1csR0FBYyxrQ0FLbEIzOEIsRUFBT21DLE9BQVFuQyxFQUFPNGxCLE1BQU8sQ0FFNUJVLFFBQVMsU0FBVVYsRUFBT2pHLEVBQU10ZSxFQUFNdTdCLEdBRXJDLElBQUl6OUIsRUFBRzJNLEVBQUs2QixFQUFLa3ZCLEVBQVlDLEVBQVE3VixFQUFRN0ssRUFBUzJnQixFQUNyREMsRUFBWSxDQUFFMzdCLEdBQVF4RSxHQUN0QjhCLEVBQU9SLEVBQU9QLEtBQU1nb0IsRUFBTyxRQUFXQSxFQUFNam5CLEtBQU9pbkIsRUFDbkRrQixFQUFhM29CLEVBQU9QLEtBQU1nb0IsRUFBTyxhQUFnQkEsRUFBTW5aLFVBQVVsSSxNQUFPLEtBQVEsR0FLakYsR0FIQXVILEVBQU1peEIsRUFBY3B2QixFQUFNdE0sRUFBT0EsR0FBUXhFLEVBR2xCLElBQWxCd0UsRUFBSzVDLFVBQW9DLElBQWxCNEMsRUFBSzVDLFdBSzVCaytCLEdBQVlseUIsS0FBTTlMLEVBQU9xQixFQUFPNGxCLE1BQU1zQixjQUlmLEVBQXZCdm9CLEVBQUtYLFFBQVMsT0FJbEJXLEdBREFtb0IsRUFBYW5vQixFQUFLNEYsTUFBTyxNQUNQOEcsUUFDbEJ5YixFQUFXN2tCLFFBRVo2NkIsRUFBU24rQixFQUFLWCxRQUFTLEtBQVEsR0FBSyxLQUFPVyxHQUczQ2luQixFQUFRQSxFQUFPNWxCLEVBQU8rQyxTQUNyQjZpQixFQUNBLElBQUk1bEIsRUFBT3VtQixNQUFPNW5CLEVBQXVCLGlCQUFWaW5CLEdBQXNCQSxJQUdoREssVUFBWTJXLEVBQWUsRUFBSSxFQUNyQ2hYLEVBQU1uWixVQUFZcWEsRUFBV2pjLEtBQU0sS0FDbkMrYSxFQUFNdUMsV0FBYXZDLEVBQU1uWixVQUN4QixJQUFJbkYsT0FBUSxVQUFZd2YsRUFBV2pjLEtBQU0saUJBQW9CLFdBQzdELEtBR0QrYSxFQUFNclYsWUFBU3pOLEVBQ1Q4aUIsRUFBTW5qQixTQUNYbWpCLEVBQU1uakIsT0FBU3BCLEdBSWhCc2UsRUFBZSxNQUFSQSxFQUNOLENBQUVpRyxHQUNGNWxCLEVBQU8yRCxVQUFXZ2MsRUFBTSxDQUFFaUcsSUFHM0J4SixFQUFVcGMsRUFBTzRsQixNQUFNeEosUUFBU3pkLElBQVUsR0FDcENpK0IsSUFBZ0J4Z0IsRUFBUWtLLFVBQW1ELElBQXhDbEssRUFBUWtLLFFBQVF4b0IsTUFBT3VELEVBQU1zZSxJQUF0RSxDQU1BLElBQU1pZCxJQUFpQnhnQixFQUFReU0sV0FBYTFyQixFQUFVa0UsR0FBUyxDQU05RCxJQUpBdzdCLEVBQWF6Z0IsRUFBUThKLGNBQWdCdm5CLEVBQy9CZytCLEdBQVlseUIsS0FBTW95QixFQUFhbCtCLEtBQ3BDbU4sRUFBTUEsRUFBSWxNLFlBRUhrTSxFQUFLQSxFQUFNQSxFQUFJbE0sV0FDdEJvOUIsRUFBVWovQixLQUFNK04sR0FDaEI2QixFQUFNN0IsRUFJRjZCLEtBQVV0TSxFQUFLNkksZUFBaUJyTixJQUNwQ21nQyxFQUFVai9CLEtBQU00UCxFQUFJYixhQUFlYSxFQUFJc3ZCLGNBQWdCamdDLEdBTXpELElBREFtQyxFQUFJLEdBQ00yTSxFQUFNa3hCLEVBQVc3OUIsUUFBWXltQixFQUFNb0Msd0JBQzVDK1UsRUFBY2p4QixFQUNkOFosRUFBTWpuQixLQUFXLEVBQUpRLEVBQ1owOUIsRUFDQXpnQixFQUFRZ0wsVUFBWXpvQixHQUdyQnNvQixHQUNFbkgsRUFBU25mLElBQUttTCxFQUFLLFdBQWN2TyxPQUFPZ2lCLE9BQVEsT0FDOUNxRyxFQUFNam5CLE9BQ1RtaEIsRUFBU25mLElBQUttTCxFQUFLLFlBRW5CbWIsRUFBT25wQixNQUFPZ08sRUFBSzZULElBSXBCc0gsRUFBUzZWLEdBQVVoeEIsRUFBS2d4QixLQUNUN1YsRUFBT25wQixPQUFTcWhCLEVBQVlyVCxLQUMxQzhaLEVBQU1yVixPQUFTMFcsRUFBT25wQixNQUFPZ08sRUFBSzZULElBQ1osSUFBakJpRyxFQUFNclYsUUFDVnFWLEVBQU1TLGtCQThDVCxPQTFDQVQsRUFBTWpuQixLQUFPQSxFQUdQaStCLEdBQWlCaFgsRUFBTXNELHNCQUVwQjlNLEVBQVF3SCxXQUNxQyxJQUFwRHhILEVBQVF3SCxTQUFTOWxCLE1BQU9rL0IsRUFBVW4yQixNQUFPOFksS0FDekNSLEVBQVk5ZCxJQUlQeTdCLEdBQVV0K0IsRUFBWTZDLEVBQU0xQyxNQUFheEIsRUFBVWtFLE1BR3ZEc00sRUFBTXRNLEVBQU15N0IsTUFHWHo3QixFQUFNeTdCLEdBQVcsTUFJbEI5OEIsRUFBTzRsQixNQUFNc0IsVUFBWXZvQixFQUVwQmluQixFQUFNb0Msd0JBQ1YrVSxFQUFZL3ZCLGlCQUFrQnJPLEVBQU0rOUIsSUFHckNyN0IsRUFBTTFDLEtBRURpbkIsRUFBTW9DLHdCQUNWK1UsRUFBWS9lLG9CQUFxQnJmLEVBQU0rOUIsSUFHeEMxOEIsRUFBTzRsQixNQUFNc0IsZUFBWXBrQixFQUVwQjZLLElBQ0p0TSxFQUFNeTdCLEdBQVdudkIsSUFNZGlZLEVBQU1yVixTQUtkMnNCLFNBQVUsU0FBVXYrQixFQUFNMEMsRUFBTXVrQixHQUMvQixJQUFJbmMsRUFBSXpKLEVBQU9tQyxPQUNkLElBQUluQyxFQUFPdW1CLE1BQ1hYLEVBQ0EsQ0FDQ2puQixLQUFNQSxFQUNONHFCLGFBQWEsSUFJZnZwQixFQUFPNGxCLE1BQU1VLFFBQVM3YyxFQUFHLEtBQU1wSSxNQUtqQ3JCLEVBQU9HLEdBQUdnQyxPQUFRLENBRWpCbWtCLFFBQVMsU0FBVTNuQixFQUFNZ2hCLEdBQ3hCLE9BQU8xaUIsS0FBS2lFLEtBQU0sV0FDakJsQixFQUFPNGxCLE1BQU1VLFFBQVMzbkIsRUFBTWdoQixFQUFNMWlCLFNBR3BDa2dDLGVBQWdCLFNBQVV4K0IsRUFBTWdoQixHQUMvQixJQUFJdGUsRUFBT3BFLEtBQU0sR0FDakIsR0FBS29FLEVBQ0osT0FBT3JCLEVBQU80bEIsTUFBTVUsUUFBUzNuQixFQUFNZ2hCLEVBQU10ZSxHQUFNLE1BYzVDOUMsRUFBUWsrQixTQUNiejhCLEVBQU9rQixLQUFNLENBQUVtUixNQUFPLFVBQVcrWSxLQUFNLFlBQWMsU0FBVUssRUFBTTVELEdBR3RELFNBQVZsYyxFQUFvQmlhLEdBQ3ZCNWxCLEVBQU80bEIsTUFBTXNYLFNBQVVyVixFQUFLakMsRUFBTW5qQixPQUFRekMsRUFBTzRsQixNQUFNaUMsSUFBS2pDLElBRzdENWxCLEVBQU80bEIsTUFBTXhKLFFBQVN5TCxHQUFRLENBQzdCUCxNQUFPLFdBSU4sSUFBSXBvQixFQUFNakMsS0FBS2lOLGVBQWlCak4sS0FBS0osVUFBWUksS0FDaERtZ0MsRUFBV3RkLEVBQVN6QixPQUFRbmYsRUFBSzJvQixHQUU1QnVWLEdBQ0xsK0IsRUFBSThOLGlCQUFrQnllLEVBQU05ZixHQUFTLEdBRXRDbVUsRUFBU3pCLE9BQVFuZixFQUFLMm9CLEdBQU91VixHQUFZLEdBQU0sSUFFaEQzVixTQUFVLFdBQ1QsSUFBSXZvQixFQUFNakMsS0FBS2lOLGVBQWlCak4sS0FBS0osVUFBWUksS0FDaERtZ0MsRUFBV3RkLEVBQVN6QixPQUFRbmYsRUFBSzJvQixHQUFRLEVBRXBDdVYsRUFLTHRkLEVBQVN6QixPQUFRbmYsRUFBSzJvQixFQUFLdVYsSUFKM0JsK0IsRUFBSThlLG9CQUFxQnlOLEVBQU05ZixHQUFTLEdBQ3hDbVUsRUFBU2pGLE9BQVEzYixFQUFLMm9CLFFBUzNCLElBQUkxVixHQUFXblYsRUFBT21WLFNBRWxCdFQsR0FBUSxDQUFFdUYsS0FBTTZCLEtBQUtxakIsT0FFckIrVCxHQUFXLEtBS2ZyOUIsRUFBT3M5QixTQUFXLFNBQVUzZCxHQUMzQixJQUFJN08sRUFDSixJQUFNNk8sR0FBd0IsaUJBQVRBLEVBQ3BCLE9BQU8sS0FLUixJQUNDN08sR0FBUSxJQUFJOVQsRUFBT3VnQyxXQUFjQyxnQkFBaUI3ZCxFQUFNLFlBQ3ZELE1BQVFsVyxHQUNUcUgsT0FBTWhPLEVBTVAsT0FITWdPLElBQU9BLEVBQUl4RyxxQkFBc0IsZUFBZ0JoSyxRQUN0RE4sRUFBT29ELE1BQU8sZ0JBQWtCdWMsR0FFMUI3TyxHQUlSLElBQ0Myc0IsR0FBVyxRQUNYQyxHQUFRLFNBQ1JDLEdBQWtCLHdDQUNsQkMsR0FBZSxxQ0FFaEIsU0FBU0MsR0FBYTlJLEVBQVEzM0IsRUFBSzBnQyxFQUFhcmxCLEdBQy9DLElBQUlwVyxFQUVKLEdBQUtPLE1BQU1DLFFBQVN6RixHQUduQjRDLEVBQU9rQixLQUFNOUQsRUFBSyxTQUFVK0IsRUFBR2thLEdBQ3pCeWtCLEdBQWVMLEdBQVNoekIsS0FBTXNxQixHQUdsQ3RjLEVBQUtzYyxFQUFRMWIsR0FLYndrQixHQUNDOUksRUFBUyxLQUFxQixpQkFBTjFiLEdBQXVCLE1BQUxBLEVBQVlsYSxFQUFJLElBQU8sSUFDakVrYSxFQUNBeWtCLEVBQ0FybEIsVUFLRyxHQUFNcWxCLEdBQWlDLFdBQWxCaCtCLEVBQVExQyxHQVVuQ3FiLEVBQUtzYyxFQUFRMzNCLFFBUGIsSUFBTWlGLEtBQVFqRixFQUNieWdDLEdBQWE5SSxFQUFTLElBQU0xeUIsRUFBTyxJQUFLakYsRUFBS2lGLEdBQVF5N0IsRUFBYXJsQixHQVlyRXpZLEVBQU8rOUIsTUFBUSxTQUFVcDNCLEVBQUdtM0IsR0FHcEIsU0FBTnJsQixFQUFnQnROLEVBQUs2eUIsR0FHcEIsSUFBSTc1QixFQUFRM0YsRUFBWXcvQixHQUN2QkEsSUFDQUEsRUFFREMsRUFBR0EsRUFBRTM5QixRQUFXNDlCLG1CQUFvQi95QixHQUFRLElBQzNDK3lCLG1CQUE2QixNQUFULzVCLEVBQWdCLEdBQUtBLEdBVjVDLElBQUk0d0IsRUFDSGtKLEVBQUksR0FZTCxHQUFVLE1BQUx0M0IsRUFDSixNQUFPLEdBSVIsR0FBSy9ELE1BQU1DLFFBQVM4RCxJQUFTQSxFQUFFbkcsU0FBV1IsRUFBTzJDLGNBQWVnRSxHQUcvRDNHLEVBQU9rQixLQUFNeUYsRUFBRyxXQUNmOFIsRUFBS3hiLEtBQUtvRixLQUFNcEYsS0FBS2tILGNBT3RCLElBQU00d0IsS0FBVXB1QixFQUNmazNCLEdBQWE5SSxFQUFRcHVCLEVBQUdvdUIsR0FBVStJLEVBQWFybEIsR0FLakQsT0FBT3dsQixFQUFFcHpCLEtBQU0sTUFHaEI3SyxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQmc4QixVQUFXLFdBQ1YsT0FBT24rQixFQUFPKzlCLE1BQU85Z0MsS0FBS21oQyxtQkFFM0JBLGVBQWdCLFdBQ2YsT0FBT25oQyxLQUFLbUUsSUFBSyxXQUdoQixJQUFJME4sRUFBVzlPLEVBQU80ZixLQUFNM2lCLEtBQU0sWUFDbEMsT0FBTzZSLEVBQVc5TyxFQUFPMkQsVUFBV21MLEdBQWE3UixPQUVqRHFRLE9BQVEsV0FDUixJQUFJM08sRUFBTzFCLEtBQUswQixLQUdoQixPQUFPMUIsS0FBS29GLE9BQVNyQyxFQUFRL0MsTUFBT2thLEdBQUksY0FDdkN5bUIsR0FBYW56QixLQUFNeE4sS0FBS29NLFlBQWVzMEIsR0FBZ0JsekIsS0FBTTlMLEtBQzNEMUIsS0FBSzBWLFVBQVlvUSxHQUFldFksS0FBTTlMLE1BRXpDeUMsSUFBSyxTQUFVb0QsRUFBSW5ELEdBQ25CLElBQUlqQyxFQUFNWSxFQUFRL0MsTUFBT21DLE1BRXpCLE9BQVksTUFBUEEsRUFDRyxLQUdId0QsTUFBTUMsUUFBU3pELEdBQ1pZLEVBQU9vQixJQUFLaEMsRUFBSyxTQUFVQSxHQUNqQyxNQUFPLENBQUVpRCxLQUFNaEIsRUFBS2dCLEtBQU04QixNQUFPL0UsRUFBSThELFFBQVN3NkIsR0FBTyxXQUloRCxDQUFFcjdCLEtBQU1oQixFQUFLZ0IsS0FBTThCLE1BQU8vRSxFQUFJOEQsUUFBU3c2QixHQUFPLFdBQ2xELzhCLFNBS04sSUFDQzA5QixHQUFNLE9BQ05DLEdBQVEsT0FDUkMsR0FBYSxnQkFDYkMsR0FBVyw2QkFJWEMsR0FBYSxpQkFDYkMsR0FBWSxRQVdacEgsR0FBYSxHQU9icUgsR0FBYSxHQUdiQyxHQUFXLEtBQUsvZ0MsT0FBUSxLQUd4QmdoQyxHQUFlaGlDLEVBQVN5QyxjQUFlLEtBSXhDLFNBQVN3L0IsR0FBNkJDLEdBR3JDLE9BQU8sU0FBVUMsRUFBb0I5akIsR0FFRCxpQkFBdkI4akIsSUFDWDlqQixFQUFPOGpCLEVBQ1BBLEVBQXFCLEtBR3RCLElBQUlDLEVBQ0g5L0IsRUFBSSxFQUNKKy9CLEVBQVlGLEVBQW1CdjZCLGNBQWNxRixNQUFPcVAsSUFBbUIsR0FFeEUsR0FBSzNhLEVBQVkwYyxHQUdoQixLQUFVK2pCLEVBQVdDLEVBQVcvL0IsTUFHUixNQUFsQjgvQixFQUFVLElBQ2RBLEVBQVdBLEVBQVN4aEMsTUFBTyxJQUFPLEtBQ2hDc2hDLEVBQVdFLEdBQWFGLEVBQVdFLElBQWMsSUFBS3J3QixRQUFTc00sS0FJL0Q2akIsRUFBV0UsR0FBYUYsRUFBV0UsSUFBYyxJQUFLbGhDLEtBQU1tZCxJQVFuRSxTQUFTaWtCLEdBQStCSixFQUFXMzhCLEVBQVN5MUIsRUFBaUJ1SCxHQUU1RSxJQUFJQyxFQUFZLEdBQ2ZDLEVBQXFCUCxJQUFjSixHQUVwQyxTQUFTWSxFQUFTTixHQUNqQixJQUFJcnNCLEVBY0osT0FiQXlzQixFQUFXSixJQUFhLEVBQ3hCai9CLEVBQU9rQixLQUFNNjlCLEVBQVdFLElBQWMsR0FBSSxTQUFVL2tCLEVBQUdzbEIsR0FDdEQsSUFBSUMsRUFBc0JELEVBQW9CcDlCLEVBQVN5MUIsRUFBaUJ1SCxHQUN4RSxNQUFvQyxpQkFBeEJLLEdBQ1ZILEdBQXFCRCxFQUFXSSxHQUt0QkgsSUFDRDFzQixFQUFXNnNCLFFBRGYsR0FITnI5QixFQUFRODhCLFVBQVV0d0IsUUFBUzZ3QixHQUMzQkYsRUFBU0UsSUFDRixLQUtGN3NCLEVBR1IsT0FBTzJzQixFQUFTbjlCLEVBQVE4OEIsVUFBVyxNQUFVRyxFQUFXLE1BQVNFLEVBQVMsS0FNM0UsU0FBU0csR0FBWWo5QixFQUFRN0QsR0FDNUIsSUFBSXVNLEVBQUt6SSxFQUNSaTlCLEVBQWMzL0IsRUFBTzQvQixhQUFhRCxhQUFlLEdBRWxELElBQU14MEIsS0FBT3ZNLE9BQ1FrRSxJQUFmbEUsRUFBS3VNLE1BQ1B3MEIsRUFBYXgwQixHQUFRMUksRUFBcUJDLEVBQVZBLEdBQWlCLElBQVV5SSxHQUFRdk0sRUFBS3VNLElBTzVFLE9BSkt6SSxHQUNKMUMsRUFBT21DLFFBQVEsRUFBTU0sRUFBUUMsR0FHdkJELEVBL0VQbzhCLEdBQWFyc0IsS0FBT0wsR0FBU0ssS0FnUDlCeFMsRUFBT21DLE9BQVEsQ0FHZDA5QixPQUFRLEVBR1JDLGFBQWMsR0FDZEMsS0FBTSxHQUVOSCxhQUFjLENBQ2JJLElBQUs3dEIsR0FBU0ssS0FDZDdULEtBQU0sTUFDTnNoQyxRQXZSZ0IsNERBdVJReDFCLEtBQU0wSCxHQUFTK3RCLFVBQ3ZDempDLFFBQVEsRUFDUjBqQyxhQUFhLEVBQ2JDLE9BQU8sRUFDUEMsWUFBYSxtREFjYkMsUUFBUyxDQUNSbEksSUFBS3dHLEdBQ0xyL0IsS0FBTSxhQUNObXRCLEtBQU0sWUFDTjViLElBQUssNEJBQ0x5dkIsS0FBTSxxQ0FHUHRvQixTQUFVLENBQ1RuSCxJQUFLLFVBQ0w0YixLQUFNLFNBQ042VCxLQUFNLFlBR1BDLGVBQWdCLENBQ2YxdkIsSUFBSyxjQUNMdlIsS0FBTSxlQUNOZ2hDLEtBQU0sZ0JBS1BFLFdBQVksQ0FHWEMsU0FBVTM3QixPQUdWNDdCLGFBQWEsRUFHYkMsWUFBYXpnQixLQUFLQyxNQUdsQnlnQixXQUFZN2dDLEVBQU9zOUIsVUFPcEJxQyxZQUFhLENBQ1pLLEtBQUssRUFDTDkvQixTQUFTLElBT1g0Z0MsVUFBVyxTQUFVcitCLEVBQVFzK0IsR0FDNUIsT0FBT0EsRUFHTnJCLEdBQVlBLEdBQVlqOUIsRUFBUXpDLEVBQU80L0IsY0FBZ0JtQixHQUd2RHJCLEdBQVkxL0IsRUFBTzQvQixhQUFjbjlCLElBR25DdStCLGNBQWVsQyxHQUE2QnhILElBQzVDMkosY0FBZW5DLEdBQTZCSCxJQUc1Q3VDLEtBQU0sU0FBVWxCLEVBQUs1OUIsR0FHQSxpQkFBUjQ5QixJQUNYNTlCLEVBQVU0OUIsRUFDVkEsT0FBTWw5QixHQUlQVixFQUFVQSxHQUFXLEdBRXJCLElBQUkrK0IsRUFHSEMsRUFHQUMsRUFDQUMsRUFHQUMsRUFHQUMsRUFHQXpqQixFQUdBMGpCLEVBR0F0aUMsRUFHQXVpQyxFQUdBekQsRUFBSWorQixFQUFPOGdDLFVBQVcsR0FBSTErQixHQUcxQnUvQixFQUFrQjFELEVBQUUvOUIsU0FBVys5QixFQUcvQjJELEVBQXFCM0QsRUFBRS85QixVQUNwQnloQyxFQUFnQmxqQyxVQUFZa2pDLEVBQWdCbmhDLFFBQzdDUixFQUFRMmhDLEdBQ1IzaEMsRUFBTzRsQixNQUdUdEssRUFBV3RiLEVBQU9pYixXQUNsQjRtQixFQUFtQjdoQyxFQUFPZ2EsVUFBVyxlQUdyQzhuQixFQUFhN0QsRUFBRTZELFlBQWMsR0FHN0JDLEVBQWlCLEdBQ2pCQyxFQUFzQixHQUd0QkMsRUFBVyxXQUdYN0MsRUFBUSxDQUNQamhCLFdBQVksRUFHWitqQixrQkFBbUIsU0FBVS8yQixHQUM1QixJQUFJckIsRUFDSixHQUFLaVUsRUFBWSxDQUNoQixJQUFNdWpCLEVBRUwsSUFEQUEsRUFBa0IsR0FDUngzQixFQUFRMDBCLEdBQVNyMEIsS0FBTWszQixJQUNoQ0MsRUFBaUJ4M0IsRUFBTyxHQUFJckYsY0FBZ0IsTUFDekM2OEIsRUFBaUJ4M0IsRUFBTyxHQUFJckYsY0FBZ0IsTUFBUyxJQUNyRDVHLE9BQVFpTSxFQUFPLElBR3BCQSxFQUFRdzNCLEVBQWlCbjJCLEVBQUkxRyxjQUFnQixLQUU5QyxPQUFnQixNQUFUcUYsRUFBZ0IsS0FBT0EsRUFBTWUsS0FBTSxPQUkzQ3MzQixzQkFBdUIsV0FDdEIsT0FBT3BrQixFQUFZc2pCLEVBQXdCLE1BSTVDZSxpQkFBa0IsU0FBVS8vQixFQUFNOEIsR0FNakMsT0FMa0IsTUFBYjRaLElBQ0oxYixFQUFPMi9CLEVBQXFCMy9CLEVBQUtvQyxlQUNoQ3U5QixFQUFxQjMvQixFQUFLb0MsZ0JBQW1CcEMsRUFDOUMwL0IsRUFBZ0IxL0IsR0FBUzhCLEdBRW5CbEgsTUFJUm9sQyxpQkFBa0IsU0FBVTFqQyxHQUkzQixPQUhrQixNQUFib2YsSUFDSmtnQixFQUFFcUUsU0FBVzNqQyxHQUVQMUIsTUFJUjZrQyxXQUFZLFNBQVUxZ0MsR0FDckIsSUFBSXBDLEVBQ0osR0FBS29DLEVBQ0osR0FBSzJjLEVBR0pxaEIsRUFBTS9qQixPQUFRamEsRUFBS2crQixFQUFNbUQsY0FJekIsSUFBTXZqQyxLQUFRb0MsRUFDYjBnQyxFQUFZOWlDLEdBQVMsQ0FBRThpQyxFQUFZOWlDLEdBQVFvQyxFQUFLcEMsSUFJbkQsT0FBTy9CLE1BSVJ1bEMsTUFBTyxTQUFVQyxHQUNoQixJQUFJQyxFQUFZRCxHQUFjUixFQUs5QixPQUpLZCxHQUNKQSxFQUFVcUIsTUFBT0UsR0FFbEJ0OEIsRUFBTSxFQUFHczhCLEdBQ0Z6bEMsT0FvQlYsR0FmQXFlLEVBQVN6QixRQUFTdWxCLEdBS2xCbkIsRUFBRStCLE1BQVVBLEdBQU8vQixFQUFFK0IsS0FBTzd0QixHQUFTSyxNQUFTLElBQzVDdFAsUUFBU3c3QixHQUFXdnNCLEdBQVMrdEIsU0FBVyxNQUcxQ2pDLEVBQUV0L0IsS0FBT3lELEVBQVF3WCxRQUFVeFgsRUFBUXpELE1BQVFzL0IsRUFBRXJrQixRQUFVcWtCLEVBQUV0L0IsS0FHekRzL0IsRUFBRWlCLFdBQWNqQixFQUFFZ0IsVUFBWSxLQUFNeDZCLGNBQWNxRixNQUFPcVAsSUFBbUIsQ0FBRSxJQUd4RCxNQUFqQjhrQixFQUFFMEUsWUFBc0IsQ0FDNUJuQixFQUFZM2tDLEVBQVN5QyxjQUFlLEtBS3BDLElBQ0NraUMsRUFBVWh2QixLQUFPeXJCLEVBQUUrQixJQUluQndCLEVBQVVodkIsS0FBT2d2QixFQUFVaHZCLEtBQzNCeXJCLEVBQUUwRSxZQUFjOUQsR0FBYXFCLFNBQVcsS0FBT3JCLEdBQWErRCxNQUMzRHBCLEVBQVV0QixTQUFXLEtBQU9zQixFQUFVb0IsS0FDdEMsTUFBUW41QixHQUlUdzBCLEVBQUUwRSxhQUFjLEdBYWxCLEdBUksxRSxFQUFFdGUsTUFBUXNlLEVBQUVrQyxhQUFpQyxpQkFBWGxDLEVBQUV0ZSxPQUN4Q3NlLEVBQUV0ZSxLQUFPM2YsRUFBTys5QixNQUFPRSxFQUFFdGUsS0FBTXNlLEVBQUVILGNBSWxDcUIsR0FBK0I3SCxHQUFZMkcsRUFBRzc3QixFQUFTZzlCLEdBR2xEcmhCLEVBQ0osT0FBT3FoQixFQThFUixJQUFNamdDLEtBekVOc2lDLEVBQWN6aEMsRUFBTzRsQixPQUFTcVksRUFBRXhoQyxTQUdRLEdBQXBCdUQsRUFBTzYvQixVQUMxQjcvQixFQUFPNGxCLE1BQU1VLFFBQVMsYUFJdkIyWCxFQUFFdC9CLEtBQU9zL0IsRUFBRXQvQixLQUFLcWdCLGNBR2hCaWYsRUFBRTRFLFlBQWNwRSxHQUFXaDBCLEtBQU13ekIsRUFBRXQvQixNQUtuQ3lpQyxFQUFXbkQsRUFBRStCLElBQUk5OEIsUUFBU283QixHQUFPLElBRzNCTCxFQUFFNEUsV0F3Qkk1RSxFQUFFdGUsTUFBUXNlLEVBQUVrQyxhQUNvRCxLQUF6RWxDLEVBQUVvQyxhQUFlLElBQUtyaUMsUUFBUyx1Q0FDakNpZ0MsRUFBRXRlLEtBQU9zZSxFQUFFdGUsS0FBS3pjLFFBQVNtN0IsR0FBSyxPQXZCOUJxRCxFQUFXekQsRUFBRStCLElBQUl2aUMsTUFBTzJqQyxFQUFTOWdDLFFBRzVCMjlCLEVBQUV0ZSxPQUFVc2UsRUFBRWtDLGFBQWlDLGlCQUFYbEMsRUFBRXRlLFFBQzFDeWhCLElBQWMvRCxHQUFPNXlCLEtBQU0yMkIsR0FBYSxJQUFNLEtBQVFuRCxFQUFFdGUsWUFHakRzZSxFQUFFdGUsT0FJTyxJQUFac2UsRUFBRS95QixRQUNOazJCLEVBQVdBLEVBQVNsK0IsUUFBU3E3QixHQUFZLE1BQ3pDbUQsR0FBYXJFLEdBQU81eUIsS0FBTTIyQixHQUFhLElBQU0sS0FBUSxLQUFTdmlDLEdBQU11RixPQUNuRXM5QixHQUlGekQsRUFBRStCLElBQU1vQixFQUFXTSxHQVNmekQsRUFBRTZFLGFBQ0Q5aUMsRUFBTzgvQixhQUFjc0IsSUFDekJoQyxFQUFNZ0QsaUJBQWtCLG9CQUFxQnBpQyxFQUFPOC9CLGFBQWNzQixJQUU5RHBoQyxFQUFPKy9CLEtBQU1xQixJQUNqQmhDLEVBQU1nRCxpQkFBa0IsZ0JBQWlCcGlDLEVBQU8rL0IsS0FBTXFCLE1BS25EbkQsRUFBRXRlLE1BQVFzZSxFQUFFNEUsYUFBZ0MsSUFBbEI1RSxFQUFFb0MsYUFBeUJqK0IsRUFBUWkrQixjQUNqRWpCLEVBQU1nRCxpQkFBa0IsZUFBZ0JuRSxFQUFFb0MsYUFJM0NqQixFQUFNZ0QsaUJBQ0wsU0FDQW5FLEVBQUVpQixVQUFXLElBQU9qQixFQUFFcUMsUUFBU3JDLEVBQUVpQixVQUFXLElBQzNDakIsRUFBRXFDLFFBQVNyQyxFQUFFaUIsVUFBVyxLQUNBLE1BQXJCakIsRUFBRWlCLFVBQVcsR0FBYyxLQUFPTixHQUFXLFdBQWEsSUFDN0RYLEVBQUVxQyxRQUFTLE1BSUZyQyxFQUFFOEUsUUFDWjNELEVBQU1nRCxpQkFBa0JqakMsRUFBRzgrQixFQUFFOEUsUUFBUzVqQyxJQUl2QyxHQUFLOCtCLEVBQUUrRSxjQUMrQyxJQUFuRC9FLEVBQUUrRSxXQUFXcGxDLEtBQU0rakMsRUFBaUJ2QyxFQUFPbkIsSUFBaUJsZ0IsR0FHOUQsT0FBT3FoQixFQUFNb0QsUUFlZCxHQVhBUCxFQUFXLFFBR1hKLEVBQWlCcHBCLElBQUt3bEIsRUFBRWhHLFVBQ3hCbUgsRUFBTWg1QixLQUFNNjNCLEVBQUVnRixTQUNkN0QsRUFBTXRsQixLQUFNbWtCLEVBQUU3NkIsT0FHZCs5QixFQUFZaEMsR0FBK0JSLEdBQVlWLEVBQUc3N0IsRUFBU2c5QixHQUs1RCxDQVNOLEdBUkFBLEVBQU1qaEIsV0FBYSxFQUdkc2pCLEdBQ0pHLEVBQW1CdGIsUUFBUyxXQUFZLENBQUU4WSxFQUFPbkIsSUFJN0NsZ0IsRUFDSixPQUFPcWhCLEVBSUhuQixFQUFFbUMsT0FBcUIsRUFBWm5DLEVBQUU1RCxVQUNqQmtILEVBQWV2a0MsRUFBTytmLFdBQVksV0FDakNxaUIsRUFBTW9ELE1BQU8sWUFDWHZFLEVBQUU1RCxVQUdOLElBQ0N0YyxHQUFZLEVBQ1pvakIsRUFBVStCLEtBQU1uQixFQUFnQjM3QixHQUMvQixNQUFRcUQsR0FHVCxHQUFLc1UsRUFDSixNQUFNdFUsRUFJUHJELEdBQU8sRUFBR3FELFNBaENYckQsR0FBTyxFQUFHLGdCQXFDWCxTQUFTQSxFQUFNbThCLEVBQVFZLEVBQWtCQyxFQUFXTCxHQUNuRCxJQUFJTSxFQUFXSixFQUFTNy9CLEVBQU9rZ0MsRUFBVUMsRUFDeENkLEVBQWFVLEVBR1RwbEIsSUFJTEEsR0FBWSxFQUdQd2pCLEdBQ0p2a0MsRUFBT3M5QixhQUFjaUgsR0FLdEJKLE9BQVlyK0IsRUFHWnUrQixFQUF3QjBCLEdBQVcsR0FHbkMzRCxFQUFNamhCLFdBQXNCLEVBQVRva0IsRUFBYSxFQUFJLEVBR3BDYyxFQUFzQixLQUFWZCxHQUFpQkEsRUFBUyxLQUFrQixNQUFYQSxFQUd4Q2EsSUFDSkUsRUE3bEJKLFNBQThCckYsRUFBR21CLEVBQU9nRSxHQU92QyxJQUxBLElBQUlJLEVBQUk3a0MsRUFBTThrQyxFQUFlQyxFQUM1QnpyQixFQUFXZ21CLEVBQUVobUIsU0FDYmluQixFQUFZakIsRUFBRWlCLFVBR1ksTUFBbkJBLEVBQVcsSUFDbEJBLEVBQVU3ekIsYUFDRXZJLElBQVAwZ0MsSUFDSkEsRUFBS3ZGLEVBQUVxRSxVQUFZbEQsRUFBTThDLGtCQUFtQixpQkFLOUMsR0FBS3NCLEVBQ0osSUFBTTdrQyxLQUFRc1osRUFDYixHQUFLQSxFQUFVdFosSUFBVXNaLEVBQVV0WixHQUFPOEwsS0FBTSs0QixHQUFPLENBQ3REdEUsRUFBVXR3QixRQUFTalEsR0FDbkIsTUFNSCxHQUFLdWdDLEVBQVcsS0FBT2tFLEVBQ3RCSyxFQUFnQnZFLEVBQVcsT0FDckIsQ0FHTixJQUFNdmdDLEtBQVF5a0MsRUFBWSxDQUN6QixJQUFNbEUsRUFBVyxJQUFPakIsRUFBRXdDLFdBQVk5aEMsRUFBTyxJQUFNdWdDLEVBQVcsSUFBUSxDQUNyRXVFLEVBQWdCOWtDLEVBQ2hCLE1BR0Era0MsRUFES0EsR0FDVy9rQyxFQUtsQjhrQyxFQUFnQkEsR0FBaUJDLEVBTWxDLEdBQUtELEVBSUosT0FIS0EsSUFBa0J2RSxFQUFXLElBQ2pDQSxFQUFVdHdCLFFBQVM2MEIsR0FFYkwsRUFBV0ssR0EwaUJMRSxDQUFxQjFGLEVBQUdtQixFQUFPZ0UsS0FJckNDLElBQXdELEVBQTNDcmpDLEVBQU82RCxRQUFTLFNBQVVvNkIsRUFBRWlCLGFBQzlDakIsRUFBRXdDLFdBQVksZUFBa0IsY0FJakM2QyxFQTVpQkgsU0FBc0JyRixFQUFHcUYsRUFBVWxFLEVBQU9pRSxHQUN6QyxJQUFJTyxFQUFPQyxFQUFTQyxFQUFNbjJCLEVBQUt1SyxFQUM5QnVvQixFQUFhLEdBR2J2QixFQUFZakIsRUFBRWlCLFVBQVV6aEMsUUFHekIsR0FBS3loQyxFQUFXLEdBQ2YsSUFBTTRFLEtBQVE3RixFQUFFd0MsV0FDZkEsRUFBWXFELEVBQUtyL0IsZUFBa0J3NUIsRUFBRXdDLFdBQVlxRCxHQU9uRCxJQUhBRCxFQUFVM0UsRUFBVTd6QixRQUdadzRCLEdBY1AsR0FaSzVGLEVBQUV1QyxlQUFnQnFELEtBQ3RCekUsRUFBT25CLEVBQUV1QyxlQUFnQnFELElBQWNQLElBSWxDcHJCLEdBQVFtckIsR0FBYXBGLEVBQUU4RixhQUM1QlQsRUFBV3JGLEVBQUU4RixXQUFZVCxFQUFVckYsRUFBRWdCLFdBR3RDL21CLEVBQU8yckIsRUFDUEEsRUFBVTNFLEVBQVU3ekIsUUFLbkIsR0FBaUIsTUFBWnc0QixFQUVKQSxFQUFVM3JCLE9BR0osR0FBYyxNQUFUQSxHQUFnQkEsSUFBUzJyQixFQUFVLENBTTlDLEtBSEFDLEVBQU9yRCxFQUFZdm9CLEVBQU8sSUFBTTJyQixJQUFhcEQsRUFBWSxLQUFPb0QsSUFJL0QsSUFBTUQsS0FBU25ELEVBSWQsSUFEQTl5QixFQUFNaTJCLEVBQU1yL0IsTUFBTyxNQUNULEtBQVFzL0IsSUFHakJDLEVBQU9yRCxFQUFZdm9CLEVBQU8sSUFBTXZLLEVBQUssS0FDcEM4eUIsRUFBWSxLQUFPOXlCLEVBQUssS0FDYixFQUdHLElBQVRtMkIsRUFDSkEsRUFBT3JELEVBQVltRCxJQUdnQixJQUF4Qm5ELEVBQVltRCxLQUN2QkMsRUFBVWwyQixFQUFLLEdBQ2Z1eEIsRUFBVXR3QixRQUFTakIsRUFBSyxLQUV6QixNQU9KLElBQWMsSUFBVG0yQixFQUdKLEdBQUtBLEdBQVE3RixFQUFFK0YsT0FDZFYsRUFBV1EsRUFBTVIsUUFFakIsSUFDQ0EsRUFBV1EsRUFBTVIsR0FDaEIsTUFBUTc1QixHQUNULE1BQU8sQ0FDTjJSLE1BQU8sY0FDUGhZLE1BQU8wZ0MsRUFBT3I2QixFQUFJLHNCQUF3QnlPLEVBQU8sT0FBUzJyQixJQVNqRSxNQUFPLENBQUV6b0IsTUFBTyxVQUFXdUUsS0FBTTJqQixHQStjcEJXLENBQWFoRyxFQUFHcUYsRUFBVWxFLEVBQU9pRSxHQUd2Q0EsR0FHQ3BGLEVBQUU2RSxjQUNOUyxFQUFXbkUsRUFBTThDLGtCQUFtQixvQkFFbkNsaUMsRUFBTzgvQixhQUFjc0IsR0FBYW1DLElBRW5DQSxFQUFXbkUsRUFBTThDLGtCQUFtQixXQUVuQ2xpQyxFQUFPKy9CLEtBQU1xQixHQUFhbUMsSUFLWixNQUFYaEIsR0FBNkIsU0FBWHRFLEVBQUV0L0IsS0FDeEI4akMsRUFBYSxZQUdTLE1BQVhGLEVBQ1hFLEVBQWEsZUFJYkEsRUFBYWEsRUFBU2xvQixNQUN0QjZuQixFQUFVSyxFQUFTM2pCLEtBRW5CMGpCLElBREFqZ0MsRUFBUWtnQyxFQUFTbGdDLFVBTWxCQSxFQUFRcS9CLEdBQ0hGLEdBQVdFLElBQ2ZBLEVBQWEsUUFDUkYsRUFBUyxJQUNiQSxFQUFTLEtBTVpuRCxFQUFNbUQsT0FBU0EsRUFDZm5ELEVBQU1xRCxZQUFlVSxHQUFvQlYsR0FBZSxHQUduRFksRUFDSi9uQixFQUFTbUIsWUFBYWtsQixFQUFpQixDQUFFc0IsRUFBU1IsRUFBWXJELElBRTlEOWpCLEVBQVN1QixXQUFZOGtCLEVBQWlCLENBQUV2QyxFQUFPcUQsRUFBWXIvQixJQUk1RGc4QixFQUFNMEMsV0FBWUEsR0FDbEJBLE9BQWFoL0IsRUFFUjIrQixHQUNKRyxFQUFtQnRiLFFBQVMrYyxFQUFZLGNBQWdCLFlBQ3ZELENBQUVqRSxFQUFPbkIsRUFBR29GLEVBQVlKLEVBQVU3L0IsSUFJcEN5K0IsRUFBaUI3bUIsU0FBVTJtQixFQUFpQixDQUFFdkMsRUFBT3FELElBRWhEaEIsSUFDSkcsRUFBbUJ0YixRQUFTLGVBQWdCLENBQUU4WSxFQUFPbkIsTUFHM0NqK0IsRUFBTzYvQixRQUNoQjcvQixFQUFPNGxCLE1BQU1VLFFBQVMsY0FLekIsT0FBTzhZLEdBR1I4RSxRQUFTLFNBQVVsRSxFQUFLcmdCLEVBQU14ZSxHQUM3QixPQUFPbkIsRUFBT1csSUFBS3EvQixFQUFLcmdCLEVBQU14ZSxFQUFVLFNBR3pDZ2pDLFVBQVcsU0FBVW5FLEVBQUs3K0IsR0FDekIsT0FBT25CLEVBQU9XLElBQUtxL0IsT0FBS2w5QixFQUFXM0IsRUFBVSxhQUkvQ25CLEVBQU9rQixLQUFNLENBQUUsTUFBTyxRQUFVLFNBQVVzRCxFQUFJb1YsR0FDN0M1WixFQUFRNFosR0FBVyxTQUFVb21CLEVBQUtyZ0IsRUFBTXhlLEVBQVV4QyxHQVVqRCxPQVBLSCxFQUFZbWhCLEtBQ2hCaGhCLEVBQU9BLEdBQVF3QyxFQUNmQSxFQUFXd2UsRUFDWEEsT0FBTzdjLEdBSUQ5QyxFQUFPa2hDLEtBQU1saEMsRUFBT21DLE9BQVEsQ0FDbEM2OUIsSUFBS0EsRUFDTHJoQyxLQUFNaWIsRUFDTnFsQixTQUFVdGdDLEVBQ1ZnaEIsS0FBTUEsRUFDTnNqQixRQUFTOWhDLEdBQ1BuQixFQUFPMkMsY0FBZXE5QixJQUFTQSxPQUlwQ2hnQyxFQUFPZ2hDLGNBQWUsU0FBVS9DLEdBQy9CLElBQUk5K0IsRUFDSixJQUFNQSxLQUFLOCtCLEVBQUU4RSxRQUNhLGlCQUFwQjVqQyxFQUFFc0YsZ0JBQ053NUIsRUFBRW9DLFlBQWNwQyxFQUFFOEUsUUFBUzVqQyxJQUFPLE1BTXJDYSxFQUFPMnNCLFNBQVcsU0FBVXFULEVBQUs1OUIsRUFBU2xELEdBQ3pDLE9BQU9jLEVBQU9raEMsS0FBTSxDQUNuQmxCLElBQUtBLEVBR0xyaEMsS0FBTSxNQUNOc2dDLFNBQVUsU0FDVi96QixPQUFPLEVBQ1BrMUIsT0FBTyxFQUNQM2pDLFFBQVEsRUFLUmdrQyxXQUFZLENBQ1gyRCxjQUFlLGNBRWhCTCxXQUFZLFNBQVVULEdBQ3JCdGpDLEVBQU8wRCxXQUFZNC9CLEVBQVVsaEMsRUFBU2xELE9BTXpDYyxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQmtpQyxRQUFTLFNBQVUzWCxHQUNsQixJQUFJaEksRUF5QkosT0F2Qkt6bkIsS0FBTSxLQUNMdUIsRUFBWWt1QixLQUNoQkEsRUFBT0EsRUFBSzl1QixLQUFNWCxLQUFNLEtBSXpCeW5CLEVBQU8xa0IsRUFBUTBzQixFQUFNenZCLEtBQU0sR0FBSWlOLGVBQWdCMUksR0FBSSxHQUFJZ0IsT0FBTyxHQUV6RHZGLEtBQU0sR0FBSTJDLFlBQ2Q4a0IsRUFBSzRJLGFBQWNyd0IsS0FBTSxJQUcxQnluQixFQUFLdGpCLElBQUssV0FHVCxJQUZBLElBQUlDLEVBQU9wRSxLQUVIb0UsRUFBS2lqQyxtQkFDWmpqQyxFQUFPQSxFQUFLaWpDLGtCQUdiLE9BQU9qakMsSUFDSityQixPQUFRbndCLE9BR05BLE1BR1JzbkMsVUFBVyxTQUFVN1gsR0FDcEIsT0FBS2x1QixFQUFZa3VCLEdBQ1R6dkIsS0FBS2lFLEtBQU0sU0FBVS9CLEdBQzNCYSxFQUFRL0MsTUFBT3NuQyxVQUFXN1gsRUFBSzl1QixLQUFNWCxLQUFNa0MsTUFJdENsQyxLQUFLaUUsS0FBTSxXQUNqQixJQUFJd1csRUFBTzFYLEVBQVEvQyxNQUNsQmdiLEVBQVdQLEVBQUtPLFdBRVpBLEVBQVMzWCxPQUNiMlgsRUFBU29zQixRQUFTM1gsR0FHbEJoVixFQUFLMFYsT0FBUVYsTUFLaEJoSSxLQUFNLFNBQVVnSSxHQUNmLElBQUk4WCxFQUFpQmhtQyxFQUFZa3VCLEdBRWpDLE9BQU96dkIsS0FBS2lFLEtBQU0sU0FBVS9CLEdBQzNCYSxFQUFRL0MsTUFBT29uQyxRQUFTRyxFQUFpQjlYLEVBQUs5dUIsS0FBTVgsS0FBTWtDLEdBQU11dEIsTUFJbEUrWCxPQUFRLFNBQVV4a0MsR0FJakIsT0FIQWhELEtBQUtrVSxPQUFRbFIsR0FBVzJSLElBQUssUUFBUzFRLEtBQU0sV0FDM0NsQixFQUFRL0MsTUFBT3d3QixZQUFheHdCLEtBQUt1TSxjQUUzQnZNLFFBS1QrQyxFQUFPNk8sS0FBS3pILFFBQVFxdkIsT0FBUyxTQUFVcDFCLEdBQ3RDLE9BQVFyQixFQUFPNk8sS0FBS3pILFFBQVFzOUIsUUFBU3JqQyxJQUV0Q3JCLEVBQU82TyxLQUFLekgsUUFBUXM5QixRQUFVLFNBQVVyakMsR0FDdkMsU0FBV0EsRUFBS2t1QixhQUFlbHVCLEVBQUtzakMsY0FBZ0J0akMsRUFBS3l4QixpQkFBaUJ4eUIsU0FNM0VOLEVBQU80L0IsYUFBYWdGLElBQU0sV0FDekIsSUFDQyxPQUFPLElBQUk1bkMsRUFBTzZuQyxlQUNqQixNQUFRcDdCLE1BR1gsSUFBSXE3QixHQUFtQixDQUdyQkMsRUFBRyxJQUlIQyxLQUFNLEtBRVBDLEdBQWVqbEMsRUFBTzQvQixhQUFhZ0YsTUFFcENybUMsRUFBUTJtQyxPQUFTRCxJQUFrQixvQkFBcUJBLEdBQ3hEMW1DLEVBQVEyaUMsS0FBTytELEtBQWlCQSxHQUVoQ2psQyxFQUFPaWhDLGNBQWUsU0FBVTcrQixHQUMvQixJQUFJakIsRUFBVWdrQyxFQUdkLEdBQUs1bUMsRUFBUTJtQyxNQUFRRCxLQUFpQjdpQyxFQUFRdWdDLFlBQzdDLE1BQU8sQ0FDTk8sS0FBTSxTQUFVSCxFQUFTOUssR0FDeEIsSUFBSTk0QixFQUNIeWxDLEVBQU14aUMsRUFBUXdpQyxNQVdmLEdBVEFBLEVBQUlRLEtBQ0hoakMsRUFBUXpELEtBQ1J5RCxFQUFRNDlCLElBQ1I1OUIsRUFBUWcrQixNQUNSaCtCLEVBQVFpakMsU0FDUmpqQyxFQUFRbVIsVUFJSm5SLEVBQVFrakMsVUFDWixJQUFNbm1DLEtBQUtpRCxFQUFRa2pDLFVBQ2xCVixFQUFLemxDLEdBQU1pRCxFQUFRa2pDLFVBQVdubUMsR0FtQmhDLElBQU1BLEtBZERpRCxFQUFRa2dDLFVBQVlzQyxFQUFJdkMsa0JBQzVCdUMsRUFBSXZDLGlCQUFrQmpnQyxFQUFRa2dDLFVBUXpCbGdDLEVBQVF1Z0MsYUFBZ0JJLEVBQVMsc0JBQ3RDQSxFQUFTLG9CQUF1QixrQkFJdEJBLEVBQ1Y2QixFQUFJeEMsaUJBQWtCampDLEVBQUc0akMsRUFBUzVqQyxJQUluQ2dDLEVBQVcsU0FBVXhDLEdBQ3BCLE9BQU8sV0FDRHdDLElBQ0pBLEVBQVdna0MsRUFBZ0JQLEVBQUlXLE9BQzlCWCxFQUFJWSxRQUFVWixFQUFJYSxRQUFVYixFQUFJYyxVQUMvQmQsRUFBSWUsbUJBQXFCLEtBRWIsVUFBVGhuQyxFQUNKaW1DLEVBQUlwQyxRQUNnQixVQUFUN2pDLEVBS2dCLGlCQUFmaW1DLEVBQUlyQyxPQUNmdEssRUFBVSxFQUFHLFNBRWJBLEVBR0MyTSxFQUFJckMsT0FDSnFDLEVBQUluQyxZQUlOeEssRUFDQzZNLEdBQWtCRixFQUFJckMsU0FBWXFDLEVBQUlyQyxPQUN0Q3FDLEVBQUluQyxXQUsrQixVQUFqQ21DLEVBQUlnQixjQUFnQixTQUNNLGlCQUFyQmhCLEVBQUlpQixhQUNWLENBQUVDLE9BQVFsQixFQUFJdEIsVUFDZCxDQUFFL2pDLEtBQU1xbEMsRUFBSWlCLGNBQ2JqQixFQUFJekMsNEJBUVR5QyxFQUFJVyxPQUFTcGtDLElBQ2Jna0MsRUFBZ0JQLEVBQUlZLFFBQVVaLEVBQUljLFVBQVl2a0MsRUFBVSxjQUtuQzJCLElBQWhCOGhDLEVBQUlhLFFBQ1JiLEVBQUlhLFFBQVVOLEVBRWRQLEVBQUllLG1CQUFxQixXQUdBLElBQW5CZixFQUFJem1CLFlBTVJuaEIsRUFBTytmLFdBQVksV0FDYjViLEdBQ0pna0MsT0FRTGhrQyxFQUFXQSxFQUFVLFNBRXJCLElBR0N5akMsRUFBSTFCLEtBQU05Z0MsRUFBUXlnQyxZQUFjemdDLEVBQVF1ZCxNQUFRLE1BQy9DLE1BQVFsVyxHQUdULEdBQUt0SSxFQUNKLE1BQU1zSSxJQUtUKzRCLE1BQU8sV0FDRHJoQyxHQUNKQSxRQVdMbkIsRUFBT2doQyxjQUFlLFNBQVUvQyxHQUMxQkEsRUFBRTBFLGNBQ04xRSxFQUFFaG1CLFNBQVM1WSxRQUFTLEtBS3RCVyxFQUFPOGdDLFVBQVcsQ0FDakJSLFFBQVMsQ0FDUmpoQyxPQUFRLDZGQUdUNFksU0FBVSxDQUNUNVksT0FBUSwyQkFFVG9oQyxXQUFZLENBQ1gyRCxjQUFlLFNBQVU3a0MsR0FFeEIsT0FEQVMsRUFBTzBELFdBQVluRSxHQUNaQSxNQU1WUyxFQUFPZ2hDLGNBQWUsU0FBVSxTQUFVL0MsUUFDeEJuN0IsSUFBWm03QixFQUFFL3lCLFFBQ04reUIsRUFBRS95QixPQUFRLEdBRU4reUIsRUFBRTBFLGNBQ04xRSxFQUFFdC9CLEtBQU8sU0FLWHFCLEVBQU9paEMsY0FBZSxTQUFVLFNBQVVoRCxHQUl4QyxJQUFJNStCLEVBQVE4QixFQURiLEdBQUs4OEIsRUFBRTBFLGFBQWUxRSxFQUFFOEgsWUFFdkIsTUFBTyxDQUNON0MsS0FBTSxTQUFVaHBCLEVBQUcrZCxHQUNsQjU0QixFQUFTVyxFQUFRLFlBQ2YrTyxLQUFNa3ZCLEVBQUU4SCxhQUFlLElBQ3ZCbm1CLEtBQU0sQ0FBRW9tQixRQUFTL0gsRUFBRWdJLGNBQWVybkMsSUFBS3EvQixFQUFFK0IsTUFDekN4YSxHQUFJLGFBQWNya0IsRUFBVyxTQUFVK2tDLEdBQ3ZDN21DLEVBQU93YixTQUNQMVosRUFBVyxLQUNOK2tDLEdBQ0pqTyxFQUF1QixVQUFiaU8sRUFBSXZuQyxLQUFtQixJQUFNLElBQUt1bkMsRUFBSXZuQyxRQUtuRDlCLEVBQVM2QyxLQUFLQyxZQUFhTixFQUFRLEtBRXBDbWpDLE1BQU8sV0FDRHJoQyxHQUNKQSxRQVVMLElBcUdLd2hCLEdBckdEd2pCLEdBQWUsR0FDbEJDLEdBQVMsb0JBR1ZwbUMsRUFBTzhnQyxVQUFXLENBQ2pCdUYsTUFBTyxXQUNQQyxjQUFlLFdBQ2QsSUFBSW5sQyxFQUFXZ2xDLEdBQWF0L0IsT0FBVzdHLEVBQU8rQyxRQUFVLElBQVFsRSxHQUFNdUYsT0FFdEUsT0FEQW5ILEtBQU1rRSxJQUFhLEVBQ1pBLEtBS1RuQixFQUFPZ2hDLGNBQWUsYUFBYyxTQUFVL0MsRUFBR3NJLEVBQWtCbkgsR0FFbEUsSUFBSW9ILEVBQWNDLEVBQWFDLEVBQzlCQyxHQUF1QixJQUFaMUksRUFBRW9JLFFBQXFCRCxHQUFPMzdCLEtBQU13ekIsRUFBRStCLEtBQ2hELE1BQ2tCLGlCQUFYL0IsRUFBRXRlLE1BRTZDLEtBRG5Ec2UsRUFBRW9DLGFBQWUsSUFDakJyaUMsUUFBUyxzQ0FDWG9vQyxHQUFPMzdCLEtBQU13ekIsRUFBRXRlLE9BQVUsUUFJNUIsR0FBS2duQixHQUFpQyxVQUFyQjFJLEVBQUVpQixVQUFXLEdBOEQ3QixPQTNEQXNILEVBQWV2SSxFQUFFcUksY0FBZ0I5bkMsRUFBWXkvQixFQUFFcUksZUFDOUNySSxFQUFFcUksZ0JBQ0ZySSxFQUFFcUksY0FHRUssRUFDSjFJLEVBQUcwSSxHQUFhMUksRUFBRzBJLEdBQVd6akMsUUFBU2tqQyxHQUFRLEtBQU9JLElBQy9CLElBQVp2SSxFQUFFb0ksUUFDYnBJLEVBQUUrQixNQUFTM0MsR0FBTzV5QixLQUFNd3pCLEVBQUUrQixLQUFRLElBQU0sS0FBUS9CLEVBQUVvSSxNQUFRLElBQU1HLEdBSWpFdkksRUFBRXdDLFdBQVksZUFBa0IsV0FJL0IsT0FITWlHLEdBQ0wxbUMsRUFBT29ELE1BQU9vakMsRUFBZSxtQkFFdkJFLEVBQW1CLElBSTNCekksRUFBRWlCLFVBQVcsR0FBTSxPQUduQnVILEVBQWN6cEMsRUFBUXdwQyxHQUN0QnhwQyxFQUFRd3BDLEdBQWlCLFdBQ3hCRSxFQUFvQnBsQyxXQUlyQjg5QixFQUFNL2pCLE9BQVEsZ0JBR1F2WSxJQUFoQjJqQyxFQUNKem1DLEVBQVFoRCxHQUFTcytCLFdBQVlrTCxHQUk3QnhwQyxFQUFRd3BDLEdBQWlCQyxFQUlyQnhJLEVBQUd1SSxLQUdQdkksRUFBRXFJLGNBQWdCQyxFQUFpQkQsY0FHbkNILEdBQWFwb0MsS0FBTXlvQyxJQUlmRSxHQUFxQmxvQyxFQUFZaW9DLElBQ3JDQSxFQUFhQyxFQUFtQixJQUdqQ0EsRUFBb0JELE9BQWMzakMsSUFJNUIsV0FZVHZFLEVBQVFxb0MscUJBQ0hqa0IsR0FBTzlsQixFQUFTZ3FDLGVBQWVELG1CQUFvQixJQUFLamtCLE1BQ3ZEOVUsVUFBWSw2QkFDaUIsSUFBM0I4VSxHQUFLblosV0FBV2xKLFFBUXhCTixFQUFPNlgsVUFBWSxTQUFVOEgsRUFBTXpmLEVBQVM0bUMsR0FDM0MsTUFBcUIsaUJBQVRubkIsRUFDSixJQUVnQixrQkFBWnpmLElBQ1g0bUMsRUFBYzVtQyxFQUNkQSxHQUFVLEdBS0xBLElBSUEzQixFQUFRcW9DLHFCQU1aL3lCLEdBTEEzVCxFQUFVckQsRUFBU2dxQyxlQUFlRCxtQkFBb0IsS0FLdkN0bkMsY0FBZSxTQUN6QmtULEtBQU8zVixFQUFTc1YsU0FBU0ssS0FDOUJ0UyxFQUFRUixLQUFLQyxZQUFha1UsSUFFMUIzVCxFQUFVckQsR0FLWjBuQixHQUFXdWlCLEdBQWUsSUFEMUJDLEVBQVN4dkIsRUFBV3BOLEtBQU13VixJQUtsQixDQUFFemYsRUFBUVosY0FBZXluQyxFQUFRLE1BR3pDQSxFQUFTemlCLEdBQWUsQ0FBRTNFLEdBQVF6ZixFQUFTcWtCLEdBRXRDQSxHQUFXQSxFQUFRamtCLFFBQ3ZCTixFQUFRdWtCLEdBQVUxSixTQUdaN2EsRUFBT2dCLE1BQU8sR0FBSStsQyxFQUFPdjlCLGNBbENoQyxJQUFJcUssRUFBTWt6QixFQUFReGlCLEdBeUNuQnZrQixFQUFPRyxHQUFHeW9CLEtBQU8sU0FBVW9YLEVBQUtnSCxFQUFRN2xDLEdBQ3ZDLElBQUlsQixFQUFVdEIsRUFBTTJrQyxFQUNuQjVyQixFQUFPemEsS0FDUDRvQixFQUFNbWEsRUFBSWhpQyxRQUFTLEtBc0RwQixPQXBEWSxFQUFQNm5CLElBQ0o1bEIsRUFBV2s3QixHQUFrQjZFLEVBQUl2aUMsTUFBT29vQixJQUN4Q21hLEVBQU1BLEVBQUl2aUMsTUFBTyxFQUFHb29CLElBSWhCcm5CLEVBQVl3b0MsSUFHaEI3bEMsRUFBVzZsQyxFQUNYQSxPQUFTbGtDLEdBR0Vra0MsR0FBNEIsaUJBQVhBLElBQzVCcm9DLEVBQU8sUUFJVyxFQUFkK1ksRUFBS3BYLFFBQ1ROLEVBQU9raEMsS0FBTSxDQUNabEIsSUFBS0EsRUFLTHJoQyxLQUFNQSxHQUFRLE1BQ2RzZ0MsU0FBVSxPQUNWdGYsS0FBTXFuQixJQUNINWdDLEtBQU0sU0FBVXkvQixHQUduQnZDLEVBQVdoaUMsVUFFWG9XLEVBQUtnVixLQUFNenNCLEVBSVZELEVBQVEsU0FBVW90QixPQUFRcHRCLEVBQU82WCxVQUFXZ3VCLElBQWlCcjRCLEtBQU12TixHQUduRTRsQyxLQUtFeHFCLE9BQVFsYSxHQUFZLFNBQVVpK0IsRUFBT21ELEdBQ3hDN3FCLEVBQUt4VyxLQUFNLFdBQ1ZDLEVBQVNyRCxNQUFPYixLQUFNcW1DLEdBQVksQ0FBRWxFLEVBQU15RyxhQUFjdEQsRUFBUW5ELFFBSzVEbmlDLE1BTVIrQyxFQUFPNk8sS0FBS3pILFFBQVE2L0IsU0FBVyxTQUFVNWxDLEdBQ3hDLE9BQU9yQixFQUFPMkIsS0FBTTNCLEVBQU95NUIsT0FBUSxTQUFVdDVCLEdBQzVDLE9BQU9rQixJQUFTbEIsRUFBR2tCLE9BQ2hCZixRQU1MTixFQUFPa25DLE9BQVMsQ0FDZkMsVUFBVyxTQUFVOWxDLEVBQU1lLEVBQVNqRCxHQUNuQyxJQUFJaW9DLEVBQWFDLEVBQVNDLEVBQVdDLEVBQVFDLEVBQVdDLEVBQ3ZEblksRUFBV3R2QixFQUFPMmhCLElBQUt0Z0IsRUFBTSxZQUM3QnFtQyxFQUFVMW5DLEVBQVFxQixHQUNsQjRuQixFQUFRLEdBR1MsV0FBYnFHLElBQ0pqdUIsRUFBS29nQixNQUFNNk4sU0FBVyxZQUd2QmtZLEVBQVlFLEVBQVFSLFNBQ3BCSSxFQUFZdG5DLEVBQU8yaEIsSUFBS3RnQixFQUFNLE9BQzlCb21DLEVBQWF6bkMsRUFBTzJoQixJQUFLdGdCLEVBQU0sUUFTOUJnbUMsR0FSa0MsYUFBYi9YLEdBQXdDLFVBQWJBLEtBQ0EsR0FBOUNnWSxFQUFZRyxHQUFhenBDLFFBQVMsU0FNcEN1cEMsR0FEQUgsRUFBY00sRUFBUXBZLFlBQ0R2aUIsSUFDWHE2QixFQUFZelMsT0FHdEI0UyxFQUFTN1gsV0FBWTRYLElBQWUsRUFDMUI1WCxXQUFZK1gsSUFBZ0IsR0FHbENqcEMsRUFBWTRELEtBR2hCQSxFQUFVQSxFQUFReEUsS0FBTXlELEVBQU1sQyxFQUFHYSxFQUFPbUMsT0FBUSxHQUFJcWxDLEtBR2pDLE1BQWZwbEMsRUFBUTJLLE1BQ1prYyxFQUFNbGMsSUFBUTNLLEVBQVEySyxJQUFNeTZCLEVBQVV6NkIsSUFBUXc2QixHQUUxQixNQUFoQm5sQyxFQUFRdXlCLE9BQ1oxTCxFQUFNMEwsS0FBU3Z5QixFQUFRdXlCLEtBQU82UyxFQUFVN1MsS0FBUzBTLEdBRzdDLFVBQVdqbEMsRUFDZkEsRUFBUXVsQyxNQUFNL3BDLEtBQU15RCxFQUFNNG5CLElBR0EsaUJBQWRBLEVBQU1sYyxNQUNqQmtjLEVBQU1sYyxLQUFPLE1BRWEsaUJBQWZrYyxFQUFNMEwsT0FDakIxTCxFQUFNMEwsTUFBUSxNQUVmK1MsRUFBUS9sQixJQUFLc0gsTUFLaEJqcEIsRUFBT0csR0FBR2dDLE9BQVEsQ0FHakIra0MsT0FBUSxTQUFVOWtDLEdBR2pCLEdBQUtkLFVBQVVoQixPQUNkLFlBQW1Cd0MsSUFBWlYsRUFDTm5GLEtBQ0FBLEtBQUtpRSxLQUFNLFNBQVUvQixHQUNwQmEsRUFBT2tuQyxPQUFPQyxVQUFXbHFDLEtBQU1tRixFQUFTakQsS0FJM0MsSUFBSXlvQyxFQUFNQyxFQUNUeG1DLEVBQU9wRSxLQUFNLEdBRWQsT0FBTW9FLEVBUUFBLEVBQUt5eEIsaUJBQWlCeHlCLFFBSzVCc25DLEVBQU92bUMsRUFBS296Qix3QkFDWm9ULEVBQU14bUMsRUFBSzZJLGNBQWM0QyxZQUNsQixDQUNOQyxJQUFLNjZCLEVBQUs3NkIsSUFBTTg2QixFQUFJQyxZQUNwQm5ULEtBQU1pVCxFQUFLalQsS0FBT2tULEVBQUlFLGNBUmYsQ0FBRWg3QixJQUFLLEVBQUc0bkIsS0FBTSxRQVR4QixHQXVCRHJGLFNBQVUsV0FDVCxHQUFNcnlCLEtBQU0sR0FBWixDQUlBLElBQUkrcUMsRUFBY2QsRUFBUWhvQyxFQUN6Qm1DLEVBQU9wRSxLQUFNLEdBQ2JnckMsRUFBZSxDQUFFbDdCLElBQUssRUFBRzRuQixLQUFNLEdBR2hDLEdBQXdDLFVBQW5DMzBCLEVBQU8yaEIsSUFBS3RnQixFQUFNLFlBR3RCNmxDLEVBQVM3bEMsRUFBS296Qiw0QkFFUixDQU9OLElBTkF5UyxFQUFTanFDLEtBQUtpcUMsU0FJZGhvQyxFQUFNbUMsRUFBSzZJLGNBQ1g4OUIsRUFBZTNtQyxFQUFLMm1DLGNBQWdCOW9DLEVBQUl5TixnQkFDaENxN0IsSUFDTEEsSUFBaUI5b0MsRUFBSXlqQixNQUFRcWxCLElBQWlCOW9DLEVBQUl5TixrQkFDVCxXQUEzQzNNLEVBQU8yaEIsSUFBS3FtQixFQUFjLGFBRTFCQSxFQUFlQSxFQUFhcG9DLFdBRXhCb29DLEdBQWdCQSxJQUFpQjNtQyxHQUFrQyxJQUExQjJtQyxFQUFhdnBDLFlBRzFEd3BDLEVBQWVqb0MsRUFBUWdvQyxHQUFlZCxVQUN6Qm42QixLQUFPL00sRUFBTzJoQixJQUFLcW1CLEVBQWMsa0JBQWtCLEdBQ2hFQyxFQUFhdFQsTUFBUTMwQixFQUFPMmhCLElBQUtxbUIsRUFBYyxtQkFBbUIsSUFLcEUsTUFBTyxDQUNOajdCLElBQUttNkIsRUFBT242QixJQUFNazdCLEVBQWFsN0IsSUFBTS9NLEVBQU8yaEIsSUFBS3RnQixFQUFNLGFBQWEsR0FDcEVzekIsS0FBTXVTLEVBQU92UyxLQUFPc1QsRUFBYXRULEtBQU8zMEIsRUFBTzJoQixJQUFLdGdCLEVBQU0sY0FBYyxNQWMxRTJtQyxhQUFjLFdBQ2IsT0FBTy9xQyxLQUFLbUUsSUFBSyxXQUdoQixJQUZBLElBQUk0bUMsRUFBZS9xQyxLQUFLK3FDLGFBRWhCQSxHQUEyRCxXQUEzQ2hvQyxFQUFPMmhCLElBQUtxbUIsRUFBYyxhQUNqREEsRUFBZUEsRUFBYUEsYUFHN0IsT0FBT0EsR0FBZ0JyN0IsUUFNMUIzTSxFQUFPa0IsS0FBTSxDQUFFMjBCLFdBQVksY0FBZUQsVUFBVyxlQUFpQixTQUFVaGMsRUFBUWdHLEdBQ3ZGLElBQUk3UyxFQUFNLGdCQUFrQjZTLEVBRTVCNWYsRUFBT0csR0FBSXlaLEdBQVcsU0FBVXhhLEdBQy9CLE9BQU9pZixFQUFRcGhCLEtBQU0sU0FBVW9FLEVBQU11WSxFQUFReGEsR0FHNUMsSUFBSXlvQyxFQU9KLEdBTksxcUMsRUFBVWtFLEdBQ2R3bUMsRUFBTXhtQyxFQUN1QixJQUFsQkEsRUFBSzVDLFdBQ2hCb3BDLEVBQU14bUMsRUFBS3lMLGtCQUdDaEssSUFBUjFELEVBQ0osT0FBT3lvQyxFQUFNQSxFQUFLam9CLEdBQVN2ZSxFQUFNdVksR0FHN0JpdUIsRUFDSkEsRUFBSUssU0FDRm43QixFQUFZODZCLEVBQUlFLFlBQVYzb0MsRUFDUDJOLEVBQU0zTixFQUFNeW9DLEVBQUlDLGFBSWpCem1DLEVBQU11WSxHQUFXeGEsR0FFaEJ3YSxFQUFReGEsRUFBS2tDLFVBQVVoQixXQVU1Qk4sRUFBT2tCLEtBQU0sQ0FBRSxNQUFPLFFBQVUsU0FBVXNELEVBQUlvYixHQUM3QzVmLEVBQU9pekIsU0FBVXJULEdBQVNxUSxHQUFjMXhCLEVBQVFneUIsY0FDL0MsU0FBVWx2QixFQUFNdXVCLEdBQ2YsR0FBS0EsRUFJSixPQUhBQSxFQUFXRCxHQUFRdHVCLEVBQU11ZSxHQUdsQjhPLEdBQVVqa0IsS0FBTW1sQixHQUN0QjV2QixFQUFRcUIsR0FBT2l1QixXQUFZMVAsR0FBUyxLQUNwQ2dRLE1BUUw1dkIsRUFBT2tCLEtBQU0sQ0FBRWluQyxPQUFRLFNBQVVDLE1BQU8sU0FBVyxTQUFVL2xDLEVBQU0xRCxHQUNsRXFCLEVBQU9rQixLQUFNLENBQUUyekIsUUFBUyxRQUFVeHlCLEVBQU00VyxRQUFTdGEsRUFBTTBwQyxHQUFJLFFBQVVobUMsR0FDcEUsU0FBVWltQyxFQUFjQyxHQUd4QnZvQyxFQUFPRyxHQUFJb29DLEdBQWEsU0FBVTNULEVBQVF6d0IsR0FDekMsSUFBSW1hLEVBQVloZCxVQUFVaEIsU0FBWWdvQyxHQUFrQyxrQkFBWDFULEdBQzVEcEMsRUFBUThWLEtBQTZCLElBQVgxVCxJQUE2QixJQUFWendCLEVBQWlCLFNBQVcsVUFFMUUsT0FBT2thLEVBQVFwaEIsS0FBTSxTQUFVb0UsRUFBTTFDLEVBQU13RixHQUMxQyxJQUFJakYsRUFFSixPQUFLL0IsRUFBVWtFLEdBR3lCLElBQWhDa25DLEVBQVN2cUMsUUFBUyxTQUN4QnFELEVBQU0sUUFBVWdCLEdBQ2hCaEIsRUFBS3hFLFNBQVM4UCxnQkFBaUIsU0FBV3RLLEdBSXJCLElBQWxCaEIsRUFBSzVDLFVBQ1RTLEVBQU1tQyxFQUFLc0wsZ0JBSUozSixLQUFLaXZCLElBQ1g1d0IsRUFBS3NoQixLQUFNLFNBQVd0Z0IsR0FBUW5ELEVBQUssU0FBV21ELEdBQzlDaEIsRUFBS3NoQixLQUFNLFNBQVd0Z0IsR0FBUW5ELEVBQUssU0FBV21ELEdBQzlDbkQsRUFBSyxTQUFXbUQsVUFJRFMsSUFBVnFCLEVBR05uRSxFQUFPMmhCLElBQUt0Z0IsRUFBTTFDLEVBQU02ekIsR0FHeEJ4eUIsRUFBT3loQixNQUFPcGdCLEVBQU0xQyxFQUFNd0YsRUFBT3F1QixJQUNoQzd6QixFQUFNMmYsRUFBWXNXLE9BQVM5eEIsRUFBV3diLFFBTTVDdGUsRUFBT2tCLEtBQU0sQ0FDWixZQUNBLFdBQ0EsZUFDQSxZQUNBLGNBQ0EsWUFDRSxTQUFVc0QsRUFBSTdGLEdBQ2hCcUIsRUFBT0csR0FBSXhCLEdBQVMsU0FBVXdCLEdBQzdCLE9BQU9sRCxLQUFLdW9CLEdBQUk3bUIsRUFBTXdCLE1BT3hCSCxFQUFPRyxHQUFHZ0MsT0FBUSxDQUVqQjYxQixLQUFNLFNBQVV2UyxFQUFPOUYsRUFBTXhmLEdBQzVCLE9BQU9sRCxLQUFLdW9CLEdBQUlDLEVBQU8sS0FBTTlGLEVBQU14ZixJQUVwQ3FvQyxPQUFRLFNBQVUvaUIsRUFBT3RsQixHQUN4QixPQUFPbEQsS0FBSzRvQixJQUFLSixFQUFPLEtBQU10bEIsSUFHL0Jzb0MsU0FBVSxTQUFVeG9DLEVBQVV3bEIsRUFBTzlGLEVBQU14ZixHQUMxQyxPQUFPbEQsS0FBS3VvQixHQUFJQyxFQUFPeGxCLEVBQVUwZixFQUFNeGYsSUFFeEN1b0MsV0FBWSxTQUFVem9DLEVBQVV3bEIsRUFBT3RsQixHQUd0QyxPQUE0QixJQUFyQm1CLFVBQVVoQixPQUNoQnJELEtBQUs0b0IsSUFBSzVsQixFQUFVLE1BQ3BCaEQsS0FBSzRvQixJQUFLSixFQUFPeGxCLEdBQVksS0FBTUUsSUFHckN3b0MsTUFBTyxTQUFVQyxFQUFRQyxHQUN4QixPQUFPNXJDLEtBQUtvdUIsV0FBWXVkLEdBQVN0ZCxXQUFZdWQsR0FBU0QsTUFJeEQ1b0MsRUFBT2tCLEtBQU0sd0xBRWdEcUQsTUFBTyxLQUNuRSxTQUFVQyxFQUFJbkMsR0FHYnJDLEVBQU9HLEdBQUlrQyxHQUFTLFNBQVVzZCxFQUFNeGYsR0FDbkMsT0FBMEIsRUFBbkJtQixVQUFVaEIsT0FDaEJyRCxLQUFLdW9CLEdBQUluakIsRUFBTSxLQUFNc2QsRUFBTXhmLEdBQzNCbEQsS0FBS3FwQixRQUFTamtCLE1BU2xCLElBQUlrRixHQUFRLHFDQU1adkgsRUFBTzhvQyxNQUFRLFNBQVUzb0MsRUFBSUQsR0FDNUIsSUFBSXlOLEVBQUs2RCxFQUFNczNCLEVBVWYsR0FSd0IsaUJBQVo1b0MsSUFDWHlOLEVBQU14TixFQUFJRCxHQUNWQSxFQUFVQyxFQUNWQSxFQUFLd04sR0FLQW5QLEVBQVkyQixHQWFsQixPQVJBcVIsRUFBTy9ULEVBQU1HLEtBQU0wRCxVQUFXLElBQzlCd25DLEVBQVEsV0FDUCxPQUFPM29DLEVBQUdyQyxNQUFPb0MsR0FBV2pELEtBQU11VSxFQUFLM1QsT0FBUUosRUFBTUcsS0FBTTBELGVBSXREOEMsS0FBT2pFLEVBQUdpRSxLQUFPakUsRUFBR2lFLE1BQVFwRSxFQUFPb0UsT0FFbEMwa0MsR0FHUjlvQyxFQUFPK29DLFVBQVksU0FBVUMsR0FDdkJBLEVBQ0pocEMsRUFBT2llLFlBRVBqZSxFQUFPNFgsT0FBTyxJQUdoQjVYLEVBQU82QyxRQUFVRCxNQUFNQyxRQUN2QjdDLEVBQU9pcEMsVUFBWTlvQixLQUFLQyxNQUN4QnBnQixFQUFPcUosU0FBV0EsRUFDbEJySixFQUFPeEIsV0FBYUEsRUFDcEJ3QixFQUFPN0MsU0FBV0EsRUFDbEI2QyxFQUFPaWYsVUFBWUEsRUFDbkJqZixFQUFPckIsS0FBT21CLEVBRWRFLEVBQU9zcEIsSUFBTXJqQixLQUFLcWpCLElBRWxCdHBCLEVBQU9rcEMsVUFBWSxTQUFVOXJDLEdBSzVCLElBQUl1QixFQUFPcUIsRUFBT3JCLEtBQU12QixHQUN4QixPQUFrQixXQUFUdUIsR0FBOEIsV0FBVEEsS0FLNUJ3cUMsTUFBTy9yQyxFQUFNc3lCLFdBQVl0eUIsS0FHNUI0QyxFQUFPb3BDLEtBQU8sU0FBVTdwQyxHQUN2QixPQUFlLE1BQVJBLEVBQ04sSUFDRUEsRUFBTyxJQUFLMkQsUUFBU3FFLEdBQU8sS0FrQlQsbUJBQVg4aEMsUUFBeUJBLE9BQU9DLEtBQzNDRCxPQUFRLFNBQVUsR0FBSSxXQUNyQixPQUFPcnBDLElBT1QsSUFHQ3VwQyxHQUFVdnNDLEVBQU9nRCxPQUdqQndwQyxHQUFLeHNDLEVBQU95c0MsRUF3QmIsT0F0QkF6cEMsRUFBTzBwQyxXQUFhLFNBQVVobkMsR0FTN0IsT0FSSzFGLEVBQU95c0MsSUFBTXpwQyxJQUNqQmhELEVBQU95c0MsRUFBSUQsSUFHUDltQyxHQUFRMUYsRUFBT2dELFNBQVdBLElBQzlCaEQsRUFBT2dELE9BQVN1cEMsSUFHVnZwQyxRQU1pQixJQUFiOUMsSUFDWEYsRUFBT2dELE9BQVNoRCxFQUFPeXNDLEVBQUl6cEMsR0FNckJBLElDM21WTixTQUFTeUosRUFBRWtkLEdBQUcsV0FBQSxvQkFBaUIvcEIsUUFBakIsWUFBQStzQyxRQUFpQi9zQyxXQUFTLG9CQUFvQkQsT0FBT0EsT0FBT0MsUUFBUStwQixJQUFJLG1CQUFtQjBpQixRQUFRQSxPQUFPQyxJQUFJRCxPQUFPMWlCLEdBQUdsZCxFQUFFbWdDLE9BQU9qakIsSUFBL0ksQ0FBb0oxcEIsS0FBSyxXQUFXLGFBQWEsSUFBSTRzQyxFQUFFLG9CQUFvQmh0QyxTQUFTLENBQUM4bEIsS0FBSyxHQUFHM1YsaUJBQWlCLGFBQWFnUixvQkFBb0IsYUFBYTFMLGNBQWMsQ0FBQzhZLEtBQUssYUFBYS9oQixTQUFTLElBQUl5Z0MsY0FBYyxXQUFXLE9BQU8sTUFBTWgvQixpQkFBaUIsV0FBVyxNQUFNLElBQUlWLGVBQWUsV0FBVyxPQUFPLE1BQU0yL0IsWUFBWSxXQUFXLE1BQU0sQ0FBQ0MsVUFBVSxlQUFlMXFDLGNBQWMsV0FBVyxNQUFNLENBQUMwWSxTQUFTLEdBQUd4TyxXQUFXLEdBQUdpWSxNQUFNLEdBQUdoaUIsYUFBYSxhQUFhNksscUJBQXFCLFdBQVcsTUFBTSxNQUFNNkgsU0FBUyxDQUFDRCxLQUFLLEtBQUtyVixTQUFTb3RDLEVBQUUsb0JBQW9CanRDLE9BQU8sQ0FBQ0gsU0FBU2d0QyxFQUFFSyxVQUFVLENBQUNDLFVBQVUsSUFBSWg0QixTQUFTLEdBQUdpNEIsUUFBUSxHQUFHQyxZQUFZLFdBQVcsT0FBT3B0QyxNQUFNK1AsaUJBQWlCLGFBQWFnUixvQkFBb0IsYUFBYTZRLGlCQUFpQixXQUFXLE1BQU0sQ0FBQ2tCLGlCQUFpQixXQUFXLE1BQU0sTUFBTXVhLE1BQU0sYUFBYXJrQyxLQUFLLGFBQWFza0MsT0FBTyxHQUFHeHRCLFdBQVcsYUFBYXVkLGFBQWEsY0FBY3Q5QixPQUFPcWIsRUFBRSxTQUFTNU8sR0FBRyxJQUFJLElBQUlrZCxFQUFFLEVBQUVBLEVBQUVsZCxFQUFFbkosT0FBT3FtQixHQUFHLEVBQUUxcEIsS0FBSzBwQixHQUFHbGQsRUFBRWtkLEdBQUcsT0FBTzFwQixLQUFLcUQsT0FBT21KLEVBQUVuSixPQUFPckQsTUFBTSxTQUFTdXRDLEVBQUUvZ0MsRUFBRWtkLEdBQUcsSUFBSWhnQixFQUFFLEdBQUd4SCxFQUFFLEVBQUUsR0FBR3NLLElBQUlrZCxHQUFHbGQsYUFBYTRPLEVBQUUsT0FBTzVPLEVBQUUsR0FBR0EsRUFBRSxHQUFHLGlCQUFpQkEsRUFBRSxDQUFDLElBQUl3MEIsRUFBRXdNLEVBQUVwekIsRUFBRTVOLEVBQUUyL0IsT0FBTyxHQUFHLEdBQUcveEIsRUFBRXJaLFFBQVEsTUFBTSxHQUFHcVosRUFBRXJaLFFBQVEsS0FBSyxDQUFDLElBQUkwc0MsRUFBRSxNQUFNLElBQUksSUFBSXJ6QixFQUFFclosUUFBUSxTQUFTMHNDLEVBQUUsTUFBTSxJQUFJcnpCLEVBQUVyWixRQUFRLFNBQVMwc0MsRUFBRSxTQUFTLElBQUlyekIsRUFBRXJaLFFBQVEsUUFBUSxJQUFJcVosRUFBRXJaLFFBQVEsU0FBUzBzQyxFQUFFLE1BQU0sSUFBSXJ6QixFQUFFclosUUFBUSxZQUFZMHNDLEVBQUUsU0FBUyxJQUFJcnpCLEVBQUVyWixRQUFRLGFBQWEwc0MsRUFBRSxXQUFXRCxFQUFFWixFQUFFdnFDLGNBQWNvckMsSUFBSTc4QixVQUFVd0osRUFBRWxZLEVBQUUsRUFBRUEsRUFBRXNyQyxFQUFFamhDLFdBQVdsSixPQUFPbkIsR0FBRyxFQUFFd0gsRUFBRTVJLEtBQUswc0MsRUFBRWpoQyxXQUFXckssU0FBUyxJQUFJOCtCLEVBQUV0WCxHQUFHLE1BQU1sZCxFQUFFLElBQUlBLEVBQUVLLE1BQU0sYUFBYTZjLEdBQUdrakIsR0FBRy8rQixpQkFBaUJyQixFQUFFMi9CLFFBQVEsQ0FBQ1MsRUFBRXovQixlQUFlWCxFQUFFMi9CLE9BQU83a0MsTUFBTSxLQUFLLEtBQUtwRixFQUFFLEVBQUVBLEVBQUU4K0IsRUFBRTM5QixPQUFPbkIsR0FBRyxFQUFFOCtCLEVBQUU5K0IsSUFBSXdILEVBQUU1SSxLQUFLa2dDLEVBQUU5K0IsU0FBUyxHQUFHc0ssRUFBRWhMLFVBQVVnTCxJQUFJd2dDLEdBQUd4Z0MsSUFBSW9nQyxFQUFFbGpDLEVBQUU1SSxLQUFLMEwsUUFBUSxHQUFHLEVBQUVBLEVBQUVuSixRQUFRbUosRUFBRSxHQUFHaEwsU0FBUyxJQUFJVSxFQUFFLEVBQUVBLEVBQUVzSyxFQUFFbkosT0FBT25CLEdBQUcsRUFBRXdILEVBQUU1SSxLQUFLMEwsRUFBRXRLLElBQUksT0FBTyxJQUFJa1osRUFBRTFSLEdBQUcsU0FBUzhqQyxFQUFFaGhDLEdBQUcsSUFBSSxJQUFJa2QsRUFBRSxHQUFHaGdCLEVBQUUsRUFBRUEsRUFBRThDLEVBQUVuSixPQUFPcUcsR0FBRyxHQUFHLElBQUlnZ0IsRUFBRTNvQixRQUFReUwsRUFBRTlDLEtBQUtnZ0IsRUFBRTVvQixLQUFLMEwsRUFBRTlDLElBQUksT0FBT2dnQixFQUFFNmpCLEVBQUVycUMsR0FBR2tZLEVBQUU5WCxVQUFVaXFDLEVBQUVHLE1BQU10eUIsRUFBRW15QixFQUFFSSxLQUFLdnlCLEVBQUUsSUFBSXNPLEVBQUUsQ0FBQ2dWLFNBQVMsU0FBU2x5QixHQUFHLFFBQUcsSUFBU0EsRUFBRSxPQUFPeE0sS0FBSyxJQUFJLElBQUkwcEIsRUFBRWxkLEVBQUVsRixNQUFNLEtBQUtvQyxFQUFFLEVBQUVBLEVBQUVnZ0IsRUFBRXJtQixPQUFPcUcsR0FBRyxFQUFFLElBQUksSUFBSXhILEVBQUUsRUFBRUEsRUFBRWxDLEtBQUtxRCxPQUFPbkIsR0FBRyxPQUFFLElBQVNsQyxLQUFLa0MsU0FBSSxJQUFTbEMsS0FBS2tDLEdBQUcwckMsV0FBVzV0QyxLQUFLa0MsR0FBRzByQyxVQUFVcHlCLElBQUlrTyxFQUFFaGdCLElBQUksT0FBTzFKLE1BQU0rK0IsWUFBWSxTQUFTdnlCLEdBQUcsSUFBSSxJQUFJa2QsRUFBRWxkLEVBQUVsRixNQUFNLEtBQUtvQyxFQUFFLEVBQUVBLEVBQUVnZ0IsRUFBRXJtQixPQUFPcUcsR0FBRyxFQUFFLElBQUksSUFBSXhILEVBQUUsRUFBRUEsRUFBRWxDLEtBQUtxRCxPQUFPbkIsR0FBRyxPQUFFLElBQVNsQyxLQUFLa0MsU0FBSSxJQUFTbEMsS0FBS2tDLEdBQUcwckMsV0FBVzV0QyxLQUFLa0MsR0FBRzByQyxVQUFVaHdCLE9BQU84TCxFQUFFaGdCLElBQUksT0FBTzFKLE1BQU1vL0IsU0FBUyxTQUFTNXlCLEdBQUcsUUFBUXhNLEtBQUssSUFBSUEsS0FBSyxHQUFHNHRDLFVBQVU3a0MsU0FBU3lELElBQUl3eUIsWUFBWSxTQUFTeHlCLEdBQUcsSUFBSSxJQUFJa2QsRUFBRWxkLEVBQUVsRixNQUFNLEtBQUtvQyxFQUFFLEVBQUVBLEVBQUVnZ0IsRUFBRXJtQixPQUFPcUcsR0FBRyxFQUFFLElBQUksSUFBSXhILEVBQUUsRUFBRUEsRUFBRWxDLEtBQUtxRCxPQUFPbkIsR0FBRyxPQUFFLElBQVNsQyxLQUFLa0MsU0FBSSxJQUFTbEMsS0FBS2tDLEdBQUcwckMsV0FBVzV0QyxLQUFLa0MsR0FBRzByQyxVQUFVaG9CLE9BQU84RCxFQUFFaGdCLElBQUksT0FBTzFKLE1BQU04UixLQUFLLFNBQVN0RixFQUFFa2QsR0FBRyxJQUFJaGdCLEVBQUVyRixVQUFVLEdBQUcsSUFBSUEsVUFBVWhCLFFBQVEsaUJBQWlCbUosRUFBRSxPQUFPeE0sS0FBSyxHQUFHQSxLQUFLLEdBQUd1QyxhQUFhaUssUUFBRyxFQUFPLElBQUksSUFBSXRLLEVBQUUsRUFBRUEsRUFBRWxDLEtBQUtxRCxPQUFPbkIsR0FBRyxFQUFFLEdBQUcsSUFBSXdILEVBQUVyRyxPQUFPckQsS0FBS2tDLEdBQUdNLGFBQWFnSyxFQUFFa2QsUUFBUSxJQUFJLElBQUlzWCxLQUFLeDBCLEVBQUV4TSxLQUFLa0MsR0FBRzgrQixHQUFHeDBCLEVBQUV3MEIsR0FBR2hoQyxLQUFLa0MsR0FBR00sYUFBYXcrQixFQUFFeDBCLEVBQUV3MEIsSUFBSSxPQUFPaGhDLE1BQU0wOUIsV0FBVyxTQUFTbHhCLEdBQUcsSUFBSSxJQUFJa2QsRUFBRSxFQUFFQSxFQUFFMXBCLEtBQUtxRCxPQUFPcW1CLEdBQUcsRUFBRTFwQixLQUFLMHBCLEdBQUczYixnQkFBZ0J2QixHQUFHLE9BQU94TSxNQUFNMGlCLEtBQUssU0FBU2xXLEVBQUVrZCxHQUFHLElBQUloZ0IsRUFBRSxRQUFHLElBQVNnZ0IsRUFBRSxDQUFDLElBQUksSUFBSXhuQixFQUFFLEVBQUVBLEVBQUVsQyxLQUFLcUQsT0FBT25CLEdBQUcsR0FBR3dILEVBQUUxSixLQUFLa0MsSUFBSTJyQyx5QkFBeUJua0MsRUFBRW1rQyx1QkFBdUIsSUFBSW5rQyxFQUFFbWtDLHVCQUF1QnJoQyxHQUFHa2QsRUFBRSxPQUFPMXBCLEtBQUssR0FBRzBKLEVBQUUxSixLQUFLLEdBQUksT0FBRzBKLEVBQUVta0Msd0JBQXdCcmhDLEtBQUs5QyxFQUFFbWtDLHVCQUE4Qm5rQyxFQUFFbWtDLHVCQUF1QnJoQyxHQUFTOUMsRUFBRW5ILGFBQWEsUUFBUWlLLFNBQWEsR0FBU3NoQyxVQUFVLFNBQVN0aEMsR0FBRyxJQUFJLElBQUlrZCxFQUFFLEVBQUVBLEVBQUUxcEIsS0FBS3FELE9BQU9xbUIsR0FBRyxFQUFFLENBQUMsSUFBSWhnQixFQUFFMUosS0FBSzBwQixHQUFHbEYsTUFBTTlhLEVBQUVxa0MsZ0JBQWdCdmhDLEVBQUU5QyxFQUFFb2tDLFVBQVV0aEMsRUFBRSxPQUFPeE0sTUFBTWd1QyxXQUFXLFNBQVN4aEMsR0FBRyxpQkFBaUJBLElBQUlBLEdBQUcsTUFBTSxJQUFJLElBQUlrZCxFQUFFLEVBQUVBLEVBQUUxcEIsS0FBS3FELE9BQU9xbUIsR0FBRyxFQUFFLENBQUMsSUFBSWhnQixFQUFFMUosS0FBSzBwQixHQUFHbEYsTUFBTTlhLEVBQUV1a0MseUJBQXlCemhDLEVBQUU5QyxFQUFFd2tDLG1CQUFtQjFoQyxFQUFFLE9BQU94TSxNQUFNdW9CLEdBQUcsV0FBVyxJQUFJLElBQU1tQixFQUFFLEdBQUdoZ0IsRUFBRXJGLFVBQVVoQixPQUFPcUcsS0FBS2dnQixFQUFFaGdCLEdBQUdyRixVQUFVcUYsR0FBRyxJQUFJeEgsRUFBRXduQixFQUFFLEdBQUc4akIsRUFBRTlqQixFQUFFLEdBQUd0UCxFQUFFc1AsRUFBRSxHQUFHc1gsRUFBRXRYLEVBQUUsR0FBRyxTQUFTK2pCLEVBQUVqaEMsR0FBRyxJQUFJa2QsRUFBRWxkLEVBQUVoSCxPQUFPLEdBQUdra0IsRUFBRSxDQUFDLElBQUloZ0IsRUFBRThDLEVBQUVoSCxPQUFPMm9DLGVBQWUsR0FBRyxHQUFHemtDLEVBQUUzSSxRQUFReUwsR0FBRyxHQUFHOUMsRUFBRWlJLFFBQVFuRixHQUFHK2dDLEVBQUU3akIsR0FBR3hQLEdBQUdzekIsR0FBR3B6QixFQUFFdlosTUFBTTZvQixFQUFFaGdCLFFBQVEsSUFBSSxJQUFJeEgsRUFBRXFyQyxFQUFFN2pCLEdBQUdoTyxVQUFVc2xCLEVBQUUsRUFBRUEsRUFBRTkrQixFQUFFbUIsT0FBTzI5QixHQUFHLEVBQUV1TSxFQUFFcnJDLEVBQUU4K0IsSUFBSTltQixHQUFHc3pCLElBQUlwekIsRUFBRXZaLE1BQU1xQixFQUFFOCtCLEdBQUd0M0IsSUFBSSxTQUFTMFIsRUFBRTVPLEdBQUcsSUFBSWtkLEVBQUVsZCxHQUFHQSxFQUFFaEgsUUFBUWdILEVBQUVoSCxPQUFPMm9DLGVBQWUsR0FBR3prQixFQUFFM29CLFFBQVF5TCxHQUFHLEdBQUdrZCxFQUFFL1gsUUFBUW5GLEdBQUc0TixFQUFFdlosTUFBTWIsS0FBSzBwQixHQUFHLG1CQUFtQkEsRUFBRSxLQUFLeG5CLEVBQUt3bkIsRUFBRyxHQUFHdFAsRUFBTnNQLEVBQVUsR0FBR3NYLEVBQWJ0WCxFQUFpQixHQUFHOGpCLE9BQUUsR0FBWXhNLEVBQUpBLElBQU0sRUFBSSxJQUFJLElBQUlvTixFQUFFdFYsRUFBRTUyQixFQUFFb0YsTUFBTSxLQUFLK21DLEVBQUUsRUFBRUEsRUFBRXJ1QyxLQUFLcUQsT0FBT2dyQyxHQUFHLEVBQUUsQ0FBQyxJQUFJQyxFQUFFdHVDLEtBQUtxdUMsR0FBRyxHQUFHYixFQUFFLElBQUlZLEVBQUUsRUFBRUEsRUFBRXRWLEVBQUV6MUIsT0FBTytxQyxHQUFHLEVBQUUsQ0FBQyxJQUFJRyxFQUFFelYsRUFBRXNWLEdBQUdFLEVBQUVFLG9CQUFvQkYsRUFBRUUsa0JBQWtCLElBQUlGLEVBQUVFLGtCQUFrQkQsS0FBS0QsRUFBRUUsa0JBQWtCRCxHQUFHLElBQUlELEVBQUVFLGtCQUFrQkQsR0FBR3p0QyxLQUFLLENBQUMydEMsU0FBU3IwQixFQUFFczBCLGNBQWNqQixJQUFJYSxFQUFFditCLGlCQUFpQncrQixFQUFFZCxFQUFFek0sUUFBUSxJQUFJb04sRUFBRSxFQUFFQSxFQUFFdFYsRUFBRXoxQixPQUFPK3FDLEdBQUcsRUFBRSxDQUFDLElBQUloeUIsRUFBRTBjLEVBQUVzVixHQUFHRSxFQUFFSyxnQkFBZ0JMLEVBQUVLLGNBQWMsSUFBSUwsRUFBRUssY0FBY3Z5QixLQUFLa3lCLEVBQUVLLGNBQWN2eUIsR0FBRyxJQUFJa3lCLEVBQUVLLGNBQWN2eUIsR0FBR3RiLEtBQUssQ0FBQzJ0QyxTQUFTcjBCLEVBQUVzMEIsY0FBY3R6QixJQUFJa3pCLEVBQUV2K0IsaUJBQWlCcU0sRUFBRWhCLEVBQUU0bEIsSUFBSSxPQUFPaGhDLE1BQU00b0IsSUFBSSxXQUFXLElBQUksSUFBTWMsRUFBRSxHQUFHaGdCLEVBQUVyRixVQUFVaEIsT0FBT3FHLEtBQUtnZ0IsRUFBRWhnQixHQUFHckYsVUFBVXFGLEdBQUcsSUFBSXhILEVBQUV3bkIsRUFBRSxHQUFHc1gsRUFBRXRYLEVBQUUsR0FBRzhqQixFQUFFOWpCLEVBQUUsR0FBR3RQLEVBQUVzUCxFQUFFLEdBQUcsbUJBQW1CQSxFQUFFLEtBQUt4bkIsRUFBS3duQixFQUFHLEdBQUc4akIsRUFBTjlqQixFQUFVLEdBQUd0UCxFQUFic1AsRUFBaUIsR0FBR3NYLE9BQUUsR0FBWTVtQixFQUFKQSxJQUFNLEVBQUksSUFBSSxJQUFJcXpCLEVBQUV2ckMsRUFBRW9GLE1BQU0sS0FBSzhULEVBQUUsRUFBRUEsRUFBRXF5QixFQUFFcHFDLE9BQU8rWCxHQUFHLEVBQUUsSUFBSSxJQUFJZ3pCLEVBQUVYLEVBQUVyeUIsR0FBRzBkLEVBQUUsRUFBRUEsRUFBRTk0QixLQUFLcUQsT0FBT3kxQixHQUFHLEVBQUUsQ0FBQyxJQUFJdVYsRUFBRXJ1QyxLQUFLODRCLEdBQUd3VixPQUFFLEVBQU8sSUFBSXROLEdBQUdxTixFQUFFTSxjQUFjTCxFQUFFRCxFQUFFTSxjQUFjUCxHQUFHcE4sR0FBR3FOLEVBQUVHLG9CQUFvQkYsRUFBRUQsRUFBRUcsa0JBQWtCSixJQUFJRSxHQUFHQSxFQUFFanJDLE9BQU8sSUFBSSxJQUFJa3JDLEVBQUVELEVBQUVqckMsT0FBTyxFQUFFLEdBQUdrckMsSUFBRUEsRUFBSyxDQUFDLElBQUlueUIsRUFBRWt5QixFQUFFQyxLQUFHZixHQUFHcHhCLEVBQUVxeUIsV0FBV2pCLElBQTZEQSxJQUExRGEsRUFBRXR0QixvQkFBb0JxdEIsRUFBRWh5QixFQUFFc3lCLGNBQWN0MEIsR0FBR2swQixFQUFFcnBDLE9BQU9zcEMsRUFBRSxLQUFtRSxPQUFPdnVDLE1BQU1xcEIsUUFBUSxXQUFXLElBQUksSUFBSTdjLEVBQUUsR0FBR2tkLEVBQUVybEIsVUFBVWhCLE9BQU9xbUIsS0FBS2xkLEVBQUVrZCxHQUFHcmxCLFVBQVVxbEIsR0FBRyxJQUFJLElBQUloZ0IsRUFBRThDLEVBQUUsR0FBR2xGLE1BQU0sS0FBS3BGLEVBQUVzSyxFQUFFLEdBQUd3MEIsRUFBRSxFQUFFQSxFQUFFdDNCLEVBQUVyRyxPQUFPMjlCLEdBQUcsRUFBRSxJQUFJLElBQUl3TSxFQUFFOWpDLEVBQUVzM0IsR0FBRzVtQixFQUFFLEVBQUVBLEVBQUVwYSxLQUFLcUQsT0FBTytXLEdBQUcsRUFBRSxDQUFDLElBQUlxekIsRUFBRXp0QyxLQUFLb2EsR0FBR2dCLE9BQUUsRUFBTyxJQUFJQSxFQUFFLElBQUk0eEIsRUFBRUksWUFBWUksRUFBRSxDQUFDNWdCLE9BQU8xcUIsRUFBRXNxQixTQUFRLEVBQUdDLFlBQVcsSUFBSyxNQUFNamdCLElBQUk0TyxFQUFFd3hCLEVBQUVFLFlBQVksVUFBVUMsVUFBVVMsR0FBRSxHQUFHLEdBQUlweUIsRUFBRXdSLE9BQU8xcUIsRUFBRXVyQyxFQUFFVSxjQUFjM2hDLEVBQUU2RCxPQUFPLFNBQVM3RCxFQUFFa2QsR0FBRyxPQUFPLEVBQUVBLElBQUkrakIsRUFBRW1CLGNBQWN4ekIsR0FBR3F5QixFQUFFVSxjQUFjLFVBQVVWLEVBQUVVLGNBQWMsT0FBT251QyxNQUFNNnVDLGNBQWMsU0FBU25sQixHQUFHLElBQUloZ0IsRUFBRXhILEVBQUUsQ0FBQyxzQkFBc0IsaUJBQWlCOCtCLEVBQUVoaEMsS0FBSyxTQUFTd3RDLEVBQUVoaEMsR0FBRyxHQUFHQSxFQUFFaEgsU0FBU3hGLEtBQUssSUFBSTBwQixFQUFFL29CLEtBQUtYLEtBQUt3TSxHQUFHOUMsRUFBRSxFQUFFQSxFQUFFeEgsRUFBRW1CLE9BQU9xRyxHQUFHLEVBQUVzM0IsRUFBRXBZLElBQUkxbUIsRUFBRXdILEdBQUc4akMsR0FBRyxHQUFHOWpCLEVBQUUsSUFBSWhnQixFQUFFLEVBQUVBLEVBQUV4SCxFQUFFbUIsT0FBT3FHLEdBQUcsRUFBRXMzQixFQUFFelksR0FBR3JtQixFQUFFd0gsR0FBRzhqQyxHQUFHLE9BQU94dEMsTUFBTTh1QyxXQUFXLFNBQVN0aUMsR0FBRyxHQUFHLEVBQUV4TSxLQUFLcUQsT0FBTyxDQUFDLEdBQUdtSixFQUFFLENBQUMsSUFBSWtkLEVBQUUxcEIsS0FBS3ExQixTQUFTLE9BQU9yMUIsS0FBSyxHQUFHc3lCLFlBQVlHLFdBQVcvSSxFQUFFb0osaUJBQWlCLGlCQUFpQkwsV0FBVy9JLEVBQUVvSixpQkFBaUIsZ0JBQWdCLE9BQU85eUIsS0FBSyxHQUFHc3lCLFlBQVksT0FBTyxNQUFNeWMsWUFBWSxTQUFTdmlDLEdBQUcsR0FBRyxFQUFFeE0sS0FBS3FELE9BQU8sQ0FBQyxHQUFHbUosRUFBRSxDQUFDLElBQUlrZCxFQUFFMXBCLEtBQUtxMUIsU0FBUyxPQUFPcjFCLEtBQUssR0FBRzBuQyxhQUFhalYsV0FBVy9JLEVBQUVvSixpQkFBaUIsZUFBZUwsV0FBVy9JLEVBQUVvSixpQkFBaUIsa0JBQWtCLE9BQU85eUIsS0FBSyxHQUFHMG5DLGFBQWEsT0FBTyxNQUFNdUMsT0FBTyxXQUFXLEdBQUcsRUFBRWpxQyxLQUFLcUQsT0FBTyxDQUFDLElBQUltSixFQUFFeE0sS0FBSyxHQUFHMHBCLEVBQUVsZCxFQUFFZ3JCLHdCQUF3Qjl0QixFQUFFa2pDLEVBQUVsbkIsS0FBS3hqQixFQUFFc0ssRUFBRXdpQyxXQUFXdGxDLEVBQUVzbEMsV0FBVyxFQUFFaE8sRUFBRXgwQixFQUFFeWlDLFlBQVl2bEMsRUFBRXVsQyxZQUFZLEVBQUV6QixFQUFFaGhDLElBQUl3Z0MsRUFBRUEsRUFBRWtDLFFBQVExaUMsRUFBRW1zQixVQUFVdmUsRUFBRTVOLElBQUl3Z0MsRUFBRUEsRUFBRW1DLFFBQVEzaUMsRUFBRW9zQixXQUFXLE1BQU0sQ0FBQzlvQixJQUFJNFosRUFBRTVaLElBQUkwOUIsRUFBRXRyQyxFQUFFdzFCLEtBQUtoTyxFQUFFZ08sS0FBS3RkLEVBQUU0bUIsR0FBRyxPQUFPLE1BQU10YyxJQUFJLFNBQVNsWSxFQUFFa2QsR0FBRyxJQUFJaGdCLEVBQUUsR0FBRyxJQUFJckYsVUFBVWhCLE9BQU8sQ0FBQyxHQUFHLGlCQUFpQm1KLEVBQUUsQ0FBQyxJQUFJOUMsRUFBRSxFQUFFQSxFQUFFMUosS0FBS3FELE9BQU9xRyxHQUFHLEVBQUUsSUFBSSxJQUFJeEgsS0FBS3NLLEVBQUV4TSxLQUFLMEosR0FBRzhhLE1BQU10aUIsR0FBR3NLLEVBQUV0SyxHQUFHLE9BQU9sQyxLQUFLLEdBQUdBLEtBQUssR0FBRyxPQUFPZ3RDLEVBQUVwYixpQkFBaUI1eEIsS0FBSyxHQUFHLE1BQU04eUIsaUJBQWlCdG1CLEdBQUcsR0FBRyxJQUFJbkksVUFBVWhCLFFBQVEsaUJBQWlCbUosRUFBNkQsT0FBT3hNLEtBQWpFLElBQUkwSixFQUFFLEVBQUVBLEVBQUUxSixLQUFLcUQsT0FBT3FHLEdBQUcsRUFBRTFKLEtBQUswSixHQUFHOGEsTUFBTWhZLEdBQUdrZCxFQUFFLE9BQU8xcEIsTUFBa0JpRSxLQUFLLFNBQVN1SSxHQUFHLElBQUlBLEVBQUUsT0FBT3hNLEtBQUssSUFBSSxJQUFJMHBCLEVBQUUsRUFBRUEsRUFBRTFwQixLQUFLcUQsT0FBT3FtQixHQUFHLEVBQUUsSUFBRyxJQUFLbGQsRUFBRTdMLEtBQUtYLEtBQUswcEIsR0FBR0EsRUFBRTFwQixLQUFLMHBCLElBQUksT0FBTzFwQixLQUFLLE9BQU9BLE1BQU15dkIsS0FBSyxTQUFTampCLEdBQUcsUUFBRyxJQUFTQSxFQUFFLE9BQU94TSxLQUFLLEdBQUdBLEtBQUssR0FBRzRRLGVBQVUsRUFBTyxJQUFJLElBQUk4WSxFQUFFLEVBQUVBLEVBQUUxcEIsS0FBS3FELE9BQU9xbUIsR0FBRyxFQUFFMXBCLEtBQUswcEIsR0FBRzlZLFVBQVVwRSxFQUFFLE9BQU94TSxNQUFNc0MsS0FBSyxTQUFTa0ssR0FBRyxRQUFHLElBQVNBLEVBQUUsT0FBT3hNLEtBQUssR0FBR0EsS0FBSyxHQUFHcVMsWUFBWTg1QixPQUFPLEtBQUssSUFBSSxJQUFJemlCLEVBQUUsRUFBRUEsRUFBRTFwQixLQUFLcUQsT0FBT3FtQixHQUFHLEVBQUUxcEIsS0FBSzBwQixHQUFHclgsWUFBWTdGLEVBQUUsT0FBT3hNLE1BQU1rYSxHQUFHLFNBQVMxTixHQUFHLElBQUlrZCxFQUFFaGdCLEVBQUV4SCxFQUFFbEMsS0FBSyxHQUFHLElBQUlrQyxRQUFHLElBQVNzSyxFQUFFLE9BQU0sRUFBRyxHQUFHLGlCQUFpQkEsRUFBRSxDQUFDLEdBQUd0SyxFQUFFNkUsUUFBUSxPQUFPN0UsRUFBRTZFLFFBQVF5RixHQUFHLEdBQUd0SyxFQUFFNE8sc0JBQXNCLE9BQU81TyxFQUFFNE8sc0JBQXNCdEUsR0FBRyxHQUFHdEssRUFBRStPLGtCQUFrQixPQUFPL08sRUFBRStPLGtCQUFrQnpFLEdBQUcsSUFBSWtkLEVBQUU2akIsRUFBRS9nQyxHQUFHOUMsRUFBRSxFQUFFQSxFQUFFZ2dCLEVBQUVybUIsT0FBT3FHLEdBQUcsRUFBRSxHQUFHZ2dCLEVBQUVoZ0IsS0FBS3hILEVBQUUsT0FBTSxFQUFHLE9BQU0sRUFBRyxHQUFHc0ssSUFBSW9nQyxFQUFFLE9BQU8xcUMsSUFBSTBxQyxFQUFFLEdBQUdwZ0MsSUFBSXdnQyxFQUFFLE9BQU85cUMsSUFBSThxQyxFQUFFLEdBQUd4Z0MsRUFBRWhMLFVBQVVnTCxhQUFhNE8sRUFBRSxDQUFDLElBQUlzTyxFQUFFbGQsRUFBRWhMLFNBQVMsQ0FBQ2dMLEdBQUdBLEVBQUU5QyxFQUFFLEVBQUVBLEVBQUVnZ0IsRUFBRXJtQixPQUFPcUcsR0FBRyxFQUFFLEdBQUdnZ0IsRUFBRWhnQixLQUFLeEgsRUFBRSxPQUFNLEVBQUcsT0FBTSxFQUFHLE9BQU0sR0FBSW9aLE1BQU0sV0FBVyxJQUFJOU8sRUFBRWtkLEVBQUUxcEIsS0FBSyxHQUFHLEdBQUcwcEIsRUFBRSxDQUFDLElBQUlsZCxFQUFFLEVBQUUsUUFBUWtkLEVBQUVBLEVBQUUwbEIsa0JBQWtCLElBQUkxbEIsRUFBRWxvQixXQUFXZ0wsR0FBRyxHQUFHLE9BQU9BLElBQUlqSSxHQUFHLFNBQVNpSSxHQUFHLFFBQUcsSUFBU0EsRUFBRSxPQUFPeE0sS0FBSyxJQUFJMHBCLEVBQUVoZ0IsRUFBRTFKLEtBQUtxRCxPQUFPLE9BQU8sSUFBSStYLEVBQUUxUixFQUFFLEVBQUU4QyxFQUFFLEdBQUdBLEVBQUUsR0FBR2tkLEVBQUVoZ0IsRUFBRThDLEdBQUcsRUFBRSxHQUFHLENBQUN4TSxLQUFLMHBCLElBQUksQ0FBQzFwQixLQUFLd00sTUFBTTJqQixPQUFPLFdBQVcsSUFBSSxJQUFJM2pCLEVBQUVrZCxFQUFFLEdBQUdoZ0IsRUFBRXJGLFVBQVVoQixPQUFPcUcsS0FBS2dnQixFQUFFaGdCLEdBQUdyRixVQUFVcUYsR0FBRyxJQUFJLElBQUl4SCxFQUFFLEVBQUVBLEVBQUV3bkIsRUFBRXJtQixPQUFPbkIsR0FBRyxFQUFFLENBQUNzSyxFQUFFa2QsRUFBRXhuQixHQUFHLElBQUksSUFBSTgrQixFQUFFLEVBQUVBLEVBQUVoaEMsS0FBS3FELE9BQU8yOUIsR0FBRyxFQUFFLEdBQUcsaUJBQWlCeDBCLEVBQUUsQ0FBQyxJQUFJZ2hDLEVBQUVaLEVBQUV2cUMsY0FBYyxPQUFPLElBQUltckMsRUFBRTU4QixVQUFVcEUsRUFBRWdoQyxFQUFFbDdCLFlBQVl0UyxLQUFLZ2hDLEdBQUd0K0IsWUFBWThxQyxFQUFFbDdCLGlCQUFpQixHQUFHOUYsYUFBYTRPLEVBQUUsSUFBSSxJQUFJaEIsRUFBRSxFQUFFQSxFQUFFNU4sRUFBRW5KLE9BQU8rVyxHQUFHLEVBQUVwYSxLQUFLZ2hDLEdBQUd0K0IsWUFBWThKLEVBQUU0TixTQUFTcGEsS0FBS2doQyxHQUFHdCtCLFlBQVk4SixHQUFHLE9BQU94TSxNQUFNb3dCLFFBQVEsU0FBUzVqQixHQUFHLElBQUlrZCxFQUFFaGdCLEVBQUV4SCxFQUFFbEMsS0FBSyxJQUFJMHBCLEVBQUUsRUFBRUEsRUFBRTFwQixLQUFLcUQsT0FBT3FtQixHQUFHLEVBQUUsR0FBRyxpQkFBaUJsZCxFQUFFLENBQUMsSUFBSXcwQixFQUFFNEwsRUFBRXZxQyxjQUFjLE9BQU8sSUFBSTIrQixFQUFFcHdCLFVBQVVwRSxFQUFFOUMsRUFBRXMzQixFQUFFejBCLFdBQVdsSixPQUFPLEVBQUUsR0FBR3FHLElBQUVBLEVBQUt4SCxFQUFFd25CLEdBQUcyRyxhQUFhMlEsRUFBRXowQixXQUFXN0MsR0FBR3hILEVBQUV3bkIsR0FBR25kLFdBQVcsU0FBUyxHQUFHQyxhQUFhNE8sRUFBRSxJQUFJMVIsRUFBRSxFQUFFQSxFQUFFOEMsRUFBRW5KLE9BQU9xRyxHQUFHLEVBQUV4SCxFQUFFd25CLEdBQUcyRyxhQUFhN2pCLEVBQUU5QyxHQUFHeEgsRUFBRXduQixHQUFHbmQsV0FBVyxTQUFTckssRUFBRXduQixHQUFHMkcsYUFBYTdqQixFQUFFdEssRUFBRXduQixHQUFHbmQsV0FBVyxJQUFJLE9BQU92TSxNQUFNc00sS0FBSyxTQUFTRSxHQUFHLE9BQU8sRUFBRXhNLEtBQUtxRCxPQUFPbUosRUFBRXhNLEtBQUssR0FBR3F2QyxvQkFBb0I5QixFQUFFdnRDLEtBQUssR0FBR3F2QyxvQkFBb0JuMUIsR0FBRzFOLEdBQUcsSUFBSTRPLEVBQUUsQ0FBQ3BiLEtBQUssR0FBR3F2QyxxQkFBcUIsSUFBSWowQixFQUFFLElBQUlwYixLQUFLLEdBQUdxdkMsbUJBQW1CLElBQUlqMEIsRUFBRSxDQUFDcGIsS0FBSyxHQUFHcXZDLHFCQUFxQixJQUFJajBCLEVBQUUsSUFBSSxJQUFJQSxFQUFFLEtBQUtRLFFBQVEsU0FBU3BQLEdBQUcsSUFBSWtkLEVBQUUsR0FBR2hnQixFQUFFMUosS0FBSyxHQUFHLElBQUkwSixFQUFFLE9BQU8sSUFBSTBSLEVBQUUsSUFBSSxLQUFLMVIsRUFBRTJsQyxvQkFBb0IsQ0FBQyxJQUFJbnRDLEVBQUV3SCxFQUFFMmxDLG1CQUFtQjdpQyxJQUFFK2dDLEVBQUVyckMsR0FBR2dZLEdBQUcxTixJQUFja2QsRUFBRTVvQixLQUFLb0IsR0FBR3dILEVBQUV4SCxFQUFFLE9BQU8sSUFBSWtaLEVBQUVzTyxJQUFJek8sS0FBSyxTQUFTek8sR0FBRyxHQUFHLEVBQUV4TSxLQUFLcUQsT0FBTyxDQUFDLElBQUlxbUIsRUFBRTFwQixLQUFLLEdBQUcsT0FBT3dNLEVBQUVrZCxFQUFFNGxCLHdCQUF3Qi9CLEVBQUU3akIsRUFBRTRsQix3QkFBd0JwMUIsR0FBRzFOLEdBQUcsSUFBSTRPLEVBQUUsQ0FBQ3NPLEVBQUU0bEIseUJBQXlCLElBQUlsMEIsRUFBRSxJQUFJc08sRUFBRTRsQix1QkFBdUIsSUFBSWwwQixFQUFFLENBQUNzTyxFQUFFNGxCLHlCQUF5QixJQUFJbDBCLEVBQUUsSUFBSSxPQUFPLElBQUlBLEVBQUUsS0FBS0csUUFBUSxTQUFTL08sR0FBRyxJQUFJa2QsRUFBRSxHQUFHaGdCLEVBQUUxSixLQUFLLEdBQUcsSUFBSTBKLEVBQUUsT0FBTyxJQUFJMFIsRUFBRSxJQUFJLEtBQUsxUixFQUFFNGxDLHdCQUF3QixDQUFDLElBQUlwdEMsRUFBRXdILEVBQUU0bEMsdUJBQXVCOWlDLElBQUUrZ0MsRUFBRXJyQyxHQUFHZ1ksR0FBRzFOLElBQWNrZCxFQUFFNW9CLEtBQUtvQixHQUFHd0gsRUFBRXhILEVBQUUsT0FBTyxJQUFJa1osRUFBRXNPLElBQUl4VixPQUFPLFNBQVMxSCxHQUFHLElBQUksSUFBSWtkLEVBQUUsR0FBR2hnQixFQUFFLEVBQUVBLEVBQUUxSixLQUFLcUQsT0FBT3FHLEdBQUcsRUFBRSxPQUFPMUosS0FBSzBKLEdBQUcvRyxZQUFhNkosSUFBRStnQyxFQUFFdnRDLEtBQUswSixHQUFHL0csWUFBWXVYLEdBQUcxTixJQUErQmtkLEVBQUU1b0IsS0FBS2QsS0FBSzBKLEdBQUcvRyxZQUFhLE9BQU80cUMsRUFBRUMsRUFBRTlqQixLQUFLaE8sUUFBUSxTQUFTbFAsR0FBRyxJQUFJLElBQUlrZCxFQUFFLEdBQUdoZ0IsRUFBRSxFQUFFQSxFQUFFMUosS0FBS3FELE9BQU9xRyxHQUFHLEVBQUUsSUFBSSxJQUFJeEgsRUFBRWxDLEtBQUswSixHQUFHL0csV0FBV1QsR0FBR3NLLElBQUUrZ0MsRUFBRXJyQyxHQUFHZ1ksR0FBRzFOLElBQWNrZCxFQUFFNW9CLEtBQUtvQixHQUFHQSxFQUFFQSxFQUFFUyxXQUFXLE9BQU80cUMsRUFBRUMsRUFBRTlqQixLQUFLck8sUUFBUSxTQUFTN08sR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLLFlBQU8sSUFBU3dNLEVBQUUsSUFBSTRPLEVBQUUsS0FBS3NPLEVBQUV4UCxHQUFHMU4sS0FBS2tkLEVBQUVBLEVBQUVoTyxRQUFRbFAsR0FBR2pJLEdBQUcsSUFBSW1sQixJQUFJblosS0FBSyxTQUFTL0QsR0FBRyxJQUFJLElBQUlrZCxFQUFFLEdBQUdoZ0IsRUFBRSxFQUFFQSxFQUFFMUosS0FBS3FELE9BQU9xRyxHQUFHLEVBQUUsSUFBSSxJQUFJeEgsRUFBRWxDLEtBQUswSixHQUFHbUUsaUJBQWlCckIsR0FBR3cwQixFQUFFLEVBQUVBLEVBQUU5K0IsRUFBRW1CLE9BQU8yOUIsR0FBRyxFQUFFdFgsRUFBRTVvQixLQUFLb0IsRUFBRTgrQixJQUFJLE9BQU8sSUFBSTVsQixFQUFFc08sSUFBSTNPLFNBQVMsU0FBU3ZPLEdBQUcsSUFBSSxJQUFJa2QsRUFBRSxHQUFHaGdCLEVBQUUsRUFBRUEsRUFBRTFKLEtBQUtxRCxPQUFPcUcsR0FBRyxFQUFFLElBQUksSUFBSXhILEVBQUVsQyxLQUFLMEosR0FBRzZDLFdBQVd5MEIsRUFBRSxFQUFFQSxFQUFFOStCLEVBQUVtQixPQUFPMjlCLEdBQUcsRUFBRXgwQixFQUFFLElBQUl0SyxFQUFFOCtCLEdBQUd4L0IsVUFBVStyQyxFQUFFcnJDLEVBQUU4K0IsSUFBSTltQixHQUFHMU4sSUFBSWtkLEVBQUU1b0IsS0FBS29CLEVBQUU4K0IsSUFBSSxJQUFJOStCLEVBQUU4K0IsR0FBR3gvQixVQUFVa29CLEVBQUU1b0IsS0FBS29CLEVBQUU4K0IsSUFBSSxPQUFPLElBQUk1bEIsRUFBRW95QixFQUFFOWpCLEtBQUs5TCxPQUFPLFdBQVcsSUFBSSxJQUFJcFIsRUFBRSxFQUFFQSxFQUFFeE0sS0FBS3FELE9BQU9tSixHQUFHLEVBQUV4TSxLQUFLd00sR0FBRzdKLFlBQVkzQyxLQUFLd00sR0FBRzdKLFdBQVdDLFlBQVk1QyxLQUFLd00sSUFBSSxPQUFPeE0sTUFBTXdiLElBQUksV0FBVyxJQUFJLElBQUloUCxFQUFFLEdBQUdrZCxFQUFFcmxCLFVBQVVoQixPQUFPcW1CLEtBQUtsZCxFQUFFa2QsR0FBR3JsQixVQUFVcWxCLEdBQUcsSUFBSWhnQixFQUFFeEgsRUFBRSxJQUFJd0gsRUFBRSxFQUFFQSxFQUFFOEMsRUFBRW5KLE9BQU9xRyxHQUFHLEVBQUUsQ0FBQyxJQUFJczNCLEVBQUV1TSxFQUFFL2dDLEVBQUU5QyxJQUFJLElBQUl4SCxFQUFFLEVBQUVBLEVBQUU4K0IsRUFBRTM5QixPQUFPbkIsR0FBRyxFQUFFbEMsS0FBS0EsS0FBS3FELFFBQVEyOUIsRUFBRTkrQixHQUFHbEMsS0FBS3FELFFBQVEsRUFBRSxPQUFPckQsTUFBTXExQixPQUFPLFdBQVcsT0FBT3IxQixLQUFLLEdBQUdndEMsRUFBRXBiLGlCQUFpQjV4QixLQUFLLEdBQUcsTUFBTSxLQUFLTSxPQUFPME4sS0FBSzBiLEdBQUc2bEIsUUFBUSxTQUFTL2lDLEdBQUcrZ0MsRUFBRXJxQyxHQUFHc0osR0FBR2tkLEVBQUVsZCxLQUFpdkYsU0FBRncwQixFQUFXeDBCLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxJQUFJLElBQUlrZCxFQUFFMXBCLEtBQUswcEIsRUFBRXFnQixPQUFPdjlCLEVBQUVrZCxFQUFFOGxCLGdCQUFnQixHQUFHOWxCLEVBQUVxZ0IsUUFBUXJnQixFQUFFcWdCLE9BQU94aEIsSUFBSWpvQixPQUFPME4sS0FBSzBiLEVBQUVxZ0IsT0FBT3hoQixJQUFJZ25CLFFBQVEsU0FBUy9pQyxHQUFHa2QsRUFBRW5CLEdBQUcvYixFQUFFa2QsRUFBRXFnQixPQUFPeGhCLEdBQUcvYixNQUE3NEYsSUFBSUEsRUFBRTlDLEVBQUV4SCxFQUFFdXRDLEVBQUUsQ0FBQ0MsWUFBWSxTQUFTbGpDLEdBQUcsSUFBSWtkLEVBQUVsZCxFQUFFbE0sT0FBTzBOLEtBQUswYixHQUFHNmxCLFFBQVEsU0FBUy9pQyxHQUFHLElBQUlrZCxFQUFFbGQsR0FBRyxLQUFLLE1BQU1BLElBQUksV0FBV2tkLEVBQUVsZCxHQUFHLE1BQU1BLFFBQVFtakMsU0FBUyxTQUFTbmpDLEVBQUVrZCxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxHQUFHNUosV0FBV3RULEVBQUVrZCxJQUFJMkMsSUFBSSxXQUFXLE9BQU9yakIsS0FBS3FqQixPQUFPdWpCLGFBQWEsU0FBU3BqQyxFQUFFa2QsR0FBRyxJQUFJaGdCLEVBQUV4SCxFQUFFOCtCLE9BQUUsSUFBU3RYLElBQUlBLEVBQUUsS0FBSyxJQUFJOGpCLEVBQUVSLEVBQUVwYixpQkFBaUJwbEIsRUFBRSxNQUFNLE9BQU93Z0MsRUFBRTZDLGlCQUFpQixHQUFHM3RDLEVBQUVzckMsRUFBRU0sV0FBV04sRUFBRU8saUJBQWlCem1DLE1BQU0sS0FBS2pFLFNBQVNuQixFQUFFQSxFQUFFb0YsTUFBTSxNQUFNbkQsSUFBSSxTQUFTcUksR0FBRyxPQUFPQSxFQUFFdkcsUUFBUSxJQUFJLE9BQU8ySCxLQUFLLE9BQU9vekIsRUFBRSxJQUFJZ00sRUFBRTZDLGdCQUFnQixTQUFTM3RDLEVBQUUsR0FBR0EsSUFBSXdILEdBQUdzM0IsRUFBRXdNLEVBQUVzQyxjQUFjdEMsRUFBRXVDLFlBQVl2QyxFQUFFd0MsYUFBYXhDLEVBQUV5QyxhQUFhekMsRUFBRU0sV0FBV04sRUFBRTFhLGlCQUFpQixhQUFhN3NCLFFBQVEsYUFBYSx1QkFBdUJoRixXQUFXcUcsTUFBTSxLQUFLLE1BQU1vaUIsSUFBSXhuQixFQUFFOHFDLEVBQUU2QyxnQkFBZ0I3TyxFQUFFa1AsSUFBSSxLQUFLeG1DLEVBQUVyRyxPQUFPb3ZCLFdBQVcvb0IsRUFBRSxLQUFLK29CLFdBQVcvb0IsRUFBRSxLQUFLLE1BQU1nZ0IsSUFBSXhuQixFQUFFOHFDLEVBQUU2QyxnQkFBZ0I3TyxFQUFFbVAsSUFBSSxLQUFLem1DLEVBQUVyRyxPQUFPb3ZCLFdBQVcvb0IsRUFBRSxLQUFLK29CLFdBQVcvb0IsRUFBRSxLQUFLeEgsR0FBRyxHQUFHa3VDLGNBQWMsU0FBUzVqQyxHQUFHLElBQUlrZCxFQUFFaGdCLEVBQUV4SCxFQUFFOCtCLEVBQUV3TSxFQUFFLEdBQUdwekIsRUFBRTVOLEdBQUd3Z0MsRUFBRTkzQixTQUFTSyxLQUFLLEdBQUcsaUJBQWlCNkUsR0FBR0EsRUFBRS9XLE9BQU8sSUFBSTI5QixHQUFHdDNCLEdBQUcwUSxHQUFHLEVBQUVBLEVBQUVyWixRQUFRLEtBQUtxWixFQUFFblUsUUFBUSxRQUFRLElBQUksSUFBSXFCLE1BQU0sS0FBSytJLE9BQU8sU0FBUzdELEdBQUcsTUFBTSxLQUFLQSxLQUFLbkosT0FBT3FtQixFQUFFLEVBQUVBLEVBQUVzWCxFQUFFdFgsR0FBRyxFQUFFeG5CLEVBQUV3SCxFQUFFZ2dCLEdBQUd6akIsUUFBUSxRQUFRLElBQUlxQixNQUFNLEtBQUtrbUMsRUFBRTZDLG1CQUFtQm51QyxFQUFFLFVBQUssSUFBU0EsRUFBRSxRQUFHLEVBQU9tdUMsbUJBQW1CbnVDLEVBQUUsS0FBSyxHQUFHLE9BQU9zckMsR0FBRzhDLFNBQVMsU0FBUzlqQyxHQUFHLE1BQU0sVUFBQWtnQyxRQUFpQmxnQyxJQUFHLE9BQU9BLEdBQUdBLEVBQUVoSixhQUFhZ0osRUFBRWhKLGNBQWNsRCxRQUFRNEUsT0FBTyxXQUFXLElBQUksSUFBSXNILEVBQUUsR0FBR2tkLEVBQUVybEIsVUFBVWhCLE9BQU9xbUIsS0FBS2xkLEVBQUVrZCxHQUFHcmxCLFVBQVVxbEIsR0FBRyxJQUFJLElBQUloZ0IsRUFBRXBKLE9BQU9rTSxFQUFFLElBQUl0SyxFQUFFLEVBQUVBLEVBQUVzSyxFQUFFbkosT0FBT25CLEdBQUcsRUFBRSxDQUFDLElBQUk4K0IsRUFBRXgwQixFQUFFdEssR0FBRyxHQUFHLE1BQU04K0IsRUFBRSxJQUFJLElBQUl3TSxFQUFFbHRDLE9BQU8wTixLQUFLMU4sT0FBTzBnQyxJQUFJNW1CLEVBQUUsRUFBRXF6QixFQUFFRCxFQUFFbnFDLE9BQU8rVyxFQUFFcXpCLEVBQUVyekIsR0FBRyxFQUFFLENBQUMsSUFBSWdCLEVBQUVveUIsRUFBRXB6QixHQUFHZzBCLEVBQUU5dEMsT0FBT2l3Qyx5QkFBeUJ2UCxFQUFFNWxCLFFBQUcsSUFBU2d6QixHQUFHQSxFQUFFNWlCLGFBQWFpa0IsRUFBRWEsU0FBUzVtQyxFQUFFMFIsS0FBS3EwQixFQUFFYSxTQUFTdFAsRUFBRTVsQixJQUFJcTBCLEVBQUV2cUMsT0FBT3dFLEVBQUUwUixHQUFHNGxCLEVBQUU1bEIsS0FBS3EwQixFQUFFYSxTQUFTNW1DLEVBQUUwUixLQUFLcTBCLEVBQUVhLFNBQVN0UCxFQUFFNWxCLEtBQUsxUixFQUFFMFIsR0FBRyxHQUFHcTBCLEVBQUV2cUMsT0FBT3dFLEVBQUUwUixHQUFHNGxCLEVBQUU1bEIsS0FBSzFSLEVBQUUwUixHQUFHNGxCLEVBQUU1bEIsS0FBSyxPQUFPMVIsSUFBSThtQyxHQUFHdHVDLEVBQUUwcUMsRUFBRXZxQyxjQUFjLE9BQU8sQ0FBQ291QyxNQUFNekQsRUFBRTBELFlBQVcsSUFBSzFELEVBQUUwRCxVQUFVRCxVQUFVLGlCQUFpQnpELEdBQUdBLEVBQUUyRCxlQUFlL0QsYUFBYUksRUFBRTJELGVBQWVDLGlCQUFpQjVELEVBQUVDLFVBQVU0RCxpQkFBaUI3RCxFQUFFOEQsY0FBY0Msd0JBQXdCL0QsRUFBRUMsVUFBVStELGlCQUFpQmhELFdBQXNCLGVBQVZ0a0MsRUFBRXhILEVBQUVzaUIsUUFBd0IscUJBQXFCOWEsR0FBRyxrQkFBa0JBLEVBQUd1bkMsYUFBYWpFLEVBQUUwRCxZQUFXLElBQUsxRCxFQUFFMEQsVUFBVVEsa0JBQTRCLHNCQUFWMWtDLEVBQUV0SyxFQUFFc2lCLFFBQStCLG1CQUFtQmhZLEdBQUcsaUJBQWlCQSxHQUFHLGtCQUFrQkEsR0FBRyxnQkFBZ0JBLEdBQUcya0MsUUFBUSxXQUFXLElBQUksSUFBSTNrQyxFQUFFdEssRUFBRXNpQixNQUFNa0YsRUFBRSx5S0FBeUtwaUIsTUFBTSxLQUFLb0MsRUFBRSxFQUFFQSxFQUFFZ2dCLEVBQUVybUIsT0FBT3FHLEdBQUcsRUFBRSxHQUFHZ2dCLEVBQUVoZ0IsS0FBSzhDLEVBQUUsT0FBTSxFQUFHLE9BQU0sRUFBbFEsR0FBd1E0a0MsU0FBUyxxQkFBcUJwRSxHQUFHLDJCQUEyQkEsRUFBRXFFLGdCQUFnQixXQUFXLElBQUk3a0MsR0FBRSxFQUFHLElBQUksSUFBSWtkLEVBQUVwcEIsT0FBT2lpQixlQUFlLEdBQUcsVUFBVSxDQUFDN2UsSUFBSSxXQUFXOEksR0FBRSxLQUFNd2dDLEVBQUVqOUIsaUJBQWlCLHNCQUFzQixLQUFLMlosR0FBRyxNQUFNbGQsSUFBSSxPQUFPQSxFQUEzSixHQUFnSzhrQyxTQUFTLG1CQUFtQnRFLElBQThLNXlCLEVBQUUsQ0FBQ20zQixXQUFXLENBQUMvdUIsY0FBYSxJQUFLd2UsRUFBRTE5QixVQUFVaWxCLEdBQUcsU0FBUy9iLEVBQUVrZCxFQUFFaGdCLEdBQUcsSUFBSXhILEVBQUVsQyxLQUFLLEdBQUcsbUJBQW1CMHBCLEVBQUUsT0FBT3huQixFQUFFLElBQUk4K0IsRUFBRXQzQixFQUFFLFVBQVUsT0FBTyxPQUFPOEMsRUFBRWxGLE1BQU0sS0FBS2lvQyxRQUFRLFNBQVMvaUMsR0FBR3RLLEVBQUVzdEMsZ0JBQWdCaGpDLEtBQUt0SyxFQUFFc3RDLGdCQUFnQmhqQyxHQUFHLElBQUl0SyxFQUFFc3RDLGdCQUFnQmhqQyxHQUFHdzBCLEdBQUd0WCxLQUFLeG5CLEdBQUc4K0IsRUFBRTE5QixVQUFVK1osS0FBSyxTQUFTbmIsRUFBRTgrQixFQUFFeDBCLEdBQUcsSUFBSWdoQyxFQUFFeHRDLEtBQUssTUFBRyxtQkFBbUJnaEMsRUFBU3dNLEVBQVNBLEVBQUVqbEIsR0FBR3JtQixFQUFFLFNBQVNzSyxJQUFJLElBQUksSUFBSWtkLEVBQUUsR0FBR2hnQixFQUFFckYsVUFBVWhCLE9BQU9xRyxLQUFLZ2dCLEVBQUVoZ0IsR0FBR3JGLFVBQVVxRixHQUFHczNCLEVBQUVuZ0MsTUFBTTJzQyxFQUFFOWpCLEdBQUc4akIsRUFBRTVrQixJQUFJMW1CLEVBQUVzSyxJQUFJQSxJQUFJdzBCLEVBQUUxOUIsVUFBVXNsQixJQUFJLFNBQVNwYyxFQUFFdEssR0FBRyxJQUFJOCtCLEVBQUVoaEMsS0FBSyxPQUFPZ2hDLEVBQUV3TyxpQkFBaUJoakMsRUFBRWxGLE1BQU0sS0FBS2lvQyxRQUFRLFNBQVM3bEMsUUFBRyxJQUFTeEgsRUFBRTgrQixFQUFFd08sZ0JBQWdCOWxDLEdBQUcsR0FBR3MzQixFQUFFd08sZ0JBQWdCOWxDLEdBQUc2bEMsUUFBUSxTQUFTL2lDLEVBQUVrZCxHQUFHbGQsSUFBSXRLLEdBQUc4K0IsRUFBRXdPLGdCQUFnQjlsQyxHQUFHekUsT0FBT3lrQixFQUFFLE9BQU9zWCxHQUFHQSxFQUFFMTlCLFVBQVVrdUMsS0FBSyxXQUFXLElBQUksSUFBSWhsQyxFQUFFLEdBQUdrZCxFQUFFcmxCLFVBQVVoQixPQUFPcW1CLEtBQUtsZCxFQUFFa2QsR0FBR3JsQixVQUFVcWxCLEdBQUcsSUFBSWhnQixFQUFFeEgsRUFBRTgrQixFQUFFd00sRUFBRXh0QyxLQUFLLE9BQU93dEMsRUFBRWdDLGtCQUEyRnhPLEVBQXpFLGlCQUFpQngwQixFQUFFLElBQUk3RyxNQUFNQyxRQUFRNEcsRUFBRSxLQUFLOUMsRUFBRThDLEVBQUUsR0FBR3RLLEVBQUVzSyxFQUFFaE0sTUFBTSxFQUFFZ00sRUFBRW5KLFFBQVVtcUMsSUFBSTlqQyxFQUFFOEMsRUFBRSxHQUFHaWQsT0FBT3ZuQixFQUFFc0ssRUFBRSxHQUFHa1csS0FBT2xXLEVBQUUsR0FBR3ZKLFNBQVN1cUMsSUFBSTduQyxNQUFNQyxRQUFROEQsR0FBR0EsRUFBRUEsRUFBRXBDLE1BQU0sTUFBTWlvQyxRQUFRLFNBQVMvaUMsR0FBRyxHQUFHZ2hDLEVBQUVnQyxpQkFBaUJoQyxFQUFFZ0MsZ0JBQWdCaGpDLEdBQUcsQ0FBQyxJQUFJa2QsRUFBRSxHQUFHOGpCLEVBQUVnQyxnQkFBZ0JoakMsR0FBRytpQyxRQUFRLFNBQVMvaUMsR0FBR2tkLEVBQUU1b0IsS0FBSzBMLEtBQUtrZCxFQUFFNmxCLFFBQVEsU0FBUy9pQyxHQUFHQSxFQUFFM0wsTUFBTW1nQyxFQUFFOStCLFNBQVNzckMsR0FBR3hNLEVBQUUxOUIsVUFBVW11QyxpQkFBaUIsU0FBUy9uQyxHQUFHLElBQUl4SCxFQUFFbEMsS0FBS2tDLEVBQUV3dkMsU0FBU3B4QyxPQUFPME4sS0FBSzlMLEVBQUV3dkMsU0FBU25DLFFBQVEsU0FBUy9pQyxHQUFHLElBQUlrZCxFQUFFeG5CLEVBQUV3dkMsUUFBUWxsQyxHQUFHa2QsRUFBRXFnQixRQUFRMEYsRUFBRXZxQyxPQUFPd0UsRUFBRWdnQixFQUFFcWdCLFdBQVcvSSxFQUFFMTlCLFVBQVVxdUMsV0FBVyxTQUFTenZDLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxJQUFJLElBQUk4K0IsRUFBRWhoQyxLQUFLZ2hDLEVBQUUwUSxTQUFTcHhDLE9BQU8wTixLQUFLZ3pCLEVBQUUwUSxTQUFTbkMsUUFBUSxTQUFTL2lDLEdBQUcsSUFBSTlDLEVBQUVzM0IsRUFBRTBRLFFBQVFsbEMsR0FBR2tkLEVBQUV4bkIsRUFBRXNLLElBQUksR0FBRzlDLEVBQUVrb0MsVUFBVXR4QyxPQUFPME4sS0FBS3RFLEVBQUVrb0MsVUFBVXJDLFFBQVEsU0FBUy9pQyxHQUFHLElBQUlrZCxFQUFFaGdCLEVBQUVrb0MsU0FBU3BsQyxHQUFHdzBCLEVBQUV4MEIsR0FBRyxtQkFBbUJrZCxFQUFFQSxFQUFFcVIsS0FBS2lHLEdBQUd0WCxJQUFJaGdCLEVBQUU2ZSxJQUFJeVksRUFBRXpZLElBQUlqb0IsT0FBTzBOLEtBQUt0RSxFQUFFNmUsSUFBSWduQixRQUFRLFNBQVMvaUMsR0FBR3cwQixFQUFFelksR0FBRy9iLEVBQUU5QyxFQUFFNmUsR0FBRy9iLE1BQU05QyxFQUFFNFksUUFBUTVZLEVBQUU0WSxPQUFPeVksS0FBS2lHLEVBQWR0M0IsQ0FBaUJnZ0IsTUFBTXRQLEVBQUVtM0IsV0FBVzl1QixJQUFJLFNBQVNqVyxHQUFHeE0sS0FBSzZ4QyxLQUFLN3hDLEtBQUs2eEMsSUFBSXJsQyxJQUFJdzBCLEVBQUU4USxjQUFjLFNBQVNwb0IsR0FBRyxJQUFJLElBQUlsZCxFQUFFLEdBQUc5QyxFQUFFckYsVUFBVWhCLE9BQU8sRUFBRSxFQUFFcUcsS0FBSzhDLEVBQUU5QyxHQUFHckYsVUFBVXFGLEVBQUUsR0FBRyxJQUFJeEgsRUFBRWxDLEtBQUtrQyxFQUFFb0IsVUFBVW91QyxVQUFVeHZDLEVBQUVvQixVQUFVb3VDLFFBQVEsSUFBSSxJQUFJMVEsRUFBRXRYLEVBQUV0a0IsTUFBTTlFLE9BQU8wTixLQUFLOUwsRUFBRW9CLFVBQVVvdUMsU0FBU3J1QyxPQUFPLElBQUlvc0MsRUFBRXBqQixNQUFNLE9BQU9ucUIsRUFBRW9CLFVBQVVvdUMsUUFBUTFRLEdBQUd0WCxHQUFHcGpCLE9BQU9oRyxPQUFPME4sS0FBSzBiLEVBQUVwakIsT0FBT2lwQyxRQUFRLFNBQVMvaUMsR0FBR3RLLEVBQUVvQixVQUFVa0osR0FBR2tkLEVBQUVwakIsTUFBTWtHLEtBQUtrZCxFQUFDLFFBQVNwcEIsT0FBTzBOLEtBQUswYixFQUFDLFFBQVM2bEIsUUFBUSxTQUFTL2lDLEdBQUd0SyxFQUFFc0ssR0FBR2tkLEVBQUMsT0FBUWxkLEtBQUtrZCxFQUFFcW9CLFNBQVNyb0IsRUFBRXFvQixRQUFRbHhDLE1BQU1xQixFQUFFc0ssR0FBR3RLLEdBQUc4K0IsRUFBRTZRLElBQUksU0FBU3JsQyxHQUFHLElBQUksSUFBSWtkLEVBQUUsR0FBR2hnQixFQUFFckYsVUFBVWhCLE9BQU8sRUFBRSxFQUFFcUcsS0FBS2dnQixFQUFFaGdCLEdBQUdyRixVQUFVcUYsRUFBRSxHQUFHLElBQUl4SCxFQUFFbEMsS0FBSyxPQUFPMkYsTUFBTUMsUUFBUTRHLElBQUlBLEVBQUUraUMsUUFBUSxTQUFTL2lDLEdBQUcsT0FBT3RLLEVBQUU0dkMsY0FBY3RsQyxLQUFLdEssR0FBR0EsRUFBRTR2QyxjQUFjanhDLE1BQU1xQixFQUFFLENBQUNzSyxHQUFHNUwsT0FBTzhvQixLQUFLcHBCLE9BQU8weEMsaUJBQWlCaFIsRUFBRTVtQixHQUFHLElBQUlxekIsRUFBRSxDQUFDd0UsV0FBVyxXQUFXLElBQUl6bEMsRUFBRWtkLEVBQUVoZ0IsRUFBRTFKLEtBQUtrQyxFQUFFd0gsRUFBRXdvQyxJQUFJMWxDLE9BQUUsSUFBUzlDLEVBQUVxZ0MsT0FBTzNYLE1BQU0xb0IsRUFBRXFnQyxPQUFPM1gsTUFBTWx3QixFQUFFLEdBQUdpd0MsWUFBWXpvQixPQUFFLElBQVNoZ0IsRUFBRXFnQyxPQUFPbFcsT0FBT25xQixFQUFFcWdDLE9BQU9sVyxPQUFPM3hCLEVBQUUsR0FBR2t3QyxhQUFhLElBQUk1bEMsR0FBRzlDLEVBQUUyb0MsZ0JBQWdCLElBQUkzb0IsR0FBR2hnQixFQUFFNG9DLGVBQWU5bEMsRUFBRUEsRUFBRXNuQixTQUFTNXhCLEVBQUV3aUIsSUFBSSxnQkFBZ0IsSUFBSW9QLFNBQVM1eEIsRUFBRXdpQixJQUFJLGlCQUFpQixJQUFJZ0YsRUFBRUEsRUFBRW9LLFNBQVM1eEIsRUFBRXdpQixJQUFJLGVBQWUsSUFBSW9QLFNBQVM1eEIsRUFBRXdpQixJQUFJLGtCQUFrQixJQUFJK3FCLEVBQUV2cUMsT0FBT3dFLEVBQUUsQ0FBQzBvQixNQUFNNWxCLEVBQUVxbkIsT0FBT25LLEVBQUU2b0IsS0FBSzdvQyxFQUFFMm9DLGVBQWU3bEMsRUFBRWtkLE1BQU04b0IsYUFBYSxXQUFXLElBQUlobUMsRUFBRXhNLEtBQUswcEIsRUFBRWxkLEVBQUV1OUIsT0FBT3JnQyxFQUFFOEMsRUFBRWltQyxXQUFXdndDLEVBQUVzSyxFQUFFK2xDLEtBQUt2UixFQUFFeDBCLEVBQUVrbUMsYUFBYWxGLEVBQUVoaEMsRUFBRW1tQyxTQUFTdjRCLEVBQUU1TixFQUFFb21DLFNBQVNscEIsRUFBRWtwQixRQUFRbjlCLFFBQVFnNEIsRUFBRXJ6QixFQUFFNU4sRUFBRW9tQyxRQUFRQyxPQUFPeHZDLE9BQU9tSixFQUFFcW1DLE9BQU94dkMsT0FBTytYLEVBQUUxUixFQUFFcVIsU0FBUyxJQUFJdk8sRUFBRXU5QixPQUFPK0ksWUFBWTFFLEVBQUVoMEIsRUFBRTVOLEVBQUVvbUMsUUFBUUMsT0FBT3h2QyxPQUFPK1gsRUFBRS9YLE9BQU95MUIsRUFBRSxHQUFHdVYsRUFBRSxHQUFHQyxFQUFFLEdBQUdDLEVBQUU3a0IsRUFBRXFwQixtQkFBbUIsbUJBQW1CeEUsSUFBSUEsRUFBRTdrQixFQUFFcXBCLG1CQUFtQnB5QyxLQUFLNkwsSUFBSSxJQUFJNFAsRUFBRXNOLEVBQUVzcEIsa0JBQWtCLG1CQUFtQjUyQixJQUFJQSxFQUFFc04sRUFBRXNwQixrQkFBa0JyeUMsS0FBSzZMLElBQUksSUFBSW9nQyxFQUFFcGdDLEVBQUV5bUMsU0FBUzV2QyxPQUFPc0osRUFBRUgsRUFBRXltQyxTQUFTNXZDLE9BQU82dkMsRUFBRXhwQixFQUFFeXBCLGFBQWF4cEMsR0FBRzRrQyxFQUFFMXVDLEVBQUUsRUFBRXV6QyxFQUFFLEVBQUUsUUFBRyxJQUFTbHhDLEVBQUUsQ0FBQyxJQUFJbXhDLEVBQUVDLEVBQUUsaUJBQWlCSixHQUFHLEdBQUdBLEVBQUVueUMsUUFBUSxPQUFPbXlDLEVBQUV6Z0IsV0FBV3lnQixFQUFFanRDLFFBQVEsSUFBSSxLQUFLLElBQUkvRCxHQUFHc0ssRUFBRSttQyxhQUFhTCxFQUFFbFMsRUFBRTVsQixFQUFFc0osSUFBSSxDQUFDd04sV0FBVyxHQUFHc2hCLFVBQVUsS0FBS3A0QixFQUFFc0osSUFBSSxDQUFDK3VCLFlBQVksR0FBR0MsYUFBYSxLQUFLLEVBQUVocUIsRUFBRWlxQixrQkFBa0JOLEVBQUV0dEMsS0FBSzZ0QyxNQUFNeEYsRUFBRTFrQixFQUFFaXFCLG1CQUFtQnZGLEVBQUU1aEMsRUFBRXU5QixPQUFPNEosZ0JBQWdCdkYsRUFBRXJvQyxLQUFLMHZCLEtBQUsyWSxFQUFFMWtCLEVBQUVpcUIsaUJBQWlCanFCLEVBQUVpcUIsZ0JBQWdCLFNBQVNqcUIsRUFBRW1xQixlQUFlLFFBQVFucUIsRUFBRW9xQixzQkFBc0JULEVBQUV0dEMsS0FBS2l2QixJQUFJcWUsRUFBRTNwQixFQUFFbXFCLGNBQWNucUIsRUFBRWlxQixtQkFBbUIsSUFBSSxJQUFJSSxFQUFFQyxFQUFFdHFCLEVBQUVpcUIsZ0JBQWdCTSxFQUFFWixFQUFFVyxFQUFFRSxFQUFFRCxHQUFHdnFCLEVBQUVpcUIsZ0JBQWdCTSxFQUFFN0YsR0FBRytGLEVBQUUsRUFBRUEsRUFBRS9GLEVBQUUrRixHQUFHLEVBQUUsQ0FBQ2IsRUFBRSxFQUFFLElBQUljLEVBQUVoNUIsRUFBRTdXLEdBQUc0dkMsR0FBRyxHQUFHLEVBQUV6cUIsRUFBRWlxQixnQkFBZ0IsQ0FBQyxJQUFJVSxPQUFFLEVBQU83SCxPQUFFLEVBQU9lLE9BQUUsRUFBTyxXQUFXN2pCLEVBQUVvcUIscUJBQXFCdkcsRUFBRTRHLEdBQUczSCxFQUFFem1DLEtBQUs2dEMsTUFBTU8sRUFBRUgsSUFBSUEsR0FBR0UsRUFBRTFILEdBQUdBLElBQUkwSCxHQUFHM0csSUFBSXlHLEVBQUUsSUFBSUEsSUFBSXpHLEdBQUcsS0FBS0EsRUFBRSxFQUFFZixHQUFHLEdBQUc2SCxFQUFFN0gsRUFBRWUsRUFBRThGLEVBQUVXLEVBQUVJLEVBQUUxdkIsSUFBSSxDQUFDNHZCLDRCQUE0QkQsRUFBRUUseUJBQXlCRixFQUFFRyxpQkFBaUJILEVBQUVJLGdCQUFnQkosRUFBRXRkLE1BQU1zZCxLQUFLN0gsRUFBRTJILEdBQUc1RyxFQUFFeG5DLEtBQUs2dEMsTUFBTU8sRUFBRUYsSUFBSUEsRUFBRUcsRUFBRTF2QixJQUFJLFdBQVdsWSxFQUFFNmxDLGVBQWUsTUFBTSxRQUFRLElBQUk5RSxHQUFHN2pCLEVBQUV5cEIsY0FBY3pwQixFQUFFeXBCLGFBQWEsTUFBTXJoQyxLQUFLLHFCQUFxQjA2QixHQUFHMTZCLEtBQUssa0JBQWtCeTdCLEdBQUcsR0FBRyxTQUFTNkcsRUFBRTF2QixJQUFJLFdBQVcsQ0FBQyxHQUFHLFNBQVNnRixFQUFFbXFCLGNBQWMsQ0FBQyxJQUFJYSxFQUFFMUgsRUFBRXBiLGlCQUFpQndpQixFQUFFLEdBQUcsTUFBTU8sRUFBRVAsRUFBRSxHQUFHNXZCLE1BQU1zcEIsVUFBVThHLEVBQUVSLEVBQUUsR0FBRzV2QixNQUFNdXBCLGdCQUFnQjRHLElBQUlQLEVBQUUsR0FBRzV2QixNQUFNc3BCLFVBQVUsUUFBUThHLElBQUlSLEVBQUUsR0FBRzV2QixNQUFNdXBCLGdCQUFnQixRQUFRdUYsRUFBRTltQyxFQUFFNmxDLGVBQWUrQixFQUFFLEdBQUc1Yyx3QkFBd0JwRixNQUFNSyxXQUFXaWlCLEVBQUU1aEIsaUJBQWlCLGdCQUFnQkwsV0FBV2lpQixFQUFFNWhCLGlCQUFpQixpQkFBaUJzaEIsRUFBRSxHQUFHNWMsd0JBQXdCM0QsT0FBT3BCLFdBQVdpaUIsRUFBRTVoQixpQkFBaUIsZUFBZUwsV0FBV2lpQixFQUFFNWhCLGlCQUFpQixrQkFBa0I2aEIsSUFBSVAsRUFBRSxHQUFHNXZCLE1BQU1zcEIsVUFBVTZHLEdBQUdDLElBQUlSLEVBQUUsR0FBRzV2QixNQUFNdXBCLGdCQUFnQjZHLEdBQUdsckIsRUFBRW1yQixlQUFldkIsRUFBRXZ0QyxLQUFLNnRDLE1BQU1OLFNBQVNBLEdBQUdweEMsR0FBR3duQixFQUFFbXFCLGNBQWMsR0FBR1gsR0FBR3hwQixFQUFFbXFCLGNBQWNucUIsRUFBRW1yQixlQUFldkIsRUFBRXZ0QyxLQUFLNnRDLE1BQU1OLElBQUlsNEIsRUFBRSs0QixLQUFLM25DLEVBQUU2bEMsZUFBZWozQixFQUFFKzRCLEdBQUczdkIsTUFBTTROLE1BQU1raEIsRUFBRSxLQUFLbDRCLEVBQUUrNEIsR0FBRzN2QixNQUFNcVAsT0FBT3lmLEVBQUUsTUFBTWw0QixFQUFFKzRCLEtBQUsvNEIsRUFBRSs0QixHQUFHVyxnQkFBZ0J4QixHQUFHaEYsRUFBRXh0QyxLQUFLd3lDLEdBQUc1cEIsRUFBRXFyQixnQkFBZ0JwckMsRUFBRUEsRUFBRTJwQyxFQUFFLEVBQUV6ekMsRUFBRSxFQUFFcXpDLEVBQUUsSUFBSXJ6QyxHQUFHLElBQUlzMEMsSUFBSXhxQyxFQUFFQSxFQUFFekgsRUFBRSxFQUFFZ3hDLEdBQUcsSUFBSWlCLElBQUl4cUMsRUFBRUEsRUFBRXpILEVBQUUsRUFBRWd4QyxHQUFHbnRDLEtBQUtpdkMsSUFBSXJyQyxHQUFHLE9BQU9BLEVBQUUsR0FBRytmLEVBQUVtckIsZUFBZWxyQyxFQUFFNUQsS0FBSzZ0QyxNQUFNanFDLElBQUl5cEMsRUFBRTFwQixFQUFFdXJCLGdCQUFnQixHQUFHbmMsRUFBRWg0QixLQUFLNkksR0FBRzBrQyxFQUFFdnRDLEtBQUs2SSxLQUFLK2YsRUFBRW1yQixlQUFlbHJDLEVBQUU1RCxLQUFLNnRDLE1BQU1qcUMsSUFBSXlwQyxFQUFFMXBCLEVBQUV1ckIsZ0JBQWdCLEdBQUduYyxFQUFFaDRCLEtBQUs2SSxHQUFHMGtDLEVBQUV2dEMsS0FBSzZJLEdBQUdBLEVBQUVBLEVBQUUycEMsRUFBRUosR0FBRzFtQyxFQUFFK21DLGFBQWFELEVBQUVKLEVBQUVyekMsRUFBRXl6QyxFQUFFRixHQUFHLEdBQUcsR0FBRzVtQyxFQUFFK21DLFlBQVl4dEMsS0FBS2l2QixJQUFJeG9CLEVBQUUrbUMsWUFBWXJ4QyxHQUFHa2EsRUFBRTRrQixHQUFHd00sSUFBSSxVQUFVOWpCLEVBQUV3ckIsUUFBUSxjQUFjeHJCLEVBQUV3ckIsU0FBU3hyQyxFQUFFZ2IsSUFBSSxDQUFDME4sTUFBTTVsQixFQUFFK21DLFlBQVk3cEIsRUFBRXlwQixhQUFhLE9BQU8zQyxFQUFFVyxVQUFVem5CLEVBQUV5ckIsaUJBQWlCM29DLEVBQUU2bEMsZUFBZTNvQyxFQUFFZ2IsSUFBSSxDQUFDME4sTUFBTTVsQixFQUFFK21DLFlBQVk3cEIsRUFBRXlwQixhQUFhLE9BQU96cEMsRUFBRWdiLElBQUksQ0FBQ21QLE9BQU9ybkIsRUFBRSttQyxZQUFZN3BCLEVBQUV5cEIsYUFBYSxRQUFRLEVBQUV6cEIsRUFBRWlxQixrQkFBa0JubkMsRUFBRSttQyxhQUFhRCxFQUFFNXBCLEVBQUV5cEIsY0FBY0UsRUFBRTdtQyxFQUFFK21DLFlBQVl4dEMsS0FBSzB2QixLQUFLanBCLEVBQUUrbUMsWUFBWTdwQixFQUFFaXFCLGlCQUFpQmpxQixFQUFFeXBCLGFBQWEzbUMsRUFBRTZsQyxlQUFlM29DLEVBQUVnYixJQUFJLENBQUMwTixNQUFNNWxCLEVBQUUrbUMsWUFBWTdwQixFQUFFeXBCLGFBQWEsT0FBT3pwQyxFQUFFZ2IsSUFBSSxDQUFDbVAsT0FBT3JuQixFQUFFK21DLFlBQVk3cEIsRUFBRXlwQixhQUFhLE9BQU96cEIsRUFBRXFyQixnQkFBZ0IsQ0FBQ2hCLEVBQUUsR0FBRyxJQUFJLElBQUlxQixFQUFFLEVBQUVBLEVBQUV0YyxFQUFFejFCLE9BQU8reEMsR0FBRyxFQUFFLENBQUMsSUFBSUMsRUFBRXZjLEVBQUVzYyxHQUFHMXJCLEVBQUVtckIsZUFBZVEsRUFBRXR2QyxLQUFLNnRDLE1BQU15QixJQUFJdmMsRUFBRXNjLEdBQUc1b0MsRUFBRSttQyxZQUFZemEsRUFBRSxJQUFJaWIsRUFBRWp6QyxLQUFLdTBDLEdBQUd2YyxFQUFFaWIsRUFBRSxJQUFJcnFCLEVBQUVxckIsZUFBZSxDQUFDaEIsRUFBRSxHQUFHLElBQUksSUFBSXVCLEVBQUUsRUFBRUEsRUFBRXhjLEVBQUV6MUIsT0FBT2l5QyxHQUFHLEVBQUUsQ0FBQyxJQUFJQyxFQUFFemMsRUFBRXdjLEdBQUc1ckIsRUFBRW1yQixlQUFlVSxFQUFFeHZDLEtBQUs2dEMsTUFBTTJCLElBQUl6YyxFQUFFd2MsSUFBSTlvQyxFQUFFK21DLFlBQVlyeEMsR0FBRzZ4QyxFQUFFanpDLEtBQUt5MEMsR0FBR3pjLEVBQUVpYixFQUFFLEVBQUVodUMsS0FBSzZ0QyxNQUFNcG5DLEVBQUUrbUMsWUFBWXJ4QyxHQUFHNkQsS0FBSzZ0QyxNQUFNOWEsRUFBRUEsRUFBRXoxQixPQUFPLEtBQUt5MUIsRUFBRWg0QixLQUFLMEwsRUFBRSttQyxZQUFZcnhDLEdBQUcsSUFBSTQyQixFQUFFejFCLFNBQVN5MUIsRUFBRSxDQUFDLElBQUksSUFBSXBQLEVBQUV5cEIsZUFBZTNtQyxFQUFFNmxDLGVBQWVyUixFQUFFNWxCLEVBQUVzSixJQUFJLENBQUN3TixXQUFXZ2hCLEVBQUUsT0FBTzkzQixFQUFFc0osSUFBSSxDQUFDK3VCLFlBQVlQLEVBQUUsT0FBTzkzQixFQUFFc0osSUFBSSxDQUFDZ3ZCLGFBQWFSLEVBQUUsUUFBUXpELEVBQUV2cUMsT0FBT3NILEVBQUUsQ0FBQ3FtQyxPQUFPejNCLEVBQUU2M0IsU0FBU25hLEVBQUUwYyxXQUFXbkgsRUFBRW9ILGdCQUFnQm5ILElBQUlGLElBQUlYLEdBQUdqaEMsRUFBRWdsQyxLQUFLLHNCQUFzQjFZLEVBQUV6MUIsU0FBU3VwQyxJQUFJcGdDLEVBQUV1OUIsT0FBTzJMLGVBQWVscEMsRUFBRW1wQyxnQkFBZ0JucEMsRUFBRWdsQyxLQUFLLHlCQUF5Qm5ELEVBQUVockMsU0FBU3NKLEdBQUdILEVBQUVnbEMsS0FBSywyQkFBMkI5bkIsRUFBRWtzQixxQkFBcUJsc0IsRUFBRW1zQix3QkFBd0JycEMsRUFBRXNwQyx1QkFBdUJDLGlCQUFpQixTQUFTdnBDLEdBQUcsSUFBSWtkLEVBQUVoZ0IsRUFBRTFKLEtBQUtrQyxFQUFFLEdBQUc4K0IsRUFBRSxFQUFFLEdBQUcsaUJBQWlCeDBCLEVBQUU5QyxFQUFFc3NDLGNBQWN4cEMsSUFBRyxJQUFLQSxHQUFHOUMsRUFBRXNzQyxjQUFjdHNDLEVBQUVxZ0MsT0FBT2hPLE9BQU8sU0FBU3J5QixFQUFFcWdDLE9BQU84SixlQUFlLEVBQUVucUMsRUFBRXFnQyxPQUFPOEosY0FBYyxJQUFJbnFCLEVBQUUsRUFBRUEsRUFBRTNqQixLQUFLMHZCLEtBQUsvckIsRUFBRXFnQyxPQUFPOEosZUFBZW5xQixHQUFHLEVBQUUsQ0FBQyxJQUFJOGpCLEVBQUU5akMsRUFBRXVzQyxZQUFZdnNCLEVBQUUsR0FBRzhqQixFQUFFOWpDLEVBQUVtcEMsT0FBT3h2QyxPQUFPLE1BQU1uQixFQUFFcEIsS0FBSzRJLEVBQUVtcEMsT0FBT3R1QyxHQUFHaXBDLEdBQUcsU0FBU3RyQyxFQUFFcEIsS0FBSzRJLEVBQUVtcEMsT0FBT3R1QyxHQUFHbUYsRUFBRXVzQyxhQUFhLElBQUksSUFBSXZzQixFQUFFLEVBQUVBLEVBQUV4bkIsRUFBRW1CLE9BQU9xbUIsR0FBRyxFQUFFLFFBQUcsSUFBU3huQixFQUFFd25CLEdBQUcsQ0FBQyxJQUFJdFAsRUFBRWxZLEVBQUV3bkIsR0FBR2dlLGFBQWExRyxFQUFFQSxFQUFFNW1CLEVBQUVBLEVBQUU0bUIsRUFBRUEsR0FBR3QzQixFQUFFK29DLFdBQVcvdEIsSUFBSSxTQUFTc2MsRUFBRSxPQUFPOFUsbUJBQW1CLFdBQVcsSUFBSSxJQUFJdHBDLEVBQUV4TSxLQUFLNnlDLE9BQU9ucEIsRUFBRSxFQUFFQSxFQUFFbGQsRUFBRW5KLE9BQU9xbUIsR0FBRyxFQUFFbGQsRUFBRWtkLEdBQUd3c0Isa0JBQWtCbDJDLEtBQUtxeUMsZUFBZTdsQyxFQUFFa2QsR0FBR3lzQixXQUFXM3BDLEVBQUVrZCxHQUFHMHNCLFdBQVdDLHFCQUFxQixTQUFTN3BDLFFBQUcsSUFBU0EsSUFBSUEsRUFBRXhNLE1BQU1BLEtBQUtzMkMsV0FBVyxHQUFHLElBQUk1c0IsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFcWdCLE9BQU83bkMsRUFBRXduQixFQUFFbXBCLE9BQU83UixFQUFFdFgsRUFBRWdwQixhQUFhLEdBQUcsSUFBSXh3QyxFQUFFbUIsT0FBTyxNQUFDLElBQVNuQixFQUFFLEdBQUdnMEMsbUJBQW1CeHNCLEVBQUVvc0IscUJBQXFCLElBQUl0SSxHQUFHaGhDLEVBQUV3MEIsSUFBSXdNLEVBQUVoaEMsR0FBR3RLLEVBQUU2OEIsWUFBWXIxQixFQUFFNnNDLG1CQUFtQixJQUFJLElBQUluOEIsRUFBRSxFQUFFQSxFQUFFbFksRUFBRW1CLE9BQU8rVyxHQUFHLEVBQUUsQ0FBQyxJQUFJcXpCLEVBQUV2ckMsRUFBRWtZLEdBQUdnQixHQUFHb3lCLEdBQUc5akMsRUFBRXFyQyxlQUFlcnJCLEVBQUU4c0IsZUFBZSxHQUFHL0ksRUFBRXlJLG9CQUFvQnpJLEVBQUVxSCxnQkFBZ0JwckMsRUFBRXlwQyxjQUFjLEdBQUd6cEMsRUFBRW1zQyxzQkFBc0IsQ0FBQyxJQUFJekgsSUFBSVosRUFBRUMsRUFBRXlJLG1CQUFtQnBkLEVBQUVzVixFQUFFMWtCLEVBQUUrckIsZ0JBQWdCcjdCLElBQUksR0FBR2cwQixHQUFHQSxFQUFFMWtCLEVBQUU2b0IsTUFBTSxFQUFFelosR0FBR0EsR0FBR3BQLEVBQUU2b0IsTUFBTW5FLEdBQUcsR0FBR3RWLEdBQUdwUCxFQUFFNm9CLE9BQU9yd0MsRUFBRXFDLEdBQUc2VixHQUFHc2tCLFNBQVNoMUIsRUFBRTZzQyxtQkFBbUI5SSxFQUFFN3VCLFNBQVNvaUIsR0FBRzVsQixFQUFFQSxLQUFLcTdCLGVBQWUsU0FBU2pxQyxRQUFHLElBQVNBLElBQUlBLEVBQUV4TSxNQUFNQSxLQUFLczJDLFdBQVcsR0FBRyxJQUFJNXNCLEVBQUUxcEIsS0FBSzBKLEVBQUVnZ0IsRUFBRXFnQixPQUFPN25DLEVBQUV3bkIsRUFBRWd0QixlQUFlaHRCLEVBQUU4c0IsZUFBZXhWLEVBQUV0WCxFQUFFOUssU0FBUzR1QixFQUFFOWpCLEVBQUVpdEIsWUFBWXY4QixFQUFFc1AsRUFBRWt0QixNQUFNbkosRUFBRUQsRUFBRXB5QixFQUFFaEIsRUFBUUEsRUFBTixHQUFJbFksRUFBSXNyQyxJQUFJeE0sRUFBRSxJQUFJd00sR0FBR3hNLEdBQUd4MEIsRUFBRWtkLEVBQUU4c0IsZ0JBQWdCdDBDLElBQUksRUFBSSxHQUFHOCtCLEdBQUd5TyxFQUFFdnFDLE9BQU93a0IsRUFBRSxDQUFDOUssU0FBU29pQixFQUFFMlYsWUFBWW5KLEVBQUVvSixNQUFNeDhCLEtBQUsxUSxFQUFFa3NDLHFCQUFxQmxzQyxFQUFFbXNDLHdCQUF3Qm5zQixFQUFFMnNCLHFCQUFxQjdwQyxHQUFHZ2hDLElBQUlDLEdBQUcvakIsRUFBRThuQixLQUFLLHlCQUF5QnAzQixJQUFJZ0IsR0FBR3NPLEVBQUU4bkIsS0FBSyxvQkFBb0IvRCxJQUFJRCxHQUFHcHlCLElBQUloQixJQUFJc1AsRUFBRThuQixLQUFLLFlBQVk5bkIsRUFBRThuQixLQUFLLFdBQVd4USxJQUFJNlYsb0JBQW9CLFdBQVcsSUFBSXJxQyxFQUFFa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFbXBCLE9BQU8zd0MsRUFBRXduQixFQUFFcWdCLE9BQU8vSSxFQUFFdFgsRUFBRStvQixXQUFXakYsRUFBRTlqQixFQUFFdXNCLFlBQVk3N0IsRUFBRXNQLEVBQUVvdEIsVUFBVXJKLEVBQUUvakIsRUFBRWtwQixTQUFTMXdDLEVBQUUwd0MsUUFBUW45QixRQUFRL0wsRUFBRXExQixZQUFZNzhCLEVBQUU2MEMsaUJBQWlCLElBQUk3MEMsRUFBRTgwQyxlQUFlLElBQUk5MEMsRUFBRSswQyxlQUFlLElBQUkvMEMsRUFBRWcxQywwQkFBMEIsSUFBSWgxQyxFQUFFaTFDLHdCQUF3QixJQUFJajFDLEVBQUVrMUMsMEJBQTBCNXFDLEVBQUVpaEMsRUFBRS9qQixFQUFFK29CLFdBQVdsaUMsS0FBSyxJQUFJck8sRUFBRTR3QyxXQUFXLDZCQUE2QnRGLEVBQUUsTUFBTTlqQyxFQUFFbkYsR0FBR2lwQyxJQUFJOU8sU0FBU3g4QixFQUFFNjBDLGtCQUFrQjcwQyxFQUFFbTFDLE9BQU83cUMsRUFBRTR5QixTQUFTbDlCLEVBQUVvMUMscUJBQXFCdFcsRUFBRWptQixTQUFTLElBQUk3WSxFQUFFNHdDLFdBQVcsU0FBUzV3QyxFQUFFbzFDLG9CQUFvQiw4QkFBOEJsOUIsRUFBRSxNQUFNc2tCLFNBQVN4OEIsRUFBRWcxQywyQkFBMkJsVyxFQUFFam1CLFNBQVMsSUFBSTdZLEVBQUU0d0MsV0FBVyxJQUFJNXdDLEVBQUVvMUMsb0JBQW9CLDZCQUE2Qmw5QixFQUFFLE1BQU1za0IsU0FBU3g4QixFQUFFZzFDLDRCQUE0QixJQUFJOTdCLEVBQUU1TyxFQUFFb1AsUUFBUSxJQUFJMVosRUFBRTR3QyxZQUFZdnVDLEdBQUcsR0FBR202QixTQUFTeDhCLEVBQUU4MEMsZ0JBQWdCOTBDLEVBQUVtMUMsTUFBTSxJQUFJajhCLEVBQUUvWCxTQUFTK1gsRUFBRTFSLEVBQUVuRixHQUFHLElBQUltNkIsU0FBU3g4QixFQUFFODBDLGdCQUFnQixJQUFJNUksRUFBRTVoQyxFQUFFK08sUUFBUSxJQUFJclosRUFBRTR3QyxZQUFZdnVDLEdBQUcsR0FBR202QixTQUFTeDhCLEVBQUUrMEMsZ0JBQWdCLzBDLEVBQUVtMUMsTUFBTSxJQUFJakosRUFBRS9xQyxTQUFTK3FDLEVBQUUxa0MsRUFBRW5GLElBQUksSUFBSW02QixTQUFTeDhCLEVBQUUrMEMsZ0JBQWdCLzBDLEVBQUVtMUMsT0FBT2o4QixFQUFFZ2tCLFNBQVNsOUIsRUFBRW8xQyxxQkFBcUJ0VyxFQUFFam1CLFNBQVMsSUFBSTdZLEVBQUU0d0MsV0FBVyxTQUFTNXdDLEVBQUVvMUMsb0JBQW9CLDhCQUE4Qmw4QixFQUFFdEosS0FBSywyQkFBMkIsTUFBTTRzQixTQUFTeDhCLEVBQUVpMUMseUJBQXlCblcsRUFBRWptQixTQUFTLElBQUk3WSxFQUFFNHdDLFdBQVcsSUFBSTV3QyxFQUFFbzFDLG9CQUFvQiw2QkFBNkJsOEIsRUFBRXRKLEtBQUssMkJBQTJCLE1BQU00c0IsU0FBU3g4QixFQUFFaTFDLHlCQUF5Qi9JLEVBQUVoUCxTQUFTbDlCLEVBQUVvMUMscUJBQXFCdFcsRUFBRWptQixTQUFTLElBQUk3WSxFQUFFNHdDLFdBQVcsU0FBUzV3QyxFQUFFbzFDLG9CQUFvQiw4QkFBOEJsSixFQUFFdDhCLEtBQUssMkJBQTJCLE1BQU00c0IsU0FBU3g4QixFQUFFazFDLHlCQUF5QnBXLEVBQUVqbUIsU0FBUyxJQUFJN1ksRUFBRTR3QyxXQUFXLElBQUk1d0MsRUFBRW8xQyxvQkFBb0IsNkJBQTZCbEosRUFBRXQ4QixLQUFLLDJCQUEyQixNQUFNNHNCLFNBQVN4OEIsRUFBRWsxQywyQkFBMkJHLGtCQUFrQixTQUFTL3FDLEdBQUcsSUFBSWtkLEVBQUVoZ0IsRUFBRTFKLEtBQUtrQyxFQUFFd0gsRUFBRWdwQyxhQUFhaHBDLEVBQUU0c0MsV0FBVzVzQyxFQUFFNHNDLFVBQVV0VixFQUFFdDNCLEVBQUU4ckMsV0FBV2hJLEVBQUU5akMsRUFBRXVwQyxTQUFTNzRCLEVBQUUxUSxFQUFFcWdDLE9BQU8wRCxFQUFFL2pDLEVBQUV1c0MsWUFBWTc2QixFQUFFMVIsRUFBRW90QyxVQUFVMUksRUFBRTFrQyxFQUFFOHRDLFVBQVUxZSxFQUFFdHNCLEVBQUUsUUFBRyxJQUFTc3NCLEVBQUUsQ0FBQyxJQUFJLElBQUl1VixFQUFFLEVBQUVBLEVBQUVyTixFQUFFMzlCLE9BQU9nckMsR0FBRyxPQUFFLElBQVNyTixFQUFFcU4sRUFBRSxHQUFHbnNDLEdBQUc4K0IsRUFBRXFOLElBQUluc0MsRUFBRTgrQixFQUFFcU4sRUFBRSxJQUFJck4sRUFBRXFOLEVBQUUsR0FBR3JOLEVBQUVxTixJQUFJLEVBQUV2VixFQUFFdVYsRUFBRW5zQyxHQUFHOCtCLEVBQUVxTixJQUFJbnNDLEVBQUU4K0IsRUFBRXFOLEVBQUUsS0FBS3ZWLEVBQUV1VixFQUFFLEdBQUduc0MsR0FBRzgrQixFQUFFcU4sS0FBS3ZWLEVBQUV1VixHQUFHajBCLEVBQUVxOUIsc0JBQXNCM2UsRUFBRSxRQUFHLElBQVNBLEtBQUtBLEVBQUUsR0FBRyxJQUFJcFAsRUFBRSxHQUFHOGpCLEVBQUV6c0MsUUFBUW1CLEdBQUdzckMsRUFBRXpzQyxRQUFRbUIsR0FBRzZELEtBQUs2dEMsTUFBTTlhLEVBQUUxZSxFQUFFNjZCLGtCQUFrQnpILEVBQUVucUMsU0FBU3FtQixFQUFFOGpCLEVBQUVucUMsT0FBTyxHQUFHeTFCLElBQUkyVSxFQUFFLENBQUMsSUFBSWEsRUFBRXhhLFNBQVNwcUIsRUFBRW1wQyxPQUFPdHVDLEdBQUd1MEIsR0FBR2huQixLQUFLLDRCQUE0QmduQixFQUFFLElBQUkyVyxFQUFFdnFDLE9BQU93RSxFQUFFLENBQUM4dEMsVUFBVTl0QixFQUFFb3RCLFVBQVV4SSxFQUFFb0osY0FBY2pLLEVBQUV3SSxZQUFZbmQsSUFBSXB2QixFQUFFOG5DLEtBQUsscUJBQXFCOW5DLEVBQUU4bkMsS0FBSyxtQkFBbUJwMkIsSUFBSWt6QixHQUFHNWtDLEVBQUU4bkMsS0FBSyxtQkFBbUI5bkMsRUFBRThuQyxLQUFLLG9CQUFvQjluQixJQUFJMGtCLElBQUkxa0MsRUFBRTh0QyxVQUFVOXRCLEVBQUVoZ0IsRUFBRThuQyxLQUFLLHFCQUFxQm1HLG1CQUFtQixTQUFTbnJDLEdBQUcsSUFBSWtkLEVBQUUxcEIsS0FBSzBKLEVBQUVnZ0IsRUFBRXFnQixPQUFPN25DLEVBQUVxckMsRUFBRS9nQyxFQUFFaEgsUUFBUTZWLFFBQVEsSUFBSTNSLEVBQUVvcEMsWUFBWSxHQUFHOVIsR0FBRSxFQUFHLEdBQUc5K0IsRUFBRSxJQUFJLElBQUlzckMsRUFBRSxFQUFFQSxFQUFFOWpCLEVBQUVtcEIsT0FBT3h2QyxPQUFPbXFDLEdBQUcsRUFBRTlqQixFQUFFbXBCLE9BQU9yRixLQUFLdHJDLElBQUk4K0IsR0FBRSxHQUFJLElBQUk5K0IsSUFBSTgrQixFQUFFLE9BQU90WCxFQUFFa3VCLGtCQUFhLE9BQVlsdUIsRUFBRW11QixrQkFBYSxHQUFRbnVCLEVBQUVrdUIsYUFBYTExQyxFQUFFd25CLEVBQUVrcEIsU0FBU2xwQixFQUFFcWdCLE9BQU82SSxRQUFRbjlCLFFBQVFpVSxFQUFFbXVCLGFBQWEvakIsU0FBU3laLEVBQUVyckMsR0FBRzRQLEtBQUssMkJBQTJCLElBQUk0WCxFQUFFbXVCLGFBQWF0SyxFQUFFcnJDLEdBQUdvWixRQUFRNVIsRUFBRW91QywwQkFBcUIsSUFBU3B1QixFQUFFbXVCLGNBQWNudUIsRUFBRW11QixlQUFlbnVCLEVBQUV1c0IsYUFBYXZzQixFQUFFb3VCLHdCQUE0QjFKLEVBQUUsQ0FBQ3dCLGFBQWEsU0FBU3BqQyxRQUFHLElBQVNBLElBQUlBLEVBQUV4TSxLQUFLcXlDLGVBQWUsSUFBSSxLQUFLLElBQUkzb0IsRUFBRTFwQixLQUFLK3BDLE9BQU9yZ0MsRUFBRTFKLEtBQUsweUMsYUFBYXh3QyxFQUFFbEMsS0FBS3MyQyxVQUFVdFYsRUFBRWhoQyxLQUFLeXlDLFdBQVcsR0FBRy9vQixFQUFFcXVCLGlCQUFpQixPQUFPcnVDLEdBQUd4SCxFQUFFQSxFQUFFLElBQUlzckMsRUFBRWlDLEVBQUVHLGFBQWE1TyxFQUFFLEdBQUd4MEIsR0FBRyxPQUFPOUMsSUFBSThqQyxHQUFHQSxHQUFHQSxHQUFHLEdBQUd3SyxhQUFhLFNBQVN4ckMsRUFBRWtkLEdBQUcsSUFBSWhnQixFQUFFMUosS0FBS2tDLEVBQUV3SCxFQUFFZ3BDLGFBQWExUixFQUFFdDNCLEVBQUVxZ0MsT0FBT3lELEVBQUU5akMsRUFBRStvQyxXQUFXcjRCLEVBQUUxUSxFQUFFa1YsU0FBUzZ1QixFQUFFLEVBQUVyeUIsRUFBRSxFQUFFMVIsRUFBRTJvQyxlQUFlNUUsRUFBRXZyQyxHQUFHc0ssRUFBRUEsRUFBRTRPLEVBQUU1TyxFQUFFdzBCLEVBQUU2VCxlQUFlcEgsRUFBRTFuQyxLQUFLNnRDLE1BQU1uRyxHQUFHcnlCLEVBQUVyVixLQUFLNnRDLE1BQU14NEIsSUFBSTRsQixFQUFFK1csbUJBQW1CdkgsRUFBRVMsYUFBYXpELEVBQUVNLFVBQVUsZUFBZUwsRUFBRSxPQUFPcnlCLEVBQUUsWUFBWW95QixFQUFFTSxVQUFVLGFBQWFMLEVBQUUsT0FBT3J5QixFQUFFLFFBQVExUixFQUFFdXVDLGtCQUFrQnZ1QyxFQUFFNHNDLFVBQVU1c0MsRUFBRTRzQyxVQUFVNXNDLEVBQUUyb0MsZUFBZTVFLEVBQUVyeUIsRUFBRSxJQUFJZ3pCLEVBQUUxa0MsRUFBRWd0QyxlQUFlaHRDLEVBQUU4c0MsZ0JBQWdCLEdBQUlwSSxFQUFFLEdBQUc1aEMsRUFBRTlDLEVBQUU4c0MsZ0JBQWdCcEksS0FBS2gwQixHQUFHMVEsRUFBRStzQyxlQUFlanFDLEdBQUc5QyxFQUFFOG5DLEtBQUssZUFBZTluQyxFQUFFNHNDLFVBQVU1c0IsSUFBSThzQixhQUFhLFdBQVcsT0FBT3gyQyxLQUFLaXpDLFNBQVMsSUFBSXlELGFBQWEsV0FBVyxPQUFPMTJDLEtBQUtpekMsU0FBU2p6QyxLQUFLaXpDLFNBQVM1dkMsT0FBTyxLQUFpNEJnckMsRUFBRSxDQUFDNkosUUFBUSxTQUFTMXJDLEVBQUVrZCxFQUFFaGdCLEVBQUV4SCxRQUFHLElBQVNzSyxJQUFJQSxFQUFFLFFBQUcsSUFBU2tkLElBQUlBLEVBQUUxcEIsS0FBSytwQyxPQUFPaE8sWUFBTyxJQUFTcnlCLElBQUlBLEdBQUUsR0FBSSxJQUFJczNCLEVBQUVoaEMsS0FBS3d0QyxFQUFFaGhDLEVBQUVnaEMsRUFBRSxJQUFJQSxFQUFFLEdBQUcsSUFBSXB6QixFQUFFNG1CLEVBQUUrSSxPQUFPMEQsRUFBRXpNLEVBQUVpUyxTQUFTNzNCLEVBQUU0bEIsRUFBRXdVLFdBQVdwSCxFQUFFcE4sRUFBRTBXLGNBQWM1ZSxFQUFFa0ksRUFBRWlWLFlBQVk1SCxFQUFFck4sRUFBRTBSLGFBQWEsR0FBRzFSLEVBQUVtWCxXQUFXLzlCLEVBQUVnK0IsK0JBQStCLE9BQU0sRUFBRyxJQUFJOUosRUFBRXZvQyxLQUFLNnRDLE1BQU1wRyxFQUFFcHpCLEVBQUU2NkIsZ0JBQWdCM0csR0FBR2IsRUFBRXBxQyxTQUFTaXJDLEVBQUViLEVBQUVwcUMsT0FBTyxJQUFJeTFCLEdBQUcxZSxFQUFFaStCLGNBQWMsTUFBTWpLLEdBQUcsSUFBSTFrQyxHQUFHczNCLEVBQUV3USxLQUFLLDBCQUEwQixJQUFJakQsRUFBRW55QixHQUFHcXhCLEVBQUVhLEdBQUcsR0FBR3ROLEVBQUV5VixlQUFlcjZCLEdBQUdoQyxFQUFFcTlCLG9CQUFvQixJQUFJLElBQUk3SyxFQUFFLEVBQUVBLEVBQUV4eEIsRUFBRS9YLE9BQU91cEMsR0FBRyxHQUFHN21DLEtBQUs2dEMsTUFBTSxJQUFJeDNCLElBQUlyVyxLQUFLNnRDLE1BQU0sSUFBSXg0QixFQUFFd3hCLE1BQU1ZLEVBQUVaLEdBQUcsR0FBRzVMLEVBQUVzWCxhQUFhOUssSUFBSTFVLEVBQUUsQ0FBQyxJQUFJa0ksRUFBRXVYLGdCQUFnQm44QixFQUFFNGtCLEVBQUVzVixXQUFXbDZCLEVBQUU0a0IsRUFBRXdWLGVBQWUsT0FBTSxFQUFHLElBQUl4VixFQUFFd1gsZ0JBQWdCcDhCLEVBQUU0a0IsRUFBRXNWLFdBQVdsNkIsRUFBRTRrQixFQUFFMFYsaUJBQWlCNWQsR0FBRyxLQUFLMFUsRUFBRSxPQUFNLEVBQUcsT0FBT2UsRUFBRXpWLEVBQUUwVSxFQUFFLE9BQU9BLEVBQUUxVSxFQUFFLE9BQU8sUUFBUXVWLElBQUlqeUIsSUFBSTRrQixFQUFFc1YsWUFBWWpJLEdBQUdqeUIsSUFBSTRrQixFQUFFc1YsV0FBV3RWLEVBQUV1VyxrQkFBa0IvSixHQUFHcHpCLEVBQUVxK0IsWUFBWXpYLEVBQUUrVSxtQkFBbUIvVSxFQUFFNlYsc0JBQXNCLFVBQVV6OEIsRUFBRTg2QixRQUFRbFUsRUFBRWdYLGFBQWE1N0IsR0FBRyxTQUFVbXlCLElBQUl2TixFQUFFMFgsZ0JBQWdCaHZDLEVBQUU2a0MsR0FBR3ZOLEVBQUU2TixjQUFjbmxDLEVBQUU2a0MsS0FBSSxJQUFLLElBQUk3a0IsR0FBRzhtQixFQUFFeEMsWUFBWWhOLEVBQUVnVixjQUFjdHNCLEdBQUdzWCxFQUFFZ1gsYUFBYTU3QixHQUFHNGtCLEVBQUV1VyxrQkFBa0IvSixHQUFHeE0sRUFBRTZWLHNCQUFzQjdWLEVBQUV3USxLQUFLLHdCQUF3QjluQixFQUFFeG5CLEdBQUc4K0IsRUFBRTBYLGdCQUFnQmh2QyxFQUFFNmtDLEdBQUd2TixFQUFFbVgsWUFBWW5YLEVBQUVtWCxXQUFVLEVBQUduWCxFQUFFMlgsZ0NBQWdDM1gsRUFBRTJYLDhCQUE4QixTQUFTbnNDLEdBQUd3MEIsSUFBSUEsRUFBRTRYLFdBQVdwc0MsRUFBRWhILFNBQVN4RixPQUFPZ2hDLEVBQUV5UixXQUFXLEdBQUcxeEIsb0JBQW9CLGdCQUFnQmlnQixFQUFFMlgsK0JBQStCM1gsRUFBRXlSLFdBQVcsR0FBRzF4QixvQkFBb0Isc0JBQXNCaWdCLEVBQUUyWCwrQkFBK0IzWCxFQUFFMlgsOEJBQThCLFlBQVkzWCxFQUFFMlgsOEJBQThCM1gsRUFBRTZOLGNBQWNubEMsRUFBRTZrQyxNQUFNdk4sRUFBRXlSLFdBQVcsR0FBRzFpQyxpQkFBaUIsZ0JBQWdCaXhCLEVBQUUyWCwrQkFBK0IzWCxFQUFFeVIsV0FBVyxHQUFHMWlDLGlCQUFpQixzQkFBc0JpeEIsRUFBRTJYLGtDQUFrQzNYLEVBQUVnVixjQUFjLEdBQUdoVixFQUFFZ1gsYUFBYTU3QixHQUFHNGtCLEVBQUV1VyxrQkFBa0IvSixHQUFHeE0sRUFBRTZWLHNCQUFzQjdWLEVBQUV3USxLQUFLLHdCQUF3QjluQixFQUFFeG5CLEdBQUc4K0IsRUFBRTBYLGdCQUFnQmh2QyxFQUFFNmtDLEdBQUd2TixFQUFFNk4sY0FBY25sQyxFQUFFNmtDLEtBQUksSUFBS3NLLFlBQVksU0FBU3JzQyxFQUFFa2QsRUFBRWhnQixFQUFFeEgsUUFBRyxJQUFTc0ssSUFBSUEsRUFBRSxRQUFHLElBQVNrZCxJQUFJQSxFQUFFMXBCLEtBQUsrcEMsT0FBT2hPLFlBQU8sSUFBU3J5QixJQUFJQSxHQUFFLEdBQUksSUFBSXMzQixFQUFFeDBCLEVBQUUsT0FBT3hNLEtBQUsrcEMsT0FBT3NOLE9BQU9yVyxHQUFHaGhDLEtBQUs4NEMsY0FBYzk0QyxLQUFLazRDLFFBQVFsWCxFQUFFdFgsRUFBRWhnQixFQUFFeEgsSUFBSTYyQyxVQUFVLFNBQVN2c0MsRUFBRWtkLEVBQUVoZ0IsUUFBRyxJQUFTOEMsSUFBSUEsRUFBRXhNLEtBQUsrcEMsT0FBT2hPLFlBQU8sSUFBU3JTLElBQUlBLEdBQUUsR0FBSSxJQUFJeG5CLEVBQUVsQyxLQUFLZ2hDLEVBQUU5K0IsRUFBRTZuQyxPQUFPeUQsRUFBRXRyQyxFQUFFaTJDLFVBQVUsT0FBT25YLEVBQUVxVyxNQUFNN0osSUFBSXRyQyxFQUFFODJDLFVBQVU5MkMsRUFBRSsyQyxZQUFZLzJDLEVBQUV1d0MsV0FBVyxHQUFHeEQsV0FBVy9zQyxFQUFFZzJDLFFBQVFoMkMsRUFBRSt6QyxZQUFZalYsRUFBRWlVLGVBQWV6b0MsRUFBRWtkLEVBQUVoZ0IsSUFBSXhILEVBQUVnMkMsUUFBUWgyQyxFQUFFK3pDLFlBQVlqVixFQUFFaVUsZUFBZXpvQyxFQUFFa2QsRUFBRWhnQixJQUFJd3ZDLFVBQVUsU0FBUzFzQyxFQUFFa2QsRUFBRWhnQixRQUFHLElBQVM4QyxJQUFJQSxFQUFFeE0sS0FBSytwQyxPQUFPaE8sWUFBTyxJQUFTclMsSUFBSUEsR0FBRSxHQUFJLElBQUl4bkIsRUFBRWxDLEtBQUtnaEMsRUFBRTkrQixFQUFFNm5DLE9BQU95RCxFQUFFdHJDLEVBQUVpMkMsVUFBVS85QixFQUFFbFksRUFBRSt3QyxTQUFTeEYsRUFBRXZyQyxFQUFFc3pDLFdBQVdwNkIsRUFBRWxaLEVBQUV3d0MsYUFBYSxHQUFHMVIsRUFBRXFXLEtBQUssQ0FBQyxHQUFHN0osRUFBRSxPQUFNLEVBQUd0ckMsRUFBRTgyQyxVQUFVOTJDLEVBQUUrMkMsWUFBWS8yQyxFQUFFdXdDLFdBQVcsR0FBR3hELFdBQVcsU0FBU2IsRUFBRTVoQyxHQUFHLE9BQU9BLEVBQUUsR0FBR3pHLEtBQUs2dEMsTUFBTTd0QyxLQUFLaXZDLElBQUl4b0MsSUFBSXpHLEtBQUs2dEMsTUFBTXBuQyxHQUFHLElBQUlzc0IsRUFBRXVWLEVBQUVELEVBQUVoekIsRUFBRWxaLEVBQUVvMEMsV0FBV3AwQyxFQUFFbzBDLFdBQVdoSSxFQUFFbDBCLEVBQUVqVyxJQUFJLFNBQVNxSSxHQUFHLE9BQU80aEMsRUFBRTVoQyxLQUFLK2hDLEdBQUdkLEVBQUV0cEMsSUFBSSxTQUFTcUksR0FBRyxPQUFPNGhDLEVBQUU1aEMsS0FBSzROLEVBQUVrMEIsRUFBRXZ0QyxRQUFRc3RDLElBQUlqMEIsRUFBRWswQixFQUFFdnRDLFFBQVFzdEMsR0FBRyxJQUFJLFlBQU8sSUFBU0UsSUFBSXpWLEVBQUUyVSxFQUFFMXNDLFFBQVF3dEMsSUFBSSxJQUFJelYsRUFBRTUyQixFQUFFK3pDLFlBQVksR0FBRy96QyxFQUFFZzJDLFFBQVFwZixFQUFFdHNCLEVBQUVrZCxFQUFFaGdCLElBQUl5dkMsV0FBVyxTQUFTM3NDLEVBQUVrZCxFQUFFaGdCLEdBQUcsWUFBTyxJQUFTOEMsSUFBSUEsRUFBRXhNLEtBQUsrcEMsT0FBT2hPLFlBQU8sSUFBU3JTLElBQUlBLEdBQUUsR0FBSTFwQixLQUFLazRDLFFBQVFsNEMsS0FBS2kyQyxZQUFZenBDLEVBQUVrZCxFQUFFaGdCLElBQUkwdkMsZUFBZSxTQUFTNXNDLEVBQUVrZCxFQUFFaGdCLFFBQUcsSUFBUzhDLElBQUlBLEVBQUV4TSxLQUFLK3BDLE9BQU9oTyxZQUFPLElBQVNyUyxJQUFJQSxHQUFFLEdBQUksSUFBSXhuQixFQUFFbEMsS0FBS2doQyxFQUFFOStCLEVBQUUrekMsWUFBWXpJLEVBQUV6bkMsS0FBSzZ0QyxNQUFNNVMsRUFBRTkrQixFQUFFNm5DLE9BQU9rTCxnQkFBZ0IsR0FBR3pILEVBQUV0ckMsRUFBRSt3QyxTQUFTNXZDLE9BQU8sRUFBRSxDQUFDLElBQUkrVyxFQUFFbFksRUFBRXd3QyxhQUFheHdDLEVBQUVvMEMsV0FBV3AwQyxFQUFFbzBDLFVBQVU3SSxFQUFFdnJDLEVBQUUrd0MsU0FBU3pGLElBQUl0ckMsRUFBRSt3QyxTQUFTekYsRUFBRSxHQUFHQyxHQUFHLEVBQUVyekIsRUFBRXF6QixJQUFJek0sRUFBRTkrQixFQUFFNm5DLE9BQU9rTCxnQkFBZ0IsT0FBTy95QyxFQUFFZzJDLFFBQVFsWCxFQUFFeDBCLEVBQUVrZCxFQUFFaGdCLElBQUlvdUMsb0JBQW9CLFdBQVcsSUFBSXRyQyxFQUFFa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFcWdCLE9BQU83bkMsRUFBRXduQixFQUFFK29CLFdBQVd6UixFQUFFLFNBQVN0M0IsRUFBRW1xQyxjQUFjbnFCLEVBQUUydkIsdUJBQXVCM3ZDLEVBQUVtcUMsY0FBY3JHLEVBQUU5akIsRUFBRW11QixhQUFhLEdBQUdudUMsRUFBRTJ0QyxLQUFLLENBQUMsR0FBRzN0QixFQUFFeXVCLFVBQVUsT0FBTzNyQyxFQUFFc25CLFNBQVN5WixFQUFFN2pCLEVBQUVrdUIsY0FBYzlsQyxLQUFLLDJCQUEyQixJQUFJcEksRUFBRXFyQyxlQUFldkgsRUFBRTlqQixFQUFFb3ZCLGFBQWE5WCxFQUFFLEdBQUd3TSxFQUFFOWpCLEVBQUVtcEIsT0FBT3h2QyxPQUFPcW1CLEVBQUVvdkIsYUFBYTlYLEVBQUUsR0FBR3RYLEVBQUVzdkIsVUFBVXhMLEVBQUV0ckMsRUFBRTZZLFNBQVMsSUFBSXJSLEVBQUVvcEMsV0FBVyw2QkFBNkJ0bUMsRUFBRSxXQUFXOUMsRUFBRTR0QyxvQkFBb0IsS0FBSy95QyxHQUFHLEdBQUcrVyxRQUFRbTBCLEVBQUVFLFNBQVMsV0FBV2ptQixFQUFFd3VCLFFBQVExSyxNQUFNOWpCLEVBQUV3dUIsUUFBUTFLLEdBQUdBLEVBQUU5akIsRUFBRW1wQixPQUFPeHZDLE9BQU8yOUIsR0FBR3RYLEVBQUVzdkIsVUFBVXhMLEVBQUV0ckMsRUFBRTZZLFNBQVMsSUFBSXJSLEVBQUVvcEMsV0FBVyw2QkFBNkJ0bUMsRUFBRSxXQUFXOUMsRUFBRTR0QyxvQkFBb0IsS0FBSy95QyxHQUFHLEdBQUcrVyxRQUFRbTBCLEVBQUVFLFNBQVMsV0FBV2ptQixFQUFFd3VCLFFBQVExSyxNQUFNOWpCLEVBQUV3dUIsUUFBUTFLLFFBQVE5akIsRUFBRXd1QixRQUFRMUssS0FBU2MsRUFBRSxDQUFDZ0wsV0FBVyxXQUFXLElBQUlwM0MsRUFBRWxDLEtBQUt3TSxFQUFFdEssRUFBRTZuQyxPQUFPcmdCLEVBQUV4bkIsRUFBRXV3QyxXQUFXL29CLEVBQUUzTyxTQUFTLElBQUl2TyxFQUFFc21DLFdBQVcsSUFBSXRtQyxFQUFFOHFDLHFCQUFxQjE1QixTQUFTLElBQUlvakIsRUFBRXRYLEVBQUUzTyxTQUFTLElBQUl2TyxFQUFFc21DLFlBQVksR0FBR3RtQyxFQUFFK3NDLHVCQUF1QixDQUFDLElBQUk3dkMsRUFBRThDLEVBQUV5b0MsZUFBZWpVLEVBQUUzOUIsT0FBT21KLEVBQUV5b0MsZUFBZSxHQUFHdnJDLElBQUk4QyxFQUFFeW9DLGVBQWUsQ0FBQyxJQUFJLElBQUl6SCxFQUFFLEVBQUVBLEVBQUU5akMsRUFBRThqQyxHQUFHLEVBQUUsQ0FBQyxJQUFJcHpCLEVBQUVtekIsRUFBRVgsRUFBRXZxQyxjQUFjLFFBQVFxOEIsU0FBU2x5QixFQUFFc21DLFdBQVcsSUFBSXRtQyxFQUFFZ3RDLGlCQUFpQjl2QixFQUFFeUcsT0FBTy9WLEdBQUc0bUIsRUFBRXRYLEVBQUUzTyxTQUFTLElBQUl2TyxFQUFFc21DLGFBQWEsU0FBU3RtQyxFQUFFcW5DLGVBQWVybkMsRUFBRXNzQyxlQUFldHNDLEVBQUVzc0MsYUFBYTlYLEVBQUUzOUIsUUFBUW5CLEVBQUU0MkMsYUFBYWhsQixTQUFTdG5CLEVBQUVzc0MsY0FBY3RzQyxFQUFFcW5DLGNBQWMsSUFBSTN4QyxFQUFFNDJDLGNBQWN0c0MsRUFBRWl0QyxxQkFBcUJ2M0MsRUFBRTQyQyxhQUFhOVgsRUFBRTM5QixTQUFTbkIsRUFBRTQyQyxhQUFhOVgsRUFBRTM5QixRQUFRLElBQUlvcUMsRUFBRSxHQUFHcnlCLEVBQUUsR0FBRzRsQixFQUFFLzhCLEtBQUssU0FBU3VJLEVBQUVrZCxHQUFHLElBQUloZ0IsRUFBRTZqQyxFQUFFN2pCLEdBQUdsZCxFQUFFdEssRUFBRTQyQyxjQUFjMTlCLEVBQUV0YSxLQUFLNG9CLEdBQUdsZCxFQUFFdzBCLEVBQUUzOUIsUUFBUW1KLEdBQUd3MEIsRUFBRTM5QixPQUFPbkIsRUFBRTQyQyxjQUFjckwsRUFBRTNzQyxLQUFLNG9CLEdBQUdoZ0IsRUFBRW9JLEtBQUssMEJBQTBCdEYsS0FBSyxJQUFJLElBQUk0aEMsRUFBRSxFQUFFQSxFQUFFaHpCLEVBQUUvWCxPQUFPK3FDLEdBQUcsRUFBRTFrQixFQUFFeUcsT0FBT29kLEVBQUVueUIsRUFBRWd6QixHQUFHam9CLFdBQVUsSUFBS3VZLFNBQVNseUIsRUFBRThxQyxzQkFBc0IsSUFBSSxJQUFJeGUsRUFBRTJVLEVBQUVwcUMsT0FBTyxFQUFFLEdBQUd5MUIsSUFBRUEsRUFBS3BQLEVBQUUwRyxRQUFRbWQsRUFBRUUsRUFBRTNVLEdBQUczUyxXQUFVLElBQUt1WSxTQUFTbHlCLEVBQUU4cUMsdUJBQXVCMEIsUUFBUSxXQUFXLElBQUl4c0MsRUFBRWtkLEVBQUUxcEIsS0FBSzBKLEVBQUVnZ0IsRUFBRXFnQixPQUFPN25DLEVBQUV3bkIsRUFBRXVzQixZQUFZalYsRUFBRXRYLEVBQUVtcEIsT0FBT3JGLEVBQUU5akIsRUFBRW92QixhQUFhMStCLEVBQUVzUCxFQUFFOHVCLGVBQWUvSyxFQUFFL2pCLEVBQUU2dUIsZUFBZW45QixFQUFFc08sRUFBRXVwQixTQUFTN0UsRUFBRTFrQixFQUFFZ3BCLGFBQWFocEIsRUFBRTh1QixnQkFBZSxFQUFHOXVCLEVBQUU2dUIsZ0JBQWUsRUFBRyxJQUFJemYsR0FBRzFkLEVBQUVsWixHQUFHd25CLEVBQUVrbUIsZUFBZTF0QyxFQUFFc3JDLEdBQUdoaEMsRUFBRXcwQixFQUFFMzlCLE9BQU8sRUFBRW1xQyxFQUFFdHJDLEVBQUVzSyxHQUFHZ2hDLEVBQUU5akIsRUFBRXd1QixRQUFRMXJDLEVBQUUsR0FBRSxHQUFHLElBQUssR0FBSXNzQixHQUFHcFAsRUFBRXN1QixjQUFjNUosR0FBRzFrQixFQUFFNHNCLFVBQVU1c0IsRUFBRTRzQixXQUFXeGQsS0FBSyxTQUFTcHZCLEVBQUVtcUMsZUFBZSxFQUFFckcsR0FBR3RyQyxHQUFHQSxHQUFHOCtCLEVBQUUzOUIsT0FBT21xQyxLQUFLaGhDLEdBQUd3MEIsRUFBRTM5QixPQUFPbkIsRUFBRXNyQyxFQUFFaGhDLEdBQUdnaEMsRUFBRTlqQixFQUFFd3VCLFFBQVExckMsRUFBRSxHQUFFLEdBQUcsSUFBSyxHQUFJc3NCLEdBQUdwUCxFQUFFc3VCLGNBQWM1SixHQUFHMWtCLEVBQUU0c0IsVUFBVTVzQixFQUFFNHNCLFdBQVd4ZCxJQUFJcFAsRUFBRTh1QixlQUFlcCtCLEVBQUVzUCxFQUFFNnVCLGVBQWU5SyxHQUFHaU0sWUFBWSxXQUFXLElBQUlsdEMsRUFBRXhNLEtBQUt5eUMsV0FBVy9vQixFQUFFMXBCLEtBQUsrcEMsT0FBT3JnQyxFQUFFMUosS0FBSzZ5QyxPQUFPcm1DLEVBQUV1TyxTQUFTLElBQUkyTyxFQUFFb3BCLFdBQVcsSUFBSXBwQixFQUFFNHRCLHFCQUFxQjE1QixTQUFTbFUsRUFBRWcwQixXQUFXLDZCQUFpQzZRLEVBQUUsQ0FBQ29MLGNBQWMsU0FBU250QyxHQUFHLEtBQUtna0MsRUFBRUMsUUFBUXp3QyxLQUFLK3BDLE9BQU82UCxlQUFlNTVDLEtBQUsrcEMsT0FBTzJMLGVBQWUxMUMsS0FBSzY1QyxVQUFVLENBQUMsSUFBSW53QixFQUFFMXBCLEtBQUt1TyxHQUFHbWIsRUFBRWxGLE1BQU1zMUIsT0FBTyxPQUFPcHdCLEVBQUVsRixNQUFNczFCLE9BQU90dEMsRUFBRSxtQkFBbUIsZUFBZWtkLEVBQUVsRixNQUFNczFCLE9BQU90dEMsRUFBRSxlQUFlLFlBQVlrZCxFQUFFbEYsTUFBTXMxQixPQUFPdHRDLEVBQUUsV0FBVyxTQUFTdXRDLGdCQUFnQixXQUFXdkosRUFBRUMsT0FBT3p3QyxLQUFLK3BDLE9BQU8yTCxlQUFlMTFDLEtBQUs2NUMsV0FBVzc1QyxLQUFLdU8sR0FBR2lXLE1BQU1zMUIsT0FBTyxNQUFVMTlCLEVBQUUsQ0FBQzQ5QixZQUFZLFNBQVN4dEMsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFK29CLFdBQVd2d0MsRUFBRXduQixFQUFFcWdCLE9BQU8sR0FBRzduQyxFQUFFbTFDLE1BQU0zdEIsRUFBRWd3QixjQUFjLFVBQUFoTixRQUFpQmxnQyxJQUFHLFdBQVdBLEVBQUUsSUFBSSxJQUFJdzBCLEVBQUUsRUFBRUEsRUFBRXgwQixFQUFFbkosT0FBTzI5QixHQUFHLEVBQUV4MEIsRUFBRXcwQixJQUFJdDNCLEVBQUV5bUIsT0FBTzNqQixFQUFFdzBCLFNBQVN0M0IsRUFBRXltQixPQUFPM2pCLEdBQUd0SyxFQUFFbTFDLE1BQU0zdEIsRUFBRTR2QixhQUFhcDNDLEVBQUVrdkMsVUFBVVosRUFBRVksVUFBVTFuQixFQUFFdXdCLFVBQVVDLGFBQWEsU0FBUzF0QyxHQUFHLElBQUlrZCxFQUFFMXBCLEtBQUswSixFQUFFZ2dCLEVBQUVxZ0IsT0FBTzduQyxFQUFFd25CLEVBQUUrb0IsV0FBV3pSLEVBQUV0WCxFQUFFdXNCLFlBQVl2c0MsRUFBRTJ0QyxNQUFNM3RCLEVBQUVnd0IsY0FBYyxJQUFJbE0sRUFBRXhNLEVBQUUsRUFBRSxHQUFHLFVBQUEwTCxRQUFpQmxnQyxJQUFHLFdBQVdBLEVBQUUsQ0FBQyxJQUFJLElBQUk0TixFQUFFLEVBQUVBLEVBQUU1TixFQUFFbkosT0FBTytXLEdBQUcsRUFBRTVOLEVBQUU0TixJQUFJbFksRUFBRWt1QixRQUFRNWpCLEVBQUU0TixJQUFJb3pCLEVBQUV4TSxFQUFFeDBCLEVBQUVuSixZQUFZbkIsRUFBRWt1QixRQUFRNWpCLEdBQUc5QyxFQUFFMnRDLE1BQU0zdEIsRUFBRTR2QixhQUFhNXZDLEVBQUUwbkMsVUFBVVosRUFBRVksVUFBVTFuQixFQUFFdXdCLFNBQVN2d0IsRUFBRXd1QixRQUFRMUssRUFBRSxHQUFFLElBQUsyTSxTQUFTLFNBQVMzdEMsRUFBRWtkLEdBQUcsSUFBSWhnQixFQUFFMUosS0FBS2tDLEVBQUV3SCxFQUFFK29DLFdBQVd6UixFQUFFdDNCLEVBQUVxZ0MsT0FBT3lELEVBQUU5akMsRUFBRXVzQyxZQUFZalYsRUFBRXFXLE9BQU83SixHQUFHOWpDLEVBQUVvdkMsYUFBYXB2QyxFQUFFZ3dDLGNBQWNod0MsRUFBRW1wQyxPQUFPM3dDLEVBQUU2WSxTQUFTLElBQUlpbUIsRUFBRThSLGFBQWEsSUFBSTE0QixFQUFFMVEsRUFBRW1wQyxPQUFPeHZDLE9BQU8sR0FBR21KLEdBQUcsRUFBRTlDLEVBQUV3d0MsYUFBYXh3QixRQUFRLEdBQUd0UCxHQUFHNU4sRUFBRTlDLEVBQUVzd0MsWUFBWXR3QixPQUFPLENBQUMsSUFBSSxJQUFJK2pCLEVBQUVqaEMsRUFBRWdoQyxFQUFFQSxFQUFFLEVBQUVBLEVBQUVweUIsRUFBRSxHQUFHZ3pCLEVBQUVoMEIsRUFBRSxFQUFFNU4sR0FBRzRoQyxJQUFFQSxFQUFLLENBQUMsSUFBSXRWLEVBQUVwdkIsRUFBRW1wQyxPQUFPdHVDLEdBQUc2cEMsR0FBR3RWLEVBQUVsYixTQUFTeEMsRUFBRXpKLFFBQVFtbkIsR0FBRyxHQUFHLFVBQUE0VCxRQUFpQmhqQixJQUFHLFdBQVdBLEVBQUUsQ0FBQyxJQUFJLElBQUkya0IsRUFBRSxFQUFFQSxFQUFFM2tCLEVBQUVybUIsT0FBT2dyQyxHQUFHLEVBQUUza0IsRUFBRTJrQixJQUFJbnNDLEVBQUVpdUIsT0FBT3pHLEVBQUUya0IsSUFBSVosRUFBRWpoQyxFQUFFZ2hDLEVBQUVBLEVBQUU5akIsRUFBRXJtQixPQUFPbXFDLE9BQU90ckMsRUFBRWl1QixPQUFPekcsR0FBRyxJQUFJLElBQUk0a0IsRUFBRSxFQUFFQSxFQUFFbHpCLEVBQUUvWCxPQUFPaXJDLEdBQUcsRUFBRXBzQyxFQUFFaXVCLE9BQU8vVSxFQUFFa3pCLElBQUl0TixFQUFFcVcsTUFBTTN0QyxFQUFFNHZDLGFBQWF0WSxFQUFFb1EsVUFBVVosRUFBRVksVUFBVTFuQyxFQUFFdXdDLFNBQVNqWixFQUFFcVcsS0FBSzN0QyxFQUFFd3VDLFFBQVF6SyxFQUFFL2pDLEVBQUVvdkMsYUFBYSxHQUFFLEdBQUlwdkMsRUFBRXd1QyxRQUFRekssRUFBRSxHQUFFLEtBQU0yTSxZQUFZLFNBQVM1dEMsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFcWdCLE9BQU83bkMsRUFBRXduQixFQUFFK29CLFdBQVd6UixFQUFFdFgsRUFBRXVzQixZQUFZdnNDLEVBQUUydEMsT0FBT3JXLEdBQUd0WCxFQUFFb3ZCLGFBQWFwdkIsRUFBRWd3QixjQUFjaHdCLEVBQUVtcEIsT0FBTzN3QyxFQUFFNlksU0FBUyxJQUFJclIsRUFBRW9wQyxhQUFhLElBQUl0RixFQUFFcHpCLEVBQUU0bUIsRUFBRSxHQUFHLFVBQUEwTCxRQUFpQmxnQyxJQUFHLFdBQVdBLEVBQUUsQ0FBQyxJQUFJLElBQUlpaEMsRUFBRSxFQUFFQSxFQUFFamhDLEVBQUVuSixPQUFPb3FDLEdBQUcsRUFBRUQsRUFBRWhoQyxFQUFFaWhDLEdBQUcvakIsRUFBRW1wQixPQUFPckYsSUFBSTlqQixFQUFFbXBCLE9BQU90dUMsR0FBR2lwQyxHQUFHNXZCLFNBQVM0dkIsRUFBRXB6QixLQUFJQSxFQUFNQSxFQUFFclUsS0FBS2l2QixJQUFJNWEsRUFBRSxRQUFRb3pCLEVBQUVoaEMsRUFBRWtkLEVBQUVtcEIsT0FBT3JGLElBQUk5akIsRUFBRW1wQixPQUFPdHVDLEdBQUdpcEMsR0FBRzV2QixTQUFTNHZCLEVBQUVwekIsS0FBSUEsRUFBTUEsRUFBRXJVLEtBQUtpdkIsSUFBSTVhLEVBQUUsR0FBRzFRLEVBQUUydEMsTUFBTTN0QixFQUFFNHZCLGFBQWE1dkMsRUFBRTBuQyxVQUFVWixFQUFFWSxVQUFVMW5CLEVBQUV1d0IsU0FBU3Z3QyxFQUFFMnRDLEtBQUszdEIsRUFBRXd1QixRQUFROTlCLEVBQUVzUCxFQUFFb3ZCLGFBQWEsR0FBRSxHQUFJcHZCLEVBQUV3dUIsUUFBUTk5QixFQUFFLEdBQUUsSUFBS2lnQyxnQkFBZ0IsV0FBVyxJQUFJLElBQUk3dEMsRUFBRSxHQUFHa2QsRUFBRSxFQUFFQSxFQUFFMXBCLEtBQUs2eUMsT0FBT3h2QyxPQUFPcW1CLEdBQUcsRUFBRWxkLEVBQUUxTCxLQUFLNG9CLEdBQUcxcEIsS0FBS282QyxZQUFZNXRDLEtBQUtHLEVBQUUsV0FBVyxJQUFJSCxFQUFFd2dDLEVBQUVDLFVBQVVDLFVBQVV4akIsRUFBRSxDQUFDNHdCLEtBQUksRUFBR0MsU0FBUSxFQUFHQyxlQUFjLEVBQUdDLFNBQVEsRUFBR0MsU0FBUSxFQUFHQyxRQUFPLEVBQUdDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxRQUFROU4sRUFBRThOLFNBQVM5TixFQUFFK04sU0FBU0EsU0FBUy9OLEVBQUU4TixTQUFTOU4sRUFBRStOLFVBQVVyeEMsRUFBRThDLEVBQUVLLE1BQU0scUNBQXFDM0ssRUFBRXNLLEVBQUVLLE1BQU0sK0JBQStCbTBCLEVBQUV4MEIsRUFBRUssTUFBTSx3QkFBd0IyZ0MsRUFBRWhoQyxFQUFFSyxNQUFNLDJCQUEyQnVOLEdBQUc0bUIsR0FBR3gwQixFQUFFSyxNQUFNLDhCQUE4QixHQUFHbkQsSUFBSWdnQixFQUFFc3hCLEdBQUcsVUFBVXR4QixFQUFFdXhCLFVBQVV2eEMsRUFBRSxHQUFHZ2dCLEVBQUVneEIsU0FBUSxHQUFJeDRDLElBQUl3SCxJQUFJZ2dCLEVBQUVzeEIsR0FBRyxVQUFVdHhCLEVBQUV1eEIsVUFBVS80QyxFQUFFLEdBQUd3bkIsRUFBRTZ3QixTQUFRLEVBQUc3d0IsRUFBRTh3QixjQUFjLEdBQUdodUMsRUFBRWhGLGNBQWN6RyxRQUFRLFlBQVlpZ0MsR0FBRzVtQixHQUFHb3pCLEtBQUs5akIsRUFBRXN4QixHQUFHLE1BQU10eEIsRUFBRTR3QixLQUFJLEdBQUlsZ0MsSUFBSW96QixJQUFJOWpCLEVBQUV1eEIsVUFBVTdnQyxFQUFFLEdBQUduVSxRQUFRLEtBQUssS0FBS3lqQixFQUFFaXhCLFFBQU8sR0FBSTNaLElBQUl0WCxFQUFFdXhCLFVBQVVqYSxFQUFFLEdBQUcvNkIsUUFBUSxLQUFLLEtBQUt5akIsRUFBRW14QixNQUFLLEdBQUlyTixJQUFJOWpCLEVBQUV1eEIsVUFBVXpOLEVBQUUsR0FBR0EsRUFBRSxHQUFHdm5DLFFBQVEsS0FBSyxLQUFLLEtBQUt5akIsRUFBRWl4QixRQUFPLEdBQUlqeEIsRUFBRTR3QixLQUFLNXdCLEVBQUV1eEIsV0FBVyxHQUFHenVDLEVBQUV6TCxRQUFRLGFBQWEsT0FBTzJvQixFQUFFdXhCLFVBQVUzekMsTUFBTSxLQUFLLEtBQUtvaUIsRUFBRXV4QixVQUFVenVDLEVBQUVoRixjQUFjRixNQUFNLFlBQVksR0FBR0EsTUFBTSxLQUFLLElBQUlvaUIsRUFBRSt3QixVQUFVL3dCLEVBQUVzeEIsSUFBSXR4QixFQUFFNndCLFNBQVM3d0IsRUFBRXd4QixTQUFTeHhCLEVBQUV3eEIsU0FBUzlnQyxHQUFHNG1CLEdBQUd3TSxJQUFJaGhDLEVBQUVLLE1BQU0sOEJBQThCNmMsRUFBRXN4QixJQUFJLFFBQVF0eEIsRUFBRXN4QixHQUFHLENBQUMsSUFBSXZOLEVBQUUvakIsRUFBRXV4QixVQUFVM3pDLE1BQU0sS0FBSzhULEVBQUV3eEIsRUFBRUMsY0FBYyx5QkFBeUJuakIsRUFBRXl4QixXQUFXenhCLEVBQUV3eEIsVUFBVTFOLEdBQUdwekIsS0FBYSxJQUFOcXpCLEVBQUUsR0FBTSxJQUFLQSxFQUFFLEdBQUcsR0FBSUEsRUFBRSxLQUFLcnlCLEdBQUcsR0FBR0EsRUFBRTdZLGFBQWEsV0FBV3hCLFFBQVEsY0FBYyxPQUFPMm9CLEVBQUUweEIsV0FBV3BPLEVBQUVxTyxrQkFBa0IsRUFBRTN4QixFQUEvdEMsR0FBb3VDLFNBQVN3cEIsSUFBSSxJQUFJMW1DLEVBQUV4TSxLQUFLMHBCLEVBQUVsZCxFQUFFdTlCLE9BQU9yZ0MsRUFBRThDLEVBQUUrQixHQUFHLElBQUk3RSxHQUFHLElBQUlBLEVBQUU0b0IsWUFBWSxDQUFDNUksRUFBRTR4QixhQUFhOXVDLEVBQUUrdUMsZ0JBQWdCLElBQUlyNUMsRUFBRXNLLEVBQUUrckMsZUFBZXZYLEVBQUV4MEIsRUFBRWdzQyxlQUFlaEwsRUFBRWhoQyxFQUFFeW1DLFNBQVMsR0FBR3ptQyxFQUFFK3JDLGdCQUFlLEVBQUcvckMsRUFBRWdzQyxnQkFBZSxFQUFHaHNDLEVBQUV5bEMsYUFBYXpsQyxFQUFFZ21DLGVBQWU5b0IsRUFBRTh4QixTQUFTLENBQUMsSUFBSXBoQyxFQUFFclUsS0FBSzAxQyxJQUFJMTFDLEtBQUtpdkIsSUFBSXhvQixFQUFFOHBDLFVBQVU5cEMsRUFBRWtxQyxnQkFBZ0JscUMsRUFBRWdxQyxnQkFBZ0JocUMsRUFBRXdyQyxhQUFhNTlCLEdBQUc1TixFQUFFK3FDLG9CQUFvQi9xQyxFQUFFcXFDLHNCQUFzQm50QixFQUFFK3VCLFlBQVlqc0MsRUFBRXVwQyx3QkFBd0J2cEMsRUFBRXFxQyx1QkFBdUIsU0FBU250QixFQUFFbXFCLGVBQWUsRUFBRW5xQixFQUFFbXFCLGdCQUFnQnJuQyxFQUFFb3FDLFFBQVFwcUMsRUFBRXU5QixPQUFPZ0wsZUFBZXZvQyxFQUFFMHJDLFFBQVExckMsRUFBRXFtQyxPQUFPeHZDLE9BQU8sRUFBRSxHQUFFLEdBQUcsR0FBSW1KLEVBQUUwckMsUUFBUTFyQyxFQUFFeXBDLFlBQVksR0FBRSxHQUFHLEdBQUl6cEMsRUFBRWdzQyxlQUFleFgsRUFBRXgwQixFQUFFK3JDLGVBQWVyMkMsRUFBRXNLLEVBQUV1OUIsT0FBTzJMLGVBQWVsSSxJQUFJaGhDLEVBQUV5bUMsVUFBVXptQyxFQUFFbXBDLGlCQUFpQixJQUE4NlY5MUMsRUFBMTZWOEosRUFBRSxDQUFDK3hDLGFBQWEsV0FBVyxJQUFJbHZDLEVBQUV4TSxLQUFLMHBCLEVBQUVsZCxFQUFFdTlCLE9BQU9yZ0MsRUFBRThDLEVBQUVtdkMsWUFBWXo1QyxFQUFFc0ssRUFBRStCLEdBQUd5eUIsRUFBRXgwQixFQUFFb3ZDLFVBQVVwdkMsRUFBRXF2QyxhQUFhLFNBQVNydkMsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFb3lCLGdCQUFnQjU1QyxFQUFFd25CLEVBQUVxZ0IsT0FBTy9JLEVBQUV0WCxFQUFFdUUsUUFBUSxJQUFJdkUsRUFBRXl1QixZQUFZajJDLEVBQUVrMkMsK0JBQStCLENBQUMsSUFBSTVLLEVBQUVoaEMsRUFBRSxHQUFHZ2hDLEVBQUUvaEIsZ0JBQWdCK2hCLEVBQUVBLEVBQUUvaEIsZUFBZS9oQixFQUFFcXlDLGFBQWEsZUFBZXZPLEVBQUU5ckMsTUFBTWdJLEVBQUVxeUMsZ0JBQWdCLFVBQVV2TyxJQUFJLElBQUlBLEVBQUV0ZixVQUFVeGtCLEVBQUVzeUMsWUFBWXR5QyxFQUFFdXlDLFNBQVMsR0FBRy81QyxFQUFFZzZDLFdBQVczTyxFQUFFQyxFQUFFaG9DLFFBQVE2VixRQUFRblosRUFBRWk2QyxrQkFBa0JqNkMsRUFBRWk2QyxrQkFBa0IsSUFBSWo2QyxFQUFFazZDLGdCQUFnQixHQUFHMXlCLEVBQUUyeUIsWUFBVyxPQUFRLElBQUluNkMsRUFBRW82QyxjQUFjL08sRUFBRUMsR0FBR255QixRQUFRblosRUFBRW82QyxjQUFjLEdBQUcsQ0FBQ3RiLEVBQUV1YixTQUFTLGVBQWUvTyxFQUFFOXJDLEtBQUs4ckMsRUFBRXpmLGNBQWMsR0FBR2hCLE1BQU15Z0IsRUFBRXpnQixNQUFNaVUsRUFBRXdiLFNBQVMsZUFBZWhQLEVBQUU5ckMsS0FBSzhyQyxFQUFFemYsY0FBYyxHQUFHZixNQUFNd2dCLEVBQUV4Z0IsTUFBTSxJQUFJNVMsRUFBRTRtQixFQUFFdWIsU0FBUzlPLEVBQUV6TSxFQUFFd2IsU0FBU3BoQyxFQUFFbFosRUFBRXU2QyxvQkFBb0J2NkMsRUFBRXc2QyxzQkFBc0J0TyxFQUFFbHNDLEVBQUV5NkMsb0JBQW9CejZDLEVBQUUwNkMsc0JBQXNCLElBQUl4aEMsS0FBS2hCLEdBQUdnMEIsR0FBR2gwQixHQUFHNHlCLEVBQUVNLE9BQU9sYixNQUFNZ2MsR0FBRyxDQUFDLEdBQUdxQixFQUFFdnFDLE9BQU93RSxFQUFFLENBQUNzeUMsV0FBVSxFQUFHQyxTQUFRLEVBQUdZLHFCQUFvQixFQUFHQyxpQkFBWSxFQUFPQyxpQkFBWSxJQUFTL2IsRUFBRWdjLE9BQU81aUMsRUFBRTRtQixFQUFFaWMsT0FBT3hQLEVBQUUvakMsRUFBRXd6QyxlQUFlek4sRUFBRXBqQixNQUFNM0MsRUFBRTJ5QixZQUFXLEVBQUczeUIsRUFBRXVvQixhQUFhdm9CLEVBQUV5ekIsb0JBQWUsRUFBTyxFQUFFajdDLEVBQUVrN0MsWUFBWTF6QyxFQUFFMnpDLG9CQUFtQixHQUFJLGVBQWU3UCxFQUFFOXJDLEtBQUssQ0FBQyxJQUFJbzNCLEdBQUUsRUFBR3lVLEVBQUVDLEVBQUVob0MsUUFBUTBVLEdBQUd4USxFQUFFNHpDLGdCQUFnQnhrQixHQUFFLEdBQUk4VCxFQUFFdjNCLGVBQWVrNEIsRUFBRVgsRUFBRXYzQixlQUFlNkUsR0FBR3hRLEVBQUU0ekMsZUFBZTFRLEVBQUV2M0IsZ0JBQWdCbTRCLEVBQUVob0MsUUFBUW9uQyxFQUFFdjNCLGNBQWM4WSxPQUFPMkssR0FBR3BQLEVBQUU2ekIsZ0JBQWdCL1AsRUFBRXBrQixpQkFBaUJNLEVBQUU4bkIsS0FBSyxhQUFhaEUsT0FBT3pTLEtBQUt2dUIsR0FBR0EsRUFBRWd4QyxZQUFZLFNBQVNoeEMsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFb3lCLGdCQUFnQjU1QyxFQUFFd25CLEVBQUVxZ0IsT0FBTy9JLEVBQUV0WCxFQUFFdUUsUUFBUXVmLEVBQUU5akIsRUFBRWdwQixhQUFhdDRCLEVBQUU1TixFQUFFLEdBQUc0TixFQUFFcVIsZ0JBQWdCclIsRUFBRUEsRUFBRXFSLGVBQWUvaEIsRUFBRXN5QyxXQUFXLElBQUl0eUMsRUFBRXF5QyxjQUFjLGNBQWMzaEMsRUFBRTFZLEtBQUssQ0FBQyxJQUFJK3JDLEVBQUUsY0FBY3J6QixFQUFFMVksS0FBSzBZLEVBQUUyVCxjQUFjLEdBQUdoQixNQUFNM1MsRUFBRTJTLE1BQU0zUixFQUFFLGNBQWNoQixFQUFFMVksS0FBSzBZLEVBQUUyVCxjQUFjLEdBQUdmLE1BQU01UyxFQUFFNFMsTUFBTSxHQUFHNVMsRUFBRXFqQyx3QkFBd0IsT0FBT3pjLEVBQUVnYyxPQUFPdlAsT0FBT3pNLEVBQUVpYyxPQUFPN2hDLEdBQUcsSUFBSXNPLEVBQUU2ekIsZUFBZSxPQUFPN3pCLEVBQUUyeUIsWUFBVyxPQUFRM3lDLEVBQUVzeUMsWUFBWXZNLEVBQUV2cUMsT0FBTzg3QixFQUFFLENBQUNnYyxPQUFPdlAsRUFBRXdQLE9BQU83aEMsRUFBRW1oQyxTQUFTOU8sRUFBRStPLFNBQVNwaEMsSUFBSTFSLEVBQUV3ekMsZUFBZXpOLEVBQUVwakIsUUFBUSxHQUFHM2lCLEVBQUVxeUMsY0FBYzc1QyxFQUFFdzdDLHNCQUFzQng3QyxFQUFFbTFDLEtBQUssR0FBRzN0QixFQUFFNG9CLGNBQWMsR0FBR2wzQixFQUFFNGxCLEVBQUVpYyxRQUFRdnpCLEVBQUU0c0IsV0FBVzVzQixFQUFFZ3RCLGdCQUFnQnQ3QixFQUFFNGxCLEVBQUVpYyxRQUFRdnpCLEVBQUU0c0IsV0FBVzVzQixFQUFFOHNCLGVBQWUsT0FBTzlzQyxFQUFFc3lDLFdBQVUsT0FBUXR5QyxFQUFFdXlDLFNBQVEsUUFBUyxHQUFHeE8sRUFBRXpNLEVBQUVnYyxRQUFRdHpCLEVBQUU0c0IsV0FBVzVzQixFQUFFZ3RCLGdCQUFnQmpKLEVBQUV6TSxFQUFFZ2MsUUFBUXR6QixFQUFFNHNCLFdBQVc1c0IsRUFBRThzQixlQUFlLE9BQU8sR0FBRzlzQyxFQUFFcXlDLGNBQWNuUCxFQUFFdjNCLGVBQWUrRSxFQUFFNVUsU0FBU29uQyxFQUFFdjNCLGVBQWVrNEIsRUFBRW56QixFQUFFNVUsUUFBUTBVLEdBQUd4USxFQUFFNHpDLGNBQWMsT0FBTzV6QyxFQUFFdXlDLFNBQVEsT0FBUXZ5QixFQUFFMnlCLFlBQVcsR0FBSSxHQUFHM3lDLEVBQUVtekMscUJBQXFCbnpCLEVBQUU4bkIsS0FBSyxZQUFZcDNCLEtBQUtBLEVBQUUyVCxlQUFlLEVBQUUzVCxFQUFFMlQsY0FBYzFxQixRQUFRLENBQUMyOUIsRUFBRXViLFNBQVM5TyxFQUFFek0sRUFBRXdiLFNBQVNwaEMsRUFBRSxJQUFJZ3pCLEVBQUV0VixFQUFFa0ksRUFBRXViLFNBQVN2YixFQUFFZ2MsT0FBTzNPLEVBQUVyTixFQUFFd2IsU0FBU3hiLEVBQUVpYyxPQUFPLEtBQUt2ekIsRUFBRXFnQixPQUFPcVQsV0FBV3IzQyxLQUFLNDNDLEtBQUs1M0MsS0FBSzYzQyxJQUFJOWtCLEVBQUUsR0FBRy95QixLQUFLNjNDLElBQUl2UCxFQUFFLElBQUkza0IsRUFBRXFnQixPQUFPcVQsV0FBVyxRQUFHLElBQVMxekMsRUFBRW96QyxjQUFjcHpCLEVBQUUyb0IsZ0JBQWdCclIsRUFBRXdiLFdBQVd4YixFQUFFaWMsUUFBUXZ6QixFQUFFNG9CLGNBQWN0UixFQUFFdWIsV0FBV3ZiLEVBQUVnYyxPQUFPdHpDLEVBQUVvekMsYUFBWSxFQUFHLElBQUloa0IsRUFBRUEsRUFBRXVWLEVBQUVBLElBQUlELEVBQUUsSUFBSXJvQyxLQUFLODNDLE1BQU05M0MsS0FBS2l2QyxJQUFJM0csR0FBR3RvQyxLQUFLaXZDLElBQUlsYyxJQUFJL3lCLEtBQUtrekIsR0FBR3Z2QixFQUFFb3pDLFlBQVlwekIsRUFBRTJvQixlQUFlakUsRUFBRWxzQyxFQUFFNDdDLFdBQVcsR0FBRzFQLEVBQUVsc0MsRUFBRTQ3QyxhQUFhcDBDLEVBQUVvekMsYUFBYXB6QixFQUFFOG5CLEtBQUssb0JBQW9CcDNCLFFBQUcsSUFBUzFRLEVBQUVxekMsY0FBYy9iLEVBQUV1YixXQUFXdmIsRUFBRWdjLFFBQVFoYyxFQUFFd2IsV0FBV3hiLEVBQUVpYyxTQUFTdnpDLEVBQUVxekMsYUFBWSxJQUFLcnpDLEVBQUVvekMsWUFBWXB6QyxFQUFFc3lDLFdBQVUsT0FBUSxHQUFHdHlDLEVBQUVxekMsWUFBWSxDQUFDcnpCLEVBQUUyeUIsWUFBVyxFQUFHamlDLEVBQUVnUCxpQkFBaUJsbkIsRUFBRTY3QywyQkFBMkI3N0MsRUFBRTg3QyxRQUFRNWpDLEVBQUU4TyxrQkFBa0J4ZixFQUFFdXlDLFVBQVUvNUMsRUFBRW0xQyxNQUFNM3RCLEVBQUVzdkIsVUFBVXR2QyxFQUFFdTBDLGVBQWV2MEIsRUFBRWttQixlQUFlbG1CLEVBQUVzc0IsY0FBYyxHQUFHdHNCLEVBQUV5dUIsV0FBV3p1QixFQUFFK29CLFdBQVdwcEIsUUFBUSxxQ0FBcUMzZixFQUFFdzBDLHFCQUFvQixHQUFJaDhDLEVBQUVpOEMsYUFBWSxJQUFLejBCLEVBQUU2dUIsaUJBQWdCLElBQUs3dUIsRUFBRTh1QixnQkFBZ0I5dUIsRUFBRWl3QixlQUFjLEdBQUlqd0IsRUFBRThuQixLQUFLLGtCQUFrQnAzQixJQUFJc1AsRUFBRThuQixLQUFLLGFBQWFwM0IsR0FBRzFRLEVBQUV1eUMsU0FBUSxFQUFHLElBQUkzTixFQUFFNWtCLEVBQUUyb0IsZUFBZXZaLEVBQUV1VixFQUFFck4sRUFBRWx5QixLQUFLdy9CLEVBQUVBLEdBQUdwc0MsRUFBRWs4QyxXQUFXNVEsSUFBSWMsR0FBR0EsR0FBRzVrQixFQUFFeXpCLGVBQWUsRUFBRTdPLEVBQUUsT0FBTyxPQUFPNWtDLEVBQUUyMEMsaUJBQWlCL1AsRUFBRTVrQyxFQUFFdTBDLGVBQWUsSUFBSTFQLEdBQUUsRUFBR255QixFQUFFbGEsRUFBRW84QyxnQkFBZ0IsR0FBR3A4QyxFQUFFdzdDLHNCQUFzQnRoQyxFQUFFLEdBQUcsRUFBRWt5QixHQUFHNWtDLEVBQUUyMEMsaUJBQWlCMzBCLEVBQUU4c0IsZ0JBQWdCakksR0FBRSxFQUFHcnNDLEVBQUVxOEMsYUFBYTcwQyxFQUFFMjBDLGlCQUFpQjMwQixFQUFFOHNCLGVBQWUsRUFBRXp3QyxLQUFLNjNDLEtBQUtsMEIsRUFBRThzQixlQUFlOXNDLEVBQUV1MEMsZUFBZTNQLEVBQUVseUIsS0FBS2t5QixFQUFFLEdBQUc1a0MsRUFBRTIwQyxpQkFBaUIzMEIsRUFBRWd0QixpQkFBaUJuSSxHQUFFLEVBQUdyc0MsRUFBRXE4QyxhQUFhNzBDLEVBQUUyMEMsaUJBQWlCMzBCLEVBQUVndEIsZUFBZSxFQUFFM3dDLEtBQUs2M0MsSUFBSWwwQixFQUFFZ3RCLGVBQWVodEMsRUFBRXUwQyxlQUFlM1AsRUFBRWx5QixLQUFLbXlCLElBQUluMEIsRUFBRXFqQyx5QkFBd0IsSUFBSy96QixFQUFFNnVCLGdCQUFnQixTQUFTN3VCLEVBQUV5ekIsZ0JBQWdCenpDLEVBQUUyMEMsaUJBQWlCMzBDLEVBQUV1MEMsaUJBQWlCdjBDLEVBQUUyMEMsaUJBQWlCMzBDLEVBQUV1MEMsaUJBQWlCdjBCLEVBQUU4dUIsZ0JBQWdCLFNBQVM5dUIsRUFBRXl6QixnQkFBZ0J6ekMsRUFBRTIwQyxpQkFBaUIzMEMsRUFBRXUwQyxpQkFBaUJ2MEMsRUFBRTIwQyxpQkFBaUIzMEMsRUFBRXUwQyxnQkFBZ0IsRUFBRS83QyxFQUFFazdDLFVBQVUsQ0FBQyxLQUFLcjNDLEtBQUtpdkMsSUFBSTFHLEdBQUdwc0MsRUFBRWs3QyxXQUFXMXpDLEVBQUUyekMsb0JBQW9CLFlBQVkzekMsRUFBRTIwQyxpQkFBaUIzMEMsRUFBRXUwQyxnQkFBZ0IsSUFBSXYwQyxFQUFFMnpDLG1CQUFtQixPQUFPM3pDLEVBQUUyekMsb0JBQW1CLEVBQUdyYyxFQUFFZ2MsT0FBT2hjLEVBQUV1YixTQUFTdmIsRUFBRWljLE9BQU9qYyxFQUFFd2IsU0FBUzl5QyxFQUFFMjBDLGlCQUFpQjMwQyxFQUFFdTBDLG9CQUFvQmpkLEVBQUVseUIsS0FBSzRhLEVBQUUyb0IsZUFBZXJSLEVBQUV1YixTQUFTdmIsRUFBRWdjLE9BQU9oYyxFQUFFd2IsU0FBU3hiLEVBQUVpYyxRQUFRLzZDLEVBQUVzOEMsZ0JBQWdCdDhDLEVBQUVzNUMsVUFBVXQ1QyxFQUFFMHpDLHFCQUFxQjF6QyxFQUFFMnpDLHlCQUF5Qm5zQixFQUFFNnRCLG9CQUFvQjd0QixFQUFFbXRCLHVCQUF1QjMwQyxFQUFFczVDLFdBQVcsSUFBSTl4QyxFQUFFKzBDLFdBQVdwN0MsUUFBUXFHLEVBQUUrMEMsV0FBVzM5QyxLQUFLLENBQUN1eEIsU0FBUzJPLEVBQUV0WCxFQUFFMm9CLGVBQWUsU0FBUyxVQUFVbFYsS0FBS3p6QixFQUFFd3pDLGlCQUFpQnh6QyxFQUFFKzBDLFdBQVczOUMsS0FBSyxDQUFDdXhCLFNBQVMyTyxFQUFFdFgsRUFBRTJvQixlQUFlLFdBQVcsWUFBWWxWLEtBQUtzUyxFQUFFcGpCLFNBQVMzQyxFQUFFK3NCLGVBQWUvc0MsRUFBRTIwQyxrQkFBa0IzMEIsRUFBRXN1QixhQUFhdHVDLEVBQUUyMEMsMkJBQTJCMzBDLEVBQUVxekMsYUFBYXJ6QyxFQUFFb3pDLGFBQWFwekIsRUFBRThuQixLQUFLLG9CQUFvQnAzQixJQUFJMmdCLEtBQUt2dUIsR0FBR0EsRUFBRWt5QyxXQUFXLFNBQVNseUMsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFb3lCLGdCQUFnQjU1QyxFQUFFd25CLEVBQUVxZ0IsT0FBTy9JLEVBQUV0WCxFQUFFdUUsUUFBUXVmLEVBQUU5akIsRUFBRWdwQixhQUFhdDRCLEVBQUVzUCxFQUFFK29CLFdBQVdoRixFQUFFL2pCLEVBQUU4ckIsV0FBV3A2QixFQUFFc08sRUFBRXVwQixTQUFTN0UsRUFBRTVoQyxFQUFFLEdBQUc0aEMsRUFBRTNpQixnQkFBZ0IyaUIsRUFBRUEsRUFBRTNpQixlQUFlL2hCLEVBQUVtekMscUJBQXFCbnpCLEVBQUU4bkIsS0FBSyxXQUFXcEQsR0FBRzFrQyxFQUFFbXpDLHFCQUFvQixHQUFJbnpDLEVBQUVzeUMsVUFBVSxPQUFPdHlDLEVBQUV1eUMsU0FBUy81QyxFQUFFaThDLFlBQVl6MEIsRUFBRWl3QixlQUFjLEdBQUlqd0MsRUFBRXV5QyxTQUFRLE9BQVF2eUMsRUFBRXF6QyxhQUFZLEdBQUk3NkMsRUFBRWk4QyxZQUFZejBDLEVBQUV1eUMsU0FBU3Z5QyxFQUFFc3lDLGFBQVksSUFBS3R5QixFQUFFNnVCLGlCQUFnQixJQUFLN3VCLEVBQUU4dUIsaUJBQWlCOXVCLEVBQUVpd0IsZUFBYyxHQUFJLElBQUk3Z0IsRUFBRXVWLEVBQUVvQixFQUFFcGpCLE1BQU1paUIsRUFBRUQsRUFBRTNrQyxFQUFFd3pDLGVBQWUsR0FBR3h6QixFQUFFMnlCLGFBQWEzeUIsRUFBRWl1QixtQkFBbUJ2SixHQUFHMWtCLEVBQUU4bkIsS0FBSyxNQUFNcEQsR0FBR0UsRUFBRSxLQUFLLElBQUlELEVBQUUza0MsRUFBRWkxQyxnQkFBZ0JqMUMsRUFBRWsxQyxjQUFjdmhCLGFBQWEzekIsRUFBRWsxQyxjQUFjbDFDLEVBQUVrMUMsYUFBYW5QLEVBQUVFLFNBQVMsV0FBV2ptQixJQUFJQSxFQUFFa3ZCLFdBQVdsdkIsRUFBRThuQixLQUFLLFFBQVFwRCxJQUFJLE1BQU1FLEVBQUUsS0FBS0QsRUFBRTNrQyxFQUFFaTFDLGNBQWMsTUFBTWoxQyxFQUFFazFDLGNBQWN2aEIsYUFBYTN6QixFQUFFazFDLGNBQWNsMUIsRUFBRThuQixLQUFLLFlBQVlwRCxLQUFLMWtDLEVBQUVpMUMsY0FBY2xQLEVBQUVwakIsTUFBTW9qQixFQUFFRSxTQUFTLFdBQVdqbUIsRUFBRWt2QixZQUFZbHZCLEVBQUUyeUIsWUFBVyxNQUFPM3lDLEVBQUVzeUMsWUFBWXR5QyxFQUFFdXlDLFVBQVV2eUIsRUFBRXl6QixnQkFBZ0IsSUFBSW5jLEVBQUVseUIsTUFBTXBGLEVBQUUyMEMsbUJBQW1CMzBDLEVBQUV1MEMsZUFBZSxPQUFPdjBDLEVBQUVzeUMsV0FBVSxFQUFHdHlDLEVBQUV1eUMsU0FBUSxPQUFRdnlDLEVBQUVxekMsYUFBWSxHQUFJLEdBQUdyekMsRUFBRXN5QyxXQUFVLEVBQUd0eUMsRUFBRXV5QyxTQUFRLEVBQUd2eUMsRUFBRXF6QyxhQUFZLEVBQUdqa0IsRUFBRTUyQixFQUFFczhDLGFBQWFoUixFQUFFOWpCLEVBQUU0c0IsV0FBVzVzQixFQUFFNHNCLFdBQVc1c0MsRUFBRTIwQyxpQkFBaUJuOEMsRUFBRXM1QyxTQUFTLENBQUMsR0FBRzFpQixHQUFHcFAsRUFBRThzQixlQUFlLFlBQVk5c0IsRUFBRXd1QixRQUFReHVCLEVBQUV1c0IsYUFBYSxHQUFHbmQsR0FBR3BQLEVBQUVndEIsZUFBZSxZQUFZaHRCLEVBQUVtcEIsT0FBT3h2QyxPQUFPK1gsRUFBRS9YLE9BQU9xbUIsRUFBRXd1QixRQUFROThCLEVBQUUvWCxPQUFPLEdBQUdxbUIsRUFBRXd1QixRQUFReHVCLEVBQUVtcEIsT0FBT3h2QyxPQUFPLElBQUksR0FBR25CLEVBQUUyOEMsaUJBQWlCLENBQUMsR0FBRyxFQUFFbjFDLEVBQUUrMEMsV0FBV3A3QyxPQUFPLENBQUMsSUFBSWtyQyxFQUFFN2tDLEVBQUUrMEMsV0FBVzcwQyxNQUFNd1MsRUFBRTFTLEVBQUUrMEMsV0FBVzcwQyxNQUFNZ2pDLEVBQUUyQixFQUFFbGMsU0FBU2pXLEVBQUVpVyxTQUFTMWxCLEVBQUU0aEMsRUFBRXBSLEtBQUsvZ0IsRUFBRStnQixLQUFLelQsRUFBRW8xQixTQUFTbFMsRUFBRWpnQyxFQUFFK2MsRUFBRW8xQixVQUFVLEVBQUUvNEMsS0FBS2l2QyxJQUFJdHJCLEVBQUVvMUIsVUFBVTU4QyxFQUFFNjhDLDBCQUEwQnIxQixFQUFFbzFCLFNBQVMsSUFBSSxJQUFJbnlDLEdBQUcsSUFBSThpQyxFQUFFcGpCLE1BQU1raUIsRUFBRXBSLFFBQVF6VCxFQUFFbzFCLFNBQVMsUUFBUXAxQixFQUFFbzFCLFNBQVMsRUFBRXAxQixFQUFFbzFCLFVBQVU1OEMsRUFBRTg4Qyw4QkFBOEJ0MUMsRUFBRSswQyxXQUFXcDdDLE9BQU8sRUFBRSxJQUFJNnZDLEVBQUUsSUFBSWh4QyxFQUFFKzhDLHNCQUFzQnQxQyxFQUFFK2YsRUFBRW8xQixTQUFTNUwsRUFBRXJ6QyxFQUFFNnBCLEVBQUU0c0IsVUFBVTNzQyxFQUFFNmpDLElBQUkzdEMsR0FBR0EsR0FBRyxJQUFJdXpDLEVBQUVDLEVBQUVDLEdBQUUsRUFBR1MsRUFBRSxHQUFHaHVDLEtBQUtpdkMsSUFBSXRyQixFQUFFbzFCLFVBQVU1OEMsRUFBRWc5Qyw0QkFBNEIsR0FBR3IvQyxFQUFFNnBCLEVBQUVndEIsZUFBZXgwQyxFQUFFaTlDLHdCQUF3QnQvQyxFQUFFNnBCLEVBQUVndEIsZ0JBQWdCM0MsSUFBSWwwQyxFQUFFNnBCLEVBQUVndEIsZUFBZTNDLEdBQUdYLEVBQUUxcEIsRUFBRWd0QixlQUFlcEQsR0FBRSxFQUFHNXBDLEVBQUV3MEMscUJBQW9CLEdBQUlyK0MsRUFBRTZwQixFQUFFZ3RCLGVBQWV4MEMsRUFBRW0xQyxNQUFNbjFDLEVBQUU2eUMsaUJBQWlCMUIsR0FBRSxRQUFTLEdBQUd4ekMsRUFBRTZwQixFQUFFOHNCLGVBQWV0MEMsRUFBRWk5Qyx3QkFBd0J0L0MsRUFBRTZwQixFQUFFOHNCLGVBQWV6QyxJQUFJbDBDLEVBQUU2cEIsRUFBRThzQixlQUFlekMsR0FBR1gsRUFBRTFwQixFQUFFOHNCLGVBQWVsRCxHQUFFLEVBQUc1cEMsRUFBRXcwQyxxQkFBb0IsR0FBSXIrQyxFQUFFNnBCLEVBQUU4c0IsZUFBZXQwQyxFQUFFbTFDLE1BQU1uMUMsRUFBRTZ5QyxpQkFBaUIxQixHQUFFLFFBQVMsR0FBR254QyxFQUFFazlDLGVBQWUsQ0FBQyxJQUFJLElBQUlwTCxFQUFFQyxFQUFFLEVBQUVBLEVBQUU3NEIsRUFBRS9YLE9BQU80d0MsR0FBRyxFQUFFLEdBQUc3NEIsRUFBRTY0QixJQUFJcDBDLEVBQUUsQ0FBQ20wQyxFQUFFQyxFQUFFLE1BQU1wMEMsSUFBTWtHLEtBQUtpdkMsSUFBSTU1QixFQUFFNDRCLEdBQUduMEMsR0FBR2tHLEtBQUtpdkMsSUFBSTU1QixFQUFFNDRCLEVBQUUsR0FBR24wQyxJQUFJLFNBQVM2cEIsRUFBRXl6QixlQUFlL2hDLEVBQUU0NEIsR0FBRzU0QixFQUFFNDRCLEVBQUUsSUFBSSxHQUFHWCxHQUFHM3BCLEVBQUVyTSxLQUFLLGdCQUFnQixXQUFXcU0sRUFBRXN2QixZQUFZLElBQUl0dkIsRUFBRW8xQixTQUFTNUwsRUFBRTFGLEVBQUV6bkMsS0FBS2l2QyxNQUFNbjFDLEVBQUU2cEIsRUFBRTRzQixXQUFXNXNCLEVBQUVvMUIsVUFBVS80QyxLQUFLaXZDLEtBQUtuMUMsRUFBRTZwQixFQUFFNHNCLFdBQVc1c0IsRUFBRW8xQixlQUFlLEdBQUc1OEMsRUFBRWs5QyxlQUFlLFlBQVkxMUIsRUFBRTB2QixpQkFBaUJsM0MsRUFBRWk5Qyx3QkFBd0I3TCxHQUFHNXBCLEVBQUUrc0IsZUFBZXJELEdBQUcxcEIsRUFBRXNzQixjQUFjOUMsR0FBR3hwQixFQUFFc3VCLGFBQWFuNEMsR0FBRzZwQixFQUFFZ3ZCLGlCQUFnQixFQUFHaHZCLEVBQUV5ekIsZ0JBQWdCenpCLEVBQUV5dUIsV0FBVSxFQUFHLzlCLEVBQUV5MEIsY0FBYyxXQUFXbmxCLElBQUlBLEVBQUVrdkIsV0FBV2x2QyxFQUFFdzBDLHNCQUFzQngwQixFQUFFOG5CLEtBQUssa0JBQWtCOW5CLEVBQUVzc0IsY0FBYzl6QyxFQUFFNjVCLE9BQU9yUyxFQUFFc3VCLGFBQWE1RSxHQUFHaDVCLEVBQUV5MEIsY0FBYyxXQUFXbmxCLElBQUlBLEVBQUVrdkIsV0FBV2x2QixFQUFFbWxCLHNCQUFzQm5sQixFQUFFbzFCLFVBQVVwMUIsRUFBRStzQixlQUFlNTJDLEdBQUc2cEIsRUFBRXNzQixjQUFjOUMsR0FBR3hwQixFQUFFc3VCLGFBQWFuNEMsR0FBRzZwQixFQUFFZ3ZCLGlCQUFnQixFQUFHaHZCLEVBQUV5ekIsZ0JBQWdCenpCLEVBQUV5dUIsWUFBWXp1QixFQUFFeXVCLFdBQVUsRUFBRy85QixFQUFFeTBCLGNBQWMsV0FBV25sQixJQUFJQSxFQUFFa3ZCLFdBQVdsdkIsRUFBRW1sQixvQkFBb0JubEIsRUFBRStzQixlQUFlNTJDLEdBQUc2cEIsRUFBRTZ0QixvQkFBb0I3dEIsRUFBRW10QiwyQkFBMkIsR0FBRzMwQyxFQUFFazlDLGVBQWUsWUFBWTExQixFQUFFMHZCLG1CQUFtQmwzQyxFQUFFMjhDLGtCQUFrQnZRLEdBQUdwc0MsRUFBRW05QyxnQkFBZ0IzMUIsRUFBRStzQixpQkFBaUIvc0IsRUFBRTZ0QixvQkFBb0I3dEIsRUFBRW10QiwyQkFBMkIsQ0FBQyxJQUFJLElBQUkzQyxFQUFFLEVBQUVDLEVBQUV6cUIsRUFBRStyQixnQkFBZ0IsR0FBR3JCLEVBQUUsRUFBRUEsRUFBRTNHLEVBQUVwcUMsT0FBTyt3QyxHQUFHbHlDLEVBQUUreUMsb0JBQWUsSUFBU3hILEVBQUUyRyxFQUFFbHlDLEVBQUUreUMsZ0JBQWdCbmMsR0FBRzJVLEVBQUUyRyxJQUFJdGIsRUFBRTJVLEVBQUUyRyxFQUFFbHlDLEVBQUUreUMsa0JBQWtCZCxFQUFFMUcsR0FBR3lHLEVBQUVFLEdBQUdseUMsRUFBRSt5QyxnQkFBZ0J4SCxFQUFFMkcsSUFBSXRiLEdBQUcyVSxFQUFFMkcsS0FBS0YsRUFBRUUsRUFBRUQsRUFBRTFHLEVBQUVBLEVBQUVwcUMsT0FBTyxHQUFHb3FDLEVBQUVBLEVBQUVwcUMsT0FBTyxJQUFJLElBQUlneEMsR0FBR3ZiLEVBQUUyVSxFQUFFeUcsSUFBSUMsRUFBRSxHQUFHN0YsRUFBRXBzQyxFQUFFbTlDLGFBQWEsQ0FBQyxJQUFJbjlDLEVBQUVvOUMsV0FBVyxZQUFZNTFCLEVBQUV3dUIsUUFBUXh1QixFQUFFdXNCLGFBQWEsU0FBU3ZzQixFQUFFeXpCLGlCQUFpQjlJLEdBQUdueUMsRUFBRXE5QyxnQkFBZ0I3MUIsRUFBRXd1QixRQUFRaEUsRUFBRWh5QyxFQUFFK3lDLGdCQUFnQnZyQixFQUFFd3VCLFFBQVFoRSxJQUFJLFNBQVN4cUIsRUFBRXl6QixpQkFBaUI5SSxFQUFFLEVBQUVueUMsRUFBRXE5QyxnQkFBZ0I3MUIsRUFBRXd1QixRQUFRaEUsRUFBRWh5QyxFQUFFK3lDLGdCQUFnQnZyQixFQUFFd3VCLFFBQVFoRSxRQUFRLENBQUMsSUFBSWh5QyxFQUFFczlDLFlBQVksWUFBWTkxQixFQUFFd3VCLFFBQVF4dUIsRUFBRXVzQixhQUFhLFNBQVN2c0IsRUFBRXl6QixnQkFBZ0J6ekIsRUFBRXd1QixRQUFRaEUsRUFBRWh5QyxFQUFFK3lDLGdCQUFnQixTQUFTdnJCLEVBQUV5ekIsZ0JBQWdCenpCLEVBQUV3dUIsUUFBUWhFLE1BQU1uWixLQUFLdnVCLEdBQUdBLEVBQUVpekMsUUFBUSxTQUFTanpDLEdBQUd4TSxLQUFLcThDLGFBQWFyOEMsS0FBSytwQyxPQUFPMlYsZUFBZWx6QyxFQUFFNGMsaUJBQWlCcHBCLEtBQUsrcEMsT0FBTzRWLDBCQUEwQjMvQyxLQUFLbTRDLFlBQVkzckMsRUFBRTBjLGtCQUFrQjFjLEVBQUUyYyw4QkFBOEI0UixLQUFLdnVCLEdBQUcsSUFBSWdoQyxFQUFFLGNBQWM5akIsRUFBRWsyQixrQkFBa0IxOUMsRUFBRTgrQixFQUFFNW1CLElBQUlzUCxFQUFFczBCLE9BQU8sR0FBR3hOLEVBQUVDLFFBQVFELEVBQUVJLGdCQUFnQkosRUFBRU8sc0JBQXNCLENBQUMsR0FBR1AsRUFBRUMsTUFBTSxDQUFDLElBQUloRCxJQUFJLGVBQWUvakMsRUFBRXVLLFFBQVF1OEIsRUFBRWEsa0JBQWtCM25CLEVBQUVtMkIsbUJBQW1CLENBQUNDLFNBQVEsRUFBR0MsU0FBUSxHQUFJdlMsRUFBRXo5QixpQkFBaUJyRyxFQUFFdUssTUFBTXpILEVBQUVxdkMsYUFBYXBPLEdBQUdELEVBQUV6OUIsaUJBQWlCckcsRUFBRXMyQyxLQUFLeHpDLEVBQUVneEMsWUFBWWhOLEVBQUVhLGdCQUFnQixDQUFDeU8sU0FBUSxFQUFHQyxRQUFRM2xDLEdBQUdBLEdBQUdvekIsRUFBRXo5QixpQkFBaUJyRyxFQUFFM0UsSUFBSXlILEVBQUVreUMsV0FBV2pSLElBQUkvakIsRUFBRWt3QixnQkFBZ0JqdEMsRUFBRTJ0QyxNQUFNM3RDLEVBQUU0dEMsU0FBUzd3QixFQUFFa3dCLGdCQUFnQnBKLEVBQUVDLE9BQU85akMsRUFBRTJ0QyxPQUFPOU0sRUFBRXo5QixpQkFBaUIsWUFBWXZELEVBQUVxdkMsY0FBYSxHQUFJalAsRUFBRTc4QixpQkFBaUIsWUFBWXZELEVBQUVneEMsWUFBWXBqQyxHQUFHd3lCLEVBQUU3OEIsaUJBQWlCLFVBQVV2RCxFQUFFa3lDLFlBQVcsU0FBVWxSLEVBQUV6OUIsaUJBQWlCckcsRUFBRXVLLE1BQU16SCxFQUFFcXZDLGNBQWEsR0FBSWpQLEVBQUU3OEIsaUJBQWlCckcsRUFBRXMyQyxLQUFLeHpDLEVBQUVneEMsWUFBWXBqQyxHQUFHd3lCLEVBQUU3OEIsaUJBQWlCckcsRUFBRTNFLElBQUl5SCxFQUFFa3lDLFlBQVcsSUFBS2gxQixFQUFFZzJCLGVBQWVoMkIsRUFBRWkyQiwyQkFBMkJuUyxFQUFFejlCLGlCQUFpQixRQUFRdkQsRUFBRWl6QyxTQUFRLEdBQUlqekMsRUFBRStiLEdBQUc1YixFQUFFMnRDLEtBQUszdEMsRUFBRTR0QyxRQUFRLDBDQUEwQyx3QkFBd0JySCxHQUFFLElBQUsrTSxhQUFhLFdBQVcsSUFBSXp6QyxFQUFFeE0sS0FBSzBwQixFQUFFbGQsRUFBRXU5QixPQUFPcmdDLEVBQUU4QyxFQUFFbXZDLFlBQVl6NUMsRUFBRXNLLEVBQUUrQixHQUFHeXlCLEVBQUV4MEIsRUFBRW92QyxVQUFVcE8sRUFBRSxjQUFjOWpCLEVBQUVrMkIsa0JBQWtCMTlDLEVBQUU4K0IsRUFBRTVtQixJQUFJc1AsRUFBRXMwQixPQUFPLEdBQUd4TixFQUFFQyxRQUFRRCxFQUFFSSxnQkFBZ0JKLEVBQUVPLHNCQUFzQixDQUFDLEdBQUdQLEVBQUVDLE1BQU0sQ0FBQyxJQUFJaEQsSUFBSSxpQkFBaUIvakMsRUFBRXVLLFFBQVF1OEIsRUFBRWEsa0JBQWtCM25CLEVBQUVtMkIsbUJBQW1CLENBQUNDLFNBQVEsRUFBR0MsU0FBUSxHQUFJdlMsRUFBRXpzQixvQkFBb0JyWCxFQUFFdUssTUFBTXpILEVBQUVxdkMsYUFBYXBPLEdBQUdELEVBQUV6c0Isb0JBQW9CclgsRUFBRXMyQyxLQUFLeHpDLEVBQUVneEMsWUFBWXBqQyxHQUFHb3pCLEVBQUV6c0Isb0JBQW9CclgsRUFBRTNFLElBQUl5SCxFQUFFa3lDLFdBQVdqUixJQUFJL2pCLEVBQUVrd0IsZ0JBQWdCanRDLEVBQUUydEMsTUFBTTN0QyxFQUFFNHRDLFNBQVM3d0IsRUFBRWt3QixnQkFBZ0JwSixFQUFFQyxPQUFPOWpDLEVBQUUydEMsT0FBTzlNLEVBQUV6c0Isb0JBQW9CLFlBQVl2VSxFQUFFcXZDLGNBQWEsR0FBSWpQLEVBQUU3ckIsb0JBQW9CLFlBQVl2VSxFQUFFZ3hDLFlBQVlwakMsR0FBR3d5QixFQUFFN3JCLG9CQUFvQixVQUFVdlUsRUFBRWt5QyxZQUFXLFNBQVVsUixFQUFFenNCLG9CQUFvQnJYLEVBQUV1SyxNQUFNekgsRUFBRXF2QyxjQUFhLEdBQUlqUCxFQUFFN3JCLG9CQUFvQnJYLEVBQUVzMkMsS0FBS3h6QyxFQUFFZ3hDLFlBQVlwakMsR0FBR3d5QixFQUFFN3JCLG9CQUFvQnJYLEVBQUUzRSxJQUFJeUgsRUFBRWt5QyxZQUFXLElBQUtoMUIsRUFBRWcyQixlQUFlaDJCLEVBQUVpMkIsMkJBQTJCblMsRUFBRXpzQixvQkFBb0IsUUFBUXZVLEVBQUVpekMsU0FBUSxHQUFJanpDLEVBQUVvYyxJQUFJamMsRUFBRTJ0QyxLQUFLM3RDLEVBQUU0dEMsUUFBUSwwQ0FBMEMsd0JBQXdCckgsS0FBV0UsRUFBRSxDQUFDbUksY0FBYyxXQUFXLElBQUkvdUMsRUFBRXhNLEtBQUswcEIsRUFBRWxkLEVBQUV5cEMsWUFBWXZzQyxFQUFFOEMsRUFBRThyQyxZQUFZcDJDLEVBQUVzSyxFQUFFc3NDLGtCQUFhLElBQVM1MkMsSUFBSUEsRUFBRSxHQUFHLElBQUk4K0IsRUFBRXgwQixFQUFFdTlCLE9BQU95RCxFQUFFeE0sRUFBRXNhLFlBQVksR0FBRzlOLEtBQUtBLEdBQUcsSUFBSWx0QyxPQUFPME4sS0FBS3cvQixHQUFHbnFDLFFBQVEsQ0FBQyxJQUFJK1csRUFBRTVOLEVBQUUwekMsY0FBYzFTLEdBQUcsR0FBR3B6QixHQUFHNU4sRUFBRTJ6QyxvQkFBb0IvbEMsRUFBRSxDQUFDLElBQUlxekIsRUFBRXJ6QixLQUFLb3pCLEVBQUVBLEVBQUVwekIsR0FBRzVOLEVBQUU0ekMsZUFBZWhsQyxFQUFFNGxCLEVBQUVxVyxNQUFNNUosRUFBRW9HLGdCQUFnQjdTLEVBQUU2UyxjQUFjcEUsRUFBRXZxQyxPQUFPc0gsRUFBRXU5QixPQUFPMEQsR0FBR2dDLEVBQUV2cUMsT0FBT3NILEVBQUUsQ0FBQyt3QyxlQUFlL3dDLEVBQUV1OUIsT0FBT3dULGVBQWVoRixlQUFlL3JDLEVBQUV1OUIsT0FBT3dPLGVBQWVDLGVBQWVoc0MsRUFBRXU5QixPQUFPeU8saUJBQWlCaHNDLEVBQUUyekMsa0JBQWtCL2xDLEVBQUVnQixHQUFHMVIsSUFBSThDLEVBQUVrdEMsY0FBY2x0QyxFQUFFOHNDLGFBQWE5c0MsRUFBRWdtQyxlQUFlaG1DLEVBQUUwckMsUUFBUXh1QixFQUFFeG5CLEVBQUVzSyxFQUFFc3NDLGFBQWEsR0FBRSxJQUFLdHNDLEVBQUVnbEMsS0FBSyxhQUFhL0QsTUFBTXlTLGNBQWMsU0FBUzF6QyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxJQUFJa2QsR0FBRSxFQUFHaGdCLEVBQUUsR0FBR3BKLE9BQU8wTixLQUFLeEIsR0FBRytpQyxRQUFRLFNBQVMvaUMsR0FBRzlDLEVBQUU1SSxLQUFLMEwsS0FBSzlDLEVBQUUxRSxLQUFLLFNBQVN3SCxFQUFFa2QsR0FBRyxPQUFPb0ssU0FBU3RuQixFQUFFLElBQUlzbkIsU0FBU3BLLEVBQUUsTUFBTSxJQUFJLElBQUl4bkIsRUFBRSxFQUFFQSxFQUFFd0gsRUFBRXJHLE9BQU9uQixHQUFHLEVBQUUsQ0FBQyxJQUFJOCtCLEVBQUV0M0IsRUFBRXhILEdBQUc4K0IsR0FBR2dNLEVBQUVxVCxhQUFhMzJCLElBQUlBLEVBQUVzWCxHQUFHLE9BQU90WCxHQUFHLFNBQVNnckIsRUFBRSxDQUFDNEwsT0FBT3RULEVBQUVDLFVBQVVDLFVBQVVyZ0MsTUFBTSxlQUFlbWdDLEVBQUVDLFVBQVVDLFVBQVVyZ0MsTUFBTSxTQUFTMHpDLFNBQWdELElBQXRDMWdELEVBQUVtdEMsRUFBRUMsVUFBVUMsVUFBVTFsQyxlQUFtQnpHLFFBQVEsV0FBV2xCLEVBQUVrQixRQUFRLFVBQVUsR0FBR2xCLEVBQUVrQixRQUFRLFdBQVcsRUFBR3kvQyxZQUFZLCtDQUErQ2h6QyxLQUFLdy9CLEVBQUVDLFVBQVVDLFlBQWdCbUcsRUFBRSxDQUFDbHdDLE1BQUssRUFBR3M5QyxVQUFVLGFBQWFiLGtCQUFrQixZQUFZdkgsYUFBYSxFQUFFdGMsTUFBTSxJQUFJcWMsZ0NBQStCLEVBQUdxRSxvQkFBbUIsRUFBR0UsbUJBQW1CLEdBQUduQixVQUFTLEVBQUdxRCxrQkFBaUIsRUFBR0ksc0JBQXNCLEVBQUVFLHdCQUF1QixFQUFHRCw0QkFBNEIsRUFBRUYsOEJBQThCLEVBQUVJLGdCQUFlLEVBQUdMLHdCQUF3QixJQUFJdEcsWUFBVyxFQUFHdEQsZ0JBQWUsRUFBRzRDLGtCQUFpQixFQUFHN0MsT0FBTyxRQUFRb0csaUJBQVksRUFBT25JLGFBQWEsRUFBRVUsY0FBYyxFQUFFRixnQkFBZ0IsRUFBRUcsb0JBQW9CLFNBQVNtQixlQUFlLEVBQUVGLGdCQUFlLEVBQUdoQyxtQkFBbUIsRUFBRUMsa0JBQWtCLEVBQUV5RSxxQkFBb0IsRUFBRy9CLGVBQWMsRUFBR2IsY0FBYSxFQUFHdUosV0FBVyxFQUFFTixXQUFXLEdBQUdsRSxlQUFjLEVBQUc0RixhQUFZLEVBQUdGLFlBQVcsRUFBR0MsZ0JBQWdCLEdBQUdGLGFBQWEsSUFBSWIsY0FBYSxFQUFHakIsZ0JBQWUsRUFBR0gsVUFBVSxFQUFFVywwQkFBeUIsRUFBR0wscUJBQW9CLEVBQUdnRCxtQkFBa0IsRUFBR25DLFlBQVcsRUFBR0QsZ0JBQWdCLElBQUkxSSxxQkFBb0IsRUFBR0MsdUJBQXNCLEVBQUdzSSxZQUFXLEVBQUd1QixlQUFjLEVBQUdDLDBCQUF5QixFQUFHN0gscUJBQW9CLEVBQUc2SSxlQUFjLEVBQUdDLHFCQUFvQixFQUFHdkosTUFBSyxFQUFHb0MscUJBQXFCLEVBQUVYLGFBQWEsS0FBS1Msd0JBQXVCLEVBQUdmLGdCQUFlLEVBQUdELGdCQUFlLEVBQUcrRCxhQUFhLEtBQUtKLFdBQVUsRUFBR0UsZUFBZSxvQkFBb0JELGtCQUFrQixLQUFLMEQsa0JBQWlCLEVBQUdnQix1QkFBdUIsb0JBQW9CL04sV0FBVyxlQUFlMEcsZ0JBQWdCLCtCQUErQnpDLGlCQUFpQixzQkFBc0JHLDBCQUEwQixnQ0FBZ0NYLGtCQUFrQix1QkFBdUJlLG9CQUFvQix5QkFBeUJOLGVBQWUsb0JBQW9CRyx3QkFBd0IsOEJBQThCRixlQUFlLG9CQUFvQkcsd0JBQXdCLDhCQUE4QjBKLGFBQWEsaUJBQWlCQyxvQkFBbUIsR0FBSXpOLEVBQUUsQ0FBQzJHLE9BQU94TSxFQUFFNkksVUFBVWxJLEVBQUVKLFdBQWwxd0IsQ0FBQ2dJLGNBQWMsU0FBU3hwQyxFQUFFa2QsR0FBRzFwQixLQUFLeXlDLFdBQVd6RSxXQUFXeGhDLEdBQUd4TSxLQUFLd3hDLEtBQUssZ0JBQWdCaGxDLEVBQUVrZCxJQUFJZ3ZCLGdCQUFnQixTQUFTbHNDLEVBQUVrZCxRQUFHLElBQVNsZCxJQUFJQSxHQUFFLEdBQUksSUFBSTlDLEVBQUUxSixLQUFLa0MsRUFBRXdILEVBQUV1c0MsWUFBWWpWLEVBQUV0M0IsRUFBRXFnQyxPQUFPeUQsRUFBRTlqQyxFQUFFZ3VDLGNBQWMxVyxFQUFFeVgsWUFBWS91QyxFQUFFcXNDLG1CQUFtQixJQUFJMzdCLEVBQUVzUCxFQUFFLEdBQU90UCxFQUFKQSxJQUFNb3pCLEVBQUV0ckMsRUFBRSxPQUFPQSxFQUFFc3JDLEVBQUUsT0FBTyxTQUFTOWpDLEVBQUU4bkMsS0FBSyxtQkFBbUJobEMsR0FBR3RLLElBQUlzckMsRUFBRSxDQUFDLEdBQUcsVUFBVXB6QixFQUFFLFlBQVkxUSxFQUFFOG5DLEtBQUssNkJBQTZCOW5DLEVBQUU4bkMsS0FBSyw4QkFBOEIsU0FBU3AzQixFQUFFMVEsRUFBRThuQyxLQUFLLDRCQUE0QjluQyxFQUFFOG5DLEtBQUssOEJBQThCM0MsY0FBYyxTQUFTcmlDLEVBQUVrZCxRQUFHLElBQVNsZCxJQUFJQSxHQUFFLEdBQUksSUFBSTlDLEVBQUUxSixLQUFLa0MsRUFBRXdILEVBQUV1c0MsWUFBWWpWLEVBQUV0M0IsRUFBRWd1QyxjQUFjaHVDLEVBQUV5dUMsV0FBVSxFQUFHenVDLEVBQUVzc0MsY0FBYyxHQUFHLElBQUl4SSxFQUFFOWpCLEVBQUUsR0FBTzhqQixFQUFKQSxJQUFNeE0sRUFBRTkrQixFQUFFLE9BQU9BLEVBQUU4K0IsRUFBRSxPQUFPLFNBQVN0M0IsRUFBRThuQyxLQUFLLGlCQUFpQmhsQyxHQUFHdEssSUFBSTgrQixFQUFFLENBQUMsR0FBRyxVQUFVd00sRUFBRSxZQUFZOWpDLEVBQUU4bkMsS0FBSywyQkFBMkI5bkMsRUFBRThuQyxLQUFLLDRCQUE0QixTQUFTaEUsRUFBRTlqQyxFQUFFOG5DLEtBQUssMEJBQTBCOW5DLEVBQUU4bkMsS0FBSyw2QkFBMGd2QndQLE1BQU0zUyxFQUFFZ0osS0FBSy9JLEVBQUU2UCxXQUFXNVAsRUFBRTBTLGFBQWE3a0MsRUFBRXFOLE9BQU85ZixFQUFFMnhDLFlBQVlsSSxFQUFFdUMsY0FBYyxDQUFDQSxjQUFjLFdBQVcsSUFBSW5wQyxFQUFFeE0sS0FBSzBwQixFQUFFbGQsRUFBRXF0QyxTQUFTcnRDLEVBQUVxdEMsU0FBUyxJQUFJcnRDLEVBQUV5bUMsU0FBUzV2QyxPQUFPbUosRUFBRStyQyxnQkFBZ0IvckMsRUFBRXF0QyxTQUFTcnRDLEVBQUVnc0MsZ0JBQWdCaHNDLEVBQUVxdEMsU0FBU253QixJQUFJbGQsRUFBRXF0QyxVQUFVcnRDLEVBQUVnbEMsS0FBS2hsQyxFQUFFcXRDLFNBQVMsT0FBTyxVQUFVbndCLEdBQUdBLElBQUlsZCxFQUFFcXRDLFdBQVdydEMsRUFBRW9xQyxPQUFNLEVBQUdwcUMsRUFBRTAwQyxXQUFXakgsWUFBWXRiLFFBQVEsQ0FBQ3dpQixXQUFXLFdBQVcsSUFBSXozQixFQUFFMXBCLEtBQUttL0IsV0FBV3oxQixFQUFFMUosS0FBSytwQyxPQUFPdjlCLEVBQUV4TSxLQUFLb2hELElBQUlsL0MsRUFBRWxDLEtBQUtreUMsSUFBSWxSLEVBQUUsR0FBR0EsRUFBRWxnQyxLQUFLNEksRUFBRSsyQyxXQUFXLzJDLEVBQUU4eEMsVUFBVXhhLEVBQUVsZ0MsS0FBSyxhQUFhMHZDLEVBQUVXLFNBQVNuUSxFQUFFbGdDLEtBQUssY0FBYzRJLEVBQUUrdUMsWUFBWXpYLEVBQUVsZ0MsS0FBSyxjQUFjMEwsR0FBR3cwQixFQUFFbGdDLEtBQUssT0FBTyxFQUFFNEksRUFBRWlxQyxpQkFBaUIzUyxFQUFFbGdDLEtBQUssWUFBWTZMLEVBQUU0dEMsU0FBU3ZaLEVBQUVsZ0MsS0FBSyxXQUFXNkwsRUFBRTJ0QyxLQUFLdFosRUFBRWxnQyxLQUFLLE9BQU80ekMsRUFBRTRMLE9BQU85UCxFQUFFSSxlQUFlSixFQUFFTyx3QkFBd0IvUCxFQUFFbGdDLEtBQUssT0FBTzRJLEVBQUUrMkMsV0FBV3pmLEVBQUV1TyxRQUFRLFNBQVMvaUMsR0FBR2tkLEVBQUU1b0IsS0FBSzRJLEVBQUVtM0MsdUJBQXVCcjBDLEtBQUt0SyxFQUFFdzhCLFNBQVNoVixFQUFFOWIsS0FBSyxPQUFPeXpDLGNBQWMsV0FBVyxJQUFJNzBDLEVBQUV4TSxLQUFLa3lDLElBQUl4b0IsRUFBRTFwQixLQUFLbS9CLFdBQVczeUIsRUFBRXV5QixZQUFZclYsRUFBRTliLEtBQUssUUFBUTB6QyxPQUFPLENBQUNDLFVBQVUsU0FBUy8wQyxFQUFFa2QsRUFBRWhnQixFQUFFeEgsRUFBRTgrQixFQUFFd00sR0FBRyxJQUFJcHpCLEVBQUUsU0FBU3F6QixJQUFJRCxHQUFHQSxNQUFJaGhDLEVBQUV3dUIsV0FBVWdHLElBQU10WCxJQUFJdFAsRUFBRSxJQUFJNHlCLEVBQUVLLE9BQU8vRSxPQUFPbUYsRUFBRXJ6QixFQUFFbXVCLFFBQVFrRixFQUFFdnJDLElBQUlrWSxFQUFFb25DLE1BQU10L0MsR0FBR3dILElBQUkwUSxFQUFFcW5DLE9BQU8vM0MsR0FBR2dnQixJQUFJdFAsRUFBRXpZLElBQUkrbkIsSUFBckYrakIsS0FBOEZrVCxjQUFjLFdBQVcsSUFBSW4wQyxFQUFFeE0sS0FBSyxTQUFTMHBCLElBQUksTUFBTWxkLEdBQUdBLElBQUlBLEVBQUVvc0MsaUJBQVksSUFBU3BzQyxFQUFFazFDLGVBQWVsMUMsRUFBRWsxQyxjQUFjLEdBQUdsMUMsRUFBRWsxQyxlQUFlbDFDLEVBQUVtMUMsYUFBYXQrQyxTQUFTbUosRUFBRXU5QixPQUFPNlcscUJBQXFCcDBDLEVBQUV5dEMsU0FBU3p0QyxFQUFFZ2xDLEtBQUssaUJBQWlCaGxDLEVBQUVtMUMsYUFBYW4xQyxFQUFFMGxDLElBQUkzaEMsS0FBSyxPQUFPLElBQUksSUFBSTdHLEVBQUUsRUFBRUEsRUFBRThDLEVBQUVtMUMsYUFBYXQrQyxPQUFPcUcsR0FBRyxFQUFFLENBQUMsSUFBSXhILEVBQUVzSyxFQUFFbTFDLGFBQWFqNEMsR0FBRzhDLEVBQUUrMEMsVUFBVXIvQyxFQUFFQSxFQUFFMC9DLFlBQVkxL0MsRUFBRUssYUFBYSxPQUFPTCxFQUFFdS9DLFFBQVF2L0MsRUFBRUssYUFBYSxVQUFVTCxFQUFFcy9DLE9BQU90L0MsRUFBRUssYUFBYSxVQUFTLEVBQUdtbkIsT0FBT3FxQixFQUFFLEdBQUdDLEVBQUUsU0FBUzFGLEdBQUcsU0FBU0MsSUFBSSxJQUFJLElBQU03a0IsRUFBRXNYLEVBQUV0M0IsRUFBRSxHQUFHeEgsRUFBRW1DLFVBQVVoQixPQUFPbkIsS0FBS3dILEVBQUV4SCxHQUFHbUMsVUFBVW5DLEdBQTRGOCtCLEdBQS9CQSxFQUExRCxJQUFJdDNCLEVBQUVyRyxRQUFRcUcsRUFBRSxHQUFHbEcsYUFBYWtHLEVBQUUsR0FBR2xHLGNBQWNsRCxPQUFTb0osRUFBRSxJQUFJZ2dCLEVBQUtoZ0IsRUFBRyxHQUFIQSxFQUFVLE1BQVUsR0FBSXMzQixFQUFFeU8sRUFBRXZxQyxPQUFPLEdBQUc4N0IsR0FBR3RYLElBQUlzWCxFQUFFenlCLEtBQUt5eUIsRUFBRXp5QixHQUFHbWIsR0FBRzRrQixFQUFFM3RDLEtBQUtYLEtBQUtnaEMsR0FBRzFnQyxPQUFPME4sS0FBS3NsQyxHQUFHL0QsUUFBUSxTQUFTN2xCLEdBQUdwcEIsT0FBTzBOLEtBQUtzbEMsRUFBRTVwQixJQUFJNmxCLFFBQVEsU0FBUy9pQyxHQUFHK2hDLEVBQUVqckMsVUFBVWtKLEtBQUsraEMsRUFBRWpyQyxVQUFVa0osR0FBRzhtQyxFQUFFNXBCLEdBQUdsZCxRQUFRLElBQUlnaEMsRUFBRXh0QyxVQUFLLElBQVN3dEMsRUFBRWtFLFVBQVVsRSxFQUFFa0UsUUFBUSxJQUFJcHhDLE9BQU8wTixLQUFLdy9CLEVBQUVrRSxTQUFTbkMsUUFBUSxTQUFTL2lDLEdBQUcsSUFBSWtkLEVBQUU4akIsRUFBRWtFLFFBQVFsbEMsR0FBRyxHQUFHa2QsRUFBRXFnQixPQUFPLENBQUMsSUFBSXJnQyxFQUFFcEosT0FBTzBOLEtBQUswYixFQUFFcWdCLFFBQVEsR0FBRzduQyxFQUFFd25CLEVBQUVxZ0IsT0FBT3JnQyxHQUFHLEdBQUcsVUFBQWdqQyxRQUFpQnhxQyxHQUFFLE9BQU8sS0FBS3dILEtBQUtzM0IsR0FBRyxZQUFZOStCLEdBQUcsUUFBTyxJQUFLOCtCLEVBQUV0M0IsS0FBS3MzQixFQUFFdDNCLEdBQUcsQ0FBQytMLFNBQVEsSUFBSyxVQUFBaTNCLFFBQWlCMUwsRUFBRXQzQixLQUFJLFlBQVlzM0IsRUFBRXQzQixLQUFLczNCLEVBQUV0M0IsR0FBRytMLFNBQVEsR0FBSXVyQixFQUFFdDNCLEtBQUtzM0IsRUFBRXQzQixHQUFHLENBQUMrTCxTQUFRLE9BQVEsSUFBSTJFLEVBQUVxMUIsRUFBRXZxQyxPQUFPLEdBQUdtdUMsR0FBRzdGLEVBQUVpRSxpQkFBaUJyM0IsR0FBR296QixFQUFFekQsT0FBTzBGLEVBQUV2cUMsT0FBTyxHQUFHa1YsRUFBRTI1QixFQUFFL1MsR0FBR3dNLEVBQUU0UyxlQUFlM1EsRUFBRXZxQyxPQUFPLEdBQUdzb0MsRUFBRXpELFFBQVF5RCxFQUFFcVUsYUFBYXBTLEVBQUV2cUMsT0FBTyxHQUFHODdCLEdBQUcsSUFBSXlNLEdBQUdELEVBQUVoQixFQUFFZSxHQUFHQyxFQUFFekQsT0FBT3g3QixJQUFJLEdBQUdtYixFQUFFK2pCLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRUEsRUFBRXBxQyxPQUFPLENBQUMsSUFBSStYLEVBQUUsR0FBRyxPQUFPcXlCLEVBQUV4cEMsS0FBSyxTQUFTdUksRUFBRWtkLEdBQUcsSUFBSWhnQixFQUFFK2xDLEVBQUV2cUMsT0FBTyxHQUFHODdCLEVBQUUsQ0FBQ3p5QixHQUFHbWIsSUFBSXRPLEVBQUV0YSxLQUFLLElBQUl5dEMsRUFBRTdrQyxNQUFNMFIsRUFBRXNPLEVBQUVvNEIsT0FBT3RVLEVBQUVDLEVBQUUvcUIsS0FBSyxTQUFTOHFCLEdBQUcsSUFBSVksRUFBRXRWLEVBQUV1VixFQUFFWixFQUFFMXlCLFNBQVMsSUFBSXl5QixFQUFFekQsT0FBTytXLGNBQWMsT0FBT3JSLEVBQUV2cUMsT0FBT3NvQyxFQUFFLENBQUMwRSxJQUFJekUsRUFBRWwvQixHQUFHbWIsRUFBRStvQixXQUFXcEUsRUFBRXVOLFVBQVV2TixFQUFFLEdBQUdsUCxXQUFXLEdBQUcwVCxPQUFPdEYsSUFBSWlJLFdBQVcsR0FBR3ZDLFNBQVMsR0FBR3dDLGdCQUFnQixHQUFHcEQsYUFBYSxXQUFXLE1BQU0sZUFBZTdFLEVBQUV6RCxPQUFPMFcsV0FBV25PLFdBQVcsV0FBVyxNQUFNLGFBQWE5RSxFQUFFekQsT0FBTzBXLFdBQVdXLElBQUksUUFBUTEzQixFQUFFcmQsSUFBSTdFLGVBQWUsUUFBUWltQyxFQUFFL29CLElBQUksYUFBYWd1QixhQUFhLGVBQWVsRixFQUFFekQsT0FBTzBXLFlBQVksUUFBUS8yQixFQUFFcmQsSUFBSTdFLGVBQWUsUUFBUWltQyxFQUFFL29CLElBQUksY0FBY2l1QixTQUFTLGdCQUFnQnRFLEVBQUUzcEIsSUFBSSxXQUFXdXhCLFlBQVksRUFBRWEsVUFBVSxFQUFFSCxhQUFZLEVBQUdDLE9BQU0sRUFBR04sVUFBVSxFQUFFMkIsa0JBQWtCLEVBQUVyNUIsU0FBUyxFQUFFa2dDLFNBQVMsRUFBRTNHLFdBQVUsRUFBR0ksZUFBZS9LLEVBQUV6RCxPQUFPd08sZUFBZUMsZUFBZWhMLEVBQUV6RCxPQUFPeU8sZUFBZW1ELGFBQWF2TixFQUFFLENBQUMsYUFBYSxZQUFZLFlBQVl0VixFQUFFLENBQUMsWUFBWSxZQUFZLFdBQVcwWCxFQUFFSSxjQUFjOVgsRUFBRSxDQUFDLGNBQWMsY0FBYyxhQUFhMFgsRUFBRU8sd0JBQXdCalksRUFBRSxDQUFDLGdCQUFnQixnQkFBZ0IsZ0JBQWdCMFUsRUFBRXVVLGlCQUFpQixDQUFDOXRDLE1BQU1tNkIsRUFBRSxHQUFHNFIsS0FBSzVSLEVBQUUsR0FBR3JwQyxJQUFJcXBDLEVBQUUsSUFBSVosRUFBRXdVLG1CQUFtQixDQUFDL3RDLE1BQU02a0IsRUFBRSxHQUFHa25CLEtBQUtsbkIsRUFBRSxHQUFHL3pCLElBQUkrekIsRUFBRSxJQUFJMFgsRUFBRUMsUUFBUWpELEVBQUV6RCxPQUFPNlAsY0FBY3BNLEVBQUV1VSxpQkFBaUJ2VSxFQUFFd1Usb0JBQW9CbEcsZ0JBQWdCLENBQUNFLGVBQVUsRUFBT0MsYUFBUSxFQUFPWSx5QkFBb0IsRUFBT0ssb0JBQWUsRUFBT0osaUJBQVksRUFBT3VCLHNCQUFpQixFQUFPSixvQkFBZSxFQUFPWix3QkFBbUIsRUFBT0MsYUFBYSxpREFBaURxQixjQUFjbFAsRUFBRXBqQixNQUFNdXlCLGtCQUFhLEVBQU9ILFdBQVcsR0FBR1AseUJBQW9CLEVBQU9uQyxrQkFBYSxFQUFPZ0IsaUJBQVksR0FBUVYsWUFBVyxFQUFHa0IsZUFBZS9QLEVBQUV6RCxPQUFPd1QsZUFBZXR2QixRQUFRLENBQUMrdUIsT0FBTyxFQUFFQyxPQUFPLEVBQUVWLFNBQVMsRUFBRUMsU0FBUyxFQUFFMXRDLEtBQUssR0FBRzZ5QyxhQUFhLEdBQUdELGFBQWEsSUFBSWxVLEVBQUVtRSxhQUFhbkUsRUFBRXpELE9BQU81bUMsTUFBTXFxQyxFQUFFcnFDLE9BQU9xcUMsR0FBR2MsSUFBSUMsRUFBRTBULFVBQVUzVCxHQUFHLElBQUk5aEMsRUFBRSxDQUFDMDFDLGlCQUFpQixDQUFDMS9CLGNBQWEsR0FBSTIvQixTQUFTLENBQUMzL0IsY0FBYSxHQUFJa3JCLE1BQU0sQ0FBQ2xyQixjQUFhLEdBQUlncUIsRUFBRSxDQUFDaHFCLGNBQWEsSUFBSyxRQUFRK3JCLEVBQUVqckMsVUFBVWhELE9BQU9naUIsT0FBT2dzQixHQUFHQSxFQUFFaHJDLFlBQVlFLFlBQVkrcUMsR0FBR2pyQyxVQUFVKzFDLHFCQUFxQixXQUFXLElBQUk3c0MsRUFBRXhNLEtBQUswcEIsRUFBRWxkLEVBQUV1OUIsT0FBT3JnQyxFQUFFOEMsRUFBRXFtQyxPQUFPM3dDLEVBQUVzSyxFQUFFZ3BDLFdBQVd4VSxFQUFFeDBCLEVBQUUrbEMsS0FBSy9FLEVBQUVoaEMsRUFBRXlwQyxZQUFZNzdCLEVBQUUsRUFBRSxHQUFHc1AsRUFBRXFyQixlQUFlLENBQUMsSUFBSSxJQUFJdEgsRUFBRXJ5QixFQUFFMVIsRUFBRThqQyxHQUFHc0gsZ0JBQWdCMUcsRUFBRVosRUFBRSxFQUFFWSxFQUFFMWtDLEVBQUVyRyxPQUFPK3FDLEdBQUcsRUFBRTFrQyxFQUFFMGtDLEtBQUtYLElBQUlyekIsR0FBRyxFQUFFNG1CLEdBQUc1bEIsR0FBRzFSLEVBQUUwa0MsR0FBRzBHLG1CQUFtQnJILEdBQUUsSUFBSyxJQUFJLElBQUkzVSxFQUFFMFUsRUFBRSxFQUFFLEdBQUcxVSxJQUFFQSxFQUFLcHZCLEVBQUVvdkIsS0FBSzJVLElBQUlyekIsR0FBRyxFQUFFNG1CLEdBQUc1bEIsR0FBRzFSLEVBQUVvdkIsR0FBR2djLG1CQUFtQnJILEdBQUUsU0FBVSxJQUFJLElBQUlZLEVBQUViLEVBQUUsRUFBRWEsRUFBRTNrQyxFQUFFckcsT0FBT2dyQyxHQUFHLEVBQUVuc0MsRUFBRW1zQyxHQUFHbnNDLEVBQUVzckMsR0FBR3hNLElBQUk1bUIsR0FBRyxHQUFHLE9BQU9BLEdBQUdtMEIsRUFBRWpyQyxVQUFVMjJDLE9BQU8sV0FBVyxJQUFJdndDLEVBQUUxSixLQUFLLEdBQUcwSixJQUFJQSxFQUFFa3ZDLFVBQVUsQ0FBQyxJQUFJcHNDLEVBQUU5QyxFQUFFdXBDLFNBQVN2cEIsRUFBRWhnQixFQUFFcWdDLE9BQU9yZ0IsRUFBRTR4QixhQUFhNXhDLEVBQUU2eEMsZ0JBQWdCN3hDLEVBQUV1b0MsYUFBYXZvQyxFQUFFOG9DLGVBQWU5b0MsRUFBRStzQyxpQkFBaUIvc0MsRUFBRW10QyxzQkFBc0JudEMsRUFBRXFnQyxPQUFPeVIsVUFBVXQ1QyxJQUFJd0gsRUFBRXFnQyxPQUFPME8sWUFBWS91QyxFQUFFcXNDLHNCQUFzQixTQUFTcnNDLEVBQUVxZ0MsT0FBTzhKLGVBQWUsRUFBRW5xQyxFQUFFcWdDLE9BQU84SixnQkFBZ0JucUMsRUFBRWt0QyxRQUFRbHRDLEVBQUVxZ0MsT0FBT2dMLGVBQWVyckMsRUFBRXd1QyxRQUFReHVDLEVBQUVtcEMsT0FBT3h2QyxPQUFPLEVBQUUsR0FBRSxHQUFHLEdBQUlxRyxFQUFFd3VDLFFBQVF4dUMsRUFBRXVzQyxZQUFZLEdBQUUsR0FBRyxLQUFNL3pDLElBQUl3bkIsRUFBRWdzQixlQUFlbHBDLElBQUk5QyxFQUFFdXBDLFVBQVV2cEMsRUFBRWlzQyxnQkFBZ0Jqc0MsRUFBRThuQyxLQUFLLFVBQVUsU0FBU3R2QyxJQUFJLElBQUlzSyxFQUFFOUMsRUFBRWdwQyxjQUFjLEVBQUVocEMsRUFBRTRzQyxVQUFVNXNDLEVBQUU0c0MsVUFBVTVzQixFQUFFM2pCLEtBQUswMUMsSUFBSTExQyxLQUFLaXZCLElBQUl4b0IsRUFBRTlDLEVBQUVndEMsZ0JBQWdCaHRDLEVBQUU4c0MsZ0JBQWdCOXNDLEVBQUVzdUMsYUFBYXR1QixHQUFHaGdCLEVBQUU2dEMsb0JBQW9CN3RDLEVBQUVtdEMsd0JBQXdCdEksRUFBRWpyQyxVQUFVSCxLQUFLLFdBQVcsSUFBSXFKLEVBQUV4TSxLQUFLd00sRUFBRThyQyxjQUFjOXJDLEVBQUVnbEMsS0FBSyxjQUFjaGxDLEVBQUV1OUIsT0FBT3VSLGFBQWE5dUMsRUFBRSt1QyxnQkFBZ0IvdUMsRUFBRTIwQyxhQUFhMzBDLEVBQUV1OUIsT0FBT3NOLE1BQU03cUMsRUFBRThzQyxhQUFhOXNDLEVBQUV5bEMsYUFBYXpsQyxFQUFFZ21DLGVBQWVobUMsRUFBRXU5QixPQUFPMkwsZUFBZWxwQyxFQUFFbXBDLGdCQUFnQm5wQyxFQUFFdTlCLE9BQU9vVSxZQUFZM3hDLEVBQUVtdEMsZ0JBQWdCbnRDLEVBQUV1OUIsT0FBTzRXLGVBQWVuMEMsRUFBRW0wQyxnQkFBZ0JuMEMsRUFBRXU5QixPQUFPc04sS0FBSzdxQyxFQUFFMHJDLFFBQVExckMsRUFBRXU5QixPQUFPc08sYUFBYTdyQyxFQUFFc3NDLGFBQWEsRUFBRXRzQyxFQUFFdTlCLE9BQU9nWCxvQkFBb0J2MEMsRUFBRTByQyxRQUFRMXJDLEVBQUV1OUIsT0FBT3NPLGFBQWEsRUFBRTdyQyxFQUFFdTlCLE9BQU9nWCxvQkFBb0J2MEMsRUFBRWt2QyxlQUFlbHZDLEVBQUU4ckMsYUFBWSxFQUFHOXJDLEVBQUVnbEMsS0FBSyxVQUFVakQsRUFBRWpyQyxVQUFVOCtDLFFBQVEsU0FBUzUxQyxFQUFFa2QsUUFBRyxJQUFTbGQsSUFBSUEsR0FBRSxRQUFJLElBQVNrZCxJQUFJQSxHQUFFLEdBQUksSUFBSWhnQixFQUFFMUosS0FBS2tDLEVBQUV3SCxFQUFFcWdDLE9BQU8vSSxFQUFFdDNCLEVBQUV3b0MsSUFBSTFFLEVBQUU5akMsRUFBRStvQyxXQUFXcjRCLEVBQUUxUSxFQUFFbXBDLE9BQU8sWUFBTyxJQUFTbnBDLEVBQUVxZ0MsUUFBUXJnQyxFQUFFa3ZDLFlBQVlsdkMsRUFBRThuQyxLQUFLLGlCQUFpQjluQyxFQUFFNHVDLGFBQVksRUFBRzV1QyxFQUFFdTJDLGVBQWUvOUMsRUFBRW0xQyxNQUFNM3RDLEVBQUVnd0MsY0FBY2h3QixJQUFJaGdCLEVBQUUyM0MsZ0JBQWdCcmdCLEVBQUV0RCxXQUFXLFNBQVM4UCxFQUFFOVAsV0FBVyxTQUFTdGpCLEdBQUdBLEVBQUUvVyxRQUFRK1csRUFBRTJrQixZQUFZLENBQUM3OEIsRUFBRXEwQyxrQkFBa0JyMEMsRUFBRTYwQyxpQkFBaUI3MEMsRUFBRTgwQyxlQUFlOTBDLEVBQUUrMEMsZ0JBQWdCcnBDLEtBQUssTUFBTTh2QixXQUFXLFNBQVNBLFdBQVcsMkJBQTJCQSxXQUFXLHNCQUFzQkEsV0FBVyxvQkFBb0JoMEIsRUFBRThuQyxLQUFLLFdBQVdseEMsT0FBTzBOLEtBQUt0RSxFQUFFOGxDLGlCQUFpQkQsUUFBUSxTQUFTL2lDLEdBQUc5QyxFQUFFa2YsSUFBSXBjLE1BQUssSUFBS0EsSUFBSTlDLEVBQUV3b0MsSUFBSSxHQUFHNFAsT0FBTyxLQUFLcDRDLEVBQUV3b0MsSUFBSXh2QixLQUFLLFNBQVMsTUFBTStzQixFQUFFQyxZQUFZaG1DLElBQUlBLEVBQUVrdkMsV0FBVSxHQUFJLE1BQU1ySyxFQUFFOFQsZUFBZSxTQUFTNzFDLEdBQUdpakMsRUFBRXZxQyxPQUFPNnVDLEVBQUV2bkMsSUFBSUEsRUFBRTAxQyxpQkFBaUJ4K0MsSUFBSSxXQUFXLE9BQU9xd0MsR0FBR3ZuQyxFQUFFMjFDLFNBQVN6K0MsSUFBSSxXQUFXLE9BQU8ydkMsR0FBRzdtQyxFQUFFa2hDLE1BQU1ocUMsSUFBSSxXQUFXLE9BQU80cUMsR0FBRzloQyxFQUFFZ2dDLEVBQUU5b0MsSUFBSSxXQUFXLE9BQU82cEMsR0FBR2p0QyxPQUFPMHhDLGlCQUFpQnpELEVBQUUvaEMsR0FBRytoQyxFQUEzeUssQ0FBOHlLdk4sR0FBR2lULEVBQUUsQ0FBQzd1QyxLQUFLLFNBQVNrQixNQUFNLENBQUNnOEMsT0FBTzMxQyxHQUFHNDFDLE9BQU8sQ0FBQ0QsT0FBTzMxQyxJQUFJdW5DLEVBQUUsQ0FBQzl1QyxLQUFLLFVBQVVrQixNQUFNLENBQUNoRixRQUFRa3ZDLEdBQUcrUixPQUFPLENBQUNqaEQsUUFBUWt2QyxJQUFJMkQsRUFBRSxDQUFDL3VDLEtBQUssVUFBVWtCLE1BQU0sQ0FBQ2s4QyxRQUFROU4sR0FBRzZOLE9BQU8sQ0FBQ0MsUUFBUTlOLElBQUlOLEVBQUUsQ0FBQ2h2QyxLQUFLLFNBQVNrZCxPQUFPLFdBQVcsSUFBSTlWLEVBQUV4TSxLQUFLeXZDLEVBQUV2cUMsT0FBT3NILEVBQUUsQ0FBQ2kyQyxPQUFPLENBQUNDLGNBQWMsV0FBV2wyQyxJQUFJQSxFQUFFb3NDLFdBQVdwc0MsRUFBRThyQyxjQUFjOXJDLEVBQUVnbEMsS0FBSyxnQkFBZ0JobEMsRUFBRWdsQyxLQUFLLFlBQVltUix5QkFBeUIsV0FBV24yQyxJQUFJQSxFQUFFb3NDLFdBQVdwc0MsRUFBRThyQyxhQUFhOXJDLEVBQUVnbEMsS0FBSywwQkFBMEJqcEIsR0FBRyxDQUFDcGxCLEtBQUssV0FBVzZwQyxFQUFFajlCLGlCQUFpQixTQUFTL1AsS0FBS3lpRCxPQUFPQyxlQUFlMVYsRUFBRWo5QixpQkFBaUIsb0JBQW9CL1AsS0FBS3lpRCxPQUFPRSwyQkFBMkJQLFFBQVEsV0FBV3BWLEVBQUVqc0Isb0JBQW9CLFNBQVMvZ0IsS0FBS3lpRCxPQUFPQyxlQUFlMVYsRUFBRWpzQixvQkFBb0Isb0JBQW9CL2dCLEtBQUt5aUQsT0FBT0UsNkJBQTZCdE8sRUFBRSxDQUFDcDJCLEtBQUsrdUIsRUFBRTRWLGtCQUFrQjVWLEVBQUU2Vix1QkFBdUJDLE9BQU8sU0FBU3QyQyxFQUFFa2QsUUFBRyxJQUFTQSxJQUFJQSxFQUFFLElBQUksSUFBSWhnQixFQUFFMUosS0FBS2tDLEVBQUUsSUFBSW15QyxFQUFFcDJCLEtBQUssU0FBU3pSLEdBQUcsR0FBRyxJQUFJQSxFQUFFbkosT0FBTyxDQUFDLElBQUlxbUIsRUFBRSxXQUFXaGdCLEVBQUU4bkMsS0FBSyxpQkFBaUJobEMsRUFBRSxLQUFLd2dDLEVBQUV2VCxzQkFBc0J1VCxFQUFFdlQsc0JBQXNCL1AsR0FBR3NqQixFQUFFbHRCLFdBQVc0SixFQUFFLFFBQVFoZ0IsRUFBRThuQyxLQUFLLGlCQUFpQmhsQyxFQUFFLE1BQU10SyxFQUFFNmdELFFBQVF2MkMsRUFBRSxDQUFDdEMsZ0JBQVcsSUFBU3dmLEVBQUV4ZixZQUFZd2YsRUFBRXhmLFdBQVc4NEMsZUFBVSxJQUFTdDVCLEVBQUVzNUIsV0FBV3Q1QixFQUFFczVCLFVBQVVDLG1CQUFjLElBQVN2NUIsRUFBRXU1QixlQUFldjVCLEVBQUV1NUIsZ0JBQWdCdjVDLEVBQUUwbkMsU0FBUzhSLFVBQVVwaUQsS0FBS29CLElBQUlpQixLQUFLLFdBQVcsSUFBSXFKLEVBQUV4TSxLQUFLLEdBQUd3d0MsRUFBRVksVUFBVTVrQyxFQUFFdTlCLE9BQU9xSCxTQUFTLENBQUMsR0FBRzVrQyxFQUFFdTlCLE9BQU9vWixlQUFlLElBQUksSUFBSXo1QixFQUFFbGQsRUFBRTBsQyxJQUFJeDJCLFVBQVVoUyxFQUFFLEVBQUVBLEVBQUVnZ0IsRUFBRXJtQixPQUFPcUcsR0FBRyxFQUFFOEMsRUFBRTRrQyxTQUFTMFIsT0FBT3A1QixFQUFFaGdCLElBQUk4QyxFQUFFNGtDLFNBQVMwUixPQUFPdDJDLEVBQUUwbEMsSUFBSSxHQUFHLENBQUM4USxXQUFVLElBQUt4MkMsRUFBRTRrQyxTQUFTMFIsT0FBT3QyQyxFQUFFaW1DLFdBQVcsR0FBRyxDQUFDdm9DLFlBQVcsTUFBT2s0QyxRQUFRLFdBQVdwaUQsS0FBS294QyxTQUFTOFIsVUFBVTNULFFBQVEsU0FBUy9pQyxHQUFHQSxFQUFFNDJDLGVBQWVwakQsS0FBS294QyxTQUFTOFIsVUFBVSxLQUFLMVcsRUFBRSxDQUFDcG5DLEtBQUssV0FBVzJrQyxPQUFPLENBQUNxSCxVQUFTLEVBQUcrUixnQkFBZSxHQUFJN2dDLE9BQU8sV0FBV210QixFQUFFdnFDLE9BQU9sRixLQUFLLENBQUNveEMsU0FBUyxDQUFDanVDLEtBQUtreEMsRUFBRWx4QyxLQUFLNDNCLEtBQUsvNkIsTUFBTThpRCxPQUFPek8sRUFBRXlPLE9BQU8vbkIsS0FBSy82QixNQUFNb2lELFFBQVEvTixFQUFFK04sUUFBUXJuQixLQUFLLzZCLE1BQU1rakQsVUFBVSxPQUFPMzZCLEdBQUcsQ0FBQ3BsQixLQUFLLFdBQVduRCxLQUFLb3hDLFNBQVNqdUMsUUFBUWkvQyxRQUFRLFdBQVdwaUQsS0FBS294QyxTQUFTZ1IsYUFBYXpOLEVBQUUsQ0FBQ3NGLE9BQU8sU0FBU3p0QyxHQUFHLElBQUlrZCxFQUFFMXBCLEtBQUswSixFQUFFZ2dCLEVBQUVxZ0IsT0FBTzduQyxFQUFFd0gsRUFBRW1xQyxjQUFjN1MsRUFBRXQzQixFQUFFdXJDLGVBQWV6SCxFQUFFOWpDLEVBQUVxckMsZUFBZTM2QixFQUFFc1AsRUFBRWtwQixRQUFRbkYsRUFBRXJ6QixFQUFFaXBDLEtBQUtqb0MsRUFBRWhCLEVBQUU4aEIsR0FBR2tTLEVBQUVoMEIsRUFBRXk0QixPQUFPL1osRUFBRTFlLEVBQUVvN0IsV0FBV25ILEVBQUVqMEIsRUFBRWtwQyxZQUFZaFYsRUFBRWwwQixFQUFFNnZCLE9BQU92Z0IsRUFBRTZ0QixvQkFBb0IsSUFBSWhKLEVBQUVueUIsRUFBRXd3QixFQUFFamdDLEVBQUUrYyxFQUFFdXNCLGFBQWEsRUFBRTFILEVBQUU3a0IsRUFBRWdwQixhQUFhLFFBQVFocEIsRUFBRTJvQixlQUFlLE9BQU8sTUFBNkJ6RixFQUF2QlksR0FBR3B4QixFQUFFclcsS0FBSzZ0QyxNQUFNMXhDLEVBQUUsR0FBRzgrQixFQUFJajdCLEtBQUs2dEMsTUFBTTF4QyxFQUFFLEdBQUc4K0IsSUFBSTVrQixFQUFFbGEsR0FBRzgrQixFQUFFLEdBQUtBLEdBQUcsSUFBSWtTLEVBQUVudEMsS0FBS2l2QixLQUFLcm9CLEdBQUcsR0FBR2lnQyxFQUFFLEdBQUdqakMsRUFBRTVELEtBQUswMUMsS0FBSzl1QyxHQUFHLEdBQUd5UCxFQUFFZ3lCLEVBQUUvcUMsT0FBTyxHQUFHeEQsR0FBRzZwQixFQUFFOHJCLFdBQVd0QyxJQUFJLElBQUl4cEIsRUFBRThyQixXQUFXLElBQUksR0FBRyxTQUFTcEMsSUFBSTFwQixFQUFFOG9CLGVBQWU5b0IsRUFBRStzQixpQkFBaUIvc0IsRUFBRW10QixzQkFBc0JudEIsRUFBRTY1QixNQUFNNzVCLEVBQUVxZ0IsT0FBT3daLEtBQUs5dEMsU0FBU2lVLEVBQUU2NUIsS0FBSzUzQixPQUFPLEdBQUc4akIsRUFBRXZxQyxPQUFPd2tCLEVBQUVrcEIsUUFBUSxDQUFDeVEsS0FBS25RLEVBQUVoWCxHQUFHdnlCLEVBQUVzZ0MsT0FBT3BxQyxFQUFFMjFDLFdBQVc5ckIsRUFBRThyQixhQUFhL0gsSUFBSXlGLEdBQUc5M0IsSUFBSXpSLElBQUk2QyxFQUFFLE9BQU9rZCxFQUFFOHJCLGFBQWExYyxHQUFHajVCLElBQUl5dUMsR0FBRzVrQixFQUFFbXBCLE9BQU9udUIsSUFBSTZwQixFQUFFMXVDLEVBQUUsV0FBVzZwQixFQUFFK3NCLGlCQUFpQixHQUFHL3NCLEVBQUVxZ0IsT0FBTzZJLFFBQVE0USxlQUFlLE9BQU85NUIsRUFBRXFnQixPQUFPNkksUUFBUTRRLGVBQWU3aUQsS0FBSytvQixFQUFFLENBQUN1Z0IsT0FBT3BxQyxFQUFFd2pELEtBQUtuUSxFQUFFaFgsR0FBR3Z5QixFQUFFa3BDLE9BQU8sV0FBVyxJQUFJLElBQUlybUMsRUFBRSxHQUFHa2QsRUFBRXdwQixFQUFFeHBCLEdBQUcvZixFQUFFK2YsR0FBRyxFQUFFbGQsRUFBRTFMLEtBQUtzdEMsRUFBRTFrQixJQUFJLE9BQU9sZCxFQUExRCxVQUFzRTRtQyxJQUFJLElBQUlDLEVBQUUsR0FBR0MsRUFBRSxHQUFHLEdBQUc5bUMsRUFBRWtkLEVBQUUrb0IsV0FBV2xpQyxLQUFLLElBQUltWixFQUFFcWdCLE9BQU8rSSxZQUFZbDFCLGNBQWMsSUFBSSxJQUFJbTJCLEVBQUV0RyxFQUFFc0csR0FBRzM0QixFQUFFMjRCLEdBQUcsR0FBR0EsRUFBRWIsR0FBR3ZwQyxFQUFFb3FDLElBQUlycUIsRUFBRStvQixXQUFXbGlDLEtBQUssSUFBSW1aLEVBQUVxZ0IsT0FBTytJLFdBQVcsNkJBQTZCaUIsRUFBRSxNQUFNbjJCLFNBQVMsSUFBSSxJQUFJbzJCLEVBQUUsRUFBRUEsRUFBRTVGLEVBQUUvcUMsT0FBTzJ3QyxHQUFHLEVBQUVkLEdBQUdjLEdBQUdBLEdBQUdycUMsU0FBSSxJQUFTeVIsR0FBRzVPLEVBQUU4bUMsRUFBRXh5QyxLQUFLa3pDLElBQUk1NEIsRUFBRTQ0QixHQUFHVixFQUFFeHlDLEtBQUtrekMsR0FBR0EsRUFBRXZHLEdBQUc0RixFQUFFdnlDLEtBQUtrekMsS0FBS1YsRUFBRS9ELFFBQVEsU0FBUy9pQyxHQUFHa2QsRUFBRStvQixXQUFXdGlCLE9BQU9rZSxFQUFFRCxFQUFFNWhDLEdBQUdBLE1BQU02bUMsRUFBRXJ1QyxLQUFLLFNBQVN3SCxFQUFFa2QsR0FBRyxPQUFPbGQsRUFBRWtkLElBQUk2bEIsUUFBUSxTQUFTL2lDLEdBQUdrZCxFQUFFK29CLFdBQVdyaUIsUUFBUWllLEVBQUVELEVBQUU1aEMsR0FBR0EsTUFBTWtkLEVBQUUrb0IsV0FBVzEzQixTQUFTLGlCQUFpQjJKLElBQUk2cEIsRUFBRTF1QyxFQUFFLE1BQU11ekMsS0FBS2tRLFlBQVksU0FBUzkyQyxFQUFFa2QsR0FBRyxJQUFJaGdCLEVBQUUxSixLQUFLa0MsRUFBRXdILEVBQUVxZ0MsT0FBTzZJLFFBQVEsR0FBRzF3QyxFQUFFK0wsT0FBT3ZFLEVBQUVrcEMsUUFBUTNrQyxNQUFNeWIsR0FBRyxPQUFPaGdCLEVBQUVrcEMsUUFBUTNrQyxNQUFNeWIsR0FBRyxJQUFJc1gsRUFBRTkrQixFQUFFb2hELFlBQVkvVixFQUFFcnJDLEVBQUVvaEQsWUFBWTNpRCxLQUFLK0ksRUFBRThDLEVBQUVrZCxJQUFJNmpCLEVBQUUsZUFBZTdqQyxFQUFFcWdDLE9BQU8rSSxXQUFXLDhCQUE4QnBwQixFQUFFLEtBQUtsZCxFQUFFLFVBQVUsT0FBT3cwQixFQUFFbHZCLEtBQUssNEJBQTRCa3ZCLEVBQUVsdkIsS0FBSywwQkFBMEI0WCxHQUFHeG5CLEVBQUUrTCxRQUFRdkUsRUFBRWtwQyxRQUFRM2tDLE1BQU15YixHQUFHc1gsR0FBR0EsR0FBR2daLFlBQVksU0FBU3h0QyxHQUFHeE0sS0FBSzR5QyxRQUFRQyxPQUFPL3hDLEtBQUswTCxHQUFHeE0sS0FBSzR5QyxRQUFRcUgsUUFBTyxJQUFLQyxhQUFhLFNBQVMxdEMsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLLEdBQUcwcEIsRUFBRWtwQixRQUFRQyxPQUFPbGhDLFFBQVFuRixHQUFHa2QsRUFBRXFnQixPQUFPNkksUUFBUTNrQyxNQUFNLENBQUMsSUFBSXZFLEVBQUVnZ0IsRUFBRWtwQixRQUFRM2tDLE1BQU0vTCxFQUFFLEdBQUc1QixPQUFPME4sS0FBS3RFLEdBQUc2bEMsUUFBUSxTQUFTL2lDLEdBQUd0SyxFQUFFc0ssRUFBRSxHQUFHOUMsRUFBRThDLEtBQUtrZCxFQUFFa3BCLFFBQVEza0MsTUFBTS9MLEVBQUV3bkIsRUFBRWtwQixRQUFRcUgsUUFBTyxHQUFJdndCLEVBQUVxdkIsVUFBVSxLQUFLbkUsRUFBRSxDQUFDeHZDLEtBQUssVUFBVTJrQyxPQUFPLENBQUM2SSxRQUFRLENBQUNuOUIsU0FBUSxFQUFHbzlCLE9BQU8sR0FBRzVrQyxPQUFNLEVBQUdxMUMsWUFBWSxLQUFLRSxlQUFlLE9BQU9saEMsT0FBTyxXQUFXLElBQUk5VixFQUFFeE0sS0FBS3l2QyxFQUFFdnFDLE9BQU9zSCxFQUFFLENBQUNvbUMsUUFBUSxDQUFDcUgsT0FBT3RGLEVBQUVzRixPQUFPbGYsS0FBS3Z1QixHQUFHd3RDLFlBQVlyRixFQUFFcUYsWUFBWWpmLEtBQUt2dUIsR0FBRzB0QyxhQUFhdkYsRUFBRXVGLGFBQWFuZixLQUFLdnVCLEdBQUc4MkMsWUFBWTNPLEVBQUUyTyxZQUFZdm9CLEtBQUt2dUIsR0FBR3FtQyxPQUFPcm1DLEVBQUV1OUIsT0FBTzZJLFFBQVFDLE9BQU81a0MsTUFBTSxPQUFPc2EsR0FBRyxDQUFDazdCLFdBQVcsV0FBVyxJQUFJajNDLEVBQUV4TSxLQUFLLEdBQUd3TSxFQUFFdTlCLE9BQU82SSxRQUFRbjlCLFFBQVEsQ0FBQ2pKLEVBQUUyeUIsV0FBV3IrQixLQUFLMEwsRUFBRXU5QixPQUFPOFcsdUJBQXVCLFdBQVcsSUFBSW4zQixFQUFFLENBQUNrc0IscUJBQW9CLEdBQUluRyxFQUFFdnFDLE9BQU9zSCxFQUFFdTlCLE9BQU9yZ0IsR0FBRytsQixFQUFFdnFDLE9BQU9zSCxFQUFFNHpDLGVBQWUxMkIsR0FBR2xkLEVBQUVvbUMsUUFBUXFILFdBQVdqQyxhQUFhLFdBQVdoNEMsS0FBSytwQyxPQUFPNkksUUFBUW45QixTQUFTelYsS0FBSzR5QyxRQUFRcUgsWUFBWTdFLEVBQUUsQ0FBQ3ByQixPQUFPLFNBQVN4ZCxHQUFHLElBQUlrZCxFQUFFMXBCLEtBQUswSixFQUFFZ2dCLEVBQUVncEIsYUFBYXh3QyxFQUFFc0ssRUFBRXRLLEVBQUV1cEIsZ0JBQWdCdnBCLEVBQUVBLEVBQUV1cEIsZUFBZSxJQUFJdVYsRUFBRTkrQixFQUFFbXJCLFNBQVNuckIsRUFBRWtyQixTQUFTLElBQUkxRCxFQUFFNnVCLGlCQUFpQjd1QixFQUFFMm9CLGdCQUFnQixLQUFLclIsR0FBR3RYLEVBQUU0b0IsY0FBYyxLQUFLdFIsR0FBRyxPQUFNLEVBQUcsSUFBSXRYLEVBQUU4dUIsaUJBQWlCOXVCLEVBQUUyb0IsZ0JBQWdCLEtBQUtyUixHQUFHdFgsRUFBRTRvQixjQUFjLEtBQUt0UixHQUFHLE9BQU0sRUFBRyxLQUFLOStCLEVBQUUrcUIsVUFBVS9xQixFQUFFcXFCLFFBQVFycUIsRUFBRXlxQixTQUFTenFCLEVBQUU0cUIsU0FBUzhmLEVBQUV2M0IsZUFBZXUzQixFQUFFdjNCLGNBQWNqSixXQUFXLFVBQVV3Z0MsRUFBRXYzQixjQUFjakosU0FBUzVFLGVBQWUsYUFBYW9sQyxFQUFFdjNCLGNBQWNqSixTQUFTNUUsZ0JBQWdCLENBQUMsR0FBR2tpQixFQUFFcWdCLE9BQU8yWixTQUFTQyxpQkFBaUIsS0FBSzNpQixHQUFHLEtBQUtBLEdBQUcsS0FBS0EsR0FBRyxLQUFLQSxHQUFHLENBQUMsSUFBSXdNLEdBQUUsRUFBRyxHQUFHLEVBQUU5akIsRUFBRXdvQixJQUFJeDJCLFFBQVEsSUFBSWdPLEVBQUVxZ0IsT0FBTytJLFlBQVl6dkMsUUFBUSxJQUFJcW1CLEVBQUV3b0IsSUFBSXgyQixRQUFRLElBQUlnTyxFQUFFcWdCLE9BQU9nTixrQkFBa0IxekMsT0FBTyxPQUFPLElBQUkrVyxFQUFFNHlCLEVBQUVxVCxXQUFXNVMsRUFBRVQsRUFBRTRXLFlBQVl4b0MsRUFBRXNPLEVBQUV3b0IsSUFBSWpJLFNBQVN2Z0MsSUFBSTBSLEVBQUVzYyxNQUFNaE8sRUFBRXdvQixJQUFJLEdBQUd0WixZQUFZLElBQUksSUFBSXdWLEVBQUUsQ0FBQyxDQUFDaHpCLEVBQUVzYyxLQUFLdGMsRUFBRXRMLEtBQUssQ0FBQ3NMLEVBQUVzYyxLQUFLaE8sRUFBRTBJLE1BQU1oWCxFQUFFdEwsS0FBSyxDQUFDc0wsRUFBRXNjLEtBQUt0YyxFQUFFdEwsSUFBSTRaLEVBQUVtSyxRQUFRLENBQUN6WSxFQUFFc2MsS0FBS2hPLEVBQUUwSSxNQUFNaFgsRUFBRXRMLElBQUk0WixFQUFFbUssU0FBU2lGLEVBQUUsRUFBRUEsRUFBRXNWLEVBQUUvcUMsT0FBT3kxQixHQUFHLEVBQUUsQ0FBQyxJQUFJdVYsRUFBRUQsRUFBRXRWLEdBQUcsR0FBR3VWLEVBQUUsSUFBSUEsRUFBRSxJQUFJajBCLEdBQUcsR0FBR2kwQixFQUFFLElBQUlBLEVBQUUsSUFBSVosSUFBSUQsR0FBRSxHQUFJLElBQUlBLEVBQUUsT0FBTzlqQixFQUFFMm9CLGdCQUFnQixLQUFLclIsR0FBRyxLQUFLQSxJQUFJOStCLEVBQUVrbkIsZUFBZWxuQixFQUFFa25CLGlCQUFpQmxuQixFQUFFNnBCLGFBQVksSUFBSyxLQUFLaVYsSUFBSXQzQixHQUFHLEtBQUtzM0IsR0FBR3QzQixJQUFJZ2dCLEVBQUVxdkIsYUFBYSxLQUFLL1gsSUFBSXQzQixHQUFHLEtBQUtzM0IsR0FBR3QzQixJQUFJZ2dCLEVBQUV3dkIsY0FBYyxLQUFLbFksR0FBRyxLQUFLQSxJQUFJOStCLEVBQUVrbkIsZUFBZWxuQixFQUFFa25CLGlCQUFpQmxuQixFQUFFNnBCLGFBQVksR0FBSSxLQUFLaVYsR0FBR3RYLEVBQUVxdkIsWUFBWSxLQUFLL1gsR0FBR3RYLEVBQUV3dkIsYUFBYXh2QixFQUFFOG5CLEtBQUssV0FBV3hRLEtBQUs2aUIsT0FBTyxXQUFXN2pELEtBQUswakQsU0FBU2p1QyxVQUFVODNCLEVBQUVYLEdBQUdya0IsR0FBRyxVQUFVdm9CLEtBQUswakQsU0FBUzE1QixRQUFRaHFCLEtBQUswakQsU0FBU2p1QyxTQUFRLElBQUtvSSxRQUFRLFdBQVc3ZCxLQUFLMGpELFNBQVNqdUMsVUFBVTgzQixFQUFFWCxHQUFHaGtCLElBQUksVUFBVTVvQixLQUFLMGpELFNBQVMxNUIsUUFBUWhxQixLQUFLMGpELFNBQVNqdUMsU0FBUSxLQUFNNC9CLEVBQUUsQ0FBQ2p3QyxLQUFLLFdBQVcya0MsT0FBTyxDQUFDMlosU0FBUyxDQUFDanVDLFNBQVEsRUFBR2t1QyxnQkFBZSxJQUFLcmhDLE9BQU8sV0FBV210QixFQUFFdnFDLE9BQU9sRixLQUFLLENBQUMwakQsU0FBUyxDQUFDanVDLFNBQVEsRUFBR291QyxPQUFPek8sRUFBRXlPLE9BQU85b0IsS0FBSy82QixNQUFNNmQsUUFBUXUzQixFQUFFdjNCLFFBQVFrZCxLQUFLLzZCLE1BQU1ncUIsT0FBT29yQixFQUFFcHJCLE9BQU8rUSxLQUFLLzZCLFVBQVV1b0IsR0FBRyxDQUFDcGxCLEtBQUssV0FBV25ELEtBQUsrcEMsT0FBTzJaLFNBQVNqdUMsU0FBU3pWLEtBQUswakQsU0FBU0csVUFBVXpCLFFBQVEsV0FBV3BpRCxLQUFLMGpELFNBQVNqdUMsU0FBU3pWLEtBQUswakQsU0FBUzdsQyxhQUFpQnkzQixFQUFFLENBQUN3TyxlQUFlclUsRUFBRXBqQixNQUFNMUQsT0FBTyxFQUFFcWtCLEVBQUVDLFVBQVVDLFVBQVVuc0MsUUFBUSxXQUFXLGlCQUFpQixXQUFXLElBQUl5TCxFQUFFLFVBQVVrZCxFQUFFbGQsS0FBS29nQyxFQUFFLElBQUlsakIsRUFBRSxDQUFDLElBQUloZ0IsRUFBRWtqQyxFQUFFdnFDLGNBQWMsT0FBT3FILEVBQUVsSCxhQUFhZ0ssRUFBRSxXQUFXa2QsRUFBRSxtQkFBbUJoZ0IsRUFBRThDLEdBQUcsT0FBT2tkLEdBQUdrakIsRUFBRWhELGdCQUFnQmdELEVBQUVoRCxlQUFlbWEsYUFBWSxJQUFLblgsRUFBRWhELGVBQWVtYSxXQUFXLEdBQUcsTUFBTXI2QixFQUFFa2pCLEVBQUVoRCxlQUFlbWEsV0FBVyxlQUFlLFFBQVFyNkIsRUFBdFIsR0FBMlIsUUFBUSxhQUFhczZCLFVBQVUsU0FBU3gzQyxHQUFHLElBQUlrZCxFQUFFLEVBQUVoZ0IsRUFBRSxFQUFFeEgsRUFBRSxFQUFFOCtCLEVBQUUsRUFBRSxNQUFNLFdBQVd4MEIsSUFBSTlDLEVBQUU4QyxFQUFFb2dCLFFBQVEsZUFBZXBnQixJQUFJOUMsR0FBRzhDLEVBQUV5M0MsV0FBVyxLQUFLLGdCQUFnQnozQyxJQUFJOUMsR0FBRzhDLEVBQUUwM0MsWUFBWSxLQUFLLGdCQUFnQjEzQyxJQUFJa2QsR0FBR2xkLEVBQUUyM0MsWUFBWSxLQUFLLFNBQVMzM0MsR0FBR0EsRUFBRTQzQyxPQUFPNTNDLEVBQUU2M0Msa0JBQWtCMzZCLEVBQUVoZ0IsRUFBRUEsRUFBRSxHQUFHeEgsRUFBRSxHQUFHd25CLEVBQUVzWCxFQUFFLEdBQUd0M0IsRUFBRSxXQUFXOEMsSUFBSXcwQixFQUFFeDBCLEVBQUU4M0MsUUFBUSxXQUFXOTNDLElBQUl0SyxFQUFFc0ssRUFBRSszQyxTQUFTcmlELEdBQUc4K0IsSUFBSXgwQixFQUFFZzRDLFlBQVksSUFBSWg0QyxFQUFFZzRDLFdBQVd0aUQsR0FBRyxHQUFHOCtCLEdBQUcsS0FBSzkrQixHQUFHLElBQUk4K0IsR0FBRyxNQUFNOStCLElBQUl3bkIsSUFBSUEsRUFBRXhuQixFQUFFLEdBQUcsRUFBRSxHQUFHOCtCLElBQUl0M0IsSUFBSUEsRUFBRXMzQixFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUN5akIsTUFBTS82QixFQUFFZzdCLE1BQU1oN0MsRUFBRWk3QyxPQUFPemlELEVBQUUwaUQsT0FBTzVqQixJQUFJNmpCLGlCQUFpQixXQUFXN2tELEtBQUs4a0QsY0FBYSxHQUFJQyxpQkFBaUIsV0FBVy9rRCxLQUFLOGtELGNBQWEsR0FBSTk2QixPQUFPLFNBQVN4ZCxHQUFHLElBQUlrZCxFQUFFbGQsRUFBRTlDLEVBQUUxSixLQUFLa0MsRUFBRXdILEVBQUVxZ0MsT0FBT2liLFdBQVcsSUFBSXQ3QyxFQUFFbzdDLGVBQWU1aUQsRUFBRStpRCxlQUFlLE9BQU0sRUFBR3Y3QixFQUFFK0IsZ0JBQWdCL0IsRUFBRUEsRUFBRStCLGVBQWUsSUFBSXVWLEVBQUUsRUFBRXdNLEVBQUU5akMsRUFBRWdwQyxjQUFjLEVBQUUsRUFBRXQ0QixFQUFFazdCLEVBQUUwTyxVQUFVdDZCLEdBQUcsR0FBR3huQixFQUFFZ2pELFlBQVksR0FBR3g3QyxFQUFFMm9DLGVBQWUsQ0FBQyxLQUFLdHNDLEtBQUtpdkMsSUFBSTU2QixFQUFFdXFDLFFBQVE1K0MsS0FBS2l2QyxJQUFJNTZCLEVBQUV3cUMsU0FBUyxPQUFNLEVBQUc1akIsRUFBRTVtQixFQUFFdXFDLE9BQU9uWCxNQUFNLENBQUMsS0FBS3puQyxLQUFLaXZDLElBQUk1NkIsRUFBRXdxQyxRQUFRNytDLEtBQUtpdkMsSUFBSTU2QixFQUFFdXFDLFNBQVMsT0FBTSxFQUFHM2pCLEVBQUU1bUIsRUFBRXdxQyxZQUFZNWpCLEVBQUVqN0IsS0FBS2l2QyxJQUFJNTZCLEVBQUV1cUMsUUFBUTUrQyxLQUFLaXZDLElBQUk1NkIsRUFBRXdxQyxTQUFTeHFDLEVBQUV1cUMsT0FBT25YLEdBQUdwekIsRUFBRXdxQyxPQUFPLEdBQUcsSUFBSTVqQixFQUFFLE9BQU0sRUFBRyxHQUFHOStCLEVBQUU0RSxTQUFTazZCLEdBQUdBLEdBQUd0M0IsRUFBRXFnQyxPQUFPeVIsU0FBUyxDQUFDOXhDLEVBQUVxZ0MsT0FBT3NOLE1BQU0zdEMsRUFBRXN2QyxVQUFVLElBQUl2TCxFQUFFL2pDLEVBQUVrbUMsZUFBZTVPLEVBQUU5K0IsRUFBRWlqRCxZQUFZL3BDLEVBQUUxUixFQUFFaXRDLFlBQVl2SSxFQUFFMWtDLEVBQUVrdEMsTUFBTSxHQUFHbkosR0FBRy9qQyxFQUFFOHNDLGlCQUFpQi9JLEVBQUUvakMsRUFBRThzQyxnQkFBZ0IvSSxHQUFHL2pDLEVBQUVndEMsaUJBQWlCakosRUFBRS9qQyxFQUFFZ3RDLGdCQUFnQmh0QyxFQUFFc3NDLGNBQWMsR0FBR3RzQyxFQUFFc3VDLGFBQWF2SyxHQUFHL2pDLEVBQUUrc0MsaUJBQWlCL3NDLEVBQUU2dEMsb0JBQW9CN3RDLEVBQUVtdEMsd0JBQXdCejdCLEdBQUcxUixFQUFFaXRDLGNBQWN2SSxHQUFHMWtDLEVBQUVrdEMsUUFBUWx0QyxFQUFFbXRDLHNCQUFzQm50QyxFQUFFcWdDLE9BQU9xVixpQkFBaUIvaEIsYUFBYTN6QixFQUFFczdDLFdBQVc1bkIsU0FBUzF6QixFQUFFczdDLFdBQVc1bkIsUUFBUXFTLEVBQUVFLFNBQVMsV0FBV2ptQyxFQUFFMHZDLGtCQUFrQixNQUFNMXZDLEVBQUU4bkMsS0FBSyxTQUFTOW5CLEdBQUdoZ0IsRUFBRXFnQyxPQUFPcWIsVUFBVTE3QyxFQUFFcWdDLE9BQU9zYiw4QkFBOEIzN0MsRUFBRTA3QyxTQUFTemhDLE9BQU84cEIsSUFBSS9qQyxFQUFFOHNDLGdCQUFnQi9JLElBQUkvakMsRUFBRWd0QyxlQUFlLE9BQU0sTUFBTyxDQUFDLEdBQUcsR0FBR2pILEVBQUVwakIsTUFBTTNpQixFQUFFczdDLFdBQVdsQixlQUFlLEdBQUc5aUIsRUFBRSxFQUFFLEdBQUd0M0IsRUFBRWt0QyxRQUFRbHRDLEVBQUVxZ0MsT0FBT3NOLE1BQU0zdEMsRUFBRXl1QyxXQUFXLEdBQUdqMkMsRUFBRStpRCxlQUFlLE9BQU0sT0FBUXY3QyxFQUFFcXZDLFlBQVlydkMsRUFBRThuQyxLQUFLLFNBQVM5bkIsUUFBUSxHQUFHaGdCLEVBQUVpdEMsY0FBY2p0QyxFQUFFcWdDLE9BQU9zTixNQUFNM3RDLEVBQUV5dUMsV0FBVyxHQUFHajJDLEVBQUUraUQsZUFBZSxPQUFNLE9BQVF2N0MsRUFBRXd2QyxZQUFZeHZDLEVBQUU4bkMsS0FBSyxTQUFTOW5CLEdBQUdoZ0IsRUFBRXM3QyxXQUFXbEIsZ0JBQWdCLElBQUk5VyxFQUFFaGtDLE1BQU1zOEMsVUFBVSxPQUFPNTdCLEVBQUVOLGVBQWVNLEVBQUVOLGlCQUFpQk0sRUFBRXFDLGFBQVksR0FBRyxHQUFJODNCLE9BQU8sV0FBVyxJQUFJcjNDLEVBQUV4TSxLQUFLLElBQUlzMUMsRUFBRTNzQixNQUFNLE9BQU0sRUFBRyxHQUFHbmMsRUFBRXc0QyxXQUFXdnZDLFFBQVEsT0FBTSxFQUFHLElBQUlpVSxFQUFFbGQsRUFBRTBsQyxJQUFJLE1BQU0sY0FBYzFsQyxFQUFFdTlCLE9BQU9pYixXQUFXTyxlQUFlNzdCLEVBQUU2akIsRUFBRS9nQyxFQUFFdTlCLE9BQU9pYixXQUFXTyxlQUFlNzdCLEVBQUVuQixHQUFHLGFBQWEvYixFQUFFdzRDLFdBQVdILGtCQUFrQm43QixFQUFFbkIsR0FBRyxhQUFhL2IsRUFBRXc0QyxXQUFXRCxrQkFBa0JyN0IsRUFBRW5CLEdBQUcrc0IsRUFBRTNzQixNQUFNbmMsRUFBRXc0QyxXQUFXaDdCLFFBQVF4ZCxFQUFFdzRDLFdBQVd2dkMsU0FBUSxHQUFJb0ksUUFBUSxXQUFXLElBQUlyUixFQUFFeE0sS0FBSyxJQUFJczFDLEVBQUUzc0IsTUFBTSxPQUFNLEVBQUcsSUFBSW5jLEVBQUV3NEMsV0FBV3Z2QyxRQUFRLE9BQU0sRUFBRyxJQUFJaVUsRUFBRWxkLEVBQUUwbEMsSUFBSSxNQUFNLGNBQWMxbEMsRUFBRXU5QixPQUFPaWIsV0FBV08sZUFBZTc3QixFQUFFNmpCLEVBQUUvZ0MsRUFBRXU5QixPQUFPaWIsV0FBV08sZUFBZTc3QixFQUFFZCxJQUFJMHNCLEVBQUUzc0IsTUFBTW5jLEVBQUV3NEMsV0FBV2g3QixVQUFVeGQsRUFBRXc0QyxXQUFXdnZDLFNBQVEsS0FBTTgvQixFQUFFLENBQUMwRSxPQUFPLFdBQVcsSUFBSXp0QyxFQUFFeE0sS0FBSzBwQixFQUFFbGQsRUFBRXU5QixPQUFPbVgsV0FBVyxJQUFJMTBDLEVBQUV1OUIsT0FBT3NOLEtBQUssQ0FBQyxJQUFJM3RDLEVBQUU4QyxFQUFFMDBDLFdBQVdoL0MsRUFBRXdILEVBQUU4N0MsUUFBUXhrQixFQUFFdDNCLEVBQUUrN0MsUUFBUXprQixHQUFHLEVBQUVBLEVBQUUzOUIsU0FBU21KLEVBQUVtcUMsWUFBWTNWLEVBQUV0QyxTQUFTaFYsRUFBRWc4QixlQUFlMWtCLEVBQUVqQyxZQUFZclYsRUFBRWc4QixlQUFlMWtCLEVBQUV4MEIsRUFBRXU5QixPQUFPMkwsZUFBZWxwQyxFQUFFcXRDLFNBQVMsV0FBVyxlQUFlbndCLEVBQUVpOEIsWUFBWXpqRCxHQUFHLEVBQUVBLEVBQUVtQixTQUFTbUosRUFBRW9xQyxNQUFNMTBDLEVBQUV3OEIsU0FBU2hWLEVBQUVnOEIsZUFBZXhqRCxFQUFFNjhCLFlBQVlyVixFQUFFZzhCLGVBQWV4akQsRUFBRXNLLEVBQUV1OUIsT0FBTzJMLGVBQWVscEMsRUFBRXF0QyxTQUFTLFdBQVcsZUFBZW53QixFQUFFaThCLGNBQWN4aUQsS0FBSyxXQUFXLElBQUlxSixFQUFFa2QsRUFBRWhnQixFQUFFMUosS0FBS2tDLEVBQUV3SCxFQUFFcWdDLE9BQU9tWCxZQUFZaC9DLEVBQUUwakQsUUFBUTFqRCxFQUFFMmpELFVBQVUzakQsRUFBRTBqRCxTQUFTcDVDLEVBQUUrZ0MsRUFBRXJyQyxFQUFFMGpELFFBQVFsOEMsRUFBRXFnQyxPQUFPMlcsbUJBQW1CLGlCQUFpQngrQyxFQUFFMGpELFFBQVEsRUFBRXA1QyxFQUFFbkosUUFBUSxJQUFJcUcsRUFBRXdvQyxJQUFJM2hDLEtBQUtyTyxFQUFFMGpELFFBQVF2aUQsU0FBU21KLEVBQUU5QyxFQUFFd29DLElBQUkzaEMsS0FBS3JPLEVBQUUwakQsVUFBVTFqRCxFQUFFMmpELFNBQVNuOEIsRUFBRTZqQixFQUFFcnJDLEVBQUUyakQsUUFBUW44QyxFQUFFcWdDLE9BQU8yVyxtQkFBbUIsaUJBQWlCeCtDLEVBQUUyakQsUUFBUSxFQUFFbjhCLEVBQUVybUIsUUFBUSxJQUFJcUcsRUFBRXdvQyxJQUFJM2hDLEtBQUtyTyxFQUFFMmpELFFBQVF4aUQsU0FBU3FtQixFQUFFaGdCLEVBQUV3b0MsSUFBSTNoQyxLQUFLck8sRUFBRTJqRCxVQUFVcjVDLEdBQUcsRUFBRUEsRUFBRW5KLFFBQVFtSixFQUFFK2IsR0FBRyxRQUFRLFNBQVMvYixHQUFHQSxFQUFFNGMsaUJBQWlCMWYsRUFBRWt0QyxRQUFRbHRDLEVBQUVxZ0MsT0FBT3NOLE1BQU0zdEMsRUFBRXF2QyxjQUFjcnZCLEdBQUcsRUFBRUEsRUFBRXJtQixRQUFRcW1CLEVBQUVuQixHQUFHLFFBQVEsU0FBUy9iLEdBQUdBLEVBQUU0YyxpQkFBaUIxZixFQUFFaXRDLGNBQWNqdEMsRUFBRXFnQyxPQUFPc04sTUFBTTN0QyxFQUFFd3ZDLGNBQWN6SixFQUFFdnFDLE9BQU93RSxFQUFFdzNDLFdBQVcsQ0FBQ3NFLFFBQVFoNUMsRUFBRW81QyxPQUFPcDVDLEdBQUdBLEVBQUUsR0FBR2k1QyxRQUFRLzdCLEVBQUVtOEIsT0FBT244QixHQUFHQSxFQUFFLE9BQU8wNEIsUUFBUSxXQUFXLElBQUk1MUMsRUFBRXhNLEtBQUtraEQsV0FBV3gzQixFQUFFbGQsRUFBRWc1QyxRQUFROTdDLEVBQUU4QyxFQUFFaTVDLFFBQVEvN0IsR0FBR0EsRUFBRXJtQixTQUFTcW1CLEVBQUVkLElBQUksU0FBU2MsRUFBRXFWLFlBQVkvK0IsS0FBSytwQyxPQUFPbVgsV0FBV3dFLGdCQUFnQmg4QyxHQUFHQSxFQUFFckcsU0FBU3FHLEVBQUVrZixJQUFJLFNBQVNsZixFQUFFcTFCLFlBQVkvK0IsS0FBSytwQyxPQUFPbVgsV0FBV3dFLGtCQUFrQkksRUFBRSxDQUFDN0wsT0FBTyxXQUFXLElBQUl6dEMsRUFBRXhNLEtBQUswcEIsRUFBRWxkLEVBQUU0MEMsSUFBSXBnQixFQUFFeDBCLEVBQUV1OUIsT0FBT2djLFdBQVcsR0FBRy9rQixFQUFFenlCLElBQUkvQixFQUFFdTVDLFdBQVd4M0MsSUFBSS9CLEVBQUV1NUMsV0FBVzdULEtBQUssSUFBSTFsQyxFQUFFdTVDLFdBQVc3VCxJQUFJN3VDLE9BQU8sQ0FBQyxJQUFJbXFDLEVBQUU5akMsRUFBRThDLEVBQUVvbUMsU0FBU3BtQyxFQUFFdTlCLE9BQU82SSxRQUFRbjlCLFFBQVFqSixFQUFFb21DLFFBQVFDLE9BQU94dkMsT0FBT21KLEVBQUVxbUMsT0FBT3h2QyxPQUFPbkIsRUFBRXNLLEVBQUV1NUMsV0FBVzdULElBQUk5M0IsRUFBRTVOLEVBQUV1OUIsT0FBT3NOLEtBQUt0eEMsS0FBSzB2QixNQUFNL3JCLEVBQUUsRUFBRThDLEVBQUVzc0MsY0FBY3RzQyxFQUFFdTlCLE9BQU9rTCxnQkFBZ0J6b0MsRUFBRXltQyxTQUFTNXZDLE9BQU8sR0FBR21KLEVBQUV1OUIsT0FBT3NOLE9BQU83SixFQUFFem5DLEtBQUswdkIsTUFBTWpwQixFQUFFeXBDLFlBQVl6cEMsRUFBRXNzQyxjQUFjdHNDLEVBQUV1OUIsT0FBT2tMLGlCQUFpQnZyQyxFQUFFLEVBQUUsRUFBRThDLEVBQUVzc0MsZUFBZXRMLEdBQUc5akMsRUFBRSxFQUFFOEMsRUFBRXNzQyxjQUFjMStCLEVBQUUsRUFBRW96QixJQUFJQSxHQUFHcHpCLEdBQUdvekIsRUFBRSxHQUFHLFlBQVloaEMsRUFBRXU5QixPQUFPaWMsaUJBQWlCeFksRUFBRXB6QixFQUFFb3pCLElBQUlBLE9BQUUsSUFBU2hoQyxFQUFFZ3JDLFVBQVVockMsRUFBRWdyQyxVQUFVaHJDLEVBQUV5cEMsYUFBYSxFQUFFLFlBQVlqVixFQUFFdC9CLE1BQU04SyxFQUFFdTVDLFdBQVdFLFNBQVMsRUFBRXo1QyxFQUFFdTVDLFdBQVdFLFFBQVE1aUQsT0FBTyxDQUFDLElBQUlvcUMsRUFBRXJ5QixFQUFFZ3pCLEVBQUV0VixFQUFFdHNCLEVBQUV1NUMsV0FBV0UsUUFBUSxHQUFHamxCLEVBQUVrbEIsaUJBQWlCMTVDLEVBQUV1NUMsV0FBV0ksV0FBV3J0QixFQUFFdjBCLEdBQUcsR0FBR2lJLEVBQUU2bEMsZUFBZSxhQUFhLGdCQUFlLEdBQUlud0MsRUFBRXdpQixJQUFJbFksRUFBRTZsQyxlQUFlLFFBQVEsU0FBUzdsQyxFQUFFdTVDLFdBQVdJLFlBQVlubEIsRUFBRW9sQixtQkFBbUIsR0FBRyxNQUFNLEVBQUVwbEIsRUFBRW9sQix5QkFBb0IsSUFBUzU1QyxFQUFFa3JDLGdCQUFnQmxyQyxFQUFFdTVDLFdBQVdNLG9CQUFvQjdZLEVBQUVoaEMsRUFBRWtyQyxjQUFjbHJDLEVBQUV1NUMsV0FBV00sbUJBQW1CcmxCLEVBQUVvbEIsbUJBQW1CLEVBQUU1NUMsRUFBRXU1QyxXQUFXTSxtQkFBbUJybEIsRUFBRW9sQixtQkFBbUIsRUFBRTU1QyxFQUFFdTVDLFdBQVdNLG1CQUFtQixJQUFJNzVDLEVBQUV1NUMsV0FBV00sbUJBQW1CLElBQUk1WSxFQUFFRCxFQUFFaGhDLEVBQUV1NUMsV0FBV00sbUJBQW1CalksSUFBSWh6QixFQUFFcXlCLEdBQUcxbkMsS0FBSzAxQyxJQUFJM2lCLEVBQUV6MUIsT0FBTzI5QixFQUFFb2xCLG9CQUFvQixJQUFJM1ksR0FBRyxHQUFHM1UsRUFBRWlHLFlBQVlpQyxFQUFFc2xCLGtCQUFrQixJQUFJdGxCLEVBQUVzbEIsa0JBQWtCLFNBQVN0bEIsRUFBRXNsQixrQkFBa0IsY0FBY3RsQixFQUFFc2xCLGtCQUFrQixTQUFTdGxCLEVBQUVzbEIsa0JBQWtCLGNBQWN0bEIsRUFBRXNsQixrQkFBa0IsU0FBUyxFQUFFcGtELEVBQUVtQixPQUFPeTFCLEVBQUU3MEIsS0FBSyxTQUFTdUksRUFBRWtkLEdBQUcsSUFBSWhnQixFQUFFNmpDLEVBQUU3akIsR0FBR3huQixFQUFFd0gsRUFBRTRSLFFBQVFwWixJQUFJc3JDLEdBQUc5akMsRUFBRWcxQixTQUFTc0MsRUFBRXNsQixtQkFBbUJ0bEIsRUFBRWtsQixpQkFBaUJ6WSxHQUFHdnJDLEdBQUdBLEdBQUdrWixHQUFHMVIsRUFBRWcxQixTQUFTc0MsRUFBRXNsQixrQkFBa0IsU0FBU3BrRCxJQUFJdXJDLEdBQUcvakMsRUFBRXVSLE9BQU95akIsU0FBU3NDLEVBQUVzbEIsa0JBQWtCLFNBQVNyckMsT0FBT3lqQixTQUFTc0MsRUFBRXNsQixrQkFBa0IsY0FBY3BrRCxJQUFJa1osR0FBRzFSLEVBQUU0QyxPQUFPb3lCLFNBQVNzQyxFQUFFc2xCLGtCQUFrQixTQUFTaDZDLE9BQU9veUIsU0FBU3NDLEVBQUVzbEIsa0JBQWtCLHNCQUFzQixHQUFHeHRCLEVBQUV2MEIsR0FBR2lwQyxHQUFHOU8sU0FBU3NDLEVBQUVzbEIsbUJBQW1CdGxCLEVBQUVrbEIsZUFBZSxDQUFDLElBQUksSUFBSTdYLEVBQUV2VixFQUFFdjBCLEdBQUdrcEMsR0FBR2EsRUFBRXhWLEVBQUV2MEIsR0FBRzZXLEdBQUdtekIsRUFBRWQsRUFBRWMsR0FBR256QixFQUFFbXpCLEdBQUcsRUFBRXpWLEVBQUV2MEIsR0FBR2dxQyxHQUFHN1AsU0FBU3NDLEVBQUVzbEIsa0JBQWtCLFNBQVNqWSxFQUFFcHpCLE9BQU95akIsU0FBU3NDLEVBQUVzbEIsa0JBQWtCLFNBQVNyckMsT0FBT3lqQixTQUFTc0MsRUFBRXNsQixrQkFBa0IsY0FBY2hZLEVBQUVoaUMsT0FBT295QixTQUFTc0MsRUFBRXNsQixrQkFBa0IsU0FBU2g2QyxPQUFPb3lCLFNBQVNzQyxFQUFFc2xCLGtCQUFrQixjQUFjLEdBQUd0bEIsRUFBRWtsQixlQUFlLENBQUMsSUFBSTlwQyxFQUFFclcsS0FBSzAxQyxJQUFJM2lCLEVBQUV6MUIsT0FBTzI5QixFQUFFb2xCLG1CQUFtQixHQUFHeFosR0FBR3BnQyxFQUFFdTVDLFdBQVdJLFdBQVcvcEMsRUFBRTVQLEVBQUV1NUMsV0FBV0ksWUFBWSxFQUFFL1gsRUFBRTVoQyxFQUFFdTVDLFdBQVdJLFdBQVd4NUMsRUFBRStjLEVBQUUsUUFBUSxPQUFPb1AsRUFBRXBVLElBQUlsWSxFQUFFNmxDLGVBQWUxbEMsRUFBRSxNQUFNaWdDLEVBQUUsT0FBTyxHQUFHLGFBQWE1TCxFQUFFdC9CLE9BQU9RLEVBQUVxTyxLQUFLLElBQUl5d0IsRUFBRXVsQixjQUFjamtELEtBQUswK0IsRUFBRXdsQixzQkFBc0JoWixFQUFFLElBQUl0ckMsRUFBRXFPLEtBQUssSUFBSXl3QixFQUFFeWxCLFlBQVlua0QsS0FBSzArQixFQUFFMGxCLG9CQUFvQnRzQyxLQUFLLGdCQUFnQjRtQixFQUFFdC9CLEtBQUssQ0FBQyxJQUFJd3hDLEVBQUVBLEVBQUVsUyxFQUFFMmxCLG9CQUFvQm42QyxFQUFFNmxDLGVBQWUsV0FBVyxhQUFhN2xDLEVBQUU2bEMsZUFBZSxhQUFhLFdBQVcsSUFBSTFvQyxHQUFHNmpDLEVBQUUsR0FBR3B6QixFQUFFdmEsRUFBRSxFQUFFdXpDLEVBQUUsRUFBRSxjQUFlRixFQUFFcnpDLEVBQUU4SixFQUFFeXBDLEVBQUV6cEMsRUFBRXpILEVBQUVxTyxLQUFLLElBQUl5d0IsRUFBRTRsQixzQkFBc0I5WSxVQUFVLDZCQUE2Qmp1QyxFQUFFLFlBQVl1ekMsRUFBRSxLQUFLcEYsV0FBV3hoQyxFQUFFdTlCLE9BQU9oTyxPQUFPLFdBQVdpRixFQUFFdC9CLE1BQU1zL0IsRUFBRTZsQixjQUFjM2tELEVBQUV1dEIsS0FBS3VSLEVBQUU2bEIsYUFBYXI2QyxFQUFFZ2hDLEVBQUUsRUFBRXB6QixJQUFJNU4sRUFBRWdsQyxLQUFLLG1CQUFtQmhsQyxFQUFFdEssRUFBRSxLQUFLc0ssRUFBRWdsQyxLQUFLLG1CQUFtQmhsQyxFQUFFdEssRUFBRSxJQUFJQSxFQUFFc0ssRUFBRXU5QixPQUFPMkwsZUFBZWxwQyxFQUFFcXRDLFNBQVMsV0FBVyxlQUFlN1ksRUFBRTJrQixhQUFhbUIsT0FBTyxXQUFXLElBQUl0NkMsRUFBRXhNLEtBQUswcEIsRUFBRWxkLEVBQUV1OUIsT0FBT2djLFdBQVcsR0FBR3I4QixFQUFFbmIsSUFBSS9CLEVBQUV1NUMsV0FBV3gzQyxJQUFJL0IsRUFBRXU1QyxXQUFXN1QsS0FBSyxJQUFJMWxDLEVBQUV1NUMsV0FBVzdULElBQUk3dUMsT0FBTyxDQUFDLElBQUlxRyxFQUFFOEMsRUFBRW9tQyxTQUFTcG1DLEVBQUV1OUIsT0FBTzZJLFFBQVFuOUIsUUFBUWpKLEVBQUVvbUMsUUFBUUMsT0FBT3h2QyxPQUFPbUosRUFBRXFtQyxPQUFPeHZDLE9BQU9uQixFQUFFc0ssRUFBRXU1QyxXQUFXN1QsSUFBSWxSLEVBQUUsR0FBRyxHQUFHLFlBQVl0WCxFQUFFaG9CLEtBQUssQ0FBQyxJQUFJLElBQUk4ckMsRUFBRWhoQyxFQUFFdTlCLE9BQU9zTixLQUFLdHhDLEtBQUswdkIsTUFBTS9yQixFQUFFLEVBQUU4QyxFQUFFc3NDLGNBQWN0c0MsRUFBRXU5QixPQUFPa0wsZ0JBQWdCem9DLEVBQUV5bUMsU0FBUzV2QyxPQUFPK1csRUFBRSxFQUFFQSxFQUFFb3pCLEVBQUVwekIsR0FBRyxFQUFFc1AsRUFBRXE5QixhQUFhL2xCLEdBQUd0WCxFQUFFcTlCLGFBQWFwbUQsS0FBSzZMLEVBQUU0TixFQUFFc1AsRUFBRXM5QixhQUFhaG1CLEdBQUcsSUFBSXRYLEVBQUV1OUIsY0FBYyxXQUFXdjlCLEVBQUVzOUIsWUFBWSxPQUFPdDlCLEVBQUV1OUIsY0FBYyxJQUFJL2tELEVBQUV1dEIsS0FBS3VSLEdBQUd4MEIsRUFBRXU1QyxXQUFXRSxRQUFRL2pELEVBQUVxTyxLQUFLLElBQUltWixFQUFFczlCLGFBQWEsYUFBYXQ5QixFQUFFaG9CLE9BQU9zL0IsRUFBRXRYLEVBQUV3OUIsZUFBZXg5QixFQUFFdzlCLGVBQWV2bUQsS0FBSzZMLEVBQUVrZCxFQUFFNjhCLGFBQWE3OEIsRUFBRSs4QixZQUFZLGdCQUFnQi84QixFQUFFNjhCLGFBQWEsNEJBQTRCNzhCLEVBQUUrOEIsV0FBVyxZQUFZdmtELEVBQUV1dEIsS0FBS3VSLElBQUksZ0JBQWdCdFgsRUFBRWhvQixPQUFPcy9CLEVBQUV0WCxFQUFFeTlCLGtCQUFrQno5QixFQUFFeTlCLGtCQUFrQnhtRCxLQUFLNkwsRUFBRWtkLEVBQUVrOUIsc0JBQXNCLGdCQUFnQmw5QixFQUFFazlCLHFCQUFxQixZQUFZMWtELEVBQUV1dEIsS0FBS3VSLElBQUksV0FBV3RYLEVBQUVob0IsTUFBTThLLEVBQUVnbEMsS0FBSyxtQkFBbUJobEMsRUFBRXU1QyxXQUFXN1QsSUFBSSxNQUFNL3VDLEtBQUssV0FBVyxJQUFJdUcsRUFBRTFKLEtBQUt3TSxFQUFFOUMsRUFBRXFnQyxPQUFPZ2MsV0FBVyxHQUFHdjVDLEVBQUUrQixHQUFHLENBQUMsSUFBSW1iLEVBQUU2akIsRUFBRS9nQyxFQUFFK0IsSUFBSSxJQUFJbWIsRUFBRXJtQixTQUFTcUcsRUFBRXFnQyxPQUFPMlcsbUJBQW1CLGlCQUFpQmwwQyxFQUFFK0IsSUFBSSxFQUFFbWIsRUFBRXJtQixRQUFRLElBQUlxRyxFQUFFd29DLElBQUkzaEMsS0FBSy9ELEVBQUUrQixJQUFJbEwsU0FBU3FtQixFQUFFaGdCLEVBQUV3b0MsSUFBSTNoQyxLQUFLL0QsRUFBRStCLEtBQUssWUFBWS9CLEVBQUU5SyxNQUFNOEssRUFBRTQ2QyxXQUFXMTlCLEVBQUVnVixTQUFTbHlCLEVBQUU2NkMsZ0JBQWdCMzlCLEVBQUVnVixTQUFTbHlCLEVBQUU4NkMsY0FBYzk2QyxFQUFFOUssTUFBTSxZQUFZOEssRUFBRTlLLE1BQU04SyxFQUFFMDVDLGlCQUFpQng4QixFQUFFZ1YsU0FBUyxHQUFHbHlCLEVBQUU4NkMsY0FBYzk2QyxFQUFFOUssS0FBSyxZQUFZZ0ksRUFBRXE4QyxXQUFXTSxtQkFBbUIsRUFBRTc1QyxFQUFFNDVDLG1CQUFtQixJQUFJNTVDLEVBQUU0NUMsbUJBQW1CLElBQUksZ0JBQWdCNTVDLEVBQUU5SyxNQUFNOEssRUFBRW02QyxxQkFBcUJqOUIsRUFBRWdWLFNBQVNseUIsRUFBRSs2QywwQkFBMEIvNkMsRUFBRTQ2QyxXQUFXMTlCLEVBQUVuQixHQUFHLFFBQVEsSUFBSS9iLEVBQUV3NkMsWUFBWSxTQUFTeDZDLEdBQUdBLEVBQUU0YyxpQkFBaUIsSUFBSU0sRUFBRTZqQixFQUFFdnRDLE1BQU1zYixRQUFRNVIsRUFBRXFnQyxPQUFPa0wsZUFBZXZyQyxFQUFFcWdDLE9BQU9zTixPQUFPM3RCLEdBQUdoZ0IsRUFBRW92QyxjQUFjcHZDLEVBQUV3dUMsUUFBUXh1QixLQUFLK2xCLEVBQUV2cUMsT0FBT3dFLEVBQUVxOEMsV0FBVyxDQUFDN1QsSUFBSXhvQixFQUFFbmIsR0FBR21iLEVBQUUsUUFBUTA0QixRQUFRLFdBQVcsSUFBSTUxQyxFQUFFeE0sS0FBSzBwQixFQUFFbGQsRUFBRXU5QixPQUFPZ2MsV0FBVyxHQUFHcjhCLEVBQUVuYixJQUFJL0IsRUFBRXU1QyxXQUFXeDNDLElBQUkvQixFQUFFdTVDLFdBQVc3VCxLQUFLLElBQUkxbEMsRUFBRXU1QyxXQUFXN1QsSUFBSTd1QyxPQUFPLENBQUMsSUFBSXFHLEVBQUU4QyxFQUFFdTVDLFdBQVc3VCxJQUFJeG9DLEVBQUVxMUIsWUFBWXJWLEVBQUU4OUIsYUFBYTk5QyxFQUFFcTFCLFlBQVlyVixFQUFFNDlCLGNBQWM1OUIsRUFBRWhvQixNQUFNOEssRUFBRXU1QyxXQUFXRSxTQUFTejVDLEVBQUV1NUMsV0FBV0UsUUFBUWxuQixZQUFZclYsRUFBRTQ4QixtQkFBbUI1OEIsRUFBRTA5QixXQUFXMTlDLEVBQUVrZixJQUFJLFFBQVEsSUFBSWMsRUFBRXM5QixnQkFBZ0JTLEVBQUUsQ0FBQ3pQLGFBQWEsV0FBVyxJQUFJeHJDLEVBQUV4TSxLQUFLLEdBQUd3TSxFQUFFdTlCLE9BQU8yZCxVQUFVbjVDLElBQUkvQixFQUFFazdDLFVBQVVuNUMsR0FBRyxDQUFDLElBQUltYixFQUFFbGQsRUFBRWs3QyxVQUFVaCtDLEVBQUU4QyxFQUFFa21DLGFBQWF4d0MsRUFBRXNLLEVBQUVvUyxTQUFTb2lCLEVBQUV0WCxFQUFFaStCLFNBQVNuYSxFQUFFOWpCLEVBQUVrK0IsVUFBVXh0QyxFQUFFc1AsRUFBRW0rQixRQUFRcGEsRUFBRS9qQixFQUFFd29CLElBQUk5MkIsRUFBRTVPLEVBQUV1OUIsT0FBTzJkLFVBQVV0WixFQUFFcE4sRUFBRWxJLEdBQUcwVSxFQUFFeE0sR0FBRzkrQixFQUFFd0gsRUFBRSxHQUFHb3ZCLEdBQUdBLElBQUlzVixFQUFFcE4sRUFBRWxJLEVBQUVBLEVBQUUsR0FBRzBVLEdBQUcxVSxFQUFFa0ksSUFBSW9OLEVBQUVaLEVBQUUxVSxHQUFHQSxFQUFFLEdBQUdzVixFQUFFcE4sRUFBRWxJLEVBQUVBLEVBQUUsR0FBRzBVLEVBQUUxVSxFQUFFa0ksSUFBSW9OLEVBQUVaLEVBQUUxVSxHQUFHdHNCLEVBQUU2bEMsZ0JBQWdCN0IsRUFBRVMsYUFBYTcyQixFQUFFMHpCLFVBQVUsZUFBZWhWLEVBQUUsYUFBYTFlLEVBQUUwekIsVUFBVSxjQUFjaFYsRUFBRSxPQUFPMWUsRUFBRSxHQUFHb0ssTUFBTTROLE1BQU1nYyxFQUFFLE9BQU9vQyxFQUFFUyxhQUFhNzJCLEVBQUUwekIsVUFBVSxvQkFBb0JoVixFQUFFLFVBQVUxZSxFQUFFMHpCLFVBQVUsY0FBY2hWLEVBQUUsT0FBTzFlLEVBQUUsR0FBR29LLE1BQU1xUCxPQUFPdWEsRUFBRSxNQUFNaHpCLEVBQUV1SyxPQUFPMFgsYUFBYTd3QixFQUFFazdDLFVBQVV0cUIsU0FBU3FRLEVBQUUsR0FBR2pwQixNQUFNeVIsUUFBUSxFQUFFenBCLEVBQUVrN0MsVUFBVXRxQixRQUFRdGQsV0FBVyxXQUFXMnRCLEVBQUUsR0FBR2pwQixNQUFNeVIsUUFBUSxFQUFFd1gsRUFBRU8sV0FBVyxNQUFNLFFBQVFnSSxjQUFjLFNBQVN4cEMsR0FBR3hNLEtBQUsrcEMsT0FBTzJkLFVBQVVuNUMsSUFBSXZPLEtBQUswbkQsVUFBVW41QyxJQUFJdk8sS0FBSzBuRCxVQUFVRyxRQUFRN1osV0FBV3hoQyxJQUFJeWxDLFdBQVcsV0FBVyxJQUFJemxDLEVBQUV4TSxLQUFLLEdBQUd3TSxFQUFFdTlCLE9BQU8yZCxVQUFVbjVDLElBQUkvQixFQUFFazdDLFVBQVVuNUMsR0FBRyxDQUFDLElBQUltYixFQUFFbGQsRUFBRWs3QyxVQUFVaCtDLEVBQUVnZ0IsRUFBRW0rQixRQUFRM2xELEVBQUV3bkIsRUFBRXdvQixJQUFJeG9DLEVBQUUsR0FBRzhhLE1BQU00TixNQUFNLEdBQUcxb0IsRUFBRSxHQUFHOGEsTUFBTXFQLE9BQU8sR0FBRyxJQUFJbU4sRUFBRXdNLEVBQUVoaEMsRUFBRTZsQyxlQUFlbndDLEVBQUUsR0FBR293QixZQUFZcHdCLEVBQUUsR0FBR3dsQyxhQUFhdHRCLEVBQUU1TixFQUFFK2xDLEtBQUsvbEMsRUFBRSttQyxZQUFZOUYsRUFBRXJ6QixHQUFHb3pCLEVBQUVoaEMsRUFBRStsQyxNQUFNdlIsRUFBRSxTQUFTeDBCLEVBQUV1OUIsT0FBTzJkLFVBQVVDLFNBQVNuYSxFQUFFcHpCLEVBQUUwWixTQUFTdG5CLEVBQUV1OUIsT0FBTzJkLFVBQVVDLFNBQVMsSUFBSW43QyxFQUFFNmxDLGVBQWUzb0MsRUFBRSxHQUFHOGEsTUFBTTROLE1BQU00TyxFQUFFLEtBQUt0M0IsRUFBRSxHQUFHOGEsTUFBTXFQLE9BQU9tTixFQUFFLEtBQUs5K0IsRUFBRSxHQUFHc2lCLE1BQU1DLFFBQVEsR0FBR3JLLEVBQUUsT0FBTyxHQUFHNU4sRUFBRXU5QixPQUFPK2QsZ0JBQWdCNWxELEVBQUUsR0FBR3NpQixNQUFNeVIsUUFBUSxHQUFHd1osRUFBRXZxQyxPQUFPd2tCLEVBQUUsQ0FBQ2srQixVQUFVcGEsRUFBRXVhLFFBQVEzdEMsRUFBRTR0QyxZQUFZdmEsRUFBRWthLFNBQVMzbUIsSUFBSXRYLEVBQUV3b0IsSUFBSTFsQyxFQUFFdTlCLE9BQU8yTCxlQUFlbHBDLEVBQUVxdEMsU0FBUyxXQUFXLGVBQWVydEMsRUFBRXU5QixPQUFPMmQsVUFBVS9CLGFBQWFzQyxnQkFBZ0IsU0FBU3o3QyxHQUFHLElBQUlrZCxFQUFFaGdCLEVBQUUxSixLQUFLa0MsRUFBRXdILEVBQUVnK0MsVUFBVTFtQixFQUFFdDNCLEVBQUVncEMsYUFBYWxGLEVBQUV0ckMsRUFBRWd3QyxJQUFJOTNCLEVBQUVsWSxFQUFFeWxELFNBQVNsYSxFQUFFdnJDLEVBQUUwbEQsVUFBVWwrQixJQUFJaGdCLEVBQUUyb0MsZUFBZSxlQUFlN2xDLEVBQUU5SyxNQUFNLGNBQWM4SyxFQUFFOUssS0FBSzhLLEVBQUV1aEIsY0FBYyxHQUFHaEIsTUFBTXZnQixFQUFFdWdCLE9BQU92Z0IsRUFBRStnQixRQUFRLGVBQWUvZ0IsRUFBRTlLLE1BQU0sY0FBYzhLLEVBQUU5SyxLQUFLOEssRUFBRXVoQixjQUFjLEdBQUdmLE1BQU14Z0IsRUFBRXdnQixPQUFPeGdCLEVBQUVnaEIsU0FBU2dnQixFQUFFdkQsU0FBU3ZnQyxFQUFFMm9DLGVBQWUsT0FBTyxPQUFPajRCLEVBQUUsSUFBSXF6QixFQUFFcnpCLEdBQUdzUCxFQUFFM2pCLEtBQUtpdkIsSUFBSWp2QixLQUFLMDFDLElBQUkveEIsRUFBRSxHQUFHLEdBQUdzWCxJQUFJdFgsRUFBRSxFQUFFQSxHQUFHLElBQUl0TyxFQUFFMVIsRUFBRThzQyxnQkFBZ0I5c0MsRUFBRWd0QyxlQUFlaHRDLEVBQUU4c0MsZ0JBQWdCOXNCLEVBQUVoZ0IsRUFBRStzQyxlQUFlcjdCLEdBQUcxUixFQUFFc3VDLGFBQWE1OEIsR0FBRzFSLEVBQUU2dEMsb0JBQW9CN3RDLEVBQUVtdEMsdUJBQXVCcVIsWUFBWSxTQUFTMTdDLEdBQUcsSUFBSWtkLEVBQUUxcEIsS0FBSzBKLEVBQUVnZ0IsRUFBRXFnQixPQUFPMmQsVUFBVXhsRCxFQUFFd25CLEVBQUVnK0IsVUFBVTFtQixFQUFFdFgsRUFBRStvQixXQUFXakYsRUFBRXRyQyxFQUFFZ3dDLElBQUk5M0IsRUFBRWxZLEVBQUUybEQsUUFBUW4rQixFQUFFZytCLFVBQVUxTCxXQUFVLEVBQUd4dkMsRUFBRTRjLGlCQUFpQjVjLEVBQUUwYyxrQkFBa0I4WCxFQUFFZ04sV0FBVyxLQUFLNXpCLEVBQUU0ekIsV0FBVyxLQUFLOXJDLEVBQUUrbEQsZ0JBQWdCejdDLEdBQUc2d0IsYUFBYTNULEVBQUVnK0IsVUFBVVMsYUFBYTNhLEVBQUVRLFdBQVcsR0FBR3RrQyxFQUFFaWMsTUFBTTZuQixFQUFFOW9CLElBQUksVUFBVSxHQUFHZ0YsRUFBRThuQixLQUFLLHFCQUFxQmhsQyxJQUFJNDdDLFdBQVcsU0FBUzU3QyxHQUFHLElBQUlrZCxFQUFFMXBCLEtBQUswbkQsVUFBVWgrQyxFQUFFMUosS0FBS3l5QyxXQUFXdndDLEVBQUV3bkIsRUFBRXdvQixJQUFJbFIsRUFBRXRYLEVBQUVtK0IsUUFBUTduRCxLQUFLMG5ELFVBQVUxTCxZQUFZeHZDLEVBQUU0YyxlQUFlNWMsRUFBRTRjLGlCQUFpQjVjLEVBQUV1ZixhQUFZLEVBQUdyQyxFQUFFdStCLGdCQUFnQno3QyxHQUFHOUMsRUFBRXNrQyxXQUFXLEdBQUc5ckMsRUFBRThyQyxXQUFXLEdBQUdoTixFQUFFZ04sV0FBVyxHQUFHaHVDLEtBQUt3eEMsS0FBSyxvQkFBb0JobEMsS0FBSzY3QyxVQUFVLFNBQVM3N0MsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFcWdCLE9BQU8yZCxVQUFVeGxELEVBQUV3bkIsRUFBRWcrQixVQUFVeFYsSUFBSXhvQixFQUFFZytCLFVBQVUxTCxZQUFZdHlCLEVBQUVnK0IsVUFBVTFMLFdBQVUsRUFBR3R5QyxFQUFFaWMsT0FBTzBYLGFBQWEzVCxFQUFFZytCLFVBQVVTLGFBQWF6K0IsRUFBRWcrQixVQUFVUyxZQUFZMVksRUFBRUUsU0FBUyxXQUFXenRDLEVBQUV3aUIsSUFBSSxVQUFVLEdBQUd4aUIsRUFBRThyQyxXQUFXLE1BQU0sTUFBTXRrQixFQUFFOG5CLEtBQUssbUJBQW1CaGxDLEdBQUc5QyxFQUFFNCtDLGVBQWU1K0IsRUFBRTB2QixtQkFBbUJtUCxnQkFBZ0IsV0FBVyxJQUFJLzdDLEVBQUV4TSxLQUFLLEdBQUd3TSxFQUFFdTlCLE9BQU8yZCxVQUFVbjVDLEdBQUcsQ0FBQyxJQUFJbWIsRUFBRWxkLEVBQUVrN0MsVUFBVWgrQyxFQUFFOEMsRUFBRW12QyxZQUFZejVDLEVBQUVzSyxFQUFFdzFDLG1CQUFtQmhoQixFQUFFeDBCLEVBQUV1OUIsT0FBT3lELEVBQUU5akIsRUFBRXdvQixJQUFJLEdBQUc5M0IsS0FBS28yQixFQUFFYSxrQkFBa0JyUSxFQUFFNmUsbUJBQW1CLENBQUNDLFNBQVEsRUFBR0MsU0FBUSxHQUFJdFMsS0FBSytDLEVBQUVhLGtCQUFrQnJRLEVBQUU2ZSxtQkFBbUIsQ0FBQ0MsU0FBUSxFQUFHQyxTQUFRLEdBQUl2UCxFQUFFQyxRQUFRRCxFQUFFSSxnQkFBZ0JKLEVBQUVPLHVCQUF1QlAsRUFBRUMsUUFBUWpELEVBQUV6OUIsaUJBQWlCckcsRUFBRXVLLE1BQU16SCxFQUFFazdDLFVBQVVRLFlBQVk5dEMsR0FBR296QixFQUFFejlCLGlCQUFpQnJHLEVBQUVzMkMsS0FBS3h6QyxFQUFFazdDLFVBQVVVLFdBQVdodUMsR0FBR296QixFQUFFejlCLGlCQUFpQnJHLEVBQUUzRSxJQUFJeUgsRUFBRWs3QyxVQUFVVyxVQUFVNWEsS0FBS3pNLEVBQUU0WSxnQkFBZ0JqdEMsRUFBRTJ0QyxNQUFNM3RDLEVBQUU0dEMsU0FBU3ZaLEVBQUU0WSxnQkFBZ0JwSixFQUFFQyxPQUFPOWpDLEVBQUUydEMsT0FBTzlNLEVBQUV6OUIsaUJBQWlCLFlBQVl2RCxFQUFFazdDLFVBQVVRLFlBQVk5dEMsR0FBR3d5QixFQUFFNzhCLGlCQUFpQixZQUFZdkQsRUFBRWs3QyxVQUFVVSxXQUFXaHVDLEdBQUd3eUIsRUFBRTc4QixpQkFBaUIsVUFBVXZELEVBQUVrN0MsVUFBVVcsVUFBVTVhLE1BQU1ELEVBQUV6OUIsaUJBQWlCN04sRUFBRStSLE1BQU16SCxFQUFFazdDLFVBQVVRLFlBQVk5dEMsR0FBR3d5QixFQUFFNzhCLGlCQUFpQjdOLEVBQUU4OUMsS0FBS3h6QyxFQUFFazdDLFVBQVVVLFdBQVdodUMsR0FBR3d5QixFQUFFNzhCLGlCQUFpQjdOLEVBQUU2QyxJQUFJeUgsRUFBRWs3QyxVQUFVVyxVQUFVNWEsTUFBTSthLGlCQUFpQixXQUFXLElBQUloOEMsRUFBRXhNLEtBQUssR0FBR3dNLEVBQUV1OUIsT0FBTzJkLFVBQVVuNUMsR0FBRyxDQUFDLElBQUltYixFQUFFbGQsRUFBRWs3QyxVQUFVaCtDLEVBQUU4QyxFQUFFbXZDLFlBQVl6NUMsRUFBRXNLLEVBQUV3MUMsbUJBQW1CaGhCLEVBQUV4MEIsRUFBRXU5QixPQUFPeUQsRUFBRTlqQixFQUFFd29CLElBQUksR0FBRzkzQixLQUFLbzJCLEVBQUVhLGtCQUFrQnJRLEVBQUU2ZSxtQkFBbUIsQ0FBQ0MsU0FBUSxFQUFHQyxTQUFRLEdBQUl0UyxLQUFLK0MsRUFBRWEsa0JBQWtCclEsRUFBRTZlLG1CQUFtQixDQUFDQyxTQUFRLEVBQUdDLFNBQVEsR0FBSXZQLEVBQUVDLFFBQVFELEVBQUVJLGdCQUFnQkosRUFBRU8sdUJBQXVCUCxFQUFFQyxRQUFRakQsRUFBRXpzQixvQkFBb0JyWCxFQUFFdUssTUFBTXpILEVBQUVrN0MsVUFBVVEsWUFBWTl0QyxHQUFHb3pCLEVBQUV6c0Isb0JBQW9CclgsRUFBRXMyQyxLQUFLeHpDLEVBQUVrN0MsVUFBVVUsV0FBV2h1QyxHQUFHb3pCLEVBQUV6c0Isb0JBQW9CclgsRUFBRTNFLElBQUl5SCxFQUFFazdDLFVBQVVXLFVBQVU1YSxLQUFLek0sRUFBRTRZLGdCQUFnQmp0QyxFQUFFMnRDLE1BQU0zdEMsRUFBRTR0QyxTQUFTdlosRUFBRTRZLGdCQUFnQnBKLEVBQUVDLE9BQU85akMsRUFBRTJ0QyxPQUFPOU0sRUFBRXpzQixvQkFBb0IsWUFBWXZVLEVBQUVrN0MsVUFBVVEsWUFBWTl0QyxHQUFHd3lCLEVBQUU3ckIsb0JBQW9CLFlBQVl2VSxFQUFFazdDLFVBQVVVLFdBQVdodUMsR0FBR3d5QixFQUFFN3JCLG9CQUFvQixVQUFVdlUsRUFBRWs3QyxVQUFVVyxVQUFVNWEsTUFBTUQsRUFBRXpzQixvQkFBb0I3ZSxFQUFFK1IsTUFBTXpILEVBQUVrN0MsVUFBVVEsWUFBWTl0QyxHQUFHd3lCLEVBQUU3ckIsb0JBQW9CN2UsRUFBRTg5QyxLQUFLeHpDLEVBQUVrN0MsVUFBVVUsV0FBV2h1QyxHQUFHd3lCLEVBQUU3ckIsb0JBQW9CN2UsRUFBRTZDLElBQUl5SCxFQUFFazdDLFVBQVVXLFVBQVU1YSxNQUFNdHFDLEtBQUssV0FBVyxJQUFJcUosRUFBRXhNLEtBQUssR0FBR3dNLEVBQUV1OUIsT0FBTzJkLFVBQVVuNUMsR0FBRyxDQUFDLElBQUltYixFQUFFbGQsRUFBRWs3QyxVQUFVaCtDLEVBQUU4QyxFQUFFMGxDLElBQUlod0MsRUFBRXNLLEVBQUV1OUIsT0FBTzJkLFVBQVUxbUIsRUFBRXVNLEVBQUVyckMsRUFBRXFNLElBQUkvQixFQUFFdTlCLE9BQU8yVyxtQkFBbUIsaUJBQWlCeCtDLEVBQUVxTSxJQUFJLEVBQUV5eUIsRUFBRTM5QixRQUFRLElBQUlxRyxFQUFFNkcsS0FBS3JPLEVBQUVxTSxJQUFJbEwsU0FBUzI5QixFQUFFdDNCLEVBQUU2RyxLQUFLck8sRUFBRXFNLEtBQUssSUFBSWkvQixFQUFFeE0sRUFBRXp3QixLQUFLLElBQUkvRCxFQUFFdTlCLE9BQU8yZCxVQUFVZSxXQUFXLElBQUlqYixFQUFFbnFDLFNBQVNtcUMsRUFBRUQsRUFBRSxlQUFlL2dDLEVBQUV1OUIsT0FBTzJkLFVBQVVlLFVBQVUsWUFBWXpuQixFQUFFN1EsT0FBT3FkLElBQUlpQyxFQUFFdnFDLE9BQU93a0IsRUFBRSxDQUFDd29CLElBQUlsUixFQUFFenlCLEdBQUd5eUIsRUFBRSxHQUFHNm1CLFFBQVFyYSxFQUFFa2IsT0FBT2xiLEVBQUUsS0FBS3RyQyxFQUFFeW1ELFdBQVdqL0IsRUFBRTYrQixvQkFBb0JuRyxRQUFRLFdBQVdwaUQsS0FBSzBuRCxVQUFVYyxxQkFBcUJJLEVBQUUsQ0FBQ0MsYUFBYSxTQUFTcjhDLEVBQUVrZCxHQUFHLElBQUloZ0IsRUFBRTFKLEtBQUtvaEQsSUFBSWwvQyxFQUFFcXJDLEVBQUUvZ0MsR0FBR3cwQixFQUFFdDNCLEdBQUcsRUFBRSxFQUFFOGpDLEVBQUV0ckMsRUFBRTRQLEtBQUsseUJBQXlCLElBQUlzSSxFQUFFbFksRUFBRTRQLEtBQUssMEJBQTBCMjdCLEVBQUV2ckMsRUFBRTRQLEtBQUssMEJBQTBCc0osRUFBRWxaLEVBQUU0UCxLQUFLLDhCQUE4QnM4QixFQUFFbHNDLEVBQUU0UCxLQUFLLGdDQUFnQyxHQUFHc0ksR0FBR3F6QixHQUFHcnpCLEVBQUVBLEdBQUcsSUFBSXF6QixFQUFFQSxHQUFHLEtBQUt6dEMsS0FBS3F5QyxnQkFBZ0JqNEIsRUFBRW96QixFQUFFQyxFQUFFLE1BQU1BLEVBQUVELEVBQUVwekIsRUFBRSxLQUFLQSxFQUFFLEdBQUdBLEVBQUVyWixRQUFRLEtBQUsreUIsU0FBUzFaLEVBQUUsSUFBSXNQLEVBQUVzWCxFQUFFLElBQUk1bUIsRUFBRXNQLEVBQUVzWCxFQUFFLEtBQUt5TSxFQUFFLEdBQUdBLEVBQUUxc0MsUUFBUSxLQUFLK3lCLFNBQVMyWixFQUFFLElBQUkvakIsRUFBRSxJQUFJK2pCLEVBQUUvakIsRUFBRSxLQUFLLE1BQU0wa0IsRUFBRSxDQUFDLElBQUl0VixFQUFFc1YsR0FBR0EsRUFBRSxJQUFJLEVBQUVyb0MsS0FBS2l2QyxJQUFJdHJCLElBQUl4bkIsRUFBRSxHQUFHc2lCLE1BQU15UixRQUFRNkMsRUFBRSxHQUFHLE1BQU0xZCxFQUFFbFosRUFBRTRyQyxVQUFVLGVBQWUxekIsRUFBRSxLQUFLcXpCLEVBQUUsY0FBYyxDQUFDLElBQUlZLEVBQUVqekIsR0FBR0EsRUFBRSxJQUFJLEVBQUVyVixLQUFLaXZDLElBQUl0ckIsSUFBSXhuQixFQUFFNHJDLFVBQVUsZUFBZTF6QixFQUFFLEtBQUtxekIsRUFBRSxnQkFBZ0JZLEVBQUUsT0FBTzJKLGFBQWEsV0FBVyxJQUFJOTFDLEVBQUVsQyxLQUFLd00sRUFBRXRLLEVBQUVnd0MsSUFBSXhvQixFQUFFeG5CLEVBQUUyd0MsT0FBTzdSLEVBQUU5K0IsRUFBRTBjLFNBQVM0dUIsRUFBRXRyQyxFQUFFK3dDLFNBQVN6bUMsRUFBRXVPLFNBQVMsOEVBQThFOVcsS0FBSyxTQUFTdUksRUFBRWtkLEdBQUd4bkIsRUFBRTRtRCxTQUFTRCxhQUFhbi9CLEVBQUVzWCxLQUFLdFgsRUFBRXpsQixLQUFLLFNBQVN1SSxFQUFFa2QsR0FBRyxJQUFJaGdCLEVBQUVnZ0IsRUFBRTlLLFNBQVMsRUFBRTFjLEVBQUU2bkMsT0FBT2tMLGdCQUFnQixTQUFTL3lDLEVBQUU2bkMsT0FBTzhKLGdCQUFnQm5xQyxHQUFHM0QsS0FBSzB2QixLQUFLanBCLEVBQUUsR0FBR3cwQixHQUFHd00sRUFBRW5xQyxPQUFPLElBQUlxRyxFQUFFM0QsS0FBSzAxQyxJQUFJMTFDLEtBQUtpdkIsSUFBSXRyQixHQUFHLEdBQUcsR0FBRzZqQyxFQUFFN2pCLEdBQUduWixLQUFLLDhFQUE4RXRNLEtBQUssU0FBU3VJLEVBQUVrZCxHQUFHeG5CLEVBQUU0bUQsU0FBU0QsYUFBYW4vQixFQUFFaGdCLFFBQVFzc0MsY0FBYyxTQUFTaFYsUUFBRyxJQUFTQSxJQUFJQSxFQUFFaGhDLEtBQUsrcEMsT0FBT2hPLE9BQU8vN0IsS0FBS2t5QyxJQUFJM2hDLEtBQUssOEVBQThFdE0sS0FBSyxTQUFTdUksRUFBRWtkLEdBQUcsSUFBSWhnQixFQUFFNmpDLEVBQUU3akIsR0FBR3huQixFQUFFNHhCLFNBQVNwcUIsRUFBRW9JLEtBQUssaUNBQWlDLEtBQUtrdkIsRUFBRSxJQUFJQSxJQUFJOStCLEVBQUUsR0FBR3dILEVBQUVza0MsV0FBVzlyQyxPQUFPNm1ELEVBQUUsQ0FBQ0MsMEJBQTBCLFNBQVN4OEMsR0FBRyxHQUFHQSxFQUFFdWhCLGNBQWMxcUIsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJcW1CLEVBQUVsZCxFQUFFdWhCLGNBQWMsR0FBR2hCLE1BQU1yakIsRUFBRThDLEVBQUV1aEIsY0FBYyxHQUFHZixNQUFNOXFCLEVBQUVzSyxFQUFFdWhCLGNBQWMsR0FBR2hCLE1BQU1pVSxFQUFFeDBCLEVBQUV1aEIsY0FBYyxHQUFHZixNQUFNLE9BQU9qbkIsS0FBSzQzQyxLQUFLNTNDLEtBQUs2M0MsSUFBSTE3QyxFQUFFd25CLEVBQUUsR0FBRzNqQixLQUFLNjNDLElBQUk1YyxFQUFFdDNCLEVBQUUsS0FBS3UvQyxlQUFlLFNBQVN6OEMsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFcWdCLE9BQU81UyxLQUFLajFCLEVBQUV3bkIsRUFBRXlOLEtBQUs2SixFQUFFOStCLEVBQUVnbkQsUUFBUSxHQUFHaG5ELEVBQUVpbkQsb0JBQW1CLEVBQUdqbkQsRUFBRWtuRCxrQkFBaUIsR0FBSTVZLEVBQUVjLFNBQVMsQ0FBQyxHQUFHLGVBQWU5a0MsRUFBRTlLLE1BQU0sZUFBZThLLEVBQUU5SyxNQUFNOEssRUFBRXVoQixjQUFjMXFCLE9BQU8sRUFBRSxPQUFPbkIsRUFBRWluRCxvQkFBbUIsRUFBR25vQixFQUFFcW9CLFdBQVdOLEVBQUVDLDBCQUEwQng4QyxHQUFHdzBCLEVBQUVzb0IsVUFBVXRvQixFQUFFc29CLFNBQVNqbUQsU0FBUzI5QixFQUFFc29CLFNBQVMvYixFQUFFL2dDLEVBQUVoSCxRQUFRNlYsUUFBUSxpQkFBaUIsSUFBSTJsQixFQUFFc29CLFNBQVNqbUQsU0FBUzI5QixFQUFFc29CLFNBQVM1L0IsRUFBRW1wQixPQUFPdHVDLEdBQUdtbEIsRUFBRXVzQixjQUFjalYsRUFBRXVvQixTQUFTdm9CLEVBQUVzb0IsU0FBUy80QyxLQUFLLG9CQUFvQnl3QixFQUFFd29CLGFBQWF4b0IsRUFBRXVvQixTQUFTcjFDLE9BQU8sSUFBSXhLLEVBQUUrL0MsZ0JBQWdCem9CLEVBQUUwb0IsU0FBUzFvQixFQUFFd29CLGFBQWExM0MsS0FBSyxxQkFBcUJwSSxFQUFFZ2dELFNBQVMsSUFBSTFvQixFQUFFd29CLGFBQWFubUQsU0FBUzI5QixFQUFFdW9CLFNBQVN2YixXQUFXLEdBQUd0a0IsRUFBRXlOLEtBQUt3eUIsV0FBVSxHQUFJM29CLEVBQUV1b0IsY0FBUyxHQUFRSyxnQkFBZ0IsU0FBU3A5QyxHQUFHLElBQUlrZCxFQUFFMXBCLEtBQUsrcEMsT0FBTzVTLEtBQUt6dEIsRUFBRTFKLEtBQUttM0IsS0FBS2oxQixFQUFFd0gsRUFBRXcvQyxRQUFRLElBQUkxWSxFQUFFYyxTQUFTLENBQUMsR0FBRyxjQUFjOWtDLEVBQUU5SyxNQUFNLGNBQWM4SyxFQUFFOUssTUFBTThLLEVBQUV1aEIsY0FBYzFxQixPQUFPLEVBQUUsT0FBT3FHLEVBQUUwL0Msa0JBQWlCLEVBQUdsbkQsRUFBRTJuRCxVQUFVZCxFQUFFQywwQkFBMEJ4OEMsR0FBR3RLLEVBQUVxbkQsVUFBVSxJQUFJcm5ELEVBQUVxbkQsU0FBU2xtRCxTQUFTbXRDLEVBQUVjLFNBQVN0eEMsS0FBS20zQixLQUFLcFMsTUFBTXZZLEVBQUV1WSxNQUFNcmIsRUFBRW9nRCxhQUFhcGdELEVBQUVxYixNQUFNN2lCLEVBQUUybkQsVUFBVTNuRCxFQUFFbW5ELFdBQVczL0MsRUFBRW9nRCxhQUFhcGdELEVBQUVxYixNQUFNN2lCLEVBQUV3bkQsV0FBV2hnRCxFQUFFcWIsTUFBTTdpQixFQUFFd25ELFNBQVMsRUFBRTNqRCxLQUFLNjNDLElBQUlsMEMsRUFBRXFiLE1BQU03aUIsRUFBRXduRCxTQUFTLEVBQUUsS0FBS2hnRCxFQUFFcWIsTUFBTTJFLEVBQUVxZ0MsV0FBV3JnRCxFQUFFcWIsTUFBTTJFLEVBQUVxZ0MsU0FBUyxFQUFFaGtELEtBQUs2M0MsSUFBSWwwQixFQUFFcWdDLFNBQVNyZ0QsRUFBRXFiLE1BQU0sRUFBRSxLQUFLN2lCLEVBQUVxbkQsU0FBU3piLFVBQVUsNEJBQTRCcGtDLEVBQUVxYixNQUFNLE9BQU9pbEMsYUFBYSxTQUFTeDlDLEdBQUcsSUFBSWtkLEVBQUUxcEIsS0FBSytwQyxPQUFPNVMsS0FBS3p0QixFQUFFMUosS0FBS20zQixLQUFLajFCLEVBQUV3SCxFQUFFdy9DLFFBQVEsSUFBSTFZLEVBQUVjLFNBQVMsQ0FBQyxJQUFJNW5DLEVBQUV5L0MscUJBQXFCei9DLEVBQUUwL0MsaUJBQWlCLE9BQU8sR0FBRyxhQUFhNThDLEVBQUU5SyxNQUFNLGFBQWE4SyxFQUFFOUssTUFBTThLLEVBQUVrZ0IsZUFBZXJwQixPQUFPLElBQUlzSixFQUFFNHRDLFFBQVEsT0FBTzd3QyxFQUFFeS9DLG9CQUFtQixFQUFHei9DLEVBQUUwL0Msa0JBQWlCLEVBQUdsbkQsRUFBRXFuRCxVQUFVLElBQUlybkQsRUFBRXFuRCxTQUFTbG1ELFNBQVNxRyxFQUFFcWIsTUFBTWhmLEtBQUtpdkIsSUFBSWp2QixLQUFLMDFDLElBQUkveEMsRUFBRXFiLE1BQU03aUIsRUFBRXduRCxVQUFVaGdDLEVBQUVxZ0MsVUFBVTduRCxFQUFFcW5ELFNBQVN2YixXQUFXaHVDLEtBQUsrcEMsT0FBT2hPLE9BQU8rUixVQUFVLDRCQUE0QnBrQyxFQUFFcWIsTUFBTSxLQUFLcmIsRUFBRW9nRCxhQUFhcGdELEVBQUVxYixNQUFNcmIsRUFBRWlnRCxXQUFVLEVBQUcsSUFBSWpnRCxFQUFFcWIsUUFBUTdpQixFQUFFb25ELGNBQVMsS0FBVXpOLGFBQWEsU0FBU3J2QyxHQUFHLElBQUlrZCxFQUFFMXBCLEtBQUttM0IsS0FBS3p0QixFQUFFZ2dCLEVBQUV3L0IsUUFBUWhuRCxFQUFFd25CLEVBQUVuVCxNQUFNN00sRUFBRTYvQyxVQUFVLElBQUk3L0MsRUFBRTYvQyxTQUFTbG1ELFNBQVNuQixFQUFFODVDLFlBQVlydkMsRUFBRTR0QyxTQUFTL3RDLEVBQUU0YyxpQkFBaUJsbkIsRUFBRTg1QyxXQUFVLEVBQUc5NUMsRUFBRStuRCxhQUFhNVcsRUFBRSxlQUFlN21DLEVBQUU5SyxLQUFLOEssRUFBRXVoQixjQUFjLEdBQUdoQixNQUFNdmdCLEVBQUV1Z0IsTUFBTTdxQixFQUFFK25ELGFBQWE3VyxFQUFFLGVBQWU1bUMsRUFBRTlLLEtBQUs4SyxFQUFFdWhCLGNBQWMsR0FBR2YsTUFBTXhnQixFQUFFd2dCLFNBQVN3d0IsWUFBWSxTQUFTaHhDLEdBQUcsSUFBSWtkLEVBQUUxcEIsS0FBSzBKLEVBQUVnZ0IsRUFBRXlOLEtBQUtqMUIsRUFBRXdILEVBQUV3L0MsUUFBUWxvQixFQUFFdDNCLEVBQUU2TSxNQUFNaTNCLEVBQUU5akMsRUFBRW8xQyxTQUFTLEdBQUc1OEMsRUFBRXFuRCxVQUFVLElBQUlybkQsRUFBRXFuRCxTQUFTbG1ELFNBQVNxbUIsRUFBRTJ5QixZQUFXLEVBQUdyYixFQUFFZ2IsV0FBVzk1QyxFQUFFb25ELFVBQVUsQ0FBQ3RvQixFQUFFaWIsVUFBVWpiLEVBQUU1TyxNQUFNbHdCLEVBQUVxbkQsU0FBUyxHQUFHajNCLFlBQVkwTyxFQUFFbk4sT0FBTzN4QixFQUFFcW5ELFNBQVMsR0FBRzdoQixhQUFhMUcsRUFBRWdjLE9BQU92TixFQUFFRyxhQUFhMXRDLEVBQUVzbkQsYUFBYSxHQUFHLE1BQU0sRUFBRXhvQixFQUFFaWMsT0FBT3hOLEVBQUVHLGFBQWExdEMsRUFBRXNuRCxhQUFhLEdBQUcsTUFBTSxFQUFFdG5ELEVBQUVnb0QsV0FBV2hvRCxFQUFFb25ELFNBQVMsR0FBR2gzQixZQUFZcHdCLEVBQUVpb0QsWUFBWWpvRCxFQUFFb25ELFNBQVMsR0FBRzVoQixhQUFheGxDLEVBQUVzbkQsYUFBYXhiLFdBQVcsR0FBR3RrQixFQUFFMDNCLE1BQU1wZ0IsRUFBRWdjLFFBQVFoYyxFQUFFZ2MsT0FBT2hjLEVBQUVpYyxRQUFRamMsRUFBRWljLFNBQVMsSUFBSTdpQyxFQUFFNG1CLEVBQUU1TyxNQUFNMW9CLEVBQUVxYixNQUFNMG9CLEVBQUV6TSxFQUFFbk4sT0FBT25xQixFQUFFcWIsTUFBTSxLQUFLM0ssRUFBRWxZLEVBQUVnb0QsWUFBWXpjLEVBQUV2ckMsRUFBRWlvRCxhQUFhLENBQUMsR0FBR25wQixFQUFFb3BCLEtBQUtya0QsS0FBSzAxQyxJQUFJdjVDLEVBQUVnb0QsV0FBVyxFQUFFOXZDLEVBQUUsRUFBRSxHQUFHNG1CLEVBQUVxcEIsTUFBTXJwQixFQUFFb3BCLEtBQUtwcEIsRUFBRXNwQixLQUFLdmtELEtBQUswMUMsSUFBSXY1QyxFQUFFaW9ELFlBQVksRUFBRTFjLEVBQUUsRUFBRSxHQUFHek0sRUFBRXVwQixNQUFNdnBCLEVBQUVzcEIsS0FBS3RwQixFQUFFd3BCLGVBQWVuWCxFQUFFLGNBQWM3bUMsRUFBRTlLLEtBQUs4SyxFQUFFdWhCLGNBQWMsR0FBR2hCLE1BQU12Z0IsRUFBRXVnQixNQUFNaVUsRUFBRXdwQixlQUFlcFgsRUFBRSxjQUFjNW1DLEVBQUU5SyxLQUFLOEssRUFBRXVoQixjQUFjLEdBQUdmLE1BQU14Z0IsRUFBRXdnQixPQUFPZ1UsRUFBRWliLFVBQVV2eUMsRUFBRWlnRCxVQUFVLENBQUMsR0FBR2pnQyxFQUFFMm9CLGlCQUFpQnRzQyxLQUFLNnRDLE1BQU01UyxFQUFFb3BCLFFBQVFya0QsS0FBSzZ0QyxNQUFNNVMsRUFBRWdjLFNBQVNoYyxFQUFFd3BCLGVBQWVuWCxFQUFFclMsRUFBRWlwQixhQUFhNVcsR0FBR3R0QyxLQUFLNnRDLE1BQU01UyxFQUFFcXBCLFFBQVF0a0QsS0FBSzZ0QyxNQUFNNVMsRUFBRWdjLFNBQVNoYyxFQUFFd3BCLGVBQWVuWCxFQUFFclMsRUFBRWlwQixhQUFhNVcsR0FBRyxZQUFZclMsRUFBRWdiLFdBQVUsR0FBSSxJQUFJdHlCLEVBQUUyb0IsaUJBQWlCdHNDLEtBQUs2dEMsTUFBTTVTLEVBQUVzcEIsUUFBUXZrRCxLQUFLNnRDLE1BQU01UyxFQUFFaWMsU0FBU2pjLEVBQUV3cEIsZUFBZXBYLEVBQUVwUyxFQUFFaXBCLGFBQWE3VyxHQUFHcnRDLEtBQUs2dEMsTUFBTTVTLEVBQUV1cEIsUUFBUXhrRCxLQUFLNnRDLE1BQU01UyxFQUFFaWMsU0FBU2pjLEVBQUV3cEIsZUFBZXBYLEVBQUVwUyxFQUFFaXBCLGFBQWE3VyxHQUFHLFlBQVlwUyxFQUFFZ2IsV0FBVSxHQUFJeHZDLEVBQUU0YyxpQkFBaUI1YyxFQUFFMGMsa0JBQWtCOFgsRUFBRWliLFNBQVEsRUFBR2piLEVBQUV1YixTQUFTdmIsRUFBRXdwQixlQUFlblgsRUFBRXJTLEVBQUVpcEIsYUFBYTVXLEVBQUVyUyxFQUFFZ2MsT0FBT2hjLEVBQUV3YixTQUFTeGIsRUFBRXdwQixlQUFlcFgsRUFBRXBTLEVBQUVpcEIsYUFBYTdXLEVBQUVwUyxFQUFFaWMsT0FBT2pjLEVBQUV1YixTQUFTdmIsRUFBRW9wQixPQUFPcHBCLEVBQUV1YixTQUFTdmIsRUFBRW9wQixLQUFLLEVBQUVya0QsS0FBSzYzQyxJQUFJNWMsRUFBRW9wQixLQUFLcHBCLEVBQUV1YixTQUFTLEVBQUUsS0FBS3ZiLEVBQUV1YixTQUFTdmIsRUFBRXFwQixPQUFPcnBCLEVBQUV1YixTQUFTdmIsRUFBRXFwQixLQUFLLEVBQUV0a0QsS0FBSzYzQyxJQUFJNWMsRUFBRXViLFNBQVN2YixFQUFFcXBCLEtBQUssRUFBRSxLQUFLcnBCLEVBQUV3YixTQUFTeGIsRUFBRXNwQixPQUFPdHBCLEVBQUV3YixTQUFTeGIsRUFBRXNwQixLQUFLLEVBQUV2a0QsS0FBSzYzQyxJQUFJNWMsRUFBRXNwQixLQUFLdHBCLEVBQUV3YixTQUFTLEVBQUUsS0FBS3hiLEVBQUV3YixTQUFTeGIsRUFBRXVwQixPQUFPdnBCLEVBQUV3YixTQUFTeGIsRUFBRXVwQixLQUFLLEVBQUV4a0QsS0FBSzYzQyxJQUFJNWMsRUFBRXdiLFNBQVN4YixFQUFFdXBCLEtBQUssRUFBRSxLQUFLL2MsRUFBRWlkLGdCQUFnQmpkLEVBQUVpZCxjQUFjenBCLEVBQUV3cEIsZUFBZW5YLEdBQUc3RixFQUFFa2QsZ0JBQWdCbGQsRUFBRWtkLGNBQWMxcEIsRUFBRXdwQixlQUFlcFgsR0FBRzVGLEVBQUVtZCxXQUFXbmQsRUFBRW1kLFNBQVMzaEQsS0FBS3FqQixPQUFPbWhCLEVBQUU2RixHQUFHclMsRUFBRXdwQixlQUFlblgsRUFBRTdGLEVBQUVpZCxnQkFBZ0J6aEQsS0FBS3FqQixNQUFNbWhCLEVBQUVtZCxVQUFVLEVBQUVuZCxFQUFFNEYsR0FBR3BTLEVBQUV3cEIsZUFBZXBYLEVBQUU1RixFQUFFa2QsZ0JBQWdCMWhELEtBQUtxakIsTUFBTW1oQixFQUFFbWQsVUFBVSxFQUFFNWtELEtBQUtpdkMsSUFBSWhVLEVBQUV3cEIsZUFBZW5YLEVBQUU3RixFQUFFaWQsZUFBZSxJQUFJamQsRUFBRTZGLEVBQUUsR0FBR3R0QyxLQUFLaXZDLElBQUloVSxFQUFFd3BCLGVBQWVwWCxFQUFFNUYsRUFBRWtkLGVBQWUsSUFBSWxkLEVBQUU0RixFQUFFLEdBQUc1RixFQUFFaWQsY0FBY3pwQixFQUFFd3BCLGVBQWVuWCxFQUFFN0YsRUFBRWtkLGNBQWMxcEIsRUFBRXdwQixlQUFlcFgsRUFBRTVGLEVBQUVtZCxTQUFTM2hELEtBQUtxakIsTUFBTW5xQixFQUFFc25ELGFBQWExYixVQUFVLGVBQWU5TSxFQUFFdWIsU0FBUyxPQUFPdmIsRUFBRXdiLFNBQVMsWUFBWWtDLFdBQVcsV0FBVyxJQUFJbHlDLEVBQUV4TSxLQUFLbTNCLEtBQUt6TixFQUFFbGQsRUFBRTA4QyxRQUFReC9DLEVBQUU4QyxFQUFFK0osTUFBTXJVLEVBQUVzSyxFQUFFc3lDLFNBQVMsR0FBR3AxQixFQUFFNi9CLFVBQVUsSUFBSTcvQixFQUFFNi9CLFNBQVNsbUQsT0FBTyxDQUFDLElBQUlxRyxFQUFFc3lDLFlBQVl0eUMsRUFBRXV5QyxRQUFRLE9BQU92eUMsRUFBRXN5QyxXQUFVLE9BQVF0eUMsRUFBRXV5QyxTQUFRLEdBQUl2eUMsRUFBRXN5QyxXQUFVLEVBQUd0eUMsRUFBRXV5QyxTQUFRLEVBQUcsSUFBSWpiLEVBQUUsSUFBSXdNLEVBQUUsSUFBSXB6QixFQUFFbFksRUFBRW14QyxFQUFFclMsRUFBRXlNLEVBQUUvakMsRUFBRTZ5QyxTQUFTbmlDLEVBQUVnQixFQUFFbFosRUFBRWt4QyxFQUFFNUYsRUFBRVksRUFBRTFrQyxFQUFFOHlDLFNBQVNwaEMsRUFBRSxJQUFJbFosRUFBRW14QyxJQUFJclMsRUFBRWo3QixLQUFLaXZDLEtBQUt2SCxFQUFFL2pDLEVBQUU2eUMsVUFBVXI2QyxFQUFFbXhDLElBQUksSUFBSW54QyxFQUFFa3hDLElBQUk1RixFQUFFem5DLEtBQUtpdkMsS0FBSzVHLEVBQUUxa0MsRUFBRTh5QyxVQUFVdDZDLEVBQUVreEMsSUFBSSxJQUFJdGEsRUFBRS95QixLQUFLaXZCLElBQUlnTSxFQUFFd00sR0FBRzlqQyxFQUFFNnlDLFNBQVM5TyxFQUFFL2pDLEVBQUU4eUMsU0FBU3BPLEVBQUUsSUFBSUMsRUFBRTNrQyxFQUFFMG9CLE1BQU01bEIsRUFBRXVZLE1BQU11cEIsRUFBRTVrQyxFQUFFbXFCLE9BQU9ybkIsRUFBRXVZLE1BQU1yYixFQUFFMGdELEtBQUtya0QsS0FBSzAxQyxJQUFJL3hCLEVBQUV3Z0MsV0FBVyxFQUFFN2IsRUFBRSxFQUFFLEdBQUcza0MsRUFBRTJnRCxNQUFNM2dELEVBQUUwZ0QsS0FBSzFnRCxFQUFFNGdELEtBQUt2a0QsS0FBSzAxQyxJQUFJL3hCLEVBQUV5Z0MsWUFBWSxFQUFFN2IsRUFBRSxFQUFFLEdBQUc1a0MsRUFBRTZnRCxNQUFNN2dELEVBQUU0Z0QsS0FBSzVnRCxFQUFFNnlDLFNBQVN4MkMsS0FBS2l2QixJQUFJanZCLEtBQUswMUMsSUFBSS94QyxFQUFFNnlDLFNBQVM3eUMsRUFBRTJnRCxNQUFNM2dELEVBQUUwZ0QsTUFBTTFnRCxFQUFFOHlDLFNBQVN6MkMsS0FBS2l2QixJQUFJanZCLEtBQUswMUMsSUFBSS94QyxFQUFFOHlDLFNBQVM5eUMsRUFBRTZnRCxNQUFNN2dELEVBQUU0Z0QsTUFBTTVnQyxFQUFFOC9CLGFBQWF4YixXQUFXbFYsR0FBR2dWLFVBQVUsZUFBZXBrQyxFQUFFNnlDLFNBQVMsT0FBTzd5QyxFQUFFOHlDLFNBQVMsV0FBV29PLGdCQUFnQixXQUFXLElBQUlwK0MsRUFBRXhNLEtBQUttM0IsS0FBS3pOLEVBQUVsZCxFQUFFMDhDLFFBQVF4L0IsRUFBRTQvQixVQUFVdHBELEtBQUswM0MsZ0JBQWdCMTNDLEtBQUtpMkMsY0FBY3ZzQixFQUFFNi9CLFNBQVN6YixVQUFVLCtCQUErQnBrQixFQUFFOC9CLGFBQWExYixVQUFVLHNCQUFzQnBrQixFQUFFNC9CLGNBQVMsRUFBTzUvQixFQUFFNi9CLGNBQVMsRUFBTzcvQixFQUFFOC9CLGtCQUFhLEVBQU9oOUMsRUFBRXVZLE1BQU0sRUFBRXZZLEVBQUVzOUMsYUFBYSxJQUFJbGtDLE9BQU8sU0FBU3BaLEdBQUcsSUFBSWtkLEVBQUUxcEIsS0FBS20zQixLQUFLek4sRUFBRTNFLE9BQU8sSUFBSTJFLEVBQUUzRSxNQUFNMkUsRUFBRW1oQyxNQUFNbmhDLEVBQUMsR0FBSWxkLElBQUlzK0MsR0FBRyxTQUFTdCtDLEdBQUcsSUFBSWtkLEVBQUVoZ0IsRUFBRXhILEVBQUU4K0IsRUFBRXdNLEVBQUVwekIsRUFBRXF6QixFQUFFcnlCLEVBQUVnekIsRUFBRXRWLEVBQUV1VixFQUFFQyxFQUFFQyxFQUFFbnlCLEVBQUV3d0IsRUFBRWpnQyxFQUFFdW1DLEVBQUVsekMsS0FBSzJKLEVBQUV1cEMsRUFBRS9iLEtBQUt0M0IsRUFBRXF6QyxFQUFFbkosT0FBTzVTLEtBQUtpYyxFQUFFenBDLEVBQUV1L0MsUUFBUTdWLEVBQUUxcEMsRUFBRTRNLE1BQU82OEIsRUFBRWtXLFdBQVdsVyxFQUFFa1csU0FBU3BXLEVBQUUwRSxhQUFhckssRUFBRTJGLEVBQUUwRSxjQUFjMUUsRUFBRUwsT0FBT3R1QyxHQUFHMnVDLEVBQUUrQyxhQUFhN0MsRUFBRW1XLFNBQVNuVyxFQUFFa1csU0FBUy80QyxLQUFLLG9CQUFvQjZpQyxFQUFFb1csYUFBYXBXLEVBQUVtVyxTQUFTcjFDLE9BQU8sSUFBSXJVLEVBQUU0cEQsaUJBQWlCclcsRUFBRW1XLFVBQVUsSUFBSW5XLEVBQUVtVyxTQUFTbG1ELFNBQVUrdkMsRUFBRWtXLFNBQVM1cUIsU0FBUyxHQUFHNytCLEVBQUVrckQsa0JBQXdHcmhELE9BQXRGLElBQVMycEMsRUFBRTRXLGFBQWE1VyxHQUFHN21DLEdBQUdrZCxFQUFFLGFBQWFsZCxFQUFFOUssS0FBSzhLLEVBQUVrZ0IsZUFBZSxHQUFHSyxNQUFNdmdCLEVBQUV1Z0IsTUFBUSxhQUFhdmdCLEVBQUU5SyxLQUFLOEssRUFBRWtnQixlQUFlLEdBQUdNLE1BQU14Z0IsRUFBRXdnQixRQUFRdEQsRUFBRTJwQixFQUFFNFcsYUFBYTVXLEVBQUlBLEVBQUU0VyxhQUFhN1csR0FBR3pwQyxFQUFFb2IsTUFBTXF1QixFQUFFb1csYUFBYTEzQyxLQUFLLHFCQUFxQmpTLEVBQUU2cEQsU0FBUy8vQyxFQUFFbWdELGFBQWExVyxFQUFFb1csYUFBYTEzQyxLQUFLLHFCQUFxQmpTLEVBQUU2cEQsU0FBU2w5QyxHQUFHb2dDLEVBQUV3RyxFQUFFa1csU0FBUyxHQUFHaDNCLFlBQVkzbEIsRUFBRXltQyxFQUFFa1csU0FBUyxHQUFHNWhCLGFBQWF4bEMsRUFBRWt4QyxFQUFFa1csU0FBU3JmLFNBQVN2UyxLQUFLa1YsRUFBRSxFQUFFbGpCLEVBQUVzWCxFQUFFb1MsRUFBRWtXLFNBQVNyZixTQUFTbjZCLElBQUluRCxFQUFFLEVBQUVqRCxFQUFFK2pDLEVBQUUyRixFQUFFbVcsU0FBUyxHQUFHajNCLFlBQVlsWCxFQUFFZzRCLEVBQUVtVyxTQUFTLEdBQUc3aEIsYUFBYTBHLEVBQUVYLEVBQUU5akMsRUFBRW9iLE1BQU0rVCxFQUFFMWQsRUFBRXpSLEVBQUVvYixNQUFNd3BCLElBQUlGLEVBQUV0b0MsS0FBSzAxQyxJQUFJN08sRUFBRSxFQUFFd0IsRUFBRSxFQUFFLElBQUloeUIsSUFBSWt5QixFQUFFdm9DLEtBQUswMUMsSUFBSTl1QyxFQUFFLEVBQUVtc0IsRUFBRSxFQUFFLEtBQUswVSxFQUFFdHJDLEVBQUV5SCxFQUFFb2IsT0FBT3NwQixJQUFJYixFQUFFYSxHQUFHRSxFQUFFZixJQUFJQSxFQUFFZSxJQUFJbjBCLEVBQUU0bUIsRUFBRXIzQixFQUFFb2IsT0FBT3VwQixJQUFJbDBCLEVBQUVrMEIsR0FBR2x5QixFQUFFaEMsSUFBSUEsRUFBRWdDLElBQUloQyxFQUFFb3pCLEVBQUUsRUFBRTRGLEVBQUVvVyxhQUFheGIsV0FBVyxLQUFLRixVQUFVLGVBQWVOLEVBQUUsT0FBT3B6QixFQUFFLFNBQVNnNUIsRUFBRW1XLFNBQVN2YixXQUFXLEtBQUtGLFVBQVUsNEJBQTRCbmtDLEVBQUVvYixNQUFNLE9BQU84bEMsSUFBSSxXQUFXLElBQUlyK0MsRUFBRXhNLEtBQUswcEIsRUFBRWxkLEVBQUUycUIsS0FBS3p0QixFQUFFOEMsRUFBRXU5QixPQUFPNVMsS0FBS2oxQixFQUFFd25CLEVBQUV3L0IsUUFBUWhuRCxFQUFFb25ELFdBQVdwbkQsRUFBRW9uRCxTQUFTOThDLEVBQUVvckMsYUFBYXJLLEVBQUUvZ0MsRUFBRW9yQyxjQUFjcHJDLEVBQUVxbUMsT0FBT3R1QyxHQUFHaUksRUFBRXlwQyxhQUFhL3pDLEVBQUVxbkQsU0FBU3JuRCxFQUFFb25ELFNBQVMvNEMsS0FBSyxvQkFBb0JyTyxFQUFFc25ELGFBQWF0bkQsRUFBRXFuRCxTQUFTcjFDLE9BQU8sSUFBSXhLLEVBQUUrL0MsaUJBQWlCdm5ELEVBQUVxbkQsVUFBVSxJQUFJcm5ELEVBQUVxbkQsU0FBU2xtRCxTQUFTcW1CLEVBQUUzRSxNQUFNLEVBQUUyRSxFQUFFb2dDLGFBQWEsRUFBRTVuRCxFQUFFc25ELGFBQWF4YixXQUFXLEtBQUtGLFVBQVUsc0JBQXNCNXJDLEVBQUVxbkQsU0FBU3ZiLFdBQVcsS0FBS0YsVUFBVSwrQkFBK0I1ckMsRUFBRW9uRCxTQUFTdnFCLFlBQVksR0FBR3IxQixFQUFFcWhELGtCQUFrQjdvRCxFQUFFb25ELGNBQVMsSUFBU3pGLE9BQU8sV0FBVyxJQUFJcjNDLEVBQUV4TSxLQUFLMHBCLEVBQUVsZCxFQUFFMnFCLEtBQUssSUFBSXpOLEVBQUVqVSxRQUFRLENBQUNpVSxFQUFFalUsU0FBUSxFQUFHLElBQUkvTCxJQUFJLGVBQWU4QyxFQUFFbXZDLFlBQVkxbkMsUUFBUXU4QixFQUFFYSxrQkFBa0I3a0MsRUFBRXU5QixPQUFPOFYsbUJBQW1CLENBQUNDLFNBQVEsRUFBR0MsU0FBUSxHQUFJdlAsRUFBRWMsVUFBVTlrQyxFQUFFaW1DLFdBQVdscUIsR0FBRyxlQUFlLGdCQUFnQm1CLEVBQUV1L0IsZUFBZXYvQyxHQUFHOEMsRUFBRWltQyxXQUFXbHFCLEdBQUcsZ0JBQWdCLGdCQUFnQm1CLEVBQUVrZ0MsZ0JBQWdCbGdELEdBQUc4QyxFQUFFaW1DLFdBQVdscUIsR0FBRyxhQUFhLGdCQUFnQm1CLEVBQUVzZ0MsYUFBYXRnRCxJQUFJLGVBQWU4QyxFQUFFbXZDLFlBQVkxbkMsUUFBUXpILEVBQUVpbUMsV0FBV2xxQixHQUFHL2IsRUFBRW12QyxZQUFZMW5DLE1BQU0sZ0JBQWdCeVYsRUFBRXUvQixlQUFldi9DLEdBQUc4QyxFQUFFaW1DLFdBQVdscUIsR0FBRy9iLEVBQUVtdkMsWUFBWXFFLEtBQUssZ0JBQWdCdDJCLEVBQUVrZ0MsZ0JBQWdCbGdELEdBQUc4QyxFQUFFaW1DLFdBQVdscUIsR0FBRy9iLEVBQUVtdkMsWUFBWTUyQyxJQUFJLGdCQUFnQjJrQixFQUFFc2dDLGFBQWF0Z0QsSUFBSThDLEVBQUVpbUMsV0FBV2xxQixHQUFHL2IsRUFBRW12QyxZQUFZcUUsS0FBSyxJQUFJeHpDLEVBQUV1OUIsT0FBTzVTLEtBQUtzeUIsZUFBZS8vQixFQUFFOHpCLGVBQWUzL0IsUUFBUSxXQUFXLElBQUlyUixFQUFFeE0sS0FBSzBwQixFQUFFbGQsRUFBRTJxQixLQUFLLEdBQUd6TixFQUFFalUsUUFBUSxDQUFDakosRUFBRTJxQixLQUFLMWhCLFNBQVEsRUFBRyxJQUFJL0wsSUFBSSxlQUFlOEMsRUFBRW12QyxZQUFZMW5DLFFBQVF1OEIsRUFBRWEsa0JBQWtCN2tDLEVBQUV1OUIsT0FBTzhWLG1CQUFtQixDQUFDQyxTQUFRLEVBQUdDLFNBQVEsR0FBSXZQLEVBQUVjLFVBQVU5a0MsRUFBRWltQyxXQUFXN3BCLElBQUksZUFBZSxnQkFBZ0JjLEVBQUV1L0IsZUFBZXYvQyxHQUFHOEMsRUFBRWltQyxXQUFXN3BCLElBQUksZ0JBQWdCLGdCQUFnQmMsRUFBRWtnQyxnQkFBZ0JsZ0QsR0FBRzhDLEVBQUVpbUMsV0FBVzdwQixJQUFJLGFBQWEsZ0JBQWdCYyxFQUFFc2dDLGFBQWF0Z0QsSUFBSSxlQUFlOEMsRUFBRW12QyxZQUFZMW5DLFFBQVF6SCxFQUFFaW1DLFdBQVc3cEIsSUFBSXBjLEVBQUVtdkMsWUFBWTFuQyxNQUFNLGdCQUFnQnlWLEVBQUV1L0IsZUFBZXYvQyxHQUFHOEMsRUFBRWltQyxXQUFXN3BCLElBQUlwYyxFQUFFbXZDLFlBQVlxRSxLQUFLLGdCQUFnQnQyQixFQUFFa2dDLGdCQUFnQmxnRCxHQUFHOEMsRUFBRWltQyxXQUFXN3BCLElBQUlwYyxFQUFFbXZDLFlBQVk1MkMsSUFBSSxnQkFBZ0Iya0IsRUFBRXNnQyxhQUFhdGdELElBQUk4QyxFQUFFaW1DLFdBQVc3cEIsSUFBSXBjLEVBQUVtdkMsWUFBWXFFLEtBQUssSUFBSXh6QyxFQUFFdTlCLE9BQU81UyxLQUFLc3lCLGVBQWUvL0IsRUFBRTh6QixnQkFBZ0J3TixFQUFFLENBQUNDLFlBQVksU0FBU3orQyxFQUFFNE8sUUFBRyxJQUFTQSxJQUFJQSxHQUFFLEdBQUksSUFBSWd6QixFQUFFcHVDLEtBQUs4NEIsRUFBRXNWLEVBQUVyRSxPQUFPd1osS0FBSyxRQUFHLElBQVMvMkMsR0FBRyxJQUFJNGhDLEVBQUV5RSxPQUFPeHZDLE9BQU8sQ0FBQyxJQUFJZ3JDLEVBQUVELEVBQUV3RSxTQUFTeEUsRUFBRXJFLE9BQU82SSxRQUFRbjlCLFFBQVEyNEIsRUFBRXFFLFdBQVcxM0IsU0FBUyxJQUFJcXpCLEVBQUVyRSxPQUFPK0ksV0FBVyw2QkFBNkJ0bUMsRUFBRSxNQUFNNGhDLEVBQUV5RSxPQUFPdHVDLEdBQUdpSSxHQUFHa2QsRUFBRTJrQixFQUFFOTlCLEtBQUssSUFBSXVvQixFQUFFb3lCLGFBQWEsU0FBU3B5QixFQUFFcXlCLFlBQVksVUFBVXJ5QixFQUFFc3lCLGFBQWEsTUFBTS9jLEVBQUVqUCxTQUFTdEcsRUFBRW95QixlQUFlN2MsRUFBRWpQLFNBQVN0RyxFQUFFcXlCLGNBQWM5YyxFQUFFalAsU0FBU3RHLEVBQUVzeUIsZ0JBQWdCMWhDLEVBQUVBLEVBQUVsTyxJQUFJNnlCLEVBQUUsS0FBSyxJQUFJM2tCLEVBQUVybUIsUUFBUXFtQixFQUFFemxCLEtBQUssU0FBU3VJLEVBQUVrZCxHQUFHLElBQUl4bkIsRUFBRXFyQyxFQUFFN2pCLEdBQUd4bkIsRUFBRXc4QixTQUFTNUYsRUFBRXN5QixjQUFjLElBQUlwcUIsRUFBRTkrQixFQUFFNFAsS0FBSyxtQkFBbUIwN0IsRUFBRXRyQyxFQUFFNFAsS0FBSyxZQUFZc0ksRUFBRWxZLEVBQUU0UCxLQUFLLGVBQWUyN0IsRUFBRXZyQyxFQUFFNFAsS0FBSyxjQUFjczhCLEVBQUVtVCxVQUFVci9DLEVBQUUsR0FBR3NyQyxHQUFHeE0sRUFBRTVtQixFQUFFcXpCLEdBQUUsRUFBRyxXQUFXLEdBQUcsTUFBTVcsR0FBR0EsS0FBS0EsR0FBR0EsRUFBRXJFLFVBQVVxRSxFQUFFd0ssVUFBVSxDQUFDLEdBQUc1WCxHQUFHOStCLEVBQUV3aUIsSUFBSSxtQkFBbUIsUUFBUXNjLEVBQUUsTUFBTTkrQixFQUFFdzdCLFdBQVcscUJBQXFCdGpCLElBQUlsWSxFQUFFNFAsS0FBSyxTQUFTc0ksR0FBR2xZLEVBQUV3N0IsV0FBVyxnQkFBZ0IrUCxJQUFJdnJDLEVBQUU0UCxLQUFLLFFBQVEyN0IsR0FBR3ZyQyxFQUFFdzdCLFdBQVcsZUFBZThQLElBQUl0ckMsRUFBRTRQLEtBQUssTUFBTTA3QixHQUFHdHJDLEVBQUV3N0IsV0FBVyxjQUFjeDdCLEVBQUV3OEIsU0FBUzVGLEVBQUVxeUIsYUFBYXBzQixZQUFZakcsRUFBRXN5QixjQUFjL2MsRUFBRTk5QixLQUFLLElBQUl1b0IsRUFBRXV5QixnQkFBZ0J6dEMsU0FBU3d3QixFQUFFckUsT0FBT3NOLE1BQU1qOEIsRUFBRSxDQUFDLElBQUk1TyxFQUFFNmhDLEVBQUV2OEIsS0FBSywyQkFBMkIsR0FBR3U4QixFQUFFalAsU0FBU2dQLEVBQUVyRSxPQUFPdU4scUJBQXFCLENBQUMsSUFBSTV0QixFQUFFMGtCLEVBQUVxRSxXQUFXMTNCLFNBQVMsNkJBQTZCdk8sRUFBRSxXQUFXNGhDLEVBQUVyRSxPQUFPdU4sb0JBQW9CLEtBQUtsSixFQUFFbVYsS0FBSzBILFlBQVl2aEMsRUFBRXBPLFNBQVEsT0FBUSxDQUFDLElBQUk1UixFQUFFMGtDLEVBQUVxRSxXQUFXMTNCLFNBQVMsSUFBSXF6QixFQUFFckUsT0FBT3VOLG9CQUFvQiw2QkFBNkI5cUMsRUFBRSxNQUFNNGhDLEVBQUVtVixLQUFLMEgsWUFBWXZoRCxFQUFFNFIsU0FBUSxJQUFLOHlCLEVBQUVvRCxLQUFLLGlCQUFpQm5ELEVBQUUsR0FBR25zQyxFQUFFLE9BQU9rc0MsRUFBRW9ELEtBQUssZ0JBQWdCbkQsRUFBRSxHQUFHbnNDLEVBQUUsUUFBUXlwQixLQUFLLFdBQVcsSUFBSXpwQixFQUFFbEMsS0FBSzBwQixFQUFFeG5CLEVBQUV1d0MsV0FBVy9vQyxFQUFFeEgsRUFBRTZuQyxPQUFPL0ksRUFBRTkrQixFQUFFMndDLE9BQU9ybUMsRUFBRXRLLEVBQUUrekMsWUFBWXpJLEVBQUV0ckMsRUFBRTB3QyxTQUFTbHBDLEVBQUVrcEMsUUFBUW45QixRQUFRMkUsRUFBRTFRLEVBQUU2NUMsS0FBSzlWLEVBQUUvakMsRUFBRW1xQyxjQUFjLFNBQVN6NEIsRUFBRTVPLEdBQUcsR0FBR2doQyxHQUFHLEdBQUc5akIsRUFBRTNPLFNBQVMsSUFBSXJSLEVBQUVvcEMsV0FBVyw2QkFBNkJ0bUMsRUFBRSxNQUFNbkosT0FBTyxPQUFNLE9BQVEsR0FBRzI5QixFQUFFeDBCLEdBQUcsT0FBTSxFQUFZLFNBQVM0aEMsRUFBRTVoQyxHQUFHLE9BQU9naEMsRUFBRUQsRUFBRS9nQyxHQUFHc0YsS0FBSywyQkFBMkJ5N0IsRUFBRS9nQyxHQUFHOE8sUUFBUSxHQUFHLFNBQVNteUIsSUFBSUEsRUFBRSxHQUFHdnJDLEVBQUVxaEQsS0FBSytILHFCQUFxQnBwRCxFQUFFcWhELEtBQUsrSCxvQkFBbUIsR0FBSXBwRCxFQUFFNm5DLE9BQU84TCxzQkFBc0Juc0IsRUFBRTNPLFNBQVMsSUFBSXJSLEVBQUU2c0MsbUJBQW1CdHlDLEtBQUssU0FBU3VJLEVBQUVrZCxHQUFHLElBQUloZ0IsRUFBRThqQyxFQUFFRCxFQUFFN2pCLEdBQUc1WCxLQUFLLDJCQUEyQnk3QixFQUFFN2pCLEdBQUdwTyxRQUFRcFosRUFBRXFoRCxLQUFLMEgsWUFBWXZoRCxVQUFVLEdBQUcsRUFBRStqQyxFQUFFLElBQUksSUFBSTNVLEVBQUV0c0IsRUFBRXNzQixFQUFFdHNCLEVBQUVpaEMsRUFBRTNVLEdBQUcsRUFBRTFkLEVBQUUwZCxJQUFJNTJCLEVBQUVxaEQsS0FBSzBILFlBQVlueUIsUUFBUTUyQixFQUFFcWhELEtBQUswSCxZQUFZeitDLEdBQUcsR0FBRzROLEVBQUVteEMsYUFBYSxHQUFHLEVBQUU5ZCxHQUFHcnpCLEVBQUVveEMsb0JBQW9CLEVBQUVweEMsRUFBRW94QyxtQkFBbUIsQ0FBQyxJQUFJLElBQUluZCxFQUFFajBCLEVBQUVveEMsbUJBQW1CbGQsRUFBRWIsRUFBRWMsRUFBRXhvQyxLQUFLMDFDLElBQUlqdkMsRUFBRThoQyxFQUFFdm9DLEtBQUtpdkIsSUFBSXFaLEVBQUVDLEdBQUd0TixFQUFFMzlCLFFBQVErWSxFQUFFclcsS0FBS2l2QixJQUFJeG9CLEVBQUV6RyxLQUFLaXZCLElBQUlzWixFQUFFRCxHQUFHLEdBQUd6QixFQUFFcGdDLEVBQUVpaEMsRUFBRWIsRUFBRTJCLEVBQUUzQixHQUFHLEVBQUV4eEIsRUFBRXd4QixJQUFJMXFDLEVBQUVxaEQsS0FBSzBILFlBQVlyZSxHQUFHLElBQUksSUFBSWpnQyxFQUFFeVAsRUFBRXpQLEVBQUVILEVBQUVHLEdBQUcsRUFBRXlPLEVBQUV6TyxJQUFJekssRUFBRXFoRCxLQUFLMEgsWUFBWXQrQyxPQUFPLENBQUMsSUFBSXVtQyxFQUFFeHBCLEVBQUUzTyxTQUFTLElBQUlyUixFQUFFc3RDLGdCQUFnQixFQUFFOUQsRUFBRTd2QyxRQUFRbkIsRUFBRXFoRCxLQUFLMEgsWUFBWTdjLEVBQUU4RSxJQUFJLElBQUl2cEMsRUFBRStmLEVBQUUzTyxTQUFTLElBQUlyUixFQUFFdXRDLGdCQUFnQixFQUFFdHRDLEVBQUV0RyxRQUFRbkIsRUFBRXFoRCxLQUFLMEgsWUFBWTdjLEVBQUV6a0MsT0FBTzdFLEVBQUUsQ0FBQzJtRCxhQUFhLFNBQVNqL0MsRUFBRWtkLEdBQUcsSUFBSWhnQixFQUFFeEgsRUFBRTgrQixFQUFFd00sRUFBRXB6QixFQUE4RSxPQUFPcGEsS0FBS3F6QyxFQUFFN21DLEVBQUV4TSxLQUFLb3pDLEVBQUUxcEIsRUFBRTFwQixLQUFLMHJELFVBQVVsL0MsRUFBRW5KLE9BQU8sRUFBRXJELEtBQUsyckQsWUFBWSxTQUFTbi9DLEdBQUcsT0FBT0EsR0FBRzROLEVBQXBLLFNBQVM1TixFQUFFa2QsR0FBRyxJQUFJeG5CLEdBQUcsRUFBRXdILEVBQUU4QyxFQUFFbkosT0FBTyxFQUFFcUcsRUFBRXhILEdBQUdzSyxFQUFFdzBCLEVBQUV0M0IsRUFBRXhILEdBQUcsSUFBSXduQixFQUFFeG5CLEVBQUU4K0IsRUFBRXQzQixFQUFFczNCLEVBQUUsT0FBT3QzQixFQUErRitqQyxDQUFFenRDLEtBQUtxekMsRUFBRTdtQyxHQUFHZ2hDLEVBQUVwekIsRUFBRSxHQUFHNU4sRUFBRXhNLEtBQUtxekMsRUFBRTdGLEtBQUt4dEMsS0FBS296QyxFQUFFaDVCLEdBQUdwYSxLQUFLb3pDLEVBQUU1RixLQUFLeHRDLEtBQUtxekMsRUFBRWo1QixHQUFHcGEsS0FBS3F6QyxFQUFFN0YsSUFBSXh0QyxLQUFLb3pDLEVBQUU1RixJQUFJLEdBQUd4dEMsTUFBTTRyRCx1QkFBdUIsU0FBU3AvQyxHQUFHLElBQUlrZCxFQUFFMXBCLEtBQUswcEIsRUFBRW1pQyxXQUFXQyxTQUFTcGlDLEVBQUVtaUMsV0FBV0MsT0FBT3BpQyxFQUFFcWdCLE9BQU9zTixLQUFLLElBQUl2eUMsRUFBRTJtRCxhQUFhL2hDLEVBQUU4ckIsV0FBV2hwQyxFQUFFZ3BDLFlBQVksSUFBSTF3QyxFQUFFMm1ELGFBQWEvaEMsRUFBRXVwQixTQUFTem1DLEVBQUV5bUMsWUFBWStFLGFBQWEsU0FBU3hyQyxFQUFFa2QsR0FBRyxJQUFJaGdCLEVBQUV4SCxFQUFFOCtCLEVBQUVoaEMsS0FBS3d0QyxFQUFFeE0sRUFBRTZxQixXQUFXRSxRQUFRLFNBQVMzeEMsRUFBRTVOLEdBQUcsSUFBSWtkLEVBQUVzWCxFQUFFMFIsY0FBYzFSLEVBQUVzVixVQUFVdFYsRUFBRXNWLFVBQVUsVUFBVXRWLEVBQUUrSSxPQUFPOGhCLFdBQVdHLEtBQUtockIsRUFBRTZxQixXQUFXRCx1QkFBdUJwL0MsR0FBR3RLLEdBQUc4K0IsRUFBRTZxQixXQUFXQyxPQUFPSCxhQUFhamlDLElBQUl4bkIsR0FBRyxjQUFjOCtCLEVBQUUrSSxPQUFPOGhCLFdBQVdHLEtBQUt0aUQsR0FBRzhDLEVBQUVrcUMsZUFBZWxxQyxFQUFFZ3FDLGlCQUFpQnhWLEVBQUUwVixlQUFlMVYsRUFBRXdWLGdCQUFnQnQwQyxHQUFHd25CLEVBQUVzWCxFQUFFd1YsZ0JBQWdCOXNDLEVBQUU4QyxFQUFFZ3FDLGdCQUFnQnhWLEVBQUUrSSxPQUFPOGhCLFdBQVdJLFVBQVUvcEQsRUFBRXNLLEVBQUVrcUMsZUFBZXgwQyxHQUFHc0ssRUFBRWlxQyxlQUFldjBDLEdBQUdzSyxFQUFFd3JDLGFBQWE5MUMsRUFBRTgrQixHQUFHeDBCLEVBQUUrcUMsb0JBQW9CL3FDLEVBQUVxcUMsc0JBQXNCLEdBQUdseEMsTUFBTUMsUUFBUTRuQyxHQUFHLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFRCxFQUFFbnFDLE9BQU9vcUMsR0FBRyxFQUFFRCxFQUFFQyxLQUFLL2pCLEdBQUc4akIsRUFBRUMsYUFBYXVHLEdBQUc1NUIsRUFBRW96QixFQUFFQyxTQUFTRCxhQUFhd0csR0FBR3RxQixJQUFJOGpCLEdBQUdwekIsRUFBRW96QixJQUFJd0ksY0FBYyxTQUFTdHNCLEVBQUVsZCxHQUFHLElBQUk5QyxFQUFFeEgsRUFBRWxDLEtBQUtnaEMsRUFBRTkrQixFQUFFMnBELFdBQVdFLFFBQVEsU0FBU3ZlLEVBQUVoaEMsR0FBR0EsRUFBRXdwQyxjQUFjdHNCLEVBQUV4bkIsR0FBRyxJQUFJd25CLElBQUlsZCxFQUFFa3NDLGtCQUFrQmxzQyxFQUFFdTlCLE9BQU8wTyxZQUFZaEosRUFBRUUsU0FBUyxXQUFXbmpDLEVBQUV1cEMscUJBQXFCdnBDLEVBQUVpbUMsV0FBVzVELGNBQWMsV0FBVzdOLElBQUl4MEIsRUFBRXU5QixPQUFPc04sTUFBTSxVQUFVbjFDLEVBQUU2bkMsT0FBTzhoQixXQUFXRyxJQUFJeC9DLEVBQUV3c0MsVUFBVXhzQyxFQUFFcWlDLG9CQUFvQixHQUFHbHBDLE1BQU1DLFFBQVFvN0IsR0FBRyxJQUFJdDNCLEVBQUUsRUFBRUEsRUFBRXMzQixFQUFFMzlCLE9BQU9xRyxHQUFHLEVBQUVzM0IsRUFBRXQzQixLQUFLOEMsR0FBR3cwQixFQUFFdDNCLGFBQWFzcUMsR0FBR3hHLEVBQUV4TSxFQUFFdDNCLFNBQVNzM0IsYUFBYWdULEdBQUd4bkMsSUFBSXcwQixHQUFHd00sRUFBRXhNLEtBQUtrckIsRUFBRSxDQUFDQyxnQkFBZ0IsU0FBUzMvQyxHQUFHLE9BQU9BLEVBQUVzRixLQUFLLFdBQVcsS0FBS3RGLEdBQUc0L0MsVUFBVSxTQUFTNS9DLEVBQUVrZCxHQUFHLE9BQU9sZCxFQUFFc0YsS0FBSyxPQUFPNFgsR0FBR2xkLEdBQUc2L0MsV0FBVyxTQUFTNy9DLEVBQUVrZCxHQUFHLE9BQU9sZCxFQUFFc0YsS0FBSyxhQUFhNFgsR0FBR2xkLEdBQUc4L0MsVUFBVSxTQUFTOS9DLEdBQUcsT0FBT0EsRUFBRXNGLEtBQUssaUJBQWdCLEdBQUl0RixHQUFHKy9DLFNBQVMsU0FBUy8vQyxHQUFHLE9BQU9BLEVBQUVzRixLQUFLLGlCQUFnQixHQUFJdEYsR0FBR2dnRCxXQUFXLFNBQVNoZ0QsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLMEosRUFBRWdnQixFQUFFcWdCLE9BQU8waUIsS0FBSyxHQUFHLEtBQUtqZ0QsRUFBRTZnQixRQUFRLENBQUMsSUFBSW5yQixFQUFFcXJDLEVBQUUvZ0MsRUFBRWhILFFBQVFra0IsRUFBRXczQixZQUFZeDNCLEVBQUV3M0IsV0FBV3NFLFNBQVN0akQsRUFBRWdZLEdBQUd3UCxFQUFFdzNCLFdBQVdzRSxXQUFXOTdCLEVBQUVrdEIsUUFBUWx0QixFQUFFcWdCLE9BQU9zTixNQUFNM3RCLEVBQUVxdkIsWUFBWXJ2QixFQUFFa3RCLE1BQU1sdEIsRUFBRStpQyxLQUFLNXRDLE9BQU9uVixFQUFFZ2pELGtCQUFrQmhqQyxFQUFFK2lDLEtBQUs1dEMsT0FBT25WLEVBQUVpakQsbUJBQW1CampDLEVBQUV3M0IsWUFBWXgzQixFQUFFdzNCLFdBQVd1RSxTQUFTdmpELEVBQUVnWSxHQUFHd1AsRUFBRXczQixXQUFXdUUsV0FBVy83QixFQUFFaXRCLGNBQWNqdEIsRUFBRXFnQixPQUFPc04sTUFBTTN0QixFQUFFd3ZCLFlBQVl4dkIsRUFBRWl0QixZQUFZanRCLEVBQUUraUMsS0FBSzV0QyxPQUFPblYsRUFBRWtqRCxtQkFBbUJsakMsRUFBRStpQyxLQUFLNXRDLE9BQU9uVixFQUFFbWpELG1CQUFtQm5qQyxFQUFFcThCLFlBQVk3akQsRUFBRWdZLEdBQUcsSUFBSXdQLEVBQUVxZ0IsT0FBT2djLFdBQVdpQixjQUFjOWtELEVBQUUsR0FBRzJwQixVQUFVaE4sT0FBTyxTQUFTclMsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLeXNELEtBQUtLLFdBQVcsSUFBSXBqQyxFQUFFcm1CLFNBQVNxbUIsRUFBRStGLEtBQUssSUFBSS9GLEVBQUUrRixLQUFLampCLEtBQUt1Z0QsaUJBQWlCLFdBQVcsSUFBSXZnRCxFQUFFeE0sS0FBSyxJQUFJd00sRUFBRXU5QixPQUFPc04sS0FBSyxDQUFDLElBQUkzdEIsRUFBRWxkLEVBQUUwMEMsV0FBV3gzQyxFQUFFZ2dCLEVBQUU4N0IsUUFBUXRqRCxFQUFFd25CLEVBQUUrN0IsUUFBUXZqRCxHQUFHLEVBQUVBLEVBQUVtQixTQUFTbUosRUFBRW1xQyxZQUFZbnFDLEVBQUVpZ0QsS0FBS0gsVUFBVXBxRCxHQUFHc0ssRUFBRWlnRCxLQUFLRixTQUFTcnFELElBQUl3SCxHQUFHLEVBQUVBLEVBQUVyRyxTQUFTbUosRUFBRW9xQyxNQUFNcHFDLEVBQUVpZ0QsS0FBS0gsVUFBVTVpRCxHQUFHOEMsRUFBRWlnRCxLQUFLRixTQUFTN2lELE1BQU1zakQsaUJBQWlCLFdBQVcsSUFBSTlxRCxFQUFFbEMsS0FBS2doQyxFQUFFOStCLEVBQUU2bkMsT0FBTzBpQixLQUFLdnFELEVBQUU2akQsWUFBWTdqRCxFQUFFNm5DLE9BQU9nYyxXQUFXcUIsV0FBV2xsRCxFQUFFNmpELFdBQVdFLFNBQVMvakQsRUFBRTZqRCxXQUFXRSxRQUFRNWlELFFBQVFuQixFQUFFNmpELFdBQVdFLFFBQVFoaUQsS0FBSyxTQUFTdUksRUFBRWtkLEdBQUcsSUFBSWhnQixFQUFFNmpDLEVBQUU3akIsR0FBR3huQixFQUFFdXFELEtBQUtOLGdCQUFnQnppRCxHQUFHeEgsRUFBRXVxRCxLQUFLTCxVQUFVMWlELEVBQUUsVUFBVXhILEVBQUV1cUQsS0FBS0osV0FBVzNpRCxFQUFFczNCLEVBQUVpc0Isd0JBQXdCaG5ELFFBQVEsWUFBWXlELEVBQUU0UixRQUFRLE9BQU9uWSxLQUFLLFdBQVcsSUFBSXFKLEVBQUV4TSxLQUFLd00sRUFBRTBsQyxJQUFJL2hCLE9BQU8zakIsRUFBRWlnRCxLQUFLSyxZQUFZLElBQUlwakMsRUFBRWhnQixFQUFFeEgsRUFBRXNLLEVBQUV1OUIsT0FBTzBpQixLQUFLamdELEVBQUUwMEMsWUFBWTEwQyxFQUFFMDBDLFdBQVdzRSxVQUFVOTdCLEVBQUVsZCxFQUFFMDBDLFdBQVdzRSxTQUFTaDVDLEVBQUUwMEMsWUFBWTEwQyxFQUFFMDBDLFdBQVd1RSxVQUFVLzdDLEVBQUU4QyxFQUFFMDBDLFdBQVd1RSxTQUFTLzdCLElBQUlsZCxFQUFFaWdELEtBQUtOLGdCQUFnQnppQyxHQUFHbGQsRUFBRWlnRCxLQUFLTCxVQUFVMWlDLEVBQUUsVUFBVWxkLEVBQUVpZ0QsS0FBS0osV0FBVzNpQyxFQUFFeG5CLEVBQUV5cUQsa0JBQWtCampDLEVBQUVuQixHQUFHLFVBQVUvYixFQUFFaWdELEtBQUtELGFBQWE5aUQsSUFBSThDLEVBQUVpZ0QsS0FBS04sZ0JBQWdCemlELEdBQUc4QyxFQUFFaWdELEtBQUtMLFVBQVUxaUQsRUFBRSxVQUFVOEMsRUFBRWlnRCxLQUFLSixXQUFXM2lELEVBQUV4SCxFQUFFMnFELGtCQUFrQm5qRCxFQUFFNmUsR0FBRyxVQUFVL2IsRUFBRWlnRCxLQUFLRCxhQUFhaGdELEVBQUV1NUMsWUFBWXY1QyxFQUFFdTlCLE9BQU9nYyxXQUFXcUIsV0FBVzU2QyxFQUFFdTVDLFdBQVdFLFNBQVN6NUMsRUFBRXU1QyxXQUFXRSxRQUFRNWlELFFBQVFtSixFQUFFdTVDLFdBQVc3VCxJQUFJM3BCLEdBQUcsVUFBVSxJQUFJL2IsRUFBRXU5QixPQUFPZ2MsV0FBV2lCLFlBQVl4NkMsRUFBRWlnRCxLQUFLRCxhQUFhcEssUUFBUSxXQUFXLElBQUk1MUMsRUFBRWtkLEVBQUVoZ0IsRUFBRTFKLEtBQUswSixFQUFFK2lELEtBQUtLLFlBQVksRUFBRXBqRCxFQUFFK2lELEtBQUtLLFdBQVd6cEQsUUFBUXFHLEVBQUUraUQsS0FBS0ssV0FBV2x2QyxTQUFTbFUsRUFBRXczQyxZQUFZeDNDLEVBQUV3M0MsV0FBV3NFLFVBQVVoNUMsRUFBRTlDLEVBQUV3M0MsV0FBV3NFLFNBQVM5N0MsRUFBRXczQyxZQUFZeDNDLEVBQUV3M0MsV0FBV3VFLFVBQVUvN0IsRUFBRWhnQixFQUFFdzNDLFdBQVd1RSxTQUFTajVDLEdBQUdBLEVBQUVvYyxJQUFJLFVBQVVsZixFQUFFK2lELEtBQUtELFlBQVk5aUMsR0FBR0EsRUFBRWQsSUFBSSxVQUFVbGYsRUFBRStpRCxLQUFLRCxZQUFZOWlELEVBQUVxOEMsWUFBWXI4QyxFQUFFcWdDLE9BQU9nYyxXQUFXcUIsV0FBVzE5QyxFQUFFcThDLFdBQVdFLFNBQVN2OEMsRUFBRXE4QyxXQUFXRSxRQUFRNWlELFFBQVFxRyxFQUFFcThDLFdBQVc3VCxJQUFJdHBCLElBQUksVUFBVSxJQUFJbGYsRUFBRXFnQyxPQUFPZ2MsV0FBV2lCLFlBQVl0OUMsRUFBRStpRCxLQUFLRCxjQUFjVSxFQUFFLENBQUMvcEQsS0FBSyxXQUFXLElBQUlxSixFQUFFeE0sS0FBSyxHQUFHd00sRUFBRXU5QixPQUFPb0QsUUFBUSxDQUFDLElBQUlILEVBQUVHLFVBQVVILEVBQUVHLFFBQVFnZ0IsVUFBVSxPQUFPM2dELEVBQUV1OUIsT0FBT29ELFFBQVExM0IsU0FBUSxPQUFRakosRUFBRXU5QixPQUFPcWpCLGVBQWUzM0MsU0FBUSxHQUFJLElBQUlpVSxFQUFFbGQsRUFBRTJnQyxRQUFRempCLEVBQUU0dUIsYUFBWSxFQUFHNXVCLEVBQUUyakMsTUFBTUgsRUFBRUksaUJBQWlCNWpDLEVBQUUyakMsTUFBTW4vQyxLQUFLd2IsRUFBRTJqQyxNQUFNbm1ELFNBQVN3aUIsRUFBRTZqQyxjQUFjLEVBQUU3akMsRUFBRTJqQyxNQUFNbm1ELE1BQU1zRixFQUFFdTlCLE9BQU9nWCxvQkFBb0J2MEMsRUFBRXU5QixPQUFPb0QsUUFBUXFnQixjQUFjeGdCLEVBQUVqOUIsaUJBQWlCLFdBQVd2RCxFQUFFMmdDLFFBQVFzZ0IsdUJBQXVCckwsUUFBUSxXQUFXcGlELEtBQUsrcEMsT0FBT29ELFFBQVFxZ0IsY0FBY3hnQixFQUFFanNCLG9CQUFvQixXQUFXL2dCLEtBQUttdEMsUUFBUXNnQixxQkFBcUJBLG1CQUFtQixXQUFXenRELEtBQUttdEMsUUFBUWtnQixNQUFNSCxFQUFFSSxnQkFBZ0J0dEQsS0FBS210QyxRQUFRb2dCLGNBQWN2dEQsS0FBSytwQyxPQUFPaE8sTUFBTS83QixLQUFLbXRDLFFBQVFrZ0IsTUFBTW5tRCxPQUFNLElBQUtvbUQsY0FBYyxXQUFXLElBQUk5Z0QsRUFBRXdnQyxFQUFFOTNCLFNBQVN3NEMsU0FBU2x0RCxNQUFNLEdBQUc4RyxNQUFNLEtBQUsrSSxPQUFPLFNBQVM3RCxHQUFHLE1BQU0sS0FBS0EsSUFBSWtkLEVBQUVsZCxFQUFFbkosT0FBTyxNQUFNLENBQUM2SyxJQUFJMUIsRUFBRWtkLEVBQUUsR0FBR3hpQixNQUFNc0YsRUFBRWtkLEVBQUUsS0FBS2lrQyxXQUFXLFNBQVNuaEQsRUFBRWtkLEdBQUcsR0FBRzFwQixLQUFLbXRDLFFBQVFtTCxhQUFhdDRDLEtBQUsrcEMsT0FBT29ELFFBQVExM0IsUUFBUSxDQUFDLElBQUkvTCxFQUFFMUosS0FBSzZ5QyxPQUFPdHVDLEdBQUdtbEIsR0FBR3huQixFQUFFZ3JELEVBQUVVLFFBQVFsa0QsRUFBRW9JLEtBQUssaUJBQWlCazdCLEVBQUU5M0IsU0FBU3c0QyxTQUFTRyxTQUFTcmhELEtBQUt0SyxFQUFFc0ssRUFBRSxJQUFJdEssR0FBRyxJQUFJOCtCLEVBQUVnTSxFQUFFRyxRQUFRaHZCLE1BQU02aUIsR0FBR0EsRUFBRTk1QixRQUFRaEYsSUFBSWxDLEtBQUsrcEMsT0FBT29ELFFBQVFxZ0IsYUFBYXhnQixFQUFFRyxRQUFRcWdCLGFBQWEsQ0FBQ3RtRCxNQUFNaEYsR0FBRyxLQUFLQSxHQUFHOHFDLEVBQUVHLFFBQVFnZ0IsVUFBVSxDQUFDam1ELE1BQU1oRixHQUFHLEtBQUtBLE1BQU0wckQsUUFBUSxTQUFTcGhELEdBQUcsT0FBT0EsRUFBRXZMLFdBQVd1RyxjQUFjdkIsUUFBUSxPQUFPLEtBQUtBLFFBQVEsV0FBVyxJQUFJQSxRQUFRLE9BQU8sS0FBS0EsUUFBUSxNQUFNLElBQUlBLFFBQVEsTUFBTSxLQUFLc25ELGNBQWMsU0FBUy9nRCxFQUFFa2QsRUFBRWhnQixHQUFHLElBQUl4SCxFQUFFbEMsS0FBSyxHQUFHMHBCLEVBQUUsSUFBSSxJQUFJc1gsRUFBRSxFQUFFd00sRUFBRXRyQyxFQUFFMndDLE9BQU94dkMsT0FBTzI5QixFQUFFd00sRUFBRXhNLEdBQUcsRUFBRSxDQUFDLElBQUk1bUIsRUFBRWxZLEVBQUUyd0MsT0FBT3R1QyxHQUFHeThCLEdBQUcsR0FBR2tzQixFQUFFVSxRQUFReHpDLEVBQUV0SSxLQUFLLG1CQUFtQjRYLElBQUl0UCxFQUFFZ2xCLFNBQVNsOUIsRUFBRTZuQyxPQUFPdU4scUJBQXFCLENBQUMsSUFBSTdKLEVBQUVyekIsRUFBRWtCLFFBQVFwWixFQUFFZzJDLFFBQVF6SyxFQUFFamhDLEVBQUU5QyxTQUFTeEgsRUFBRWcyQyxRQUFRLEVBQUUxckMsRUFBRTlDLEtBQUt1VCxFQUFFLENBQUM2d0MsWUFBWSxXQUFXLElBQUl0aEQsRUFBRXhNLEtBQUswcEIsRUFBRWtqQixFQUFFMTNCLFNBQVNELEtBQUtoUCxRQUFRLElBQUksSUFBSXlqQixJQUFJbGQsRUFBRXFtQyxPQUFPdHVDLEdBQUdpSSxFQUFFeXBDLGFBQWFua0MsS0FBSyxjQUFjdEYsRUFBRTByQyxRQUFRMXJDLEVBQUVpbUMsV0FBVzEzQixTQUFTLElBQUl2TyxFQUFFdTlCLE9BQU8rSSxXQUFXLGVBQWVwcEIsRUFBRSxNQUFNcE8sVUFBVXl5QyxRQUFRLFdBQVcsSUFBSXZoRCxFQUFFeE0sS0FBSyxHQUFHd00sRUFBRTRnRCxlQUFlOVUsYUFBYTlyQyxFQUFFdTlCLE9BQU9xakIsZUFBZTMzQyxRQUFRLEdBQUdqSixFQUFFdTlCLE9BQU9xakIsZUFBZUksY0FBY3hnQixFQUFFRyxTQUFTSCxFQUFFRyxRQUFRcWdCLGFBQWF4Z0IsRUFBRUcsUUFBUXFnQixhQUFhLEtBQUssS0FBSyxJQUFJaGhELEVBQUVxbUMsT0FBT3R1QyxHQUFHaUksRUFBRXlwQyxhQUFhbmtDLEtBQUssY0FBYyxRQUFRLENBQUMsSUFBSTRYLEVBQUVsZCxFQUFFcW1DLE9BQU90dUMsR0FBR2lJLEVBQUV5cEMsYUFBYXZzQyxFQUFFZ2dCLEVBQUU1WCxLQUFLLGNBQWM0WCxFQUFFNVgsS0FBSyxnQkFBZ0I4NkIsRUFBRTEzQixTQUFTRCxLQUFLdkwsR0FBRyxLQUFLdkcsS0FBSyxXQUFXLElBQUlxSixFQUFFeE0sS0FBSyxNQUFNd00sRUFBRXU5QixPQUFPcWpCLGVBQWUzM0MsU0FBU2pKLEVBQUV1OUIsT0FBT29ELFNBQVMzZ0MsRUFBRXU5QixPQUFPb0QsUUFBUTEzQixTQUFTLENBQUNqSixFQUFFNGdELGVBQWU5VSxhQUFZLEVBQUcsSUFBSTV1QixFQUFFa2pCLEVBQUUxM0IsU0FBU0QsS0FBS2hQLFFBQVEsSUFBSSxJQUFJLEdBQUd5akIsRUFBRSxJQUFJLElBQUloZ0IsRUFBRSxFQUFFeEgsRUFBRXNLLEVBQUVxbUMsT0FBT3h2QyxPQUFPcUcsRUFBRXhILEVBQUV3SCxHQUFHLEVBQUUsQ0FBQyxJQUFJczNCLEVBQUV4MEIsRUFBRXFtQyxPQUFPdHVDLEdBQUdtRixHQUFHLElBQUlzM0IsRUFBRWx2QixLQUFLLGNBQWNrdkIsRUFBRWx2QixLQUFLLG1CQUFtQjRYLElBQUlzWCxFQUFFNUIsU0FBUzV5QixFQUFFdTlCLE9BQU91TixxQkFBcUIsQ0FBQyxJQUFJOUosRUFBRXhNLEVBQUUxbEIsUUFBUTlPLEVBQUUwckMsUUFBUTFLLEVBQUUsRUFBRWhoQyxFQUFFdTlCLE9BQU9nWCxvQkFBbUIsSUFBS3YwQyxFQUFFdTlCLE9BQU9xakIsZUFBZVksWUFBWXpnQixFQUFFUCxHQUFHemtCLEdBQUcsYUFBYS9iLEVBQUU0Z0QsZUFBZVUsZUFBZTFMLFFBQVEsV0FBV3BpRCxLQUFLK3BDLE9BQU9xakIsZUFBZVksWUFBWXpnQixFQUFFUCxHQUFHcGtCLElBQUksYUFBYTVvQixLQUFLb3RELGVBQWVVLGVBQWVHLEVBQUUsQ0FBQzcxQixJQUFJLFdBQVcsSUFBSTVyQixFQUFFeE0sS0FBSzBwQixFQUFFbGQsRUFBRXFtQyxPQUFPdHVDLEdBQUdpSSxFQUFFeXBDLGFBQWF2c0MsRUFBRThDLEVBQUV1OUIsT0FBT3FiLFNBQVNsb0IsTUFBTXhULEVBQUU1WCxLQUFLLDBCQUEwQnBJLEVBQUVnZ0IsRUFBRTVYLEtBQUsseUJBQXlCdEYsRUFBRXU5QixPQUFPcWIsU0FBU2xvQixPQUFPMXdCLEVBQUU0NEMsU0FBU2hvQixRQUFRcVMsRUFBRUUsU0FBUyxXQUFXbmpDLEVBQUV1OUIsT0FBT3FiLFNBQVM4SSxpQkFBaUIxaEQsRUFBRXU5QixPQUFPc04sTUFBTTdxQyxFQUFFd3NDLFVBQVV4c0MsRUFBRTBzQyxVQUFVMXNDLEVBQUV1OUIsT0FBT2hPLE9BQU0sR0FBRyxHQUFJdnZCLEVBQUVnbEMsS0FBSyxhQUFhaGxDLEVBQUVtcUMsWUFBWW5xQyxFQUFFdTlCLE9BQU9xYixTQUFTK0ksZ0JBQWdCM2hELEVBQUU0NEMsU0FBU3poQyxRQUFRblgsRUFBRTByQyxRQUFRMXJDLEVBQUVxbUMsT0FBT3h2QyxPQUFPLEVBQUVtSixFQUFFdTlCLE9BQU9oTyxPQUFNLEdBQUcsR0FBSXZ2QixFQUFFZ2xDLEtBQUssY0FBY2hsQyxFQUFFMHNDLFVBQVUxc0MsRUFBRXU5QixPQUFPaE8sT0FBTSxHQUFHLEdBQUl2dkIsRUFBRWdsQyxLQUFLLGFBQWFobEMsRUFBRXU5QixPQUFPc04sTUFBTTdxQyxFQUFFd3NDLFVBQVV4c0MsRUFBRXVzQyxVQUFVdnNDLEVBQUV1OUIsT0FBT2hPLE9BQU0sR0FBRyxHQUFJdnZCLEVBQUVnbEMsS0FBSyxhQUFhaGxDLEVBQUVvcUMsTUFBTXBxQyxFQUFFdTlCLE9BQU9xYixTQUFTK0ksZ0JBQWdCM2hELEVBQUU0NEMsU0FBU3poQyxRQUFRblgsRUFBRTByQyxRQUFRLEVBQUUxckMsRUFBRXU5QixPQUFPaE8sT0FBTSxHQUFHLEdBQUl2dkIsRUFBRWdsQyxLQUFLLGNBQWNobEMsRUFBRXVzQyxVQUFVdnNDLEVBQUV1OUIsT0FBT2hPLE9BQU0sR0FBRyxHQUFJdnZCLEVBQUVnbEMsS0FBSyxjQUFjOW5DLElBQUl1SyxNQUFNLFdBQVcsSUFBSXpILEVBQUV4TSxLQUFLLFlBQU8sSUFBU3dNLEVBQUU0NEMsU0FBU2hvQixVQUFXNXdCLEVBQUU0NEMsU0FBU2dKLFVBQVU1aEQsRUFBRTQ0QyxTQUFTZ0osU0FBUSxFQUFHNWhELEVBQUVnbEMsS0FBSyxpQkFBaUJobEMsRUFBRTQ0QyxTQUFTaHRCLE9BQU0sSUFBTXpVLEtBQUssV0FBVyxJQUFJblgsRUFBRXhNLEtBQUssUUFBUXdNLEVBQUU0NEMsU0FBU2dKLGNBQVUsSUFBUzVoRCxFQUFFNDRDLFNBQVNob0IsVUFBVTV3QixFQUFFNDRDLFNBQVNob0IsVUFBVUMsYUFBYTd3QixFQUFFNDRDLFNBQVNob0IsU0FBUzV3QixFQUFFNDRDLFNBQVNob0IsYUFBUSxHQUFRNXdCLEVBQUU0NEMsU0FBU2dKLFNBQVEsRUFBRzVoRCxFQUFFZ2xDLEtBQUssaUJBQWdCLElBQU02YyxNQUFNLFNBQVM3aEQsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLMHBCLEVBQUUwN0IsU0FBU2dKLFVBQVUxa0MsRUFBRTA3QixTQUFTa0osU0FBUzVrQyxFQUFFMDdCLFNBQVNob0IsU0FBU0MsYUFBYTNULEVBQUUwN0IsU0FBU2hvQixTQUFTMVQsRUFBRTA3QixTQUFTa0osUUFBTyxFQUFHLElBQUk5aEQsR0FBR2tkLEVBQUVxZ0IsT0FBT3FiLFNBQVNtSixtQkFBbUI3a0MsRUFBRStvQixXQUFXLEdBQUcxaUMsaUJBQWlCLGdCQUFnQjJaLEVBQUUwN0IsU0FBU3dGLGlCQUFpQmxoQyxFQUFFK29CLFdBQVcsR0FBRzFpQyxpQkFBaUIsc0JBQXNCMlosRUFBRTA3QixTQUFTd0YsbUJBQW1CbGhDLEVBQUUwN0IsU0FBU2tKLFFBQU8sRUFBRzVrQyxFQUFFMDdCLFNBQVNodEIsV0FBV28yQixFQUFFLENBQUN4VyxhQUFhLFdBQVcsSUFBSSxJQUFJeHJDLEVBQUV4TSxLQUFLMHBCLEVBQUVsZCxFQUFFcW1DLE9BQU9ucEMsRUFBRSxFQUFFQSxFQUFFZ2dCLEVBQUVybUIsT0FBT3FHLEdBQUcsRUFBRSxDQUFDLElBQUl4SCxFQUFFc0ssRUFBRXFtQyxPQUFPdHVDLEdBQUdtRixHQUFHczNCLEdBQUc5K0IsRUFBRSxHQUFHZzBDLGtCQUFrQjFwQyxFQUFFdTlCLE9BQU9nTyxtQkFBbUIvVyxHQUFHeDBCLEVBQUU4cEMsV0FBVyxJQUFJOUksRUFBRSxFQUFFaGhDLEVBQUU2bEMsaUJBQWlCN0UsRUFBRXhNLEVBQUVBLEVBQUUsR0FBRyxJQUFJNW1CLEVBQUU1TixFQUFFdTlCLE9BQU8wa0IsV0FBV0MsVUFBVTNvRCxLQUFLaXZCLElBQUksRUFBRWp2QixLQUFLaXZDLElBQUk5eUMsRUFBRSxHQUFHMGMsVUFBVSxHQUFHLEVBQUU3WSxLQUFLMDFDLElBQUkxMUMsS0FBS2l2QixJQUFJOXlCLEVBQUUsR0FBRzBjLFVBQVUsR0FBRyxHQUFHMWMsRUFBRXdpQixJQUFJLENBQUN1UixRQUFRN2IsSUFBSTB6QixVQUFVLGVBQWU5TSxFQUFFLE9BQU93TSxFQUFFLGNBQWN3SSxjQUFjLFNBQVN4cEMsR0FBRyxJQUFJOUMsRUFBRTFKLEtBQUswcEIsRUFBRWhnQixFQUFFbXBDLE9BQU8zd0MsRUFBRXdILEVBQUUrb0MsV0FBVyxHQUFHL29CLEVBQUVza0IsV0FBV3hoQyxHQUFHOUMsRUFBRXFnQyxPQUFPZ08sa0JBQWtCLElBQUl2ckMsRUFBRSxDQUFDLElBQUl3MEIsR0FBRSxFQUFHdFgsRUFBRW1sQixjQUFjLFdBQVcsSUFBSTdOLEdBQUd0M0IsSUFBSUEsRUFBRWt2QyxVQUFVLENBQUM1WCxHQUFFLEVBQUd0M0IsRUFBRXl1QyxXQUFVLEVBQUcsSUFBSSxJQUFJM3JDLEVBQUUsQ0FBQyxzQkFBc0IsaUJBQWlCa2QsRUFBRSxFQUFFQSxFQUFFbGQsRUFBRW5KLE9BQU9xbUIsR0FBRyxFQUFFeG5CLEVBQUVtbkIsUUFBUTdjLEVBQUVrZCxVQUFVaWxDLEVBQUUsQ0FBQzNXLGFBQWEsV0FBVyxJQUFJeHJDLEVBQUVrZCxFQUFFMXBCLEtBQUswSixFQUFFZ2dCLEVBQUV3b0IsSUFBSWh3QyxFQUFFd25CLEVBQUUrb0IsV0FBV3pSLEVBQUV0WCxFQUFFbXBCLE9BQU9yRixFQUFFOWpCLEVBQUUwSSxNQUFNaFksRUFBRXNQLEVBQUVtSyxPQUFPNFosRUFBRS9qQixFQUFFZ3BCLGFBQWF0M0IsRUFBRXNPLEVBQUU2b0IsS0FBS25FLEVBQUUxa0IsRUFBRXFnQixPQUFPNmtCLFdBQVc5MUIsRUFBRXBQLEVBQUUyb0IsZUFBZWhFLEVBQUUza0IsRUFBRWtwQixTQUFTbHBCLEVBQUVxZ0IsT0FBTzZJLFFBQVFuOUIsUUFBUTY0QixFQUFFLEVBQUVGLEVBQUV5Z0IsU0FBUy8xQixHQUFHLEtBQUt0c0IsRUFBRXRLLEVBQUVxTyxLQUFLLHdCQUF3QmxOLFNBQVNtSixFQUFFK2dDLEVBQUUsMENBQTBDcnJDLEVBQUVpdUIsT0FBTzNqQixJQUFJQSxFQUFFa1ksSUFBSSxDQUFDbVAsT0FBTzJaLEVBQUUsUUFBUSxLQUFLaGhDLEVBQUU5QyxFQUFFNkcsS0FBSyx3QkFBd0JsTixTQUFTbUosRUFBRStnQyxFQUFFLDBDQUEwQzdqQyxFQUFFeW1CLE9BQU8zakIsS0FBSyxJQUFJLElBQUkraEMsRUFBRSxFQUFFQSxFQUFFdk4sRUFBRTM5QixPQUFPa3JDLEdBQUcsRUFBRSxDQUFDLElBQUlueUIsRUFBRTRrQixFQUFFejhCLEdBQUdncUMsR0FBRzNCLEVBQUUyQixFQUFFRixJQUFJekIsRUFBRTlZLFNBQVMxWCxFQUFFdEssS0FBSywyQkFBMkIsS0FBSyxJQUFJbkYsRUFBRSxHQUFHaWdDLEVBQUVzRyxFQUFFbnRDLEtBQUs2dEMsTUFBTWpuQyxFQUFFLEtBQUs4Z0MsSUFBSTlnQyxHQUFHQSxFQUFFdW1DLEVBQUVudEMsS0FBSzZ0QyxPQUFPam5DLEVBQUUsTUFBTSxJQUFJaEQsRUFBRTVELEtBQUtpdkIsSUFBSWp2QixLQUFLMDFDLElBQUlyL0IsRUFBRSxHQUFHd0MsU0FBUyxJQUFJLEdBQUcvZSxFQUFFLEVBQUV1ekMsRUFBRSxFQUFFQyxFQUFFLEVBQUV6RyxFQUFFLEdBQUcsR0FBRy9zQyxFQUFFLEdBQUdxekMsRUFBRTkzQixFQUFFaTRCLEVBQUUsSUFBSXpHLEVBQUUsR0FBRyxHQUFHLEdBQUcvc0MsRUFBRSxFQUFFd3pDLEVBQUUsR0FBR0gsRUFBRTkzQixJQUFJd3hCLEVBQUUsR0FBRyxHQUFHLEdBQUcvc0MsRUFBRXViLEVBQUUsRUFBRTgzQixFQUFFOTNCLEVBQUVpNEIsRUFBRWo0QixJQUFJd3hCLEVBQUUsR0FBRyxHQUFHLElBQUkvc0MsR0FBR3ViLEVBQUVpNEIsRUFBRSxFQUFFajRCLEVBQUUsRUFBRUEsRUFBRTgzQixHQUFHekYsSUFBSTV0QyxHQUFHQSxHQUFHaTVCLElBQUlzYSxFQUFFdnpDLEVBQUVBLEVBQUUsR0FBRyxJQUFJeXpDLEVBQUUsWUFBWXhhLEVBQUUsR0FBR25zQixHQUFHLGlCQUFpQm1zQixFQUFFbnNCLEVBQUUsR0FBRyxvQkFBb0I5TSxFQUFFLE9BQU91ekMsRUFBRSxPQUFPQyxFQUFFLE1BQU0sR0FBRzFwQyxHQUFHLElBQUksRUFBRUEsSUFBSTJrQyxFQUFFLEdBQUcxQixFQUFFLEdBQUdqakMsRUFBRThqQyxJQUFJYSxFQUFFLElBQUkxQixFQUFFLEdBQUdqakMsSUFBSXlTLEVBQUUweEIsVUFBVXdGLEdBQUdsRixFQUFFMGdCLGFBQWEsQ0FBQyxJQUFJL2EsRUFBRWpiLEVBQUUxYyxFQUFFN0wsS0FBSyw2QkFBNkI2TCxFQUFFN0wsS0FBSyw0QkFBNEJ5akMsRUFBRWxiLEVBQUUxYyxFQUFFN0wsS0FBSyw4QkFBOEI2TCxFQUFFN0wsS0FBSywrQkFBK0IsSUFBSXdqQyxFQUFFMXdDLFNBQVMwd0MsRUFBRXhHLEVBQUUsb0NBQW9DelUsRUFBRSxPQUFPLE9BQU8sWUFBWTFjLEVBQUUrVCxPQUFPNGpCLElBQUksSUFBSUMsRUFBRTN3QyxTQUFTMndDLEVBQUV6RyxFQUFFLG9DQUFvQ3pVLEVBQUUsUUFBUSxVQUFVLFlBQVkxYyxFQUFFK1QsT0FBTzZqQixJQUFJRCxFQUFFMXdDLFNBQVMwd0MsRUFBRSxHQUFHdnZCLE1BQU15UixRQUFRbHdCLEtBQUtpdkIsS0FBS3JyQixFQUFFLElBQUlxcUMsRUFBRTN3QyxTQUFTMndDLEVBQUUsR0FBR3h2QixNQUFNeVIsUUFBUWx3QixLQUFLaXZCLElBQUlyckIsRUFBRSxLQUFLLEdBQUd6SCxFQUFFd2lCLElBQUksQ0FBQ3FxQywyQkFBMkIsWUFBWTN6QyxFQUFFLEVBQUUsS0FBSzR6Qyx3QkFBd0IsWUFBWTV6QyxFQUFFLEVBQUUsS0FBSzZ6Qyx1QkFBdUIsWUFBWTd6QyxFQUFFLEVBQUUsS0FBSzh6QyxtQkFBbUIsWUFBWTl6QyxFQUFFLEVBQUUsT0FBT2d6QixFQUFFeWdCLE9BQU8sR0FBRy8xQixFQUFFdHNCLEVBQUVzaEMsVUFBVSxxQkFBcUJOLEVBQUUsRUFBRVksRUFBRStnQixjQUFjLFFBQVEzaEIsRUFBRSxFQUFFLDBDQUEwQ1ksRUFBRWdoQixZQUFZLFNBQVMsQ0FBQyxJQUFJbmIsRUFBRWx1QyxLQUFLaXZDLElBQUkxRyxHQUFHLEdBQUd2b0MsS0FBSzZ0QyxNQUFNN3RDLEtBQUtpdkMsSUFBSTFHLEdBQUcsSUFBSTRGLEVBQUUsS0FBS251QyxLQUFLc3BELElBQUksRUFBRXBiLEVBQUVsdUMsS0FBS2t6QixHQUFHLEtBQUssRUFBRWx6QixLQUFLaXpCLElBQUksRUFBRWliLEVBQUVsdUMsS0FBS2t6QixHQUFHLEtBQUssR0FBR2tiLEVBQUUvRixFQUFFZ2hCLFlBQVloYixFQUFFaEcsRUFBRWdoQixZQUFZbGIsRUFBRUcsRUFBRWpHLEVBQUUrZ0IsYUFBYTNpRCxFQUFFc2hDLFVBQVUsV0FBV3FHLEVBQUUsUUFBUUMsRUFBRSx1QkFBdUJoNkIsRUFBRSxFQUFFaTZCLEdBQUcsUUFBUWo2QixFQUFFLEVBQUVnNkIsRUFBRSx1QkFBdUIsSUFBSTVILEVBQUVrSSxFQUFFNkwsVUFBVTdMLEVBQUU4TCxhQUFhcGxDLEVBQUUsRUFBRSxFQUFFbFosRUFBRTRyQyxVQUFVLHFCQUFxQnRCLEVBQUUsZ0JBQWdCOWlCLEVBQUUyb0IsZUFBZSxFQUFFL0QsR0FBRyxpQkFBaUI1a0IsRUFBRTJvQixnQkFBZ0IvRCxFQUFFLEdBQUcsU0FBUzBILGNBQWMsU0FBU3hwQyxHQUFHLElBQUlrZCxFQUFFMXBCLEtBQUtreUMsSUFBSWx5QyxLQUFLNnlDLE9BQU83RSxXQUFXeGhDLEdBQUcrRCxLQUFLLGdIQUFnSHk5QixXQUFXeGhDLEdBQUd4TSxLQUFLK3BDLE9BQU82a0IsV0FBV0MsU0FBUzd1RCxLQUFLcXlDLGdCQUFnQjNvQixFQUFFblosS0FBSyx1QkFBdUJ5OUIsV0FBV3hoQyxLQUFLOGlELEVBQUcsQ0FBQ3RYLGFBQWEsV0FBVyxJQUFJLElBQUl4ckMsRUFBRXhNLEtBQUswcEIsRUFBRWxkLEVBQUVxbUMsT0FBT25wQyxFQUFFOEMsRUFBRWttQyxhQUFheHdDLEVBQUUsRUFBRUEsRUFBRXduQixFQUFFcm1CLE9BQU9uQixHQUFHLEVBQUUsQ0FBQyxJQUFJOCtCLEVBQUV0WCxFQUFFbmxCLEdBQUdyQyxHQUFHc3JDLEVBQUV4TSxFQUFFLEdBQUdwaUIsU0FBU3BTLEVBQUV1OUIsT0FBT3dsQixXQUFXQyxnQkFBZ0JoaUIsRUFBRXpuQyxLQUFLaXZCLElBQUlqdkIsS0FBSzAxQyxJQUFJemEsRUFBRSxHQUFHcGlCLFNBQVMsSUFBSSxJQUFJLElBQUl4RSxHQUFHLElBQUlvekIsRUFBRUMsRUFBRSxFQUFFcnlCLEdBQUc0bEIsRUFBRSxHQUFHa1Ysa0JBQWtCOUgsRUFBRSxFQUFFLEdBQUc1aEMsRUFBRTZsQyxlQUFlM29DLElBQUkwUSxHQUFHQSxJQUFJZzBCLEVBQUVoekIsRUFBRXF5QixHQUFHcnpCLEVBQUVBLEVBQUVnQixFQUFFLEdBQUc0bEIsRUFBRSxHQUFHeGMsTUFBTTBTLFFBQVFueEIsS0FBS2l2QyxJQUFJanZDLEtBQUt5c0IsTUFBTWdiLElBQUk5akIsRUFBRXJtQixPQUFPbUosRUFBRXU5QixPQUFPd2xCLFdBQVdULGFBQWEsQ0FBQyxJQUFJaDJCLEVBQUV0c0IsRUFBRTZsQyxlQUFlclIsRUFBRXp3QixLQUFLLDZCQUE2Qnl3QixFQUFFendCLEtBQUssNEJBQTRCODlCLEVBQUU3aEMsRUFBRTZsQyxlQUFlclIsRUFBRXp3QixLQUFLLDhCQUE4Qnl3QixFQUFFendCLEtBQUssK0JBQStCLElBQUl1b0IsRUFBRXoxQixTQUFTeTFCLEVBQUV5VSxFQUFFLG9DQUFvQy9nQyxFQUFFNmxDLGVBQWUsT0FBTyxPQUFPLFlBQVlyUixFQUFFN1EsT0FBTzJJLElBQUksSUFBSXVWLEVBQUVockMsU0FBU2dyQyxFQUFFZCxFQUFFLG9DQUFvQy9nQyxFQUFFNmxDLGVBQWUsUUFBUSxVQUFVLFlBQVlyUixFQUFFN1EsT0FBT2tlLElBQUl2VixFQUFFejFCLFNBQVN5MUIsRUFBRSxHQUFHdFUsTUFBTXlSLFFBQVFsd0IsS0FBS2l2QixLQUFLd1ksRUFBRSxJQUFJYSxFQUFFaHJDLFNBQVNnckMsRUFBRSxHQUFHN3BCLE1BQU15UixRQUFRbHdCLEtBQUtpdkIsSUFBSXdZLEVBQUUsSUFBSXhNLEVBQUU4TSxVQUFVLGVBQWUxeUIsRUFBRSxPQUFPZ3pCLEVBQUUsb0JBQW9CWCxFQUFFLGdCQUFnQnJ6QixFQUFFLFVBQVU0N0IsY0FBYyxTQUFTeHBDLEdBQUcsSUFBSTlDLEVBQUUxSixLQUFLMHBCLEVBQUVoZ0IsRUFBRW1wQyxPQUFPM3dDLEVBQUV3SCxFQUFFdXNDLFlBQVlqVixFQUFFdDNCLEVBQUUrb0MsV0FBVyxHQUFHL29CLEVBQUVza0IsV0FBV3hoQyxHQUFHK0QsS0FBSyxnSEFBZ0h5OUIsV0FBV3hoQyxHQUFHOUMsRUFBRXFnQyxPQUFPZ08sa0JBQWtCLElBQUl2ckMsRUFBRSxDQUFDLElBQUlnaEMsR0FBRSxFQUFHOWpCLEVBQUVubEIsR0FBR3JDLEdBQUcyc0MsY0FBYyxXQUFXLElBQUlyQixHQUFHOWpDLElBQUlBLEVBQUVrdkMsVUFBVSxDQUFDcEwsR0FBRSxFQUFHOWpDLEVBQUV5dUMsV0FBVSxFQUFHLElBQUksSUFBSTNyQyxFQUFFLENBQUMsc0JBQXNCLGlCQUFpQmtkLEVBQUUsRUFBRUEsRUFBRWxkLEVBQUVuSixPQUFPcW1CLEdBQUcsRUFBRXNYLEVBQUUzWCxRQUFRN2MsRUFBRWtkLFVBQVUrbEMsR0FBRyxDQUFDelgsYUFBYSxXQUFXLElBQUksSUFBSXhyQyxFQUFFeE0sS0FBSzBwQixFQUFFbGQsRUFBRTRsQixNQUFNMW9CLEVBQUU4QyxFQUFFcW5CLE9BQU8zeEIsRUFBRXNLLEVBQUVxbUMsT0FBTzdSLEVBQUV4MEIsRUFBRWltQyxXQUFXakYsRUFBRWhoQyxFQUFFaXBDLGdCQUFnQnI3QixFQUFFNU4sRUFBRXU5QixPQUFPMmxCLGdCQUFnQmppQixFQUFFamhDLEVBQUU2bEMsZUFBZWozQixFQUFFNU8sRUFBRThwQyxVQUFVbEksRUFBRVgsRUFBRS9qQixFQUFFLEVBQUV0TyxFQUFFMVIsRUFBRSxFQUFFMFIsRUFBRTBkLEVBQUUyVSxFQUFFcnpCLEVBQUV1MUMsUUFBUXYxQyxFQUFFdTFDLE9BQU90aEIsRUFBRWowQixFQUFFOEUsTUFBTW92QixFQUFFLEVBQUVDLEVBQUVyc0MsRUFBRW1CLE9BQU9pckMsRUFBRUMsRUFBRUQsR0FBRyxFQUFFLENBQUMsSUFBSWx5QixFQUFFbGEsRUFBRXFDLEdBQUcrcEMsR0FBRzFCLEVBQUVZLEVBQUVjLEdBQUczaEMsR0FBR3loQyxFQUFFaHlCLEVBQUUsR0FBRzg1QixrQkFBa0J0SixFQUFFLEdBQUdBLEVBQUV4eUIsRUFBRXcxQyxTQUFTMWMsRUFBRXpGLEVBQUUzVSxFQUFFbnNCLEVBQUUsRUFBRWhELEVBQUU4akMsRUFBRSxFQUFFM1UsRUFBRW5zQixFQUFFOU0sR0FBR3d1QyxFQUFFdG9DLEtBQUtpdkMsSUFBSXJvQyxHQUFHeW1DLEVBQUUzRixFQUFFLEVBQUVyekIsRUFBRXkxQyxRQUFRbGpELEVBQUUwbUMsRUFBRTVGLEVBQUVyekIsRUFBRXkxQyxRQUFRbGpELEVBQUUsRUFBRTVHLEtBQUtpdkMsSUFBSTNCLEdBQUcsT0FBT0EsRUFBRSxHQUFHdHRDLEtBQUtpdkMsSUFBSTVCLEdBQUcsT0FBT0EsRUFBRSxHQUFHcnRDLEtBQUtpdkMsSUFBSW4xQyxHQUFHLE9BQU9BLEVBQUUsR0FBR2tHLEtBQUtpdkMsSUFBSTlCLEdBQUcsT0FBT0EsRUFBRSxHQUFHbnRDLEtBQUtpdkMsSUFBSXJyQyxHQUFHLE9BQU9BLEVBQUUsR0FBRyxJQUFJMnBDLEVBQUUsZUFBZUQsRUFBRSxNQUFNRCxFQUFFLE1BQU12ekMsRUFBRSxnQkFBZ0I4SixFQUFFLGdCQUFnQnVwQyxFQUFFLE9BQU8sR0FBRzkyQixFQUFFMHhCLFVBQVV3RixHQUFHbDNCLEVBQUUsR0FBR29JLE1BQU0wUyxPQUFPLEVBQUVueEIsS0FBS2l2QyxJQUFJanZDLEtBQUt5c0IsTUFBTTdsQixJQUFJeU4sRUFBRTAwQyxhQUFhLENBQUMsSUFBSS9hLEVBQUV0RyxFQUFFcnhCLEVBQUU3TCxLQUFLLDZCQUE2QjZMLEVBQUU3TCxLQUFLLDRCQUE0QnlqQyxFQUFFdkcsRUFBRXJ4QixFQUFFN0wsS0FBSyw4QkFBOEI2TCxFQUFFN0wsS0FBSywrQkFBK0IsSUFBSXdqQyxFQUFFMXdDLFNBQVMwd0MsRUFBRXhHLEVBQUUsb0NBQW9DRSxFQUFFLE9BQU8sT0FBTyxZQUFZcnhCLEVBQUUrVCxPQUFPNGpCLElBQUksSUFBSUMsRUFBRTN3QyxTQUFTMndDLEVBQUV6RyxFQUFFLG9DQUFvQ0UsRUFBRSxRQUFRLFVBQVUsWUFBWXJ4QixFQUFFK1QsT0FBTzZqQixJQUFJRCxFQUFFMXdDLFNBQVMwd0MsRUFBRSxHQUFHdnZCLE1BQU15UixRQUFRLEVBQUV0cEIsRUFBRUEsRUFBRSxHQUFHcW5DLEVBQUUzd0MsU0FBUzJ3QyxFQUFFLEdBQUd4dkIsTUFBTXlSLFFBQVEsR0FBR3RwQixHQUFHQSxFQUFFLEtBQUs2akMsRUFBRUksZUFBZUosRUFBRU8seUJBQXlCL1AsRUFBRSxHQUFHeGMsTUFBTXNyQyxrQkFBa0IxaEIsRUFBRSxXQUFXNEgsY0FBYyxTQUFTeHBDLEdBQUd4TSxLQUFLNnlDLE9BQU83RSxXQUFXeGhDLEdBQUcrRCxLQUFLLGdIQUFnSHk5QixXQUFXeGhDLEtBQUt1akQsR0FBRyxDQUFDOWIsRUFBRUMsRUFBRUMsRUFBRUMsRUFBRTVILEVBQUVvSSxFQUFFUyxFQUFFLENBQUNqd0MsS0FBSyxhQUFhMmtDLE9BQU8sQ0FBQ2liLFdBQVcsQ0FBQ3Z2QyxTQUFRLEVBQUd3dkMsZ0JBQWUsRUFBR24rQyxRQUFPLEVBQUdvK0MsYUFBWSxFQUFHQyxZQUFZLEVBQUVJLGFBQWEsY0FBY2pqQyxPQUFPLFdBQVcsSUFBSTlWLEVBQUV4TSxLQUFLeXZDLEVBQUV2cUMsT0FBT3NILEVBQUUsQ0FBQ3c0QyxXQUFXLENBQUN2dkMsU0FBUSxFQUFHb3VDLE9BQU92TyxFQUFFdU8sT0FBTzlvQixLQUFLdnVCLEdBQUdxUixRQUFReTNCLEVBQUV6M0IsUUFBUWtkLEtBQUt2dUIsR0FBR3dkLE9BQU9zckIsRUFBRXRyQixPQUFPK1EsS0FBS3Z1QixHQUFHcTRDLGlCQUFpQnZQLEVBQUV1UCxpQkFBaUI5cEIsS0FBS3Z1QixHQUFHdTRDLGlCQUFpQnpQLEVBQUV5UCxpQkFBaUJocUIsS0FBS3Z1QixHQUFHczNDLGVBQWVyVSxFQUFFcGpCLFVBQVU5RCxHQUFHLENBQUNwbEIsS0FBSyxXQUFXbkQsS0FBSytwQyxPQUFPaWIsV0FBV3Z2QyxTQUFTelYsS0FBS2dsRCxXQUFXbkIsVUFBVXpCLFFBQVEsV0FBV3BpRCxLQUFLZ2xELFdBQVd2dkMsU0FBU3pWLEtBQUtnbEQsV0FBV25uQyxhQUFhLENBQUN6WSxLQUFLLGFBQWEya0MsT0FBTyxDQUFDbVgsV0FBVyxDQUFDMEUsT0FBTyxLQUFLQyxPQUFPLEtBQUttSyxhQUFZLEVBQUd0SyxjQUFjLHlCQUF5QjhCLFlBQVksdUJBQXVCN0IsVUFBVSx1QkFBdUJyakMsT0FBTyxXQUFXbXRCLEVBQUV2cUMsT0FBT2xGLEtBQUssQ0FBQ2toRCxXQUFXLENBQUMvOUMsS0FBS295QyxFQUFFcHlDLEtBQUs0M0IsS0FBSy82QixNQUFNaTZDLE9BQU8xRSxFQUFFMEUsT0FBT2xmLEtBQUsvNkIsTUFBTW9pRCxRQUFRN00sRUFBRTZNLFFBQVFybkIsS0FBSy82QixVQUFVdW9CLEdBQUcsQ0FBQ3BsQixLQUFLLFdBQVduRCxLQUFLa2hELFdBQVcvOUMsT0FBT25ELEtBQUtraEQsV0FBV2pILFVBQVVnVyxPQUFPLFdBQVdqd0QsS0FBS2toRCxXQUFXakgsVUFBVWlXLFNBQVMsV0FBV2x3RCxLQUFLa2hELFdBQVdqSCxVQUFVbUksUUFBUSxXQUFXcGlELEtBQUtraEQsV0FBV2tCLFdBQVd2MkIsTUFBTSxTQUFTcmYsR0FBRyxJQUFJa2QsRUFBRTFwQixLQUFLa2hELFdBQVd4M0MsRUFBRWdnQixFQUFFODdCLFFBQVF0akQsRUFBRXduQixFQUFFKzdCLFNBQVN6bEQsS0FBSytwQyxPQUFPbVgsV0FBVzhPLGFBQWF6aUIsRUFBRS9nQyxFQUFFaEgsUUFBUTBVLEdBQUdoWSxJQUFJcXJDLEVBQUUvZ0MsRUFBRWhILFFBQVEwVSxHQUFHeFEsS0FBS0EsR0FBR0EsRUFBRXMxQixZQUFZaC9CLEtBQUsrcEMsT0FBT21YLFdBQVdzRyxhQUFhdGxELEdBQUdBLEVBQUU4OEIsWUFBWWgvQixLQUFLK3BDLE9BQU9tWCxXQUFXc0csaUJBQWlCLENBQUNwaUQsS0FBSyxhQUFhMmtDLE9BQU8sQ0FBQ2djLFdBQVcsQ0FBQ3gzQyxHQUFHLEtBQUswNEMsY0FBYyxPQUFPRyxXQUFVLEVBQUc0SSxhQUFZLEVBQUdqSixhQUFhLEtBQUtJLGtCQUFrQixLQUFLRCxlQUFlLEtBQUtMLGFBQWEsS0FBS0YscUJBQW9CLEVBQUdqbEQsS0FBSyxVQUFVd2tELGdCQUFlLEVBQUdFLG1CQUFtQixFQUFFSSxzQkFBc0IsU0FBU2g2QyxHQUFHLE9BQU9BLEdBQUdrNkMsb0JBQW9CLFNBQVNsNkMsR0FBRyxPQUFPQSxHQUFHdzZDLFlBQVksMkJBQTJCVixrQkFBa0Isa0NBQWtDZ0IsY0FBYyxxQkFBcUJmLGFBQWEsNEJBQTRCRSxXQUFXLDBCQUEwQmUsWUFBWSwyQkFBMkJaLHFCQUFxQixxQ0FBcUNXLHlCQUF5Qix5Q0FBeUNGLGVBQWUsOEJBQThCMUIsVUFBVSwyQkFBMkJyakMsT0FBTyxXQUFXLElBQUk5VixFQUFFeE0sS0FBS3l2QyxFQUFFdnFDLE9BQU9zSCxFQUFFLENBQUN1NUMsV0FBVyxDQUFDNWlELEtBQUsyaUQsRUFBRTNpRCxLQUFLNDNCLEtBQUt2dUIsR0FBR3M2QyxPQUFPaEIsRUFBRWdCLE9BQU8vckIsS0FBS3Z1QixHQUFHeXRDLE9BQU82TCxFQUFFN0wsT0FBT2xmLEtBQUt2dUIsR0FBRzQxQyxRQUFRMEQsRUFBRTFELFFBQVFybkIsS0FBS3Z1QixHQUFHNjVDLG1CQUFtQixNQUFNOTlCLEdBQUcsQ0FBQ3BsQixLQUFLLFdBQVduRCxLQUFLK2xELFdBQVc1aUQsT0FBT25ELEtBQUsrbEQsV0FBV2UsU0FBUzltRCxLQUFLK2xELFdBQVc5TCxVQUFVa1csa0JBQWtCLFlBQVdud0QsS0FBSytwQyxPQUFPc04sV0FBOEIsSUFBU3IzQyxLQUFLdzNDLFdBQXZDeDNDLEtBQUsrbEQsV0FBVzlMLFVBQTREbVcsZ0JBQWdCLFdBQVdwd0QsS0FBSytwQyxPQUFPc04sTUFBTXIzQyxLQUFLK2xELFdBQVc5TCxVQUFVb1csbUJBQW1CLFdBQVdyd0QsS0FBSytwQyxPQUFPc04sT0FBT3IzQyxLQUFLK2xELFdBQVdlLFNBQVM5bUQsS0FBSytsRCxXQUFXOUwsV0FBV3FXLHFCQUFxQixXQUFXdHdELEtBQUsrcEMsT0FBT3NOLE9BQU9yM0MsS0FBSytsRCxXQUFXZSxTQUFTOW1ELEtBQUsrbEQsV0FBVzlMLFdBQVdtSSxRQUFRLFdBQVdwaUQsS0FBSytsRCxXQUFXM0QsV0FBV3YyQixNQUFNLFNBQVNyZixHQUFHLElBQUlrZCxFQUFFMXBCLEtBQUswcEIsRUFBRXFnQixPQUFPZ2MsV0FBV3gzQyxJQUFJbWIsRUFBRXFnQixPQUFPZ2MsV0FBV2lLLGFBQWEsRUFBRXRtQyxFQUFFcThCLFdBQVc3VCxJQUFJN3VDLFNBQVNrcUMsRUFBRS9nQyxFQUFFaEgsUUFBUTQ1QixTQUFTMVYsRUFBRXFnQixPQUFPZ2MsV0FBV2lCLGNBQWN0OUIsRUFBRXE4QixXQUFXN1QsSUFBSWxULFlBQVl0VixFQUFFcWdCLE9BQU9nYyxXQUFXeUIsZ0JBQWdCLENBQUNwaUQsS0FBSyxZQUFZMmtDLE9BQU8sQ0FBQzJkLFVBQVUsQ0FBQ241QyxHQUFHLEtBQUtvNUMsU0FBUyxPQUFPaGlDLE1BQUssRUFBR2dqQyxXQUFVLEVBQUdMLGVBQWMsRUFBRzNDLFVBQVUsd0JBQXdCOEMsVUFBVSwwQkFBMEJubUMsT0FBTyxXQUFXLElBQUk5VixFQUFFeE0sS0FBS3l2QyxFQUFFdnFDLE9BQU9zSCxFQUFFLENBQUNrN0MsVUFBVSxDQUFDdmtELEtBQUtza0QsRUFBRXRrRCxLQUFLNDNCLEtBQUt2dUIsR0FBRzQxQyxRQUFRcUYsRUFBRXJGLFFBQVFybkIsS0FBS3Z1QixHQUFHeWxDLFdBQVd3VixFQUFFeFYsV0FBV2xYLEtBQUt2dUIsR0FBR3dyQyxhQUFheVAsRUFBRXpQLGFBQWFqZCxLQUFLdnVCLEdBQUd3cEMsY0FBY3lSLEVBQUV6UixjQUFjamIsS0FBS3Z1QixHQUFHKzdDLGdCQUFnQmQsRUFBRWMsZ0JBQWdCeHRCLEtBQUt2dUIsR0FBR2c4QyxpQkFBaUJmLEVBQUVlLGlCQUFpQnp0QixLQUFLdnVCLEdBQUd5N0MsZ0JBQWdCUixFQUFFUSxnQkFBZ0JsdEIsS0FBS3Z1QixHQUFHMDdDLFlBQVlULEVBQUVTLFlBQVludEIsS0FBS3Z1QixHQUFHNDdDLFdBQVdYLEVBQUVXLFdBQVdydEIsS0FBS3Z1QixHQUFHNjdDLFVBQVVaLEVBQUVZLFVBQVV0dEIsS0FBS3Z1QixHQUFHd3ZDLFdBQVUsRUFBRzVlLFFBQVEsS0FBSytxQixZQUFZLFNBQVM1L0IsR0FBRyxDQUFDcGxCLEtBQUssV0FBV25ELEtBQUswbkQsVUFBVXZrRCxPQUFPbkQsS0FBSzBuRCxVQUFVelYsYUFBYWp5QyxLQUFLMG5ELFVBQVUxUCxnQkFBZ0JpQyxPQUFPLFdBQVdqNkMsS0FBSzBuRCxVQUFVelYsY0FBY3dRLE9BQU8sV0FBV3ppRCxLQUFLMG5ELFVBQVV6VixjQUFjc2UsZUFBZSxXQUFXdndELEtBQUswbkQsVUFBVXpWLGNBQWMrRixhQUFhLFdBQVdoNEMsS0FBSzBuRCxVQUFVMVAsZ0JBQWdCaEMsY0FBYyxTQUFTeHBDLEdBQUd4TSxLQUFLMG5ELFVBQVUxUixjQUFjeHBDLElBQUk0MUMsUUFBUSxXQUFXcGlELEtBQUswbkQsVUFBVXRGLGFBQWEsQ0FBQ2g5QyxLQUFLLFdBQVcya0MsT0FBTyxDQUFDK2UsU0FBUyxDQUFDcnpDLFNBQVEsSUFBSzZNLE9BQU8sV0FBV210QixFQUFFdnFDLE9BQU9sRixLQUFLLENBQUM4b0QsU0FBUyxDQUFDRCxhQUFhRCxFQUFFQyxhQUFhOXRCLEtBQUsvNkIsTUFBTWc0QyxhQUFhNFEsRUFBRTVRLGFBQWFqZCxLQUFLLzZCLE1BQU1nMkMsY0FBYzRTLEVBQUU1UyxjQUFjamIsS0FBSy82QixVQUFVdW9CLEdBQUcsQ0FBQ2s3QixXQUFXLFdBQVd6akQsS0FBSytwQyxPQUFPK2UsU0FBU3J6QyxVQUFVelYsS0FBSytwQyxPQUFPNkwscUJBQW9CLElBQUt6eUMsS0FBSyxXQUFXbkQsS0FBSytwQyxPQUFPK2UsVUFBVTlvRCxLQUFLOG9ELFNBQVM5USxnQkFBZ0JBLGFBQWEsV0FBV2g0QyxLQUFLK3BDLE9BQU8rZSxVQUFVOW9ELEtBQUs4b0QsU0FBUzlRLGdCQUFnQmhDLGNBQWMsU0FBU3hwQyxHQUFHeE0sS0FBSytwQyxPQUFPK2UsVUFBVTlvRCxLQUFLOG9ELFNBQVM5UyxjQUFjeHBDLE1BQU0sQ0FBQ3BILEtBQUssT0FBTzJrQyxPQUFPLENBQUM1UyxLQUFLLENBQUMxaEIsU0FBUSxFQUFHaTBDLFNBQVMsRUFBRUssU0FBUyxFQUFFbmtDLFFBQU8sRUFBRzZqQyxlQUFlLHdCQUF3QnNCLGlCQUFpQix3QkFBd0J6b0MsT0FBTyxXQUFXLElBQUlvSCxFQUFFMXBCLEtBQUswSixFQUFFLENBQUMrTCxTQUFRLEVBQUdzUCxNQUFNLEVBQUUra0MsYUFBYSxFQUFFSCxXQUFVLEVBQUdULFFBQVEsQ0FBQ0ksY0FBUyxFQUFPWSxnQkFBVyxFQUFPQyxpQkFBWSxFQUFPWixjQUFTLEVBQU9DLGtCQUFhLEVBQU9FLFNBQVMsR0FBR256QyxNQUFNLENBQUN5bEMsZUFBVSxFQUFPQyxhQUFRLEVBQU9NLGNBQVMsRUFBT0MsY0FBUyxFQUFPNE4sVUFBSyxFQUFPRSxVQUFLLEVBQU9ELFVBQUssRUFBT0UsVUFBSyxFQUFPbjRCLFdBQU0sRUFBT3lCLFlBQU8sRUFBT21wQixZQUFPLEVBQU9DLFlBQU8sRUFBT2dOLGFBQWEsR0FBR08sZUFBZSxJQUFJMUwsU0FBUyxDQUFDekwsT0FBRSxFQUFPRCxPQUFFLEVBQU9xWCxtQkFBYyxFQUFPQyxtQkFBYyxFQUFPQyxjQUFTLElBQVMsK0hBQStIcmpELE1BQU0sS0FBS2lvQyxRQUFRLFNBQVMvaUMsR0FBRzlDLEVBQUU4QyxHQUFHdThDLEVBQUV2OEMsR0FBR3V1QixLQUFLclIsS0FBSytsQixFQUFFdnFDLE9BQU93a0IsRUFBRSxDQUFDeU4sS0FBS3p0QixLQUFLNmUsR0FBRyxDQUFDcGxCLEtBQUssV0FBV25ELEtBQUsrcEMsT0FBTzVTLEtBQUsxaEIsU0FBU3pWLEtBQUttM0IsS0FBSzBzQixVQUFVekIsUUFBUSxXQUFXcGlELEtBQUttM0IsS0FBS3RaLFdBQVcyeUMsV0FBVyxTQUFTaGtELEdBQUd4TSxLQUFLbTNCLEtBQUsxaEIsU0FBU3pWLEtBQUttM0IsS0FBSzBrQixhQUFhcnZDLElBQUlpa0QsU0FBUyxTQUFTamtELEdBQUd4TSxLQUFLbTNCLEtBQUsxaEIsU0FBU3pWLEtBQUttM0IsS0FBS3VuQixXQUFXbHlDLElBQUlra0QsVUFBVSxTQUFTbGtELEdBQUd4TSxLQUFLK3BDLE9BQU81UyxLQUFLMWhCLFNBQVN6VixLQUFLbTNCLEtBQUsxaEIsU0FBU3pWLEtBQUsrcEMsT0FBTzVTLEtBQUt2UixRQUFRNWxCLEtBQUttM0IsS0FBS3ZSLE9BQU9wWixJQUFJcWlDLGNBQWMsV0FBVzd1QyxLQUFLbTNCLEtBQUsxaEIsU0FBU3pWLEtBQUsrcEMsT0FBTzVTLEtBQUsxaEIsU0FBU3pWLEtBQUttM0IsS0FBS3l6QixxQkFBcUIsQ0FBQ3hsRCxLQUFLLE9BQU8ya0MsT0FBTyxDQUFDd1osS0FBSyxDQUFDOXRDLFNBQVEsRUFBRzgxQyxjQUFhLEVBQUdDLG1CQUFtQixFQUFFbUYsdUJBQXNCLEVBQUd6RixhQUFhLGNBQWNFLGFBQWEsc0JBQXNCRCxZQUFZLHFCQUFxQkUsZUFBZSwwQkFBMEIvb0MsT0FBTyxXQUFXbXRCLEVBQUV2cUMsT0FBT2xGLEtBQUssQ0FBQ3VqRCxLQUFLLENBQUMrSCxvQkFBbUIsRUFBRzMvQixLQUFLcS9CLEVBQUVyL0IsS0FBS29QLEtBQUsvNkIsTUFBTWlyRCxZQUFZRCxFQUFFQyxZQUFZbHdCLEtBQUsvNkIsVUFBVXVvQixHQUFHLENBQUNrN0IsV0FBVyxXQUFXempELEtBQUsrcEMsT0FBT3daLEtBQUs5dEMsU0FBU3pWLEtBQUsrcEMsT0FBTzRXLGdCQUFnQjNnRCxLQUFLK3BDLE9BQU80VyxlQUFjLElBQUt4OUMsS0FBSyxXQUFXbkQsS0FBSytwQyxPQUFPd1osS0FBSzl0QyxVQUFVelYsS0FBSytwQyxPQUFPc04sTUFBTSxJQUFJcjNDLEtBQUsrcEMsT0FBT3NPLGNBQWNyNEMsS0FBS3VqRCxLQUFLNTNCLFFBQVFpbEMsT0FBTyxXQUFXNXdELEtBQUsrcEMsT0FBT3lSLFdBQVd4N0MsS0FBSytwQyxPQUFPcVYsZ0JBQWdCcC9DLEtBQUt1akQsS0FBSzUzQixRQUFRODJCLE9BQU8sV0FBV3ppRCxLQUFLK3BDLE9BQU93WixLQUFLOXRDLFNBQVN6VixLQUFLdWpELEtBQUs1M0IsUUFBUWtsQyxrQkFBa0IsV0FBVzd3RCxLQUFLK3BDLE9BQU93WixLQUFLOXRDLFNBQVN6VixLQUFLdWpELEtBQUs1M0IsUUFBUStzQixnQkFBZ0IsV0FBVyxJQUFJbHNDLEVBQUV4TSxLQUFLd00sRUFBRXU5QixPQUFPd1osS0FBSzl0QyxVQUFVakosRUFBRXU5QixPQUFPd1osS0FBS29OLHdCQUF3Qm5rRCxFQUFFdTlCLE9BQU93WixLQUFLb04sd0JBQXdCbmtELEVBQUUrMkMsS0FBSytILHFCQUFxQjkrQyxFQUFFKzJDLEtBQUs1M0IsUUFBUWtqQixjQUFjLFdBQVc3dUMsS0FBSytwQyxPQUFPd1osS0FBSzl0QyxVQUFVelYsS0FBSytwQyxPQUFPd1osS0FBS29OLHVCQUF1QjN3RCxLQUFLdWpELEtBQUs1M0IsVUFBVSxDQUFDdm1CLEtBQUssYUFBYTJrQyxPQUFPLENBQUM4aEIsV0FBVyxDQUFDRSxhQUFRLEVBQU9FLFNBQVEsRUFBR0QsR0FBRyxVQUFVMXBDLE9BQU8sV0FBc0JtdEIsRUFBRXZxQyxPQUFQbEYsS0FBZ0IsQ0FBQzZyRCxXQUFXLENBQUNFLFFBQTdCL3JELEtBQXVDK3BDLE9BQU84aEIsV0FBV0UsUUFBUUgsdUJBQXVCOW1ELEVBQUU4bUQsdUJBQXVCN3dCLEtBQWpILzZCLE1BQXlIZzRDLGFBQWFsekMsRUFBRWt6QyxhQUFhamQsS0FBckovNkIsTUFBNkpnMkMsY0FBY2x4QyxFQUFFa3hDLGNBQWNqYixLQUEzTC82QixVQUF1TXVvQixHQUFHLENBQUMweEIsT0FBTyxXQUFXajZDLEtBQUs2ckQsV0FBV0UsU0FBUy9yRCxLQUFLNnJELFdBQVdDLFNBQVM5ckQsS0FBSzZyRCxXQUFXQyxZQUFPLFNBQWM5ckQsS0FBSzZyRCxXQUFXQyxTQUFTckosT0FBTyxXQUFXemlELEtBQUs2ckQsV0FBV0UsU0FBUy9yRCxLQUFLNnJELFdBQVdDLFNBQVM5ckQsS0FBSzZyRCxXQUFXQyxZQUFPLFNBQWM5ckQsS0FBSzZyRCxXQUFXQyxTQUFTeUUsZUFBZSxXQUFXdndELEtBQUs2ckQsV0FBV0UsU0FBUy9yRCxLQUFLNnJELFdBQVdDLFNBQVM5ckQsS0FBSzZyRCxXQUFXQyxZQUFPLFNBQWM5ckQsS0FBSzZyRCxXQUFXQyxTQUFTOVQsYUFBYSxTQUFTeHJDLEVBQUVrZCxHQUFHMXBCLEtBQUs2ckQsV0FBV0UsU0FBUy9yRCxLQUFLNnJELFdBQVc3VCxhQUFheHJDLEVBQUVrZCxJQUFJc3NCLGNBQWMsU0FBU3hwQyxFQUFFa2QsR0FBRzFwQixLQUFLNnJELFdBQVdFLFNBQVMvckQsS0FBSzZyRCxXQUFXN1YsY0FBY3hwQyxFQUFFa2QsTUFBTSxDQUFDdGtCLEtBQUssT0FBTzJrQyxPQUFPLENBQUMwaUIsS0FBSyxDQUFDaDNDLFNBQVEsRUFBR3E3QyxrQkFBa0Isc0JBQXNCakUsaUJBQWlCLGlCQUFpQkYsaUJBQWlCLGFBQWFDLGtCQUFrQiwwQkFBMEJGLGlCQUFpQix5QkFBeUJPLHdCQUF3QiwwQkFBMEIzcUMsT0FBTyxXQUFXLElBQUlvSCxFQUFFMXBCLEtBQUt5dkMsRUFBRXZxQyxPQUFPd2tCLEVBQUUsQ0FBQytpQyxLQUFLLENBQUNLLFdBQVd2ZixFQUFFLGdCQUFnQjdqQixFQUFFcWdCLE9BQU8waUIsS0FBS3FFLGtCQUFrQix5REFBeUR4d0QsT0FBTzBOLEtBQUtrK0MsR0FBRzNjLFFBQVEsU0FBUy9pQyxHQUFHa2QsRUFBRStpQyxLQUFLamdELEdBQUcwL0MsRUFBRTEvQyxHQUFHdXVCLEtBQUtyUixNQUFNbkIsR0FBRyxDQUFDcGxCLEtBQUssV0FBV25ELEtBQUsrcEMsT0FBTzBpQixLQUFLaDNDLFVBQVV6VixLQUFLeXNELEtBQUt0cEQsT0FBT25ELEtBQUt5c0QsS0FBS00scUJBQXFCa0QsT0FBTyxXQUFXandELEtBQUsrcEMsT0FBTzBpQixLQUFLaDNDLFNBQVN6VixLQUFLeXNELEtBQUtNLG9CQUFvQm1ELFNBQVMsV0FBV2x3RCxLQUFLK3BDLE9BQU8waUIsS0FBS2gzQyxTQUFTelYsS0FBS3lzRCxLQUFLTSxvQkFBb0JnRSxpQkFBaUIsV0FBVy93RCxLQUFLK3BDLE9BQU8waUIsS0FBS2gzQyxTQUFTelYsS0FBS3lzRCxLQUFLTyxvQkFBb0I1SyxRQUFRLFdBQVdwaUQsS0FBSytwQyxPQUFPMGlCLEtBQUtoM0MsU0FBU3pWLEtBQUt5c0QsS0FBS3JLLGFBQWEsQ0FBQ2g5QyxLQUFLLFVBQVUya0MsT0FBTyxDQUFDb0QsUUFBUSxDQUFDMTNCLFNBQVEsRUFBRyszQyxjQUFhLEVBQUd0L0MsSUFBSSxXQUFXb1UsT0FBTyxXQUFzQm10QixFQUFFdnFDLE9BQVBsRixLQUFnQixDQUFDbXRDLFFBQVEsQ0FBQ2hxQyxLQUFLK3BELEVBQUUvcEQsS0FBSzQzQixLQUF0Qy82QixNQUE4QzJ0RCxXQUFXVCxFQUFFUyxXQUFXNXlCLEtBQXRFLzZCLE1BQThFeXRELG1CQUFtQlAsRUFBRU8sbUJBQW1CMXlCLEtBQXRILzZCLE1BQThIdXRELGNBQWNMLEVBQUVLLGNBQWN4eUIsS0FBNUovNkIsTUFBb0tvaUQsUUFBUThLLEVBQUU5SyxRQUFRcm5CLEtBQXRMLzZCLFVBQWtNdW9CLEdBQUcsQ0FBQ3BsQixLQUFLLFdBQVduRCxLQUFLK3BDLE9BQU9vRCxRQUFRMTNCLFNBQVN6VixLQUFLbXRDLFFBQVFocUMsUUFBUWkvQyxRQUFRLFdBQVdwaUQsS0FBSytwQyxPQUFPb0QsUUFBUTEzQixTQUFTelYsS0FBS210QyxRQUFRaVYsV0FBV3ZULGNBQWMsV0FBVzd1QyxLQUFLbXRDLFFBQVFtTCxhQUFhdDRDLEtBQUttdEMsUUFBUXdnQixXQUFXM3RELEtBQUsrcEMsT0FBT29ELFFBQVFqL0IsSUFBSWxPLEtBQUtpMkMsZ0JBQWdCLENBQUM3d0MsS0FBSyxrQkFBa0Iya0MsT0FBTyxDQUFDcWpCLGVBQWUsQ0FBQzMzQyxTQUFRLEVBQUcrM0MsY0FBYSxFQUFHUSxZQUFXLElBQUsxckMsT0FBTyxXQUFzQm10QixFQUFFdnFDLE9BQVBsRixLQUFnQixDQUFDb3RELGVBQWUsQ0FBQzlVLGFBQVksRUFBR24xQyxLQUFLOFosRUFBRTlaLEtBQUs0M0IsS0FBNUQvNkIsTUFBb0VvaUQsUUFBUW5sQyxFQUFFbWxDLFFBQVFybkIsS0FBdEYvNkIsTUFBOEYrdEQsUUFBUTl3QyxFQUFFOHdDLFFBQVFoekIsS0FBaEgvNkIsTUFBd0g4dEQsWUFBWTd3QyxFQUFFNndDLFlBQVkveUIsS0FBbEovNkIsVUFBOEp1b0IsR0FBRyxDQUFDcGxCLEtBQUssV0FBV25ELEtBQUsrcEMsT0FBT3FqQixlQUFlMzNDLFNBQVN6VixLQUFLb3RELGVBQWVqcUQsUUFBUWkvQyxRQUFRLFdBQVdwaUQsS0FBSytwQyxPQUFPcWpCLGVBQWUzM0MsU0FBU3pWLEtBQUtvdEQsZUFBZWhMLFdBQVd2VCxjQUFjLFdBQVc3dUMsS0FBS290RCxlQUFlOVUsYUFBYXQ0QyxLQUFLb3RELGVBQWVXLGFBQWEsQ0FBQzNvRCxLQUFLLFdBQVcya0MsT0FBTyxDQUFDcWIsU0FBUyxDQUFDM3ZDLFNBQVEsRUFBR3luQixNQUFNLElBQUlxeEIsbUJBQWtCLEVBQUd5QyxzQkFBcUIsRUFBRzdDLGlCQUFnQixFQUFHRCxrQkFBaUIsSUFBSzVyQyxPQUFPLFdBQVcsSUFBSW9ILEVBQUUxcEIsS0FBS3l2QyxFQUFFdnFDLE9BQU93a0IsRUFBRSxDQUFDMDdCLFNBQVMsQ0FBQ2dKLFNBQVEsRUFBR0UsUUFBTyxFQUFHbDJCLElBQUk2MUIsRUFBRTcxQixJQUFJMkMsS0FBS3JSLEdBQUd6VixNQUFNZzZDLEVBQUVoNkMsTUFBTThtQixLQUFLclIsR0FBRy9GLEtBQUtzcUMsRUFBRXRxQyxLQUFLb1gsS0FBS3JSLEdBQUcya0MsTUFBTUosRUFBRUksTUFBTXR6QixLQUFLclIsR0FBR2toQyxnQkFBZ0IsU0FBU3ArQyxHQUFHa2QsSUFBSUEsRUFBRWt2QixXQUFXbHZCLEVBQUUrb0IsWUFBWWptQyxFQUFFaEgsU0FBU3hGLE9BQU8wcEIsRUFBRStvQixXQUFXLEdBQUcxeEIsb0JBQW9CLGdCQUFnQjJJLEVBQUUwN0IsU0FBU3dGLGlCQUFpQmxoQyxFQUFFK29CLFdBQVcsR0FBRzF4QixvQkFBb0Isc0JBQXNCMkksRUFBRTA3QixTQUFTd0YsaUJBQWlCbGhDLEVBQUUwN0IsU0FBU2tKLFFBQU8sRUFBRzVrQyxFQUFFMDdCLFNBQVNnSixRQUFRMWtDLEVBQUUwN0IsU0FBU2h0QixNQUFNMU8sRUFBRTA3QixTQUFTemhDLGFBQWE0RSxHQUFHLENBQUNwbEIsS0FBSyxXQUFXbkQsS0FBSytwQyxPQUFPcWIsU0FBUzN2QyxTQUFTelYsS0FBS29sRCxTQUFTbnhDLFNBQVNnOUMsc0JBQXNCLFNBQVN6a0QsRUFBRWtkLEdBQUcxcEIsS0FBS29sRCxTQUFTZ0osVUFBVTFrQyxJQUFJMXBCLEtBQUsrcEMsT0FBT3FiLFNBQVM0TCxxQkFBcUJoeEQsS0FBS29sRCxTQUFTaUosTUFBTTdoRCxHQUFHeE0sS0FBS29sRCxTQUFTemhDLFNBQVN1dEMsZ0JBQWdCLFdBQVdseEQsS0FBS29sRCxTQUFTZ0osVUFBVXB1RCxLQUFLK3BDLE9BQU9xYixTQUFTNEwscUJBQXFCaHhELEtBQUtvbEQsU0FBU3poQyxPQUFPM2pCLEtBQUtvbEQsU0FBU2lKLFVBQVVqTSxRQUFRLFdBQVdwaUQsS0FBS29sRCxTQUFTZ0osU0FBU3B1RCxLQUFLb2xELFNBQVN6aEMsVUFBVSxDQUFDdmUsS0FBSyxjQUFjMmtDLE9BQU8sQ0FBQzBrQixXQUFXLENBQUNDLFdBQVUsSUFBS3BzQyxPQUFPLFdBQVdtdEIsRUFBRXZxQyxPQUFPbEYsS0FBSyxDQUFDeXVELFdBQVcsQ0FBQ3pXLGFBQWF3VyxFQUFFeFcsYUFBYWpkLEtBQUsvNkIsTUFBTWcyQyxjQUFjd1ksRUFBRXhZLGNBQWNqYixLQUFLLzZCLFVBQVV1b0IsR0FBRyxDQUFDazdCLFdBQVcsV0FBc0IsR0FBRyxTQUFSempELEtBQW1CK3BDLE9BQU9tTCxPQUFPLENBQWpDbDFDLEtBQW9DbS9CLFdBQVdyK0IsS0FBL0NkLEtBQXNEK3BDLE9BQU84Vyx1QkFBdUIsUUFBUSxJQUFJbjNCLEVBQUUsQ0FBQ21xQixjQUFjLEVBQUVGLGdCQUFnQixFQUFFc0IsZUFBZSxFQUFFVyxxQkFBb0IsRUFBR3pDLGFBQWEsRUFBRTRFLGtCQUFpQixHQUFJdEksRUFBRXZxQyxPQUFuTmxGLEtBQTROK3BDLE9BQU9yZ0IsR0FBRytsQixFQUFFdnFDLE9BQXhPbEYsS0FBaVBvZ0QsZUFBZTEyQixLQUFLc3VCLGFBQWEsV0FBVyxTQUFTaDRDLEtBQUsrcEMsT0FBT21MLFFBQVFsMUMsS0FBS3l1RCxXQUFXelcsZ0JBQWdCaEMsY0FBYyxTQUFTeHBDLEdBQUcsU0FBU3hNLEtBQUsrcEMsT0FBT21MLFFBQVFsMUMsS0FBS3l1RCxXQUFXelksY0FBY3hwQyxNQUFNLENBQUNwSCxLQUFLLGNBQWMya0MsT0FBTyxDQUFDNmtCLFdBQVcsQ0FBQ0UsY0FBYSxFQUFHRCxRQUFPLEVBQUdNLGFBQWEsR0FBR0MsWUFBWSxNQUFNOXNDLE9BQU8sV0FBV210QixFQUFFdnFDLE9BQU9sRixLQUFLLENBQUM0dUQsV0FBVyxDQUFDNVcsYUFBYTJXLEVBQUUzVyxhQUFhamQsS0FBSy82QixNQUFNZzJDLGNBQWMyWSxFQUFFM1ksY0FBY2piLEtBQUsvNkIsVUFBVXVvQixHQUFHLENBQUNrN0IsV0FBVyxXQUFzQixHQUFHLFNBQVJ6akQsS0FBbUIrcEMsT0FBT21MLE9BQU8sQ0FBakNsMUMsS0FBb0NtL0IsV0FBV3IrQixLQUEvQ2QsS0FBc0QrcEMsT0FBTzhXLHVCQUF1QixRQUFwRjdnRCxLQUE4Rm0vQixXQUFXcitCLEtBQXpHZCxLQUFnSCtwQyxPQUFPOFcsdUJBQXVCLE1BQU0sSUFBSW4zQixFQUFFLENBQUNtcUIsY0FBYyxFQUFFRixnQkFBZ0IsRUFBRXNCLGVBQWUsRUFBRVcscUJBQW9CLEVBQUcwSSxnQkFBZ0IsRUFBRW5MLGFBQWEsRUFBRTRCLGdCQUFlLEVBQUdnRCxrQkFBaUIsR0FBSXRJLEVBQUV2cUMsT0FBL1NsRixLQUF3VCtwQyxPQUFPcmdCLEdBQUcrbEIsRUFBRXZxQyxPQUFwVWxGLEtBQTZVb2dELGVBQWUxMkIsS0FBS3N1QixhQUFhLFdBQVcsU0FBU2g0QyxLQUFLK3BDLE9BQU9tTCxRQUFRbDFDLEtBQUs0dUQsV0FBVzVXLGdCQUFnQmhDLGNBQWMsU0FBU3hwQyxHQUFHLFNBQVN4TSxLQUFLK3BDLE9BQU9tTCxRQUFRbDFDLEtBQUs0dUQsV0FBVzVZLGNBQWN4cEMsTUFBTSxDQUFDcEgsS0FBSyxjQUFjMmtDLE9BQU8sQ0FBQ3dsQixXQUFXLENBQUNULGNBQWEsRUFBR1UsZUFBYyxJQUFLbHRDLE9BQU8sV0FBV210QixFQUFFdnFDLE9BQU9sRixLQUFLLENBQUN1dkQsV0FBVyxDQUFDdlgsYUFBYXNYLEVBQUd0WCxhQUFhamQsS0FBSy82QixNQUFNZzJDLGNBQWNzWixFQUFHdFosY0FBY2piLEtBQUsvNkIsVUFBVXVvQixHQUFHLENBQUNrN0IsV0FBVyxXQUFzQixHQUFHLFNBQVJ6akQsS0FBbUIrcEMsT0FBT21MLE9BQU8sQ0FBakNsMUMsS0FBb0NtL0IsV0FBV3IrQixLQUEvQ2QsS0FBc0QrcEMsT0FBTzhXLHVCQUF1QixRQUFwRjdnRCxLQUE4Rm0vQixXQUFXcitCLEtBQXpHZCxLQUFnSCtwQyxPQUFPOFcsdUJBQXVCLE1BQU0sSUFBSW4zQixFQUFFLENBQUNtcUIsY0FBYyxFQUFFRixnQkFBZ0IsRUFBRXNCLGVBQWUsRUFBRVcscUJBQW9CLEVBQUd6QyxhQUFhLEVBQUU0RSxrQkFBaUIsR0FBSXRJLEVBQUV2cUMsT0FBM1FsRixLQUFvUitwQyxPQUFPcmdCLEdBQUcrbEIsRUFBRXZxQyxPQUFoU2xGLEtBQXlTb2dELGVBQWUxMkIsS0FBS3N1QixhQUFhLFdBQVcsU0FBU2g0QyxLQUFLK3BDLE9BQU9tTCxRQUFRbDFDLEtBQUt1dkQsV0FBV3ZYLGdCQUFnQmhDLGNBQWMsU0FBU3hwQyxHQUFHLFNBQVN4TSxLQUFLK3BDLE9BQU9tTCxRQUFRbDFDLEtBQUt1dkQsV0FBV3ZaLGNBQWN4cEMsTUFBTSxDQUFDcEgsS0FBSyxtQkFBbUIya0MsT0FBTyxDQUFDMmxCLGdCQUFnQixDQUFDQyxPQUFPLEdBQUdFLFFBQVEsRUFBRTN3QyxNQUFNLElBQUkwd0MsU0FBUyxFQUFFZCxjQUFhLElBQUt4c0MsT0FBTyxXQUFXbXRCLEVBQUV2cUMsT0FBT2xGLEtBQUssQ0FBQzB2RCxnQkFBZ0IsQ0FBQzFYLGFBQWF5WCxHQUFHelgsYUFBYWpkLEtBQUsvNkIsTUFBTWcyQyxjQUFjeVosR0FBR3paLGNBQWNqYixLQUFLLzZCLFVBQVV1b0IsR0FBRyxDQUFDazdCLFdBQVcsV0FBc0IsY0FBTHpqRCxLQUFxQitwQyxPQUFPbUwsU0FBNUJsMUMsS0FBdUNtL0IsV0FBV3IrQixLQUFsRGQsS0FBeUQrcEMsT0FBTzhXLHVCQUF1QixhQUF2RjdnRCxLQUFzR20vQixXQUFXcitCLEtBQWpIZCxLQUF3SCtwQyxPQUFPOFcsdUJBQXVCLE1BQXRKN2dELEtBQThKK3BDLE9BQU82TCxxQkFBb0IsRUFBekw1MUMsS0FBOExvZ0QsZUFBZXhLLHFCQUFvQixJQUFLb0MsYUFBYSxXQUFXLGNBQWNoNEMsS0FBSytwQyxPQUFPbUwsUUFBUWwxQyxLQUFLMHZELGdCQUFnQjFYLGdCQUFnQmhDLGNBQWMsU0FBU3hwQyxHQUFHLGNBQWN4TSxLQUFLK3BDLE9BQU9tTCxRQUFRbDFDLEtBQUswdkQsZ0JBQWdCMVosY0FBY3hwQyxPQUFPLFlBQU8sSUFBU3duQyxFQUFFbkMsTUFBTW1DLEVBQUVuQyxJQUFJbUMsRUFBRXRHLE1BQU1tRSxJQUFJbUMsRUFBRWxDLGNBQWNrQyxFQUFFdEcsTUFBTW9FLGVBQWVrQyxFQUFFbkMsSUFBSWtlLElBQUkvYixJQ0RybnJILFNBQVN0cUIsRUFBRWxkLEVBQUU0TixFQUFFcXpCLEdBQUcsYUFBYSxTQUFTdnJDLEVBQUV3bkIsR0FBRyxJQUFJbGQsRUFBRWtkLEVBQUVzQixjQUFjeWlCLEVBQUUvakIsRUFBRWhILEtBQUtnSCxFQUFFaEgsS0FBS3ZkLFFBQVEsR0FBR2pELEVBQUV3bkIsRUFBRWhILEtBQUtnSCxFQUFFaEgsS0FBS3l1QyxNQUFNLEdBQUd6bkQsRUFBRTBRLEVBQUU1TixHQUFHc0YsS0FBSyxrQkFBa0IsR0FBR2t2QixFQUFFLEVBQUV0WCxFQUFFTixpQkFBaUJNLEVBQUVSLGtCQUFrQnhmLEdBQStFczNCLEdBQTVFOStCLEVBQUVBLEVBQUVtQixPQUFPbkIsRUFBRW1PLE9BQU8sbUJBQW1CM0csRUFBRSxNQUFNMFEsRUFBRSxtQkFBbUIxUSxFQUFFLE9BQVU0UixNQUFNOU8sSUFBSyxJQUFJdzBCLEVBQUUsR0FBSTkrQixFQUFFLENBQUNzSyxHQUFHNE4sRUFBRWczQyxTQUFTanBCLEtBQUtqbUMsRUFBRXVyQyxFQUFFek0sR0FBRyxHQUFHNW1CLEVBQUUsQ0FBQyxHQUFHQSxFQUFFbFgsR0FBR2t1RCxTQUFTLE9BQVloM0MsRUFBRWpVLE1BQU0sZ0NBQWdDLElBQUl1RCxFQUFFLENBQUMydEMsTUFBSyxFQUFHMWYsT0FBTyxDQUFDLEdBQUcsR0FBRzA1QixPQUFPLEdBQUczTixVQUFTLEVBQUc0TixRQUFPLEVBQUdDLFNBQVEsRUFBR0MsU0FBUSxFQUFHbGtDLFFBQVEsQ0FBQyxZQUFZLGFBQWEsU0FBUyxTQUFTbWtDLFNBQVMsRUFBRUMsU0FBUyxPQUFPQyxTQUFRLEVBQUdDLE9BQU0sRUFBR3I3QyxNQUFNLENBQUNzN0MsUUFBUSxRQUFRNXRCLEtBQUssQ0FBQ0gsU0FBUyxDQUFDcGhCLEtBQUssQ0FBQzB1QyxVQUFTLEtBQU1VLE9BQU8sQ0FBQ0MsSUFBSSwrTkFBK05GLFNBQVEsRUFBR250QyxJQUFJLEdBQUc1UyxLQUFLLENBQUNrZ0QsVUFBVSxTQUFTQyxnQkFBZ0IsT0FBT0Msa0JBQWtCLElBQUlDLFlBQVksT0FBT0MsaUJBQWlCLE9BQU9sa0IsbUJBQW1CLElBQUk0RSxXQUFXLEdBQUd1ZixVQUFVLEdBQUdDLFFBQVEsbzJCQUFvMkJDLFdBQVcsdUNBQXVDQyxTQUFTLG9EQUFvREMsT0FBTyxDQUFDQyxVQUFVLDRHQUE0R0MsV0FBVyx5SEFBeUhDLE9BQU8sNEdBQTRHQyxNQUFNLHlHQUF5R25CLFNBQVMsd0ZBQXdGb0IsU0FBUyxPQUFPQyxXQUFVLEVBQUdDLFdBQVUsRUFBR0MsV0FBVSxFQUFHTixXQUFXLENBQUNPLFdBQVUsR0FBSXppQixNQUFNLENBQUMwaUIsVUFBUyxFQUFHQyxVQUFTLEdBQUluK0MsS0FBSyxLQUFLbytDLE1BQU0sR0FBR1gsVUFBVSxDQUFDUSxXQUFVLEVBQUduM0IsTUFBTSxLQUFLNjJCLE9BQU8sQ0FBQ00sV0FBVSxFQUFHSSxhQUFZLEdBQUlDLE9BQU9uNUMsRUFBRS9ULEtBQUttdEQsV0FBV3A1QyxFQUFFL1QsS0FBS290RCxVQUFVcjVDLEVBQUUvVCxLQUFLcXRELFdBQVd0NUMsRUFBRS9ULEtBQUtzdEQsVUFBVXY1QyxFQUFFL1QsS0FBS3V0RCxZQUFZeDVDLEVBQUUvVCxLQUFLd3RELFdBQVd6NUMsRUFBRS9ULEtBQUt5dEQsV0FBVzE1QyxFQUFFL1QsS0FBSzB0RCxhQUFhMzVDLEVBQUUvVCxLQUFLMnRELGFBQWEsU0FBU3RxQyxHQUFLLE1BQU0sVUFBVUEsRUFBRWhvQixNQUFNLFFBQVF1eUQsV0FBVyxRQUFRQyxhQUFhLFFBQVFDLGlCQUFnQixFQUFHQyxlQUFjLEVBQUdDLGlCQUFnQixFQUFHQyxPQUFPLENBQUNOLGFBQWEsU0FBU3RxQyxHQUFLLE1BQU0sVUFBVUEsRUFBRWhvQixNQUFNLGtCQUFrQnV5RCxXQUFXLFNBQVN2cUMsR0FBSyxNQUFNLFVBQVVBLEVBQUVob0IsS0FBSyxpQkFBaUIsU0FBU3l5RCxnQkFBZ0IsU0FBU3pxQyxHQUFLLE1BQU0sVUFBVUEsRUFBRWhvQixNQUFNLFFBQVEweUQsY0FBYyxTQUFTMXFDLEdBQUssTUFBTSxVQUFVQSxFQUFFaG9CLE1BQU0sU0FBU3FULEtBQUssS0FBS3cvQyxLQUFLLENBQUNDLEdBQUcsQ0FBQ0MsTUFBTSxRQUFRQyxLQUFLLE9BQU9DLEtBQUssV0FBV0MsTUFBTSx3RUFBd0VDLFdBQVcsa0JBQWtCQyxVQUFVLGtCQUFrQkMsWUFBWSxjQUFjQyxPQUFPLGNBQWNDLEdBQUcsQ0FBQ1IsTUFBTSxhQUFhQyxLQUFLLFNBQVNDLEtBQUssU0FBU0MsTUFBTSxxR0FBcUdDLFdBQVcsbUJBQW1CQyxVQUFVLG1CQUFtQkMsWUFBWSxXQUFXQyxPQUFPLG9CQUFvQmgwQixFQUFFNW1CLEVBQUVzUCxHQUFHOGpCLEVBQUVwekIsRUFBRTVOLEdBQUc2aEMsRUFBRSxFQUE0REMsRUFBb0I1a0IsRUFBRStQLHVCQUF1Qi9QLEVBQUV3ckMsNkJBQTZCeHJDLEVBQUV5ckMsMEJBQTBCenJDLEVBQUUwckMsd0JBQXdCLFNBQVM1b0QsR0FBRyxPQUFPa2QsRUFBRTVKLFdBQVd0VCxFQUFFLElBQUksS0FBUTRoQyxFQUFFLFdBQVcsSUFBSTFrQixFQUFFdFAsRUFBRTVOLEVBQUVuSyxjQUFjLGVBQWVILEVBQUUsQ0FBQzhyQyxXQUFXLGdCQUFnQnFuQixZQUFZLGlCQUFpQkMsY0FBYyxnQkFBZ0JDLGlCQUFpQix1QkFBdUIsSUFBSTdyQyxLQUFLeG5CLEVBQUUsR0FBR2tZLEVBQUVvSyxNQUFNa0YsS0FBSytqQixFQUFFLE9BQU92ckMsRUFBRXduQixHQUF6TixHQUErTmtqQixFQUFFLFNBQVNsakIsR0FBRyxPQUFPQSxHQUFHQSxFQUFFcm1CLFFBQVFxbUIsRUFBRSxHQUFHZ2UsY0FBYzZHLEVBQUUsU0FBUzdrQixFQUFFK2pCLEVBQUV2ckMsR0FBRyxJQUFJOCtCLEVBQUVoaEMsS0FBS2doQyxFQUFFdkcsS0FBS3JnQixFQUFFbFYsUUFBTyxFQUFHLENBQUNvVyxNQUFNcFosR0FBR3dILEVBQUUrakMsR0FBRyxJQUFJQSxHQUFHcnpCLEVBQUV4VSxRQUFRNm5DLEVBQUVuZ0IsV0FBVzBULEVBQUV2RyxLQUFLbk4sUUFBUW1nQixFQUFFbmdCLFNBQVMwVCxFQUFFNXpCLEdBQUc0ekIsRUFBRXZHLEtBQUtydEIsTUFBTWloQyxFQUFFck4sRUFBRXcwQixNQUFNLEdBQUd4MEIsRUFBRXkwQixVQUFVM2hDLFNBQVNrTixFQUFFdkcsS0FBS25mLE1BQU0sS0FBSyxFQUFFMGxCLEVBQUUwMEIsVUFBVSxLQUFLMTBCLEVBQUUyMEIsUUFBUSxLQUFLMzBCLEVBQUU0MEIsUUFBUSxFQUFFNTBCLEVBQUU2MEIsU0FBUyxLQUFLNzBCLEVBQUU4MEIsWUFBWXBzQyxHQUFHc1gsRUFBRXcwQixNQUFNbnlELFNBQVMyOUIsRUFBRSswQixXQUFXMzdDLEVBQUU1TixFQUFFNkksZUFBZThZLE9BQU82UyxFQUFFNlIsT0FBTyxHQUFHN1IsRUFBRTc5QixLQUFLdW1CLEtBQUt0UCxFQUFFbFYsT0FBT3FwQyxFQUFFanJDLFVBQVUsQ0FBQ0gsS0FBSyxXQUFXLElBQUl1bUIsRUFBRWxkLEVBQUVpaEMsRUFBRXZyQyxFQUFFbEMsS0FBSzBKLEVBQUV4SCxFQUFFc3pELE1BQU10ekQsRUFBRXV6RCxXQUFXaDdCLEtBQUt2NEIsRUFBRXkyQixVQUFVNlUsRUFBRTdVLFlBQVl6MkIsRUFBRTAyQixXQUFXNFUsRUFBRTVVLGFBQWF4ZSxFQUFFZzNDLFNBQVM0RSxlQUFlNTdDLEVBQUVnM0MsU0FBUzZFLFVBQVUsV0FBVzc3QyxFQUFFLFFBQVFzSyxJQUFJLGNBQWNnRixFQUFFdFAsRUFBRSxRQUFRZ1ksUUFBUWhZLEVBQUUsUUFBUXNrQixTQUFTLG9CQUE0QyxHQUF4QmhWLEVBQUV0UCxFQUFFLFFBQVFnWSxRQUFRMUksSUFBT3RQLEVBQUUsUUFBUStWLE9BQU8seUhBQXlIekcsRUFBRSxrQkFBa0IrakIsRUFBRSxHQUFHcnpCLEVBQUVuVyxLQUFLeUYsRUFBRTRqQixRQUFRLFNBQVM1RCxFQUFFbGQsR0FBR2loQyxHQUFHL2pDLEVBQUUrb0QsT0FBT2ptRCxJQUFJLEtBQUtBLEVBQUU0TixFQUFFbFksRUFBRW8wQyxVQUFVcDBDLEVBQUV3SCxFQUFFNG9ELFFBQVFyc0QsUUFBUSxjQUFjd25DLEtBQUsvTyxTQUFTLHNCQUFzQjVzQixLQUFLLEtBQUssc0JBQXNCNVAsRUFBRWtMLElBQUlzeEIsU0FBU2gxQixFQUFFMm9ELFdBQVczdkMsS0FBSyxXQUFXeGdCLEdBQUd5dUIsVUFBVWpuQixFQUFFb3BELFVBQVU1d0QsRUFBRWcwRCxNQUFNLENBQUMxa0MsVUFBVWhsQixHQUFHLENBQUMsS0FBSyxRQUFRLFVBQVUsVUFBVSxRQUFRLFdBQVcraUMsUUFBUSxTQUFTN2xCLEdBQUd4bkIsRUFBRWcwRCxNQUFNeHNDLEdBQUdsZCxFQUFFK0QsS0FBSyxhQUFhbVosT0FBT2hnQixFQUFFNG5ELFFBQVFwdkQsRUFBRXN6RCxNQUFNbnlELE9BQU8sSUFBSW1KLEVBQUUrRCxLQUFLLHdCQUF3QnFOLFNBQVNsVSxFQUFFNm5ELFNBQVNydkQsRUFBRWcwRCxNQUFNM0UsUUFBUTN6QyxTQUFTbFUsRUFBRThuRCxTQUFTdHZELEVBQUVnMEQsTUFBTTFFLFFBQVE1ekMsU0FBUzFiLEVBQUVtbkIsUUFBUSxVQUFVbm5CLEVBQUVpMEQsV0FBV2owRCxFQUFFazBELE9BQU9sMEQsRUFBRXV6RCxZQUFZbmYsVUFBVSxTQUFTNXNCLEVBQUVsZCxHQUFHLElBQUk0TixFQUFFc1AsRUFBRStRLEtBQUs4NUIsS0FBSzdxQyxFQUFFK1EsS0FBSzFsQixNQUFNLE9BQU92SSxFQUFFdkcsUUFBUSxpQkFBaUIsU0FBU3lqQixFQUFFbGQsR0FBRyxJQUFJdEssRUFBRWtZLEVBQUU1TixHQUFHLE9BQU90SyxJQUFJdXJDLEVBQUUvakIsRUFBRXhuQixLQUFLNHpELFlBQVksU0FBU3BzQyxHQUFHLElBQUlsZCxFQUFFeE0sS0FBS2tDLEVBQUVrWSxFQUFFMVQsVUFBVWdqQixHQUFHdFAsRUFBRW5XLEtBQUsvQixFQUFFLFNBQVN3bkIsRUFBRXhuQixHQUFHLElBQUl3SCxFQUFFczNCLEVBQUV3TSxFQUFFYSxFQUFFanpCLEVBQUUsR0FBR2t6QixFQUFFLEdBQUdGLEVBQUUsR0FBR2gwQixFQUFFMVUsY0FBY3hELEdBQVFvc0MsR0FBSmx6QixFQUFFbFosR0FBTXU0QixNQUFNdjRCLEVBQUcsV0FBV2tZLEVBQUUxWSxLQUFLUSxJQUFJa1ksRUFBRWxZLEdBQUdtQixRQUFRcUcsRUFBRTBRLEVBQUVsWSxHQUFHa3NDLEVBQUUxa0MsRUFBRWdaLE9BQU80ckIsRUFBRSxZQUFZRixFQUFFQSxFQUFFanBDLFFBQVEsR0FBR21wQyxFQUFFLFdBQVdsMEIsRUFBRTFZLEtBQUs0c0MsR0FBR0EsRUFBRSxHQUFHbHpCLEVBQUV6WixJQUFJLFFBQVF5c0MsRUFBRUEsRUFBRXpzQyxJQUFJMnNDLEVBQUUzc0MsS0FBSytILEVBQUVvSSxLQUFLLFFBQVEsQ0FBQyxRQUFRLFNBQVMsUUFBUSxPQUFPLFVBQVV5OUIsUUFBUSxTQUFTN2xCLEdBQUdBLEtBQUswa0IsSUFBSUUsRUFBRTVrQixHQUFHMGtCLEVBQUUxa0IsTUFBTSxXQUFXMGtCLElBQUlFLEVBQUUvM0IsTUFBTSxDQUFDa3JDLE9BQU9yVCxFQUFFcVQsU0FBU25ULEVBQUUrbkIsTUFBTTNzRCxFQUFFMFIsRUFBRTFaLE1BQU0wWixFQUFFelosTUFBTXlaLEVBQUUxWixLQUFLLFNBQVMwWixFQUFFelosSUFBSU8sSUFBSWtaLEVBQUUsQ0FBQzFaLEtBQUssT0FBT0MsSUFBSU8sRUFBRSxJQUFJa1osRUFBRXFmLEtBQUtyZ0IsRUFBRWxWLFFBQU8sRUFBRyxHQUFHc0gsRUFBRWl1QixLQUFLNlQsR0FBR2wwQixFQUFFZzNDLFNBQVM2RSxXQUFXNzZDLEVBQUVxZixLQUFLcmdCLEVBQUVsVixRQUFPLEVBQUcsR0FBR2tXLEVBQUVxZixLQUFLcmYsRUFBRXFmLEtBQUs2NUIsU0FBU3R6QixFQUFFNWxCLEVBQUUxWixNQUFNMFosRUFBRXFmLEtBQUsvNEIsS0FBSzhyQyxFQUFFcHlCLEVBQUV6WixLQUFLLElBQUlxL0IsR0FBR3dNLElBQUlBLEVBQUUzZ0MsTUFBTSx3RkFBd0ZtMEIsRUFBRSxRQUFRd00sRUFBRTNnQyxNQUFNLHdCQUF3Qm0wQixFQUFFLE1BQU0sTUFBTXdNLEVBQUU4b0IsT0FBTyxLQUFLdDFCLEVBQUUsV0FBVzVsQixFQUFFMVosS0FBS3MvQixFQUFFNWxCLEVBQUVFLE1BQU05TyxFQUFFZ3BELE1BQU1ueUQsT0FBTytYLEVBQUVxZixLQUFLNDdCLFFBQVFqN0MsRUFBRXFmLEtBQUs0N0IsTUFBTWh6RCxlQUFlK1gsRUFBRXFmLEtBQUs0N0IsT0FBT2o3QyxFQUFFcWYsS0FBSzg3QixRQUFRbjdDLEVBQUVxZixLQUFLNDdCLFFBQVFqN0MsRUFBRXFmLEtBQUs4N0IsT0FBT243QyxFQUFFcWYsS0FBSzQ3QixNQUFNOWxELEtBQUssY0FBYzZLLEVBQUVxZixLQUFLODdCLFNBQVNuN0MsRUFBRXFmLEtBQUs4N0IsT0FBT2x6RCxlQUFlK1gsRUFBRXFmLEtBQUs4N0IsT0FBTyxhQUFhbjhDLEVBQUUxWSxLQUFLMFosRUFBRXFmLEtBQUt2VCxTQUFTOUwsRUFBRXFmLEtBQUt2VCxRQUFROUwsRUFBRXFmLEtBQUt2VCxRQUFRcm1CLE1BQU1xQixFQUFFLENBQUNzSyxFQUFFNE8sSUFBSSxZQUFZZ3pCLElBQUloekIsRUFBRXFmLEtBQUt2VCxRQUFRa25CLEVBQUVsbkIsU0FBUzlMLEVBQUVxZixLQUFLdlQsUUFBUTlMLEVBQUVxZixLQUFLdlQsVUFBVXVtQixFQUFFLEdBQUdyeUIsRUFBRXFmLEtBQUt2VCxRQUFRLEdBQUcsU0FBUzhaLEdBQWdDLEdBQTVCcU4sRUFBRWIsRUFBRWxtQyxNQUFNLE1BQU0sSUFBS2pFLFNBQVcrWCxFQUFFelosSUFBSTBzQyxFQUFFamdDLFFBQVFnTixFQUFFcWYsS0FBS3BxQixPQUFPZytCLEVBQUVqZ0MsU0FBVSxRQUFRZ04sRUFBRXFmLEtBQUtpM0IsWUFBa0QsRUFBdkN0M0MsRUFBRXhULFFBQVFvNkIsRUFBRSxDQUFDLE9BQU8sU0FBUyxVQUFhNWxCLEVBQUVxZixLQUFLKzJCLFNBQVEsRUFBR3AyQyxFQUFFcWYsS0FBS2kzQixVQUFTLEdBQUl0MkMsRUFBRXFmLEtBQUtpM0IsVUFBUyxHQUFJLFFBQVExd0IsSUFBSTVsQixFQUFFMVosS0FBSyxTQUFTMFosRUFBRXFmLEtBQUtxM0IsT0FBT0QsU0FBUSxHQUFJejJDLEVBQUVxZixLQUFLbTNCLFFBQVF4MkMsRUFBRXFmLEtBQUtyZ0IsRUFBRWxWLFFBQU8sRUFBR2tXLEVBQUVxZixLQUFLLENBQUM4MkIsUUFBUSxFQUFFQyxRQUFRLEVBQUVFLFNBQVMsRUFBRWhPLFNBQVMsRUFBRWdQLFVBQVUsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUVuaUIsTUFBTSxFQUFFdWpCLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxjQUFhLEVBQUdDLGlCQUFnQixFQUFHQyxlQUFjLEVBQUdDLGlCQUFnQixLQUFNN25ELEVBQUVncEQsTUFBTTEwRCxLQUFLc2EsTUFBTW83QyxVQUFVLFdBQVcsSUFBSS9vQixFQUFFenRDLEtBQUt5dEMsRUFBRWdwQixlQUFlaHBCLEVBQUV5b0IsTUFBTTFrQyxVQUFVakosR0FBRyxpQkFBaUIsd0JBQXdCLFNBQVNtQixHQUFHQSxFQUFFUixrQkFBa0JRLEVBQUVOLGlCQUFpQnFrQixFQUFFb2xCLE1BQU1ucEMsS0FBS25CLEdBQUcsaUNBQWlDLHVCQUF1QixTQUFTbUIsR0FBR0EsRUFBRVIsa0JBQWtCUSxFQUFFTixpQkFBaUJxa0IsRUFBRWlwQixhQUFhbnVDLEdBQUcsaUNBQWlDLHVCQUF1QixTQUFTbUIsR0FBR0EsRUFBRVIsa0JBQWtCUSxFQUFFTixpQkFBaUJxa0IsRUFBRW5oQyxTQUFTMDBCLEVBQUV6WSxHQUFHLGlDQUFpQyxTQUFTbUIsR0FBR0EsR0FBR0EsRUFBRStCLGVBQWUsV0FBVy9CLEVBQUUrQixjQUFjL3BCLEtBQUs0c0MsRUFBRSxXQUFXYixFQUFFd00sWUFBWXhNLEVBQUV5b0IsTUFBTVMsTUFBTWh4QyxPQUFPN0YsV0FBVyxXQUFXMnRCLEVBQUV5b0IsTUFBTVMsTUFBTW54QyxPQUFPaW9CLEVBQUV3TSxVQUFVLFFBQVF6TSxFQUFFamxCLEdBQUcsYUFBYSxTQUFTbUIsR0FBRyxJQUFJeG5CLEVBQUVrWSxFQUFFZzNDLFNBQVNoM0MsRUFBRWczQyxTQUFTNEUsY0FBYyxLQUFLOXpELEVBQUUwMEQsWUFBWTEwRCxFQUFFMGtDLFVBQVUxa0MsRUFBRTBrQyxRQUFRbk0sS0FBS3c0QixXQUFXNzRDLEVBQUVzUCxFQUFFbGtCLFFBQVE0NUIsU0FBUyx1QkFBdUJobEIsRUFBRXNQLEVBQUVsa0IsUUFBUTBVLEdBQUcxTixJQUFJdEssR0FBRyxVQUFVa1ksRUFBRXNQLEVBQUVsa0IsUUFBUWtmLElBQUksY0FBY3hpQixFQUFFZzBELE1BQU0xa0MsVUFBVTFjLElBQUk0VSxFQUFFbGtCLFFBQVFuQyxTQUFTcW1CLEVBQUVSLGtCQUFrQmhuQixFQUFFa1QsUUFBUTRyQixFQUFFckksVUFBVThVLEVBQUU5VSxXQUFXQyxXQUFXNlUsRUFBRTdVLGVBQWU0VSxFQUFFamxCLEdBQUcsYUFBYSxTQUFTbUIsR0FBRyxJQUFJbGQsRUFBRWloQyxFQUFFN0csUUFBUTFrQyxFQUFFd25CLEVBQUUyRCxTQUFTM0QsRUFBRXdFLE1BQU0sR0FBRzFoQixHQUFHQSxFQUFFaXVCLEtBQUtpcEIsV0FBV3RwQyxFQUFFc1AsRUFBRWxrQixRQUFRMFUsR0FBRyxXQUFXRSxFQUFFc1AsRUFBRWxrQixRQUFRMFUsR0FBRyxZQUFZLE9BQU8sSUFBSWhZLEdBQUcsS0FBS0EsR0FBR3duQixFQUFFTixzQkFBc0Jxa0IsRUFBRW9sQixNQUFNbnBDLElBQUksS0FBS3huQixHQUFHLEtBQUtBLEdBQUd3bkIsRUFBRU4sc0JBQXNCcWtCLEVBQUVpcEIsWUFBWSxLQUFLeDBELEdBQUcsS0FBS0EsR0FBR3duQixFQUFFTixzQkFBc0Jxa0IsRUFBRW5oQyxhQUFhbWhDLEVBQUVwa0IsUUFBUSxlQUFlSyxFQUFFeG5CLEtBQUt1ckMsRUFBRStuQixNQUFNL25CLEVBQUVnb0IsV0FBV2g3QixLQUFLZzNCLFdBQVdoa0IsRUFBRW9wQixtQkFBbUIsRUFBRXJwQixFQUFFamxCLEdBQUcsZ0pBQWdKLFdBQVdrbEIsRUFBRW9wQixtQkFBbUIsRUFBRXBwQixFQUFFcXBCLFFBQVFycEIsRUFBRXNwQixlQUFldHBCLEVBQUVxcEIsUUFBTyxJQUFLcnBCLEVBQUV1cEIsYUFBYXR0QyxFQUFFdXRDLFlBQVksV0FBV3hwQixFQUFFb3BCLHFCQUFxQnBwQixFQUFFb3BCLG9CQUFvQnBwQixFQUFFK25CLE1BQU0vbkIsRUFBRWdvQixXQUFXaDdCLEtBQUtnM0IsV0FBV2hrQixFQUFFcXBCLFFBQU8sRUFBR3JwQixFQUFFb3BCLG1CQUFtQixFQUFFcHBCLEVBQUV5cEIsaUJBQWlCLE9BQU9ULGFBQWEsV0FBc0J6MUIsRUFBRXBZLElBQUksa0NBQWtDNGtCLEVBQUU1a0IsSUFBSSxrQ0FBa0M1b0IsS0FBS2syRCxNQUFNMWtDLFVBQVU1SSxJQUFJLCtCQUE5RzVvQixLQUErSWczRCxlQUFldHRDLEVBQUV5dEMsY0FBaEtuM0QsS0FBZ0xnM0QsY0FBaExoM0QsS0FBZ01nM0QsYUFBYSxPQUFPTixTQUFTLFNBQVNodEMsR0FBRyxPQUFPMXBCLEtBQUtvMkQsT0FBT3AyRCxLQUFLNDFELFFBQVEsRUFBRWxzQyxJQUFJcGQsS0FBSyxTQUFTb2QsR0FBRyxPQUFPMXBCLEtBQUtvMkQsT0FBT3AyRCxLQUFLNDFELFFBQVEsRUFBRWxzQyxJQUFJMHNDLE9BQU8sU0FBUzFzQyxFQUFFbGQsR0FBSyxJQUFJOUMsRUFBRXMzQixFQUFFd00sRUFBRWEsRUFBRWp6QixFQUFFa3pCLEVBQUVGLEVBQUVHLEVBQUV2dUMsS0FBSzg0QixFQUFFeVYsRUFBRWluQixNQUFNbnlELE9BQU8sS0FBS2tyQyxFQUFFNm9CLFdBQVc3b0IsRUFBRXFvQixXQUFXcm9CLEVBQUU4b0IsYUFBYTlvQixFQUFFc25CLFVBQVUsQ0FBQyxHQUFHbnNDLEVBQUVvSyxTQUFTcEssRUFBRSxNQUFJc1gsRUFBRXVOLEVBQUUzSCxRQUFRMkgsRUFBRTNILFFBQVFuTSxLQUFLNGMsS0FBSzlJLEVBQUU5VCxLQUFLNGMsUUFBVTN0QixFQUFFLEdBQU1vUCxHQUFIcFAsR0FBTSxPQUFNLEVBQUcsR0FBR2hnQixFQUFFNmtDLEVBQUVzbkIsU0FBUyxPQUFPdG5CLEVBQUVzbkIsV0FBVy84QixFQUFFLElBQUlwdkIsR0FBRzZrQyxFQUFFNm9CLFdBQVcsQ0FBQyxHQUFHL29CLEVBQUVFLEVBQUUzSCxRQUFRMkgsRUFBRW1uQixVQUFVbm5CLEVBQUVrbkIsVUFBVWxuQixFQUFFb25CLFFBQVFwbkIsRUFBRXFuQixRQUFRcG9CLEVBQUVlLEVBQUUrb0IsWUFBWTV0QyxHQUFLLEVBQUZvUCxLQUFPa0ksR0FBVyxFQUFSd00sRUFBRWx5QixRQUFVaXpCLEVBQUUrb0IsWUFBWTV0QyxFQUFFLElBQUlzWCxHQUFHd00sRUFBRWx5QixNQUFNd2QsRUFBRSxJQUFJeVYsRUFBRStvQixZQUFZNXRDLEVBQUUsSUFBSTZrQixFQUFFM0gsUUFBUTRHLEVBQUVlLEVBQUVrbkIsVUFBVWpvQixFQUFFbHlCLE1BQU1pekIsRUFBRXFuQixRQUFRcG9CLEVBQUVoVixJQUFJK1YsRUFBRWxsQixRQUFRLGFBQWEzZixHQUFHNmtDLEVBQUVncEIsaUJBQWlCanBCLEVBQUVsMEIsRUFBRWczQyxTQUFTeGhCLGFBQWFwQyxFQUFFZ3FCLFFBQVFocUIsRUFBRXlPLFNBQVMsSUFBSTNOLEVBQUU1VyxNQUFNLElBQUk0VyxFQUFFeCtCLE9BQU8wOUIsRUFBRWdxQixPQUFPcDRCLFNBQVMscUJBQXFCb08sRUFBRWlxQixlQUFlaHFCLEVBQUVyekIsRUFBRTZ4QixVQUFVei9CLEdBQUdnaEMsRUFBRWlxQixlQUFlanJELEVBQUVBLEVBQUVnaEMsRUFBRS9TLEtBQUsvd0IsRUFBRSxvQkFBb0Isc0JBQXNCOEMsRUFBRXNuQixTQUFTdG5CLEVBQUUsSUFBSTlDLEVBQUUsT0FBTzhqQyxFQUFFL1MsS0FBS3czQixpQkFBaUJ6bEQsR0FBRytoQyxFQUFFMm5CLE1BQU0xa0MsVUFBVTlNLElBQUksc0JBQXNCbFksRUFBRSxNQUFNK2hDLEVBQUUybkIsTUFBTTFrQyxVQUFVdU4sWUFBWSxzQkFBc0I2TixFQUFFMkIsRUFBRTJuQixNQUFNMWtDLFdBQVcrYyxFQUFFMm5CLE1BQU0xa0MsVUFBVWtOLFNBQVMsb0JBQW9COE8sRUFBRWdxQixPQUFPOTRCLFNBQVMsMkJBQTJCNlAsRUFBRW1wQixVQUFVbHFCLFFBQVFlLEVBQUVzakIsVUFBVXozQyxFQUFFblcsS0FBS3NxQyxFQUFFc0UsT0FBTyxTQUFTbnBCLEVBQUVsZCxHQUFHNE4sRUFBRWczQyxTQUFTenRDLEtBQUtuWCxFQUFFZ3JELFVBQVVocUIsRUFBRWdxQixPQUFPejRCLFlBQVksaURBQWlETCxTQUFTLDJCQUEyQjhPLEVBQUV5TyxTQUFTN2dDLEVBQUVyVixLQUFLeXNCLE1BQU1nYixFQUFFZ3FCLE9BQU9wbEMsU0FBU2hZLEVBQUVuVyxLQUFLc3FDLEVBQUVzRSxPQUFPLFNBQVNucEIsRUFBRStqQixHQUFHLElBQUl2ckMsRUFBRXVyQyxFQUFFalYsSUFBSWdWLEVBQUVoVixJQUFJcGUsRUFBRWczQyxTQUFTajFCLFFBQVFzUixFQUFFK3BCLE9BQU8sQ0FBQzFuRCxJQUFJLEVBQUU0bkIsS0FBS3gxQixFQUFFa1osRUFBRWxaLEVBQUV1ckMsRUFBRWhULEtBQUs0MkIsUUFBUTdrRCxFQUFFLFdBQVdpaEMsRUFBRStwQixPQUFPOTVCLFdBQVcsU0FBU3FCLFlBQVksaURBQWlEME8sRUFBRWpWLE1BQU0rVixFQUFFcW5CLFVBQVVwb0IsRUFBRXlPLFNBQVEsRUFBRzFOLEVBQUV2VCxpQkFBaUJ1VCxFQUFFMm5CLE1BQU1TLE1BQU01N0MsV0FBVzJpQixXQUFXLFNBQVM4UCxFQUFFbXFCLFNBQVNwcEIsRUFBRXFwQixjQUFjcHFCLEdBQUdlLEVBQUVtcEIsVUFBVWxxQixHQUFHZSxFQUFFc2pCLFVBQVV4akIsRUFBRTdWLE1BQU1nVixFQUFFaFYsTUFBTTRWLEVBQUUsb0JBQW9CQyxFQUFFN1YsSUFBSWdWLEVBQUVoVixJQUFJLE9BQU8sWUFBWTZWLEVBQUVtcEIsT0FBT3o0QixZQUFZLGtHQUFrR3NQLEVBQUV3cEIsWUFBVyxFQUFHcnJELElBQUlnaEMsRUFBRXlPLFNBQVN6TyxFQUFFL1MsS0FBSzIzQixvQkFBb0I1a0IsRUFBRXlPLFFBQVE1TixFQUFFbXBCLE9BQU85NEIsU0FBUzBQLElBQUlBLEVBQUUscUJBQXFCQSxFQUFFLGdCQUFnQlosRUFBRS9TLEtBQUsyM0IsaUJBQWlCaDRDLEVBQUVnM0MsU0FBU2oxQixRQUFRa1MsRUFBRW1wQixPQUFPcHBCLEVBQUU1aEMsRUFBRSxXQUFXNmhDLEVBQUVtcEIsT0FBT3o0QixZQUFZcVAsR0FBRzFRLFdBQVcsaUJBQWlCNDVCLFlBQVksU0FBUzV0QyxHQUFHLElBQUlsZCxFQUFFaWhDLEVBQUV2ckMsRUFBRWxDLEtBQUssT0FBMEJ5dEMsR0FBbkJBLEVBQUUvakIsRUFBRXhuQixFQUFFc3pELE1BQU1ueUQsUUFBVyxFQUFFbkIsRUFBRXN6RCxNQUFNbnlELE9BQU9vcUMsRUFBRUEsR0FBR3ZyQyxFQUFFMndDLE9BQU9ucEIsSUFBSXhuQixFQUFFc3pELE1BQU0vbkIsS0FBS2poQyxFQUFFNE4sRUFBRSxzQ0FBc0NzVyxTQUFTeHVCLEVBQUVnMEQsTUFBTVMsT0FBT3owRCxFQUFFMndDLE9BQU9ucEIsR0FBR3RQLEVBQUVsVixRQUFPLEVBQUcsR0FBR2hELEVBQUVzekQsTUFBTS9uQixHQUFHLENBQUNqVixJQUFJOU8sRUFBRTh0QyxPQUFPaHJELEVBQUVtckQsVUFBUyxJQUFLejFELEVBQUU0MUQsWUFBWTUxRCxFQUFFMndDLE9BQU9ucEIsS0FBS3huQixFQUFFMndDLE9BQU9ucEIsSUFBSXF1QyxjQUFjLFNBQVNydUMsRUFBRWxkLEVBQUV0SyxHQUFHLElBQUl3SCxFQUFFczNCLEVBQUV3TSxFQUFFYSxFQUFFanpCLEVBQUVrekIsRUFBRXR1QyxLQUFLb3VDLEVBQUVFLEVBQUUxSCxRQUFRZ0csRUFBRXdCLEVBQUU0cEIsU0FBU3pwQixFQUFFemEsU0FBU3NhLEVBQUVvcEIsT0FBT3BsQyxRQUFRLElBQUkwRyxFQUFFaEYsU0FBU3NhLEVBQUVvcEIsT0FBTzNqQyxTQUFTLElBQUlxZixFQUFFOUUsRUFBRWhjLE1BQU16b0IsRUFBRXlrQyxFQUFFdmEsT0FBTyxTQUFTdWEsRUFBRTFzQyxNQUFNMHNDLEVBQUU2cEIsV0FBV3JyQixHQUFHMEIsRUFBRStvQixjQUFjajlDLEVBQUVnM0MsU0FBU3p0QyxLQUFLaXBCLEdBQUcwQixFQUFFK29CLGFBQVksRUFBRzN0QyxFQUFFQSxJQUFJK2pCLEVBQUUsR0FBR2MsRUFBRTdrQixFQUFFbGQsRUFBRUEsSUFBSWloQyxFQUFFLEdBQUczVSxFQUFFdHNCLEVBQStCNmhDLEVBQUU2RSxHQUEvQnhwQyxFQUFFMFEsRUFBRWczQyxTQUFTeGhCLGFBQWFoRCxJQUFTeGEsTUFBTWhYLEVBQUV6UixFQUFFRCxFQUFFbXFCLE9BQU9tTixFQUFFLEdBQUd1TixFQUFFLEdBQUcyRSxFQUFFMUYsRUFBRSxHQUFHMVUsRUFBRSxHQUFHbnZCLEVBQUk0a0MsRUFBRjJFLElBQTJCLEdBQXJCbFMsRUFBRXQzQixFQUFFZ3VCLEtBQUsyVyxHQUFHM2tCLEVBQUUya0IsRUFBRTNrQixNQUFTc1gsRUFBRSxHQUFHQSxFQUFFdU4sRUFBRTJFLElBQUlsUyxFQUFFdU4sRUFBRTJFLElBQU1wYSxFQUFGbnZCLElBQTBCLEdBQXBCNmpDLEVBQUU5akMsRUFBRW9HLElBQUlzTCxHQUFHNU8sRUFBRTRPLEVBQUU1TyxNQUFTZ2hDLEVBQUUsR0FBR0EsRUFBRTFVLEVBQUVudkIsSUFBSTZqQyxFQUFFMVUsRUFBRW52QixJQUFJMmtDLEVBQUU0cEIsYUFBYWhsQixFQUFFdnBDLEdBQUd5USxFQUFFZzNDLFNBQVNqMUIsUUFBUXlRLEVBQUUsQ0FBQzk4QixJQUFJMDlCLEVBQUU5VixLQUFLc0osRUFBRW0zQixPQUFPOXBCLEVBQUUrcEIsT0FBT2g5QyxHQUFHbFosR0FBRyxJQUFJLFdBQVdvc0MsRUFBRStvQixhQUFZLElBQUsvb0IsRUFBRStwQixXQUFXL3BCLEVBQUUrcEIsVUFBVUMsVUFBVWhxQixFQUFFK3BCLFVBQVUxMEMsU0FBUzQwQyxXQUFXLFNBQVM3dUMsR0FBRyxJQUFJbGQsRUFBRWloQyxFQUFFenRDLEtBQUtrQyxFQUFFdXJDLEVBQUU3RyxRQUFRbDlCLEVBQUV4SCxFQUFFODFELFNBQVMsU0FBUzkxRCxFQUFFUixNQUFNUSxFQUFFKzFELFdBQVd2dUQsR0FBRytqQyxFQUFFNHBCLGNBQWNqOUMsRUFBRWczQyxTQUFTenRDLEtBQUtqYSxHQUFHK2pDLEVBQUU0cEIsYUFBWSxFQUFHN3FELEVBQUVpaEMsRUFBRStxQixVQUFVdDJELEdBQUd1ckMsRUFBRXlxQixhQUFhMXJELEVBQUU0bEIsTUFBTTVsQixFQUFFcW5CLFFBQVF6WixFQUFFZzNDLFNBQVNqMUIsUUFBUXp5QixFQUFFLENBQUNvRyxJQUFJdEQsRUFBRXNELElBQUk0bkIsS0FBS2xyQixFQUFFa3JCLEtBQUt5Z0MsT0FBTzNyRCxFQUFFNGxCLE1BQU0xb0IsRUFBRTBvQixRQUFRZ21DLE9BQU81ckQsRUFBRXFuQixPQUFPbnFCLEVBQUVtcUIsVUFBVW5LLEdBQUcsSUFBSSxXQUFXK2pCLEVBQUU0cEIsYUFBWSxNQUFPbUIsVUFBVSxTQUFTOXVDLEdBQUcsSUFBSWxkLEVBQUVpaEMsRUFBRXZyQyxFQUFFd0gsRUFBRThqQyxFQUFTcHlCLEVBQUVzTyxFQUFFc3VDLFNBQVMxcEIsRUFBRTVrQixFQUFFMEksTUFBTWdjLEVBQUUxa0IsRUFBRW1LLE9BQU8rWSxFQUFFbGpCLEVBQUUrUSxLQUFLOUMsT0FBTyxTQUFTdmMsSUFBSUEsRUFBRS9YLFNBQVNpckMsSUFBSUYsS0FBSyxXQUFXaDBCLEVBQUUxWSxLQUFLa3JDLEtBQUtBLEVBQUUsQ0FBQ0EsRUFBRUEsSUFBSSxHQUFHQSxFQUFFdnBDLFNBQVN1cEMsRUFBRSxDQUFDQSxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLEtBQUs1TCxFQUFFNU8sUUFBUSxNQUFNd2EsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUlwZ0MsRUFBRXNuQixTQUE5TDl6QixLQUF5TWsyRCxNQUFNUyxNQUFNdmtDLFFBQVEsS0FBS3dhLEVBQUUsR0FBR0EsRUFBRSxJQUFJYSxFQUFFM1osU0FBL085ekIsS0FBMFBrMkQsTUFBTVMsTUFBTTlpQyxTQUFTLEtBQUsrWSxFQUFFLEdBQUdBLEVBQUUsSUFBSTFxQyxFQUFFNkQsS0FBSzAxQyxJQUFJLEVBQUVqdkMsRUFBRThoQyxFQUFFYixFQUFFVyxHQUFHMWtDLEVBQUUzRCxLQUFLNnRDLE1BQU0xeEMsRUFBRW9zQyxHQUFHZCxFQUFFem5DLEtBQUs2dEMsTUFBTTF4QyxFQUFFa3NDLEdBQUcsQ0FBQ3QrQixJQUFJL0osS0FBSzZ0QyxNQUFNLElBQUluRyxFQUFFRCxJQUFJWixFQUFFLEdBQUdsVixLQUFLM3hCLEtBQUs2dEMsTUFBTSxJQUFJcG5DLEVBQUU5QyxJQUFJa2pDLEVBQUUsR0FBR3hhLE1BQU0xb0IsRUFBRW1xQixPQUFPMlosS0FBS3lNLE9BQU8sV0FBVyxJQUFJdndCLEVBQUUxcEIsS0FBS29hLEVBQUVuVyxLQUFLeWxCLEVBQUVtcEIsT0FBTyxTQUFTcm1DLEVBQUU0TixHQUFHc1AsRUFBRW91QyxZQUFZMTlDLE1BQU0wOUMsWUFBWSxTQUFTcHVDLEdBQUcsSUFBVytqQixFQUFFL2pCLEVBQUVzdUMsU0FBU3ZxQixJQUFJL2pCLEVBQUUwSSxPQUFPMUksRUFBRW1LLFVBQVV6WixFQUFFZzNDLFNBQVN6dEMsS0FBSzhwQixHQUFHcnpCLEVBQUVnM0MsU0FBU3BaLGFBQWF2SyxFQUF0Rnp0QyxLQUEwRnc0RCxVQUFVOXVDLElBQUlBLEVBQUU4TyxNQUExR3g0QixLQUFrSDQxRCxTQUFsSDUxRCxLQUE2SGs0RCxnQkFBZ0J4dUMsRUFBRTh0QyxPQUFPbnVDLFFBQVEsV0FBOUpycEIsS0FBMktxcEIsUUFBUSxXQUFXSyxJQUFJd3VDLGFBQWEsU0FBU3h1QyxFQUFFbGQsR0FBRyxJQUFhOUMsRUFBTDFKLEtBQVNrMkQsTUFBTTFrQyxVQUFVdU4sWUFBWSxtRkFBckMvK0IsS0FBMEg0bUMsVUFBMUg1bUMsS0FBc0k0MkQsWUFBdEk1MkQsS0FBb0p5NEQsY0FBYy91RCxFQUFFZzFCLFNBQVMseUJBQTBCaFYsSUFBSStqQixHQUFHamhDLElBQUlpaEMsRUFBRS9qQixFQUFwTjFwQixLQUF3TjRtQyxRQUFReFUsT0FBTzVsQixFQUF2T3hNLEtBQTJPNG1DLFFBQVEvUyxPQUFuUDd6QixLQUE0UDA0RCxnQkFBaUJodkQsRUFBRWcxQixTQUFTLHVCQUF4UjErQixLQUFpVDRtQyxRQUFRbk0sS0FBS2dXLE1BQU0vbUMsRUFBRWcxQixTQUFTLHFCQUFxQmgxQixFQUFFZzFCLFNBQVMseUJBQS9XMStCLEtBQTBZNG1DLFFBQVFuTSxLQUFLZ1csT0FBTy9tQyxFQUFFZzFCLFNBQVMsdUJBQXVCKzVCLFdBQVcsV0FBVyxJQUFJL3VDLEVBQVMrakIsRUFBTHp0QyxLQUFTNG1DLFFBQVEsR0FBRzZHLElBQXBCenRDLEtBQTBCNDJELFVBQVUsU0FBUyxVQUFVbnBCLEVBQUUvckMsTUFBTStyQyxFQUFFa3FCLFdBQVdscUIsRUFBRXdxQixXQUFXLFNBQVN4cUIsRUFBRWhULEtBQUt1NUIsY0FBYzU1QyxFQUFFN1ksV0FBV2tzQyxFQUFFaFQsS0FBS3U1QixlQUFlLFNBQVN2bUIsRUFBRWhULEtBQUt1NUIsYUFBYXZtQixNQUFNL2pCLEVBQTdMMXBCLEtBQWlNdzRELFVBQVUvcUIsR0FBR0EsRUFBRXJiLE1BQU0xSSxFQUFFMEksT0FBT3FiLEVBQUU1WixPQUFPbkssRUFBRW1LLFVBQVU2a0MsYUFBYSxXQUFXLElBQVdsc0QsRUFBTHhNLEtBQVM0bUMsUUFBUTZHLEVBQUVqaEMsRUFBRXdyRCxTQUFTOTFELEdBQUUsRUFBRyxPQUFPdXJDLElBQWlDdnJDLEdBQTdCQSxFQUFFa1ksRUFBRWczQyxTQUFTeGhCLGFBQWFuQyxJQUFPcmIsTUFBTTVsQixFQUFFNGxCLE9BQU9sd0IsRUFBRTJ4QixPQUFPcm5CLEVBQUVxbkIsUUFBUTN4QixHQUFHeTJELE9BQU8sV0FBVyxJQUFXbnNELEVBQUx4TSxLQUFTNG1DLFFBQVF4c0IsRUFBRTVOLEVBQUV3ckQsU0FBU3ZxQixHQUFFLEVBQUcsT0FBT3J6QixJQUFJcXpCLEVBQTlDenRDLEtBQWtEdzRELFVBQVVoc0QsR0FBR2loQyxFQUE4QixFQUE1QjFuQyxLQUFLaXZDLElBQUk1NkIsRUFBRWdZLFFBQVFxYixFQUFFcmIsUUFBd0MsRUFBOUJyc0IsS0FBS2l2QyxJQUFJNTZCLEVBQUV5WixTQUFTNFosRUFBRTVaLFNBQVc0WixHQUFHaXFCLFVBQVUsU0FBU2h1QyxHQUFHLElBQUlsZCxFQUFFaWhDLEVBQUV2ckMsRUFBRXdILEVBQUUxSixLQUFLLElBQUkwcEIsRUFBRWt2QyxZQUFZbHZDLEVBQUVpdUMsU0FBUyxDQUFDLE9BQU9qdUMsRUFBRWt2QyxXQUFVLEVBQUdsdkQsRUFBRTJmLFFBQVEsYUFBYUssR0FBR2xkLEVBQUVrZCxFQUFFaG9CLE1BQUsrckMsRUFBRS9qQixFQUFFOHRDLFFBQVM1dUMsSUFBSSxXQUFXUyxRQUFRLFdBQVdxVixTQUFTLG9CQUFvQmx5QixHQUFHLFlBQVlreUIsU0FBU2hWLEVBQUUrUSxLQUFLcVksWUFBWXRtQyxHQUFHLElBQUksUUFBUTlDLEVBQUVtdkQsU0FBU252QyxHQUFHLE1BQU0sSUFBSSxTQUFTaGdCLEVBQUVvdkQsVUFBVXB2QyxHQUFHLE1BQU0sSUFBSSxPQUFPaGdCLEVBQUVxdkQsV0FBV3J2QyxFQUFFQSxFQUFFL25CLEtBQUsrbkIsRUFBRTFOLFNBQVMsTUFBTSxJQUFJLFNBQVM1QixFQUFFc1AsRUFBRS9uQixLQUFLMEIsT0FBT3FHLEVBQUVxdkQsV0FBV3J2QyxFQUFFdFAsRUFBRXNQLEVBQUUvbkIsTUFBTStILEVBQUVzdkQsU0FBU3R2QyxHQUFHLE1BQU0sSUFBSSxPQUFPaGdCLEVBQUV1dkQsWUFBWXZ2QyxHQUFHeG5CLEVBQUVrWSxFQUFFNnBCLEtBQUs3cEIsRUFBRWxWLE9BQU8sR0FBR3drQixFQUFFK1EsS0FBS3dKLEtBQUtILFNBQVMsQ0FBQ2YsSUFBSXJaLEVBQUUvbkIsSUFBSXFrQyxRQUFRLFNBQVN4NUIsRUFBRTROLEdBQUcsWUFBWUEsR0FBRzFRLEVBQUVxdkQsV0FBV3J2QyxFQUFFbGQsSUFBSXJHLE1BQU0sU0FBU3FHLEVBQUU0TixHQUFHNU4sR0FBRyxVQUFVNE4sR0FBRzFRLEVBQUVzdkQsU0FBU3R2QyxPQUFPK2pCLEVBQUVobEIsSUFBSSxVQUFVLFdBQVd2bUIsRUFBRXFqQyxVQUFVLE1BQU0sUUFBUTc3QixFQUFFc3ZELFNBQVN0dkMsR0FBRyxPQUFNLElBQUttdkMsU0FBUyxTQUFTcnNELEdBQUcsSUFBSWloQyxFQUFFdnJDLEVBQUV3SCxFQUFFczNCLEVBQUV3TSxFQUFFeHRDLEtBQUtxdUMsRUFBRTdoQyxFQUFFaXVCLEtBQUtsa0IsTUFBTWtyQyxPQUFPLEdBQUdwVCxFQUFFLENBQUMza0MsRUFBRWdnQixFQUFFMnhCLGtCQUFrQixFQUFFcmEsRUFBRXRYLEVBQUUyMkIsV0FBVzMyQyxHQUFFeEgsRUFBRW1zQyxFQUFFL21DLE1BQU0sS0FBS25ELElBQUksU0FBU3VsQixHQUFHLElBQUlsZCxFQUFFLEdBQUcsT0FBT2tkLEVBQUV5aUIsT0FBTzdrQyxNQUFNLE9BQU9pb0MsUUFBUSxTQUFTN2xCLEVBQUV0UCxHQUFHLElBQUlxekIsRUFBRTNaLFNBQVNwSyxFQUFFd3ZDLFVBQVUsRUFBRXh2QyxFQUFFcm1CLE9BQU8sR0FBRyxJQUFJLE9BQU8sSUFBSStXLEVBQUU1TixFQUFFdTJCLElBQUlyWixPQUFPK2pCLElBQUlqaEMsRUFBRXRGLE1BQU11bUMsRUFBRWpoQyxFQUFFMnNELFFBQVF6dkMsRUFBRUEsRUFBRXJtQixPQUFPLE9BQU9tSixLQUFNeEgsS0FBSyxTQUFTMGtCLEVBQUVsZCxHQUFHLE9BQU9rZCxFQUFFeGlCLE1BQU1zRixFQUFFdEYsUUFBUSxJQUFJLElBQUlrVSxFQUFFLEVBQUVBLEVBQUVsWixFQUFFbUIsT0FBTytYLElBQUksQ0FBQyxJQUFJa3pCLEVBQUVwc0MsRUFBRWtaLEdBQUcsR0FBRyxNQUFNa3pCLEVBQUU2cUIsU0FBUzdxQixFQUFFcG5DLE9BQU84NUIsR0FBRyxNQUFNc04sRUFBRTZxQixTQUFTN3FCLEVBQUVwbkMsT0FBT3dDLEVBQUUsQ0FBQytqQyxFQUFFYSxFQUFFLFFBQVFiLEdBQUd2ckMsRUFBRW1CLFNBQVNvcUMsRUFBRXZyQyxFQUFFQSxFQUFFbUIsT0FBTyxJQUFJb3FDLElBQUlqaEMsRUFBRTdLLElBQUk4ckMsRUFBRTFLLElBQUl2MkIsRUFBRTRsQixPQUFPNWxCLEVBQUVxbkIsUUFBUSxLQUFLNFosRUFBRTByQixVQUFVM3NELEVBQUVxbkIsT0FBT3JuQixFQUFFNGxCLE1BQU01bEIsRUFBRXFuQixPQUFPNFosRUFBRXZtQyxNQUFNc0YsRUFBRTRsQixNQUFNcWIsRUFBRXZtQyxRQUFRc0YsRUFBRXdyRCxTQUFTNTlDLEVBQUUsMkNBQTJDc2tCLFNBQVMsc0JBQXNCaE8sU0FBU2xrQixFQUFFZ3JELFNBQXlCLElBQWpCaHJELEVBQUVpdUIsS0FBS28zQixTQUFjcmxELEVBQUVpdUIsS0FBS3JJLE9BQU81bEIsRUFBRWl1QixLQUFLNUcsU0FBU3JuQixFQUFFaXVCLEtBQUsyK0IsT0FBTzVzRCxFQUFFaXVCLEtBQUs4N0IsU0FBUy9wRCxFQUFFNGxCLE1BQU01bEIsRUFBRWl1QixLQUFLckksTUFBTTVsQixFQUFFcW5CLE9BQU9ybkIsRUFBRWl1QixLQUFLNUcsT0FBT3JuQixFQUFFNnNELE9BQU9qL0MsRUFBRSxXQUFXcU8sSUFBSSxRQUFRLFdBQVdyTyxFQUFFcGEsTUFBTTRkLFNBQVNwUixFQUFFNnNELE9BQU8sS0FBSzdyQixFQUFFOHJCLFlBQVk5c0QsS0FBS2ljLElBQUksT0FBTyxXQUFXK2tCLEVBQUVpbUIsVUFBVWpuRCxHQUFHZ2hDLEVBQUU4ckIsWUFBWTlzRCxLQUFLa3lCLFNBQVMsa0JBQWtCaE8sU0FBU2xrQixFQUFFd3JELFVBQVVsbUQsS0FBSyxNQUFNdEYsRUFBRWl1QixLQUFLMitCLE9BQU81c0QsRUFBRWl1QixLQUFLODdCLE9BQU96a0QsS0FBSyxTQUFTMDdCLEVBQUU4ckIsWUFBWTlzRCxJQUFJOHNELFlBQVksU0FBUzV2QyxHQUFHLElBQUlsZCxFQUFFeE0sS0FBS3l0QyxFQUFFcnpCLEVBQUUsV0FBV3NQLEVBQUU2dkMsT0FBTzlyQixFQUFFaGxCLElBQUksUUFBUSxXQUFXamMsRUFBRXdzRCxTQUFTdHZDLEtBQUtqQixJQUFJLE9BQU8sV0FBVzRVLGFBQWEzVCxFQUFFOHZDLFNBQVM5dkMsRUFBRTh2QyxRQUFRLEtBQUtodEQsRUFBRW9xRCxZQUFZbHRDLEVBQUUwSSxNQUFNcHlCLEtBQUt5NUQsYUFBYS92QyxFQUFFbUssT0FBTzd6QixLQUFLMDVELGNBQWNod0MsRUFBRStRLEtBQUtsa0IsTUFBTWtyQyxRQUFRaFUsRUFBRTM3QixLQUFLLFFBQVEsU0FBU0EsS0FBSyxTQUFTNFgsRUFBRStRLEtBQUtsa0IsTUFBTWtyQyxRQUFRajFDLEVBQUVtdEQsWUFBWWp3QyxHQUFHQSxFQUFFMnZDLE9BQU8zdkMsRUFBRTh2QyxRQUFRMTVDLFdBQVcsV0FBVzRKLEVBQUU4dkMsUUFBUSxLQUFLOXZDLEVBQUUydkMsT0FBTzF6QyxRQUFRNWYsS0FBSzAxQyxJQUFJLElBQUkxMUMsS0FBS2l2QixJQUFJLElBQUl0TCxFQUFFbUssT0FBTyxRQUFRcm5CLEVBQUVpbkQsVUFBVS9wQyxNQUFNZ1YsU0FBUyxrQkFBa0I1c0IsS0FBSyxNQUFNNFgsRUFBRS9uQixLQUFLK3VCLFNBQVNoSCxFQUFFc3VDLFVBQVV2cUIsRUFBRSxHQUFHelMsU0FBU3lTLEVBQUVwa0IsUUFBUSxRQUFRb2tCLEVBQUUsR0FBR3RuQyxNQUFNc25DLEVBQUVwa0IsUUFBUSxTQUFTSyxFQUFFOHZDLFFBQVExNUMsV0FBVyxXQUFXMnRCLEVBQUUsR0FBR3pTLFVBQVV0UixFQUFFdXVDLFVBQVV6ckQsRUFBRXlzRCxZQUFZdnZDLElBQUksTUFBTW92QyxVQUFVLFNBQVNwdkMsR0FBRyxJQUFJbGQsRUFBRXRLLEVBQUVsQyxLQUFLMEosRUFBRWdnQixFQUFFK1EsS0FBS3EzQixPQUFPOXdCLEVBQUV0WCxFQUFFOHRDLE9BQU85dEMsRUFBRXN1QyxTQUFTNTlDLEVBQUUsZ0NBQWdDMVEsRUFBRW1vRCxRQUFRLHNCQUFzQixJQUFJLFlBQVludEMsSUFBSWhiLEVBQUVnYixLQUFLZ00sU0FBU3NRLEdBQUd4MEIsRUFBRTROLEVBQUUxUSxFQUFFcW9ELElBQUk5ckQsUUFBUSxZQUFZLElBQUkrQyxNQUFNczhDLFlBQVl4ekMsS0FBS3BJLEVBQUVvSSxNQUFNNGUsU0FBU2hILEVBQUVzdUMsVUFBVXR1RCxFQUFFbW9ELFNBQVMzdkQsRUFBRSsyRCxZQUFZdnZDLEdBQUdsZCxFQUFFK2IsR0FBRyxtQkFBbUIsU0FBUy9iLEdBQUd4TSxLQUFLa0csUUFBUSxFQUFFd2pCLEVBQUU4dEMsT0FBT251QyxRQUFRLFdBQVdubkIsRUFBRXV4RCxVQUFVL3BDLEtBQUtzWCxFQUFFelksR0FBRyxhQUFhLFdBQVcsSUFBTXJtQixFQUFFOCtCLEVBQUV3TSxFQUFFYSxFQUFFanpCLEVBQUVzTyxFQUFFc3VDLFNBQVMsR0FBRyxJQUFJeHJELEVBQUUsR0FBR3RHLFFBQVEsQ0FBQyxJQUFtQmhFLEVBQWJzSyxFQUFFd08sV0FBZXpLLEtBQUssUUFBUSxNQUFNbVosSUFBSXhuQixHQUFHQSxFQUFFbUIsU0FBU3FHLEVBQUVnYixJQUFJME4sUUFBUXFiLEdBQUcvakMsRUFBRWdiLElBQUltUCxTQUFTNFosS0FBS3pNLEVBQUV4MEIsRUFBRSxHQUFHb3RELGNBQWNoNkQsU0FBUzhQLGdCQUFnQm1xRCxZQUFZcnNCLEVBQUV6bkMsS0FBSzB2QixLQUFLdnpCLEVBQUU0c0MsWUFBVyxJQUFLMXpCLEVBQUVnWCxRQUFRNE8sSUFBSXFOLEVBQUV0b0MsS0FBSzB2QixLQUFLdnpCLEVBQUU2c0MsYUFBWSxJQUFLM3pCLEVBQUVzSixJQUFJLENBQUMwTixNQUFNMW9CLEVBQUVnYixJQUFJME4sUUFBUXFiLEVBQUVELEdBQUdweUIsRUFBRTB6QixhQUFhMXpCLEVBQUVpbEMsY0FBYzMyQyxFQUFFZ2IsSUFBSTBOLE1BQU15QixPQUFPbnFCLEVBQUVnYixJQUFJbVAsU0FBUzRaLEVBQUVZLEdBQUdqekIsRUFBRTJ6QixjQUFjM3pCLEVBQUV3b0MsZUFBZWw2QyxFQUFFZ2IsSUFBSW1QLFVBQVV6WSxFQUFFMmpCLFlBQVksMEJBQTBCLytCLEtBQUt5ekQsVUFBVS9wQyxHQUFHbGQsRUFBRXNGLEtBQUssTUFBTTRYLEVBQUUvbkIsTUFBdUIsSUFBbEIrbkIsRUFBRStRLEtBQUtpM0IsVUFBZWhvQyxFQUFFc3VDLFNBQVM1bkMsUUFBUWx1QixFQUFFbzBDLFVBQVU1c0IsRUFBRUEsRUFBRStRLEtBQUtnNEIsT0FBT2YsV0FBVzF3QixFQUFFdlksSUFBSSxVQUFVLFdBQVcsSUFBSXJPLEVBQUVwYSxNQUFNdVEsS0FBSyxVQUFVb1YsT0FBTzdULEtBQUssTUFBTSxpQkFBaUIsTUFBTTRYLElBQUl0UCxFQUFFcGEsTUFBTTZWLFFBQVE2VCxFQUFFaXVDLFVBQVMsS0FBTW9CLFdBQVcsU0FBU3J2QyxFQUFFbGQsR0FBRyxJQUF2MmNrZCxFQUE2MmMxcEIsS0FBTzQyRCxZQUFQNTJELEtBQXFCMjVELFlBQVlqd0MsR0FBR0EsRUFBRTh0QyxPQUFPM2hELFNBQTE1YzZULEVBQW82Y2xkLElBQXY1Y2tkLEVBQUV2b0IsZ0JBQWdCdW9CLGFBQWF0UCxHQUE0M2M1TixFQUFFMEgsU0FBUzdRLFFBQVFtSixFQUFFMEgsT0FBTywyQkFBMkJtVixRQUFRLFdBQVdLLEVBQUVvd0MsYUFBYTEvQyxFQUFFLGVBQWV1TCxPQUFPaUwsWUFBWXBrQixHQUFHQSxFQUFFa1ksSUFBSSxVQUFVLGlCQUFpQmdGLEVBQUV1dUMsV0FBVyxXQUFXNzlDLEVBQUUxWSxLQUFLOEssSUFBK0MsS0FBMUNBLEVBQUU0TixFQUFFLFNBQVMrVixPQUFPL1YsRUFBRSt4QixLQUFLMy9CLElBQUl3TyxZQUFpQixHQUFHeFosV0FBV2dMLEVBQUU0TixFQUFFLFNBQVNxVixLQUFLampCLElBQUtrZCxFQUFFK1EsS0FBS3BxQixTQUFTN0QsRUFBRTROLEVBQUUsU0FBU3FWLEtBQUtqakIsR0FBRytELEtBQUttWixFQUFFK1EsS0FBS3BxQixVQUFVcVosRUFBRTh0QyxPQUFPL3VDLElBQUksVUFBVSxXQUFXaUIsRUFBRW93QyxlQUFlcHdDLEVBQUVvd0MsYUFBYXZwQyxNQUFNL2pCLEVBQUVtWixRQUFRL0gsU0FBUzhMLEVBQUVvd0MsYUFBYSxNQUFNcHdDLEVBQUVxd0MsWUFBWXJ3QyxFQUFFcXdDLFVBQVVuOEMsU0FBUzhMLEVBQUVxd0MsVUFBVSxNQUFNcndDLEVBQUV1dUMsV0FBVzc5QyxFQUFFcGEsTUFBTTZWLFFBQVE2VCxFQUFFaXVDLFVBQVMsS0FBTWp1QyxFQUFFc3VDLFNBQVM1OUMsRUFBRTVOLEdBQUdra0IsU0FBU2hILEVBQUU4dEMsUUFBUTl0QyxFQUFFK1EsS0FBS2kzQixXQUFXaG9DLEVBQUVxd0MsWUFBWXJ3QyxFQUFFcXdDLFVBQVUzL0MsRUFBbHJCcGEsS0FBc3JCczJDLFVBQVU1c0IsRUFBRUEsRUFBRStRLEtBQUtnNEIsT0FBT2YsV0FBV2hoQyxTQUFTaEgsRUFBRXN1QyxXQUFXaDRELEtBQUt5ekQsVUFBVS9wQyxLQUFLc3ZDLFNBQVMsU0FBU3R2QyxHQUFHQSxFQUFFdXVDLFVBQVMsRUFBR3Z1QyxFQUFFOHRDLE9BQU96NEIsWUFBWSxtQkFBbUJyVixFQUFFaG9CLE1BQU0xQixLQUFLKzRELFdBQVdydkMsRUFBRTFwQixLQUFLczJDLFVBQVU1c0IsRUFBRUEsRUFBRStRLEtBQUsrM0IsWUFBWXlHLFlBQVksU0FBU3Z2QyxJQUFjQSxFQUFFQSxHQUFQMXBCLEtBQVk0bUMsV0FBWWxkLEVBQUVzd0MsV0FBV3R3QyxFQUFFc3dDLFNBQVM1L0MsRUFBaERwYSxLQUFvRHk2QixLQUFLODNCLFlBQVk3aEMsU0FBU2hILEVBQUU4dEMsVUFBVW1DLFlBQVksU0FBU2p3QyxJQUFjQSxFQUFFQSxHQUFQMXBCLEtBQVk0bUMsVUFBV2xkLEVBQUVzd0MsV0FBV3R3QyxFQUFFc3dDLFNBQVNwOEMsZ0JBQWdCOEwsRUFBRXN3QyxXQUFXdkcsVUFBVSxTQUFTL3BDLEdBQVMxcEIsS0FBTzQyRCxZQUFZbHRDLEVBQUVrdkMsV0FBVSxFQUFHbHZDLEVBQUVpdUMsVUFBUyxFQUE3QzMzRCxLQUFrRHFwQixRQUFRLFlBQVlLLEdBQXRFMXBCLEtBQTJFMjVELFlBQVlqd0MsR0FBR0EsRUFBRStRLEtBQUtrM0IsU0FBU2pvQyxFQUFFc3VDLFdBQVd0dUMsRUFBRXV1QyxXQUFXdnVDLEVBQUVzdUMsU0FBU3p2QyxHQUFHLGlCQUFpQixTQUFTbUIsR0FBRyxPQUFPLEdBQUdBLEVBQUUzVCxRQUFRMlQsRUFBRU4sa0JBQWlCLElBQUssVUFBVU0sRUFBRWhvQixNQUFNMFksRUFBRSwwQ0FBMENzVyxTQUFTaEgsRUFBRXN1QyxXQUFwU2g0RCxLQUFpVDQzRCxjQUFjbHVDLEtBQUtrdUMsY0FBYyxTQUFTbHVDLEdBQUcsSUFBSWxkLEVBQUV0SyxFQUFFd0gsRUFBRXMzQixFQUFFd00sRUFBRWEsRUFBRXJ1QyxLQUFLb2IsRUFBRXNPLEVBQUU4dEMsT0FBT2xwQixHQUFFLEVBQUcsT0FBTzloQyxFQUFFa2QsRUFBRStRLEtBQUs0VCxFQUFFd25CLFNBQVMsa0JBQWtCLG9CQUFvQm5zRCxFQUFFZ2dCLEVBQUUrUSxLQUFLNFQsRUFBRXduQixTQUFTLG9CQUFvQixzQkFBc0Juc0QsRUFBRW9xQixTQUFTcEssRUFBRSt0QyxpQkFBaUJocUIsRUFBRS9qQyxFQUFFZ2dCLEVBQUUrdEMsZUFBZSxLQUFLL3RDLEVBQUV1eUIsU0FBU3Z5QixFQUFFOE8sTUFBTTZWLEVBQUV1bkIsU0FBU2xzRCxJQUFJOEMsR0FBRSxHQUFJLFNBQVNBLEdBQUdrZCxFQUFFOE8sTUFBTTZWLEVBQUV1bkIsU0FBU2xzRCxHQUFHLFVBQVVnZ0IsRUFBRWhvQixPQUFPZ29CLEVBQUV1dUMsV0FBVzNwQixFQUFFRCxFQUFFNHJCLFlBQVl2d0MsTUFBTWxkLEVBQUUsUUFBUSxTQUFTQSxJQUFHZ2hDLEVBQUVhLEVBQUVtcUIsVUFBVTl1QyxJQUFLeXVDLE9BQU9weUQsS0FBS3lzQixNQUFNZ2IsRUFBRXBiLE1BQU1rYyxFQUFFbGMsTUFBTSxLQUFLLElBQUlvYixFQUFFNHFCLE9BQU9yeUQsS0FBS3lzQixNQUFNZ2IsRUFBRTNaLE9BQU95YSxFQUFFemEsT0FBTyxLQUFLLFdBQVcyWixFQUFFcGIsYUFBYW9iLEVBQUUzWixPQUE0QixTQUFyQm1OLEVBQUV0WCxFQUFFK1EsS0FBSzAzQixlQUF3Qm54QixFQUE4QyxHQUE1Q2o3QixLQUFLaXZDLElBQUl0ckIsRUFBRTBJLE1BQU0xSSxFQUFFbUssT0FBT3lhLEVBQUVsYyxNQUFNa2MsRUFBRXphLFNBQVltTixJQUFJc04sRUFBRXJZLFFBQVEsR0FBR3VYLEVBQUV2WCxRQUFRLEdBQUc3YixFQUFFZzNDLFNBQVNwWixhQUFhdHVCLEVBQUVzdUMsU0FBU2o1QixZQUFZLHNCQUFzQnVQLEdBQUcxQixFQUFFbGpCLEVBQUVzdUMsZUFBZTU5QyxFQUFFZzNDLFNBQVNqMUIsUUFBUXpTLEVBQUVzdUMsU0FBU3hxQixFQUFFOWpDLEVBQUUsV0FBVzJrQyxFQUFFclQsZUFBZXFULEVBQUV5cEIsWUFBWXB1QyxHQUFHbGQsR0FBRzROLEVBQUVnM0MsU0FBU3p0QyxLQUFLdkksR0FBR2xaLEVBQUUsc0NBQXNDd25CLEVBQUU4TyxJQUFJNlYsRUFBRXNuQixRQUFRLE9BQU8sWUFBWSxnQkFBZ0JucEQsRUFBRTRPLEVBQUVzaUIsV0FBVyxTQUFTcUIsWUFBWSx5RUFBeUVMLFNBQVN4OEIsR0FBR3duQixFQUFFc3VDLFNBQVNqNUIsWUFBWSxzQkFBc0I2TixFQUFFeHhCLFFBQVFoQixFQUFFZzNDLFNBQVNqMUIsUUFBUS9nQixFQUFFLDBCQUEwQjFSLEVBQUUsU0FBUzhDLEdBQUc0TyxFQUFFMmpCLFlBQVk3OEIsR0FBR3c3QixXQUFXLFNBQVNoVSxFQUFFOE8sTUFBTTZWLEVBQUV1bkIsU0FBU3ZuQixFQUFFclQsYUFBWSxLQUFNNFIsRUFBRXh4QixHQUFHc08sRUFBRXN1QyxTQUFTajVCLFlBQVksMkJBQTJCclYsRUFBRThPLE1BQU02VixFQUFFdW5CLFNBQVN2bkIsRUFBRXJULGVBQWVpL0IsWUFBWSxTQUFTeHNCLEdBQUcsSUFBSXZyQyxFQUFTOCtCLEdBQUUsRUFBd2RxTixFQUFFWixFQUFFaFQsS0FBSzg3QixPQUFPbjdDLEVBQUVpekIsRUFBRUEsRUFBRXBFLFNBQVMsRUFBRSxPQUFPN3VCLEdBQUdpekIsRUFBRSxHQUFHcGhDLGdCQUFnQlQsR0FBbmhCLFNBQVNBLEdBQUcsSUFBSSxJQUFNdEssRUFBRXNLLEVBQUUsR0FBRzlDLEVBQUV4SCxFQUFFczFCLHdCQUF3QndKLEVBQUUsR0FBRyxPQUFPOStCLEVBQUVnNEQsZUFBZSxXQUFXOS9DLEVBQUVsWSxFQUFFZzRELGVBQWV4MUMsSUFBSSxhQUFhLFNBQVN0SyxFQUFFbFksRUFBRWc0RCxlQUFleDFDLElBQUksYUFBYXNjLEVBQUVsZ0MsS0FBS29CLEVBQUVnNEQsY0FBYzFpQyx5QkFBeUJ0MUIsRUFBRUEsRUFBRWc0RCxjQUFjLE9BQVNsNUIsRUFBRW01QixNQUFNLFNBQVN6d0MsR0FBRyxJQUFJbGQsRUFBRXpHLEtBQUswMUMsSUFBSS94QyxFQUFFeW9CLE1BQU16SSxFQUFFeUksT0FBT3BzQixLQUFLaXZCLElBQUl0ckIsRUFBRWd1QixLQUFLaE8sRUFBRWdPLE1BQU10ZCxFQUFFclUsS0FBSzAxQyxJQUFJL3hDLEVBQUUwd0QsT0FBTzF3QyxFQUFFMHdDLFFBQVFyMEQsS0FBS2l2QixJQUFJdHJCLEVBQUVvRyxJQUFJNFosRUFBRTVaLEtBQUssT0FBUyxFQUFGdEQsR0FBTyxFQUFGNE4sS0FBa0IsRUFBVDFRLEVBQUUwd0QsUUFBa0IsRUFBUjF3RCxFQUFFeW9CLE9BQVN6b0IsRUFBRWd1QixLQUFLdGQsRUFBRXNQLEdBQUcwSSxTQUFTMW9CLEVBQUVvRyxJQUFJc0ssRUFBRXNQLEdBQUdtSyxTQUE2RTJaLENBQUVhLEtBQUtuc0MsRUFBemlCbEMsS0FBNmlCazJELE1BQU1TLE1BQU0xc0IsU0FBU2pKLEVBQUUsQ0FBQ2x4QixJQUFJc0wsRUFBRXRMLElBQUk1TixFQUFFNE4sSUFBSTJpQixXQUFXNGIsRUFBRTNwQixJQUFJLHFCQUFxQixHQUFHZ1QsS0FBS3RjLEVBQUVzYyxLQUFLeDFCLEVBQUV3MUIsS0FBS2pGLFdBQVc0YixFQUFFM3BCLElBQUksc0JBQXNCLEdBQUcwTixNQUFNaWMsRUFBRWpjLFFBQVF5QixPQUFPd2EsRUFBRXhhLFNBQVNza0MsT0FBTyxFQUFFQyxPQUFPLElBQUlwM0IsR0FBR2hHLFNBQVMsV0FBVyxJQUFJdFIsRUFBRTFwQixLQUFLeXRDLEVBQUUvakIsRUFBRWtkLFFBQVExa0MsRUFBRSxHQUFHdXJDLEVBQUV3TyxVQUFVeE8sRUFBRWtxQixVQUFVbHFCLEVBQUVvcUIsYUFBYXBxQixFQUFFb3FCLFlBQVcsRUFBR3BxQixFQUFFK3BCLE9BQU9yOUMsV0FBV2tQLFFBQVEsV0FBV3VqQixFQUFFYSxFQUFFK3BCLFFBQVEvcEIsRUFBRStwQixPQUFPOTRCLFNBQVMsNEJBQTRCdGtCLEVBQUVuVyxLQUFLeWxCLEVBQUVtcEIsT0FBTyxTQUFTcm1DLEVBQUVpaEMsR0FBR0EsRUFBRWpWLEtBQUs5TyxFQUFFa3NDLFFBQVEsR0FBR25vQixFQUFFalYsS0FBSzlPLEVBQUVrc0MsUUFBUSxFQUFFMXpELEVBQUV1ckMsRUFBRWpWLEtBQUtpVixFQUFFQSxJQUFJcnpCLEVBQUVnM0MsU0FBU3p0QyxLQUFLOHBCLEVBQUUrcEIsUUFBUS9wQixFQUFFK3BCLE9BQU9qc0IsU0FBUzN0QixZQUFZOEwsRUFBRW1wQixPQUFPM3dDLEVBQUV3bkIsRUFBRXd1QyxlQUFleHVDLEVBQUVMLFFBQVEsY0FBY2pQLEVBQUU1TixFQUFFNkksZUFBZTZFLEdBQUcsZUFBZXV6QixFQUFFaFQsS0FBS3M0QixXQUFXLFNBQVN0bEIsRUFBRS9yQyxNQUFNLFdBQVcrckMsRUFBRS9yQyxPQUFPZ29CLEVBQUV0VSxVQUFVeThDLFFBQVEsV0FBVyxJQUFJbm9DLEVBQUVsZCxFQUFJeE0sS0FBT3cxRCxNQUFNbnlELE9BQU8sSUFBSXFtQixFQUF4QjFwQixLQUE0QjZ5QyxPQUE1Qjd5QyxLQUFxQzQxRCxRQUFRLEdBQUdwcEQsRUFBaER4TSxLQUFvRDZ5QyxPQUFwRDd5QyxLQUE2RDQxRCxRQUFRLEdBQUdsc0MsR0FBRyxVQUFVQSxFQUFFaG9CLE1BQXZGMUIsS0FBK0YwM0QsVUFBVWh1QyxHQUFHbGQsR0FBRyxVQUFVQSxFQUFFOUssTUFBM0gxQixLQUFtSTAzRCxVQUFVbHJELEtBQUs0SSxNQUFNLFdBQVcsSUFBSXNVLEVBQUVsZCxFQUFFeE0sS0FBSzRtQyxRQUFRNW1DLEtBQUs0MkQsWUFBd0hsdEMsR0FBNUdBLEVBQUVsZCxHQUFHQSxFQUFFcXJELFdBQVdyckQsRUFBRWdyRCxPQUFPam5ELEtBQUssOEJBQThCRixPQUFPLGtDQUFrQyxPQUFVcVosRUFBRXJtQixPQUFPcW1CLEVBQUUxcEIsS0FBS2syRCxNQUFNMWtDLFdBQVlwYyxTQUFVK2dELFNBQVMsV0FBVyxJQUFJenNDLEVBQUUxcEIsS0FBS29hLEVBQUUsdUJBQXVCblcsS0FBSyxXQUFXLElBQUl1SSxFQUFFNE4sRUFBRXBhLE1BQU0waUIsS0FBSyxZQUFZbFcsR0FBR0EsRUFBRTZWLE1BQU1xSCxFQUFFckgsTUFBTTdWLEVBQUVvcUQsV0FBV3BxRCxFQUFFNmMsUUFBUSxrQkFBa0JLLEVBQUVrZCxVQUFvQyxFQUExQmxkLEVBQUV3c0MsTUFBTTFrQyxVQUFVbFcsU0FBV29PLEVBQUV3c0MsTUFBTTFrQyxVQUFVYixVQUFVbmtCLEVBQUVrWixNQUFNZ0UsRUFBRTZ0QyxrQkFBa0I3dEMsRUFBRUwsUUFBUSxjQUFjSyxFQUFFOHNDLGFBQWEzRCxNQUFNLFNBQVNucEMsRUFBRWxkLEdBQXdDLFNBQUYraEMsSUFBYW56QixFQUFFaS9DLFFBQVEzd0MsR0FBMUQsSUFBSStqQixFQUFFdnJDLEVBQUV3SCxFQUFFczNCLEVBQUV3TSxFQUFFYSxFQUFFanpCLEVBQUVwYixLQUFLNHNDLEVBQUV4eEIsRUFBRXdyQixRQUFtQyxPQUFPeHJCLEVBQUV3N0MsY0FBWXg3QyxFQUFFdzdDLFdBQVUsS0FBR3g3QyxFQUFFaU8sUUFBUSxjQUFjSyxJQUFTdE8sRUFBRXc3QyxXQUFVLEVBQUd0b0IsRUFBRSxXQUFXbHpCLEVBQUU2K0IsWUFBVyxJQUFLNytCLEVBQUVxN0MsZUFBZTdwQixFQUFFNHNCLFNBQVNuOEIsYUFBYXVQLEVBQUU0c0IsU0FBUzl2RCxFQUFFa2pDLEVBQUVvckIsU0FBU3ZxQixFQUFFYixFQUFFblMsS0FBS3czQixnQkFBZ0IvdkQsRUFBRWtZLEVBQUU2eEIsVUFBVXovQixHQUFHQSxFQUFFaWhDLEVBQUViLEVBQUVuUyxLQUFLeTNCLGtCQUFrQixFQUFFdGxCLEVBQUU0cUIsT0FBTzV1QyxJQUFJd2xCLEdBQUdyUCxZQUFZLDRGQUE0RjZOLEVBQUU0cUIsT0FBT3I5QyxXQUFXa1AsUUFBUSxXQUFXekwsU0FBUzFiLEdBQUdrWixFQUFFODZDLE1BQU0xa0MsVUFBVXVOLFlBQVksb0JBQW9CTCxTQUFTLHVCQUF1QnRqQixFQUFFdStDLFlBQVkvc0IsR0FBR3h4QixFQUFFODdDLGVBQWU5N0MsRUFBRTg4QyxlQUFlLFNBQVN6cUIsSUFBTyxJQUFKL2pCLEdBQVFoZ0IsR0FBR3hILEdBQUcsVUFBVTBxQyxFQUFFbHJDLE9BQU9rckMsRUFBRXFyQixXQUFXNXBCLEVBQUVqekIsRUFBRTYrQyxZQUFZcnRCLE1BQU1hLEVBQUUsUUFBUSxTQUFTQSxHQUFHcnpCLEVBQUVnM0MsU0FBU3p0QyxLQUFLamEsSUFBRzhqQyxFQUFFcHpCLEVBQUVnM0MsU0FBU3hoQixhQUFhbG1DLElBQUswb0IsTUFBTW9iLEVBQUVwYixNQUFNb2IsRUFBRTJxQixPQUFPM3FCLEVBQUUzWixPQUFPMlosRUFBRTNaLE9BQU8yWixFQUFFNHFCLE9BQTRCLFNBQXJCcDNCLEVBQUU0TCxFQUFFblMsS0FBSzAzQixlQUF3Qm54QixFQUE4QyxHQUE1Q2o3QixLQUFLaXZDLElBQUlwSSxFQUFFeGEsTUFBTXdhLEVBQUUvWSxPQUFPd2EsRUFBRWpjLE1BQU1pYyxFQUFFeGEsU0FBWW1OLElBQUlxTixFQUFFcFksUUFBUSxHQUFHdVgsRUFBRTJxQixPQUFPM3FCLEVBQUVwYixNQUFNaWMsRUFBRWpjLE1BQU1vYixFQUFFNHFCLE9BQU81cUIsRUFBRTNaLE9BQU93YSxFQUFFeGEsT0FBTzJaLEVBQUVwYixNQUFNaWMsRUFBRWpjLE1BQU1vYixFQUFFM1osT0FBT3dhLEVBQUV4YSxPQUFPelosRUFBRWczQyxTQUFTcFosYUFBYXBMLEVBQUVvckIsU0FBU3hxQixHQUFHcHpCLEVBQUVnM0MsU0FBU2oxQixRQUFReVEsRUFBRW9yQixTQUFTM3BCLEVBQUVuc0MsRUFBRXFzQyxJQUFRZCxHQUFHdnJDLEdBQU0sSUFBSnduQixFQUFPNUosV0FBV3l1QixFQUFFcnNDLEdBQUdrWSxFQUFFZzNDLFNBQVNqMUIsUUFBUXlRLEVBQUU0cUIsT0FBT3o0QixZQUFZLDJCQUEyQiwwREFBMEQwTyxFQUFFdnJDLEVBQUVxc0MsR0FBR0EsS0FBckssS0FBZ0w4ckIsUUFBUSxTQUFTM3dDLEdBQUcsSUFBSWxkLEVBQUl4TSxLQUFPNG1DLFFBQVE0d0IsT0FBT251QyxRQUFRLFdBQTlCcnBCLEtBQTJDazJELE1BQU0xa0MsVUFBVTNiLFFBQVErSCxTQUFuRTVkLEtBQThFcXBCLFFBQVEsYUFBYUssR0FBbkcxcEIsS0FBd0crMUQsYUFBeEcvMUQsS0FBdUg0bUMsUUFBUTB6QixXQUEvSHQ2RCxLQUE0SSsxRCxXQUFXM2dELFFBQXZKcFYsS0FBaUs0bUMsUUFBUSxNQUFLcDZCLEVBQUU0TixFQUFFZzNDLFNBQVM0RSxlQUFnQnhwRCxFQUFFMnBELFlBQVluMUIsRUFBRXJJLFVBQTNOMzRCLEtBQXVPMjRCLFdBQVdDLFdBQWxQNTRCLEtBQStQNDRCLFlBQVl4ZSxFQUFFLFFBQVEya0IsWUFBWSxvQkFBb0Iza0IsRUFBRSw0QkFBNEJ3RCxXQUFXeUwsUUFBUSxTQUFTSyxFQUFFbGQsR0FBRyxJQUFJaWhDLEVBQUV2ckMsRUFBRXlELE1BQU1yQyxVQUFVOUMsTUFBTUcsS0FBSzBELFVBQVUsR0FBVTI4QixFQUFFeDBCLEdBQUdBLEVBQUVpdUIsS0FBS2p1QixFQUFqQnhNLEtBQXFCNG1DLFFBQVEsT0FBTzVGLEVBQUU5K0IsRUFBRXlQLFFBQVFxdkIsR0FBR0EsRUFBbkRoaEMsS0FBdURrQyxFQUFFeVAsUUFBekQzUixNQUFvRW9hLEVBQUU3WSxXQUFXeS9CLEVBQUV2RyxLQUFLL1EsTUFBTStqQixFQUFFek0sRUFBRXZHLEtBQUsvUSxHQUFHN29CLE1BQU1tZ0MsRUFBRTkrQixLQUFRLElBQUp1ckMsRUFBT0EsT0FBTyxlQUFlL2pCLEVBQUU4akIsRUFBRW5rQixRQUFRSyxFQUFFLE1BQU14bkIsR0FBdktsQyxLQUE0S2syRCxNQUFNMWtDLFVBQVVuSSxRQUFRSyxFQUFFLE1BQU14bkIsS0FBS3ExRCxlQUFlLFdBQVksSUFBVzlwQixFQUFMenRDLEtBQVM0bUMsUUFBUTFrQyxFQUFFdXJDLEVBQUVueUIsTUFBTTVSLEVBQUUrakMsRUFBRWhULEtBQUt1RyxFQUFFdDNCLEVBQUV3ZCxRQUFRc21CLEVBQWhEeHRDLEtBQW9EazJELE1BQU1odkMsUUFBUXVtQixFQUFFK3BCLE9BQU9udUMsUUFBUSxXQUFuRnJwQixLQUFnR3U2RCxTQUFTdjVCLEdBQUdBLEVBQUUzOUIsT0FBT21xQyxFQUFFL2QsS0FBS3VSLEdBQUcsS0FBL0hoaEMsS0FBc0l3NkQsa0JBQXRJeDZELEtBQTBKKzJELGVBQWUzOEMsRUFBRSx5QkFBeUJxVixLQUFwTXp2QixLQUEyTXcxRCxNQUFNbnlELFFBQVErVyxFQUFFLHlCQUF5QnFWLEtBQUt2dEIsRUFBRSxHQUFHa1ksRUFBRSx3QkFBd0J1SSxLQUFLLFlBQVlqWixFQUFFMnRDLE1BQU1uMUMsR0FBRyxHQUFHa1ksRUFBRSx3QkFBd0J1SSxLQUFLLFlBQVlqWixFQUFFMnRDLE1BQU1uMUMsR0FBMVdsQyxLQUErV3cxRCxNQUFNbnlELE9BQU8sSUFBSTZ6RCxhQUFhLFdBQVdsM0QsS0FBS3c2RCxrQkFBaUIsRUFBR3g2RCxLQUFLazJELE1BQU0xa0MsVUFBVXVOLFlBQVksd0ZBQXdGZzRCLGFBQWEsV0FBVyxJQUFXdnFELEVBQUx4TSxLQUFTNG1DLFFBQVQ1bUMsS0FBbUI0bUMsUUFBUW5NLEtBQTNCejZCLEtBQWtDeTZCLEtBQUtyZ0IsRUFBdkNwYSxLQUEyQ2syRCxNQUFNMWtDLFVBQWpEeHhCLEtBQTZEdzZELGtCQUFpQixFQUE5RXg2RCxLQUFtRjYyRCxtQkFBbUIsRUFBRXo4QyxFQUFFNGtCLFlBQVksMkJBQTJCeHlCLEVBQUVnbEQsVUFBVWhsRCxFQUFFOGdCLFVBQVUwUixZQUFZLDJCQUEyQnh5QixFQUFFK2tELFNBQXdCLEVBQTFPdnhELEtBQTZOdzFELE1BQU1ueUQsU0FBVzI3QixZQUFZLHVCQUF1Qnh5QixFQUFFOGtELFFBQXVCLEVBQTFTdHhELEtBQTZSdzFELE1BQU1ueUQsU0FBVzI3QixZQUFZLHNCQUFzQnh5QixFQUFFb2xELE9BQWxWNXhELEtBQTJWdTZELFNBQVNuZ0QsRUFBRXNrQixTQUFTLDBCQUEwQnRrQixFQUFFMmtCLFlBQVksMEJBQTBCMDdCLGVBQWUsV0FBV3o2RCxLQUFLdzZELGlCQUFpQng2RCxLQUFLKzJELGVBQWUvMkQsS0FBS2szRCxrQkFBa0I5OEMsRUFBRWczQyxTQUFTLENBQUN0dUQsUUFBUSxTQUFTcS9DLFNBQVN6NEMsRUFBRXNzRCxZQUFZLFNBQVN0c0MsR0FBRyxJQUFJbGQsRUFBRTROLEVBQUUseURBQXlEc0ksS0FBSyxZQUFZK3FCLEVBQUU5bkMsTUFBTXJDLFVBQVU5QyxNQUFNRyxLQUFLMEQsVUFBVSxHQUFHLE9BQU9tSSxhQUFhK2hDLElBQUksV0FBV24wQixFQUFFMVksS0FBS2dvQixHQUFHbGQsRUFBRWtkLEdBQUc3b0IsTUFBTTJMLEVBQUVpaEMsR0FBRyxhQUFhcnpCLEVBQUUxWSxLQUFLZ29CLElBQUlBLEVBQUU3b0IsTUFBTTJMLEVBQUVpaEMsR0FBR2poQyxJQUFJMjdCLEtBQUssU0FBU3plLEVBQUVsZCxFQUFFNE4sR0FBRyxPQUFPLElBQUltMEIsRUFBRTdrQixFQUFFbGQsRUFBRTROLElBQUl5NEMsTUFBTSxTQUFTbnBDLEdBQUcsSUFBSWxkLEVBQUV4TSxLQUFLZzJELGNBQWN4cEQsSUFBSUEsRUFBRXFtRCxTQUFZLElBQUpucEMsR0FBUTFwQixLQUFLNnlELFVBQVV6USxRQUFRLFdBQVdwaUQsS0FBSzZ5RCxPQUFNLEdBQUlybEIsRUFBRTVrQixJQUFJLG1CQUFtQnF0QyxTQUFTenBELEVBQUVrdUQsY0FBY2p0QixHQUFHLDZDQUE2Q2pnQyxLQUFLeS9CLFVBQVVDLFdBQVd5dEIsT0FBcUJ2Z0QsRUFBRTVOLEVBQUVuSyxjQUFjLE9BQWNxbkIsRUFBRWtJLGtCQUFrQmxJLEVBQUVrSSxpQkFBaUJ4WCxHQUFHMFksaUJBQWlCLGdCQUFnQnRtQixFQUFFb3VELGNBQWNwdUQsRUFBRW91RCxhQUFhLEtBQU9ockIsYUFBYSxTQUFTbG1CLEdBQUcsSUFBSWxkLEVBQUUsSUFBSWtkLElBQUlBLEVBQUVybUIsT0FBTyxPQUFNLEVBQUcsSUFBK0ZtSixHQUE1RkEsRUFBRWtkLEVBQUVubEIsR0FBRyxHQUFHbWdCLElBQUksZ0JBQXVDLElBQXZCbFksRUFBRXpMLFFBQVEsV0FBa0N5TCxHQUFsQkEsRUFBRUEsRUFBRWxGLE1BQU0sS0FBSyxJQUFPQSxNQUFNLEtBQUssSUFBT0EsTUFBTSxLQUFRLElBQUtqRSxPQUFtRW1KLEdBQTVEQSxFQUFXLEdBQVRBLEVBQUVuSixPQUFVLENBQUNtSixFQUFFLElBQUlBLEVBQUUsSUFBSUEsRUFBRSxHQUFHQSxFQUFFLElBQUksQ0FBQ0EsRUFBRSxHQUFHQSxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxLQUFRckksSUFBSXN1QixnQkFBZ0IsQ0FBQ2ptQixFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxJQUF1Q2loQyxFQUFqQyxpQ0FBcUN2Z0MsS0FBS3djLEVBQUVubEIsR0FBRyxHQUFHdU4sS0FBSyxVQUFVMjdCLElBQUlqaEMsRUFBRSxHQUFHaW1CLFdBQVdnYixFQUFFLElBQUlqaEMsRUFBRSxHQUFHaW1CLFdBQVdnYixFQUFFLEtBQUssTUFBTSxDQUFDMzlCLElBQUl0RCxFQUFFLEdBQUdrckIsS0FBS2xyQixFQUFFLEdBQUcyckQsT0FBTzNyRCxFQUFFLEdBQUc0ckQsT0FBTzVyRCxFQUFFLEdBQUd5cEIsUUFBUXhELFdBQVcvSSxFQUFFaEYsSUFBSSxZQUFZME4sTUFBTTFJLEVBQUUwSSxRQUFReUIsT0FBT25LLEVBQUVtSyxXQUFXbWtCLGFBQWEsU0FBU3R1QixFQUFFbGQsR0FBRyxJQUFJNE4sRUFBRSxHQUFHbFksRUFBRSxHQUFHLEdBQUd3bkIsR0FBR2xkLEVBQUUsT0FBT0EsRUFBRWtyQixPQUFPK1YsR0FBR2poQyxFQUFFc0QsTUFBTTI5QixJQUFJcnpCLEdBQUc1TixFQUFFa3JCLE9BQU8rVixFQUFFL2pCLEVBQUUySSxXQUFXcUYsS0FBS2xyQixFQUFFa3JCLE1BQU0sUUFBUWxyQixFQUFFc0QsTUFBTTI5QixFQUFFL2pCLEVBQUUySSxXQUFXdmlCLElBQUl0RCxFQUFFc0QsS0FBSyxLQUFLc0ssRUFBRXBhLEtBQUsyNkQsTUFBTSxlQUFldmdELEVBQUUsU0FBUyxhQUFhQSxFQUFFLEtBQUs1TixFQUFFMnJELFNBQVMxcUIsR0FBR2poQyxFQUFFNHJELFNBQVMzcUIsSUFBSXJ6QixHQUFHQSxFQUFFL1csT0FBTytXLEVBQUUsSUFBSSxJQUFJLFNBQVM1TixFQUFFMnJELE9BQU8sS0FBSzNyRCxFQUFFNHJELE9BQU8sS0FBS2grQyxFQUFFL1csU0FBU25CLEVBQUU0ckMsVUFBVTF6QixHQUFHNU4sRUFBRXlwQixVQUFVd1gsSUFBSXZyQyxFQUFFK3pCLFFBQVF6cEIsRUFBRXlwQixTQUFTenBCLEVBQUU0bEIsUUFBUXFiLElBQUl2ckMsRUFBRWt3QixNQUFNNWxCLEVBQUU0bEIsT0FBTzVsQixFQUFFcW5CLFNBQVM0WixJQUFJdnJDLEVBQUUyeEIsT0FBT3JuQixFQUFFcW5CLFFBQVFuSyxFQUFFaEYsSUFBSXhpQixJQUFJaTZCLFFBQVEsU0FBU3pTLEVBQUVsZCxFQUFFdEssRUFBRXdILEVBQUVzM0IsR0FBRyxJQUFJd00sRUFBRVksR0FBRyxnQkFBZ0JoMEIsRUFBRTdZLFdBQVdXLEtBQUt3SCxFQUFFeEgsRUFBRUEsRUFBRSxNQUFNa1ksRUFBRTFVLGNBQWM4RyxJQUFJa2QsRUFBRWdVLFdBQVcsU0FBU2hVLEVBQUVuQixHQUFHaWxCLEVBQUUsU0FBU3RyQyxHQUFLQSxHQUFJQSxFQUFFdXBCLGlCQUFlL0IsRUFBRXhQLEdBQUdoWSxFQUFFdXBCLGNBQWNqbUIsU0FBUyxXQUFXdEQsRUFBRXVwQixjQUFjb3ZDLGdCQUFnQm54QyxFQUFFZCxJQUFJNGtCLEdBQUdwekIsRUFBRTFVLGNBQWM4RyxHQUFHQSxFQUFFMnJELFNBQVMxcUIsR0FBR2poQyxFQUFFNHJELFNBQVMzcUIsSUFBSS9qQixFQUFFaEYsSUFBSSxzQkFBc0IsT0FBT2xZLEVBQUU0bEIsTUFBTTFJLEVBQUUwSSxRQUFRNWxCLEVBQUUyckQsT0FBTzNyRCxFQUFFcW5CLE9BQU9uSyxFQUFFbUssU0FBU3JuQixFQUFFNHJELE9BQU81ckQsRUFBRTJyRCxPQUFPLEVBQUUzckQsRUFBRTRyRCxPQUFPLEVBQUVoK0MsRUFBRWczQyxTQUFTcFosYUFBYXR1QixFQUFFbGQsS0FBUSxJQUFKdzBCLEdBQVF0WCxFQUFFcVYsWUFBWXZ5QixHQUFHNE4sRUFBRTdZLFdBQVdtSSxJQUFJQSxFQUFFeEgsTUFBTWtZLEVBQUU2eEIsVUFBVS9wQyxJQUFJd25CLEVBQUVoRixJQUFJLHNCQUFzQnhpQixFQUFFLE1BQU1rWSxFQUFFMVUsY0FBYzhHLEdBQUc0TixFQUFFZzNDLFNBQVNwWixhQUFhdHVCLEVBQUVsZCxHQUFHa2QsRUFBRWdWLFNBQVNseUIsR0FBR2tkLEVBQUVoSCxLQUFLLFFBQVE1QyxXQUFXLFdBQVc0SixFQUFFTCxRQUFRLGtCQUFrQm5uQixFQUFFLE1BQU15aEIsS0FBSyxTQUFTK0YsR0FBRzJULGFBQWEzVCxFQUFFaEgsS0FBSyxVQUFVZ0gsRUFBRWQsSUFBSXdsQixLQUFLaDBCLEVBQUVsWCxHQUFHa3VELFNBQVMsU0FBUzFuQyxHQUFHLElBQUlsZCxFQUFFLE9BQWVBLEdBQVJrZCxFQUFFQSxHQUFHLElBQU8xbUIsV0FBVSxHQUFLb1gsRUFBRSxRQUFRd08sSUFBSSxpQkFBaUJwYyxHQUFHK2IsR0FBRyxpQkFBaUIvYixFQUFFLENBQUMya0QsTUFBTS8yQyxFQUFFNU4sR0FBR3JILFFBQVF1a0IsR0FBR3huQixHQUFHbEMsS0FBSzRvQixJQUFJLGtCQUFrQkwsR0FBRyxpQkFBaUIsQ0FBQzRvQyxNQUFNbnhELEtBQUttRixRQUFRdWtCLEdBQUd4bkIsR0FBR2xDLE1BQU13dEMsRUFBRWpsQixHQUFHLGlCQUFpQixrQkFBa0JybUIsR0FBeGxFLElBQWVrWSxFQUFwLzBCLENBQWtrNUJyYSxPQUFPSCxTQUFTRyxPQUFPZ0QsUUFBUSxTQUFTMm1CLEdBQUcsYUFBbUIsU0FBRmxkLEVBQVdBLEVBQUU0TixFQUFFcXpCLEdBQUcsR0FBR2poQyxFQUFFLE9BQU9paEMsRUFBRUEsR0FBRyxHQUFHLFdBQVcvakIsRUFBRWhvQixLQUFLK3JDLEtBQUtBLEVBQUUvakIsRUFBRW9YLE1BQU0yTSxHQUFFLElBQUsvakIsRUFBRXpsQixLQUFLbVcsRUFBRSxTQUFTc1AsRUFBRXRQLEdBQUc1TixFQUFFQSxFQUFFdkcsUUFBUSxJQUFJeWpCLEVBQUV0UCxHQUFHLE1BQU1xekIsRUFBRXBxQyxTQUFTbUosSUFBbUIsRUFBZkEsRUFBRXpMLFFBQVEsS0FBTyxJQUFJLEtBQUswc0MsR0FBR2poQyxFQUFoTCxJQUFtTDROLEVBQUUsQ0FBQzBnRCxRQUFRLENBQUNsbUQsUUFBUSx3SkFBd0ptMUIsT0FBTyxDQUFDcWIsU0FBUyxFQUFFMlYsU0FBUyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxNQUFNLGNBQWNDLFlBQVksRUFBRUMsTUFBTSxHQUFHQyxXQUFXLEVBQUU1NUQsS0FBSyxTQUFTcWhDLElBQUksNkJBQTZCcTJCLE1BQU0seUNBQXlDbUMsTUFBTSxDQUFDM21ELFFBQVEsb0NBQW9DbTFCLE9BQU8sQ0FBQ3FiLFNBQVMsRUFBRThWLEdBQUcsRUFBRU0sV0FBVyxFQUFFQyxZQUFZLEVBQUVDLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxJQUFJLEdBQUdOLFdBQVcsRUFBRTU1RCxLQUFLLFNBQVNxaEMsSUFBSSwrQkFBK0I4NEIsU0FBUyxDQUFDam5ELFFBQVEsb0NBQW9DbFQsS0FBSyxTQUFTcWhDLElBQUkscUNBQXFDKzRCLFlBQVksQ0FBQ2xuRCxRQUFRLHNDQUFzQ20xQixPQUFPLENBQUNneUIsZ0JBQWdCLEVBQUU3SSxVQUFVLEdBQUd4eEQsS0FBSyxTQUFTcWhDLElBQUksd0NBQXdDaTVCLEtBQUssQ0FBQ3BuRCxRQUFRLG1DQUFtQ2xULEtBQUssU0FBU3FoQyxJQUFJLCtCQUErQms1QixVQUFVLENBQUNybkQsUUFBUSx5REFBeURsVCxLQUFLLFFBQVFxaEMsSUFBSSwyQkFBMkJtNUIsWUFBWSxDQUFDdG5ELFFBQVEsNEdBQTRHbFQsS0FBSyxTQUFTcWhDLElBQUksU0FBU3JaLEdBQUcsTUFBTSxpQkFBaUJBLEVBQUUsR0FBRyxTQUFTQSxFQUFFLEdBQUdBLEVBQUUsR0FBRyxNQUFNM2pCLEtBQUs2dEMsTUFBTWxxQixFQUFFLE1BQU1BLEVBQUUsSUFBSUEsRUFBRSxJQUFJempCLFFBQVEsTUFBTSxLQUFLLElBQUl5akIsRUFBRSxLQUFLLFlBQVlBLEVBQUUsS0FBOEIsRUFBekJBLEVBQUUsSUFBSTNvQixRQUFRLFdBQWEsVUFBVSxZQUFZMm9CLEVBQUU5cEIsVUFBVTJvQixHQUFHLFlBQVksU0FBU2tsQixFQUFFdnJDLEdBQUd3bkIsRUFBRXpsQixLQUFLL0IsRUFBRXN6RCxNQUFNLFNBQVMvbkIsRUFBRXZyQyxHQUFHLElBQUl3SCxFQUFFczNCLEVBQUV3TSxFQUFFYSxFQUFFanpCLEVBQUVrekIsRUFBRUYsRUFBRXhCLEVBQUUxcUMsRUFBRVAsS0FBSyxHQUFHNHNDLEdBQUUsRUFBR3JzQyxFQUFFUixPQUFPZ0ksRUFBRWdnQixFQUFFeGtCLFFBQU8sRUFBRyxHQUFHa1YsRUFBRWxZLEVBQUV1NEIsS0FBSzQ0QixPQUFPM3BDLEVBQUV6bEIsS0FBS3lGLEVBQUUsU0FBUzBRLEVBQUVxekIsR0FBRyxHQUFHRCxFQUFFWixFQUFFLy9CLE1BQU00Z0MsRUFBRTc0QixTQUFTMDVCLEVBQUUsR0FBR0YsRUFBRWgwQixFQUFFb3pCLEVBQUUsQ0FBQyxHQUFHZSxFQUFFZCxFQUFFL3JDLEtBQUsrckMsRUFBRTZ0QixZQUFZOXRCLEVBQUVDLEVBQUU2dEIsWUFBWSxDQUFtQixNQUFsQmxnRCxFQUFFb3lCLEVBQUVDLEVBQUU2dEIsYUFBbUIsS0FBS2xnRCxFQUFFQSxFQUFFODlDLFVBQVUsSUFBSTk5QyxFQUFFQSxFQUFFOVQsTUFBTSxLQUFLLElBQUksSUFBSW9DLEVBQUUsRUFBRUEsRUFBRTBSLEVBQUUvWCxTQUFTcUcsRUFBRSxDQUFDLElBQUlvdkIsRUFBRTFkLEVBQUUxUixHQUFHcEMsTUFBTSxJQUFJLEdBQUcsR0FBR3d4QixFQUFFejFCLFNBQVNpckMsRUFBRXhWLEVBQUUsSUFBSXVYLG1CQUFtQnZYLEVBQUUsR0FBRzd5QixRQUFRLE1BQU0sUUFBUSxPQUFPb29DLEVBQUUza0IsRUFBRXhrQixRQUFPLEVBQUcsR0FBR3VvQyxFQUFFMUQsT0FBTzduQyxFQUFFdTRCLEtBQUtyZ0IsR0FBR2swQixHQUFHMUIsRUFBRSxhQUFhbGpCLEVBQUVob0IsS0FBSytyQyxFQUFFMUssS0FBSzBLLEVBQUUxSyxJQUFJcGlDLEtBQUtYLEtBQUt3dEMsRUFBRWEsRUFBRW5zQyxHQUFHc0ssRUFBRWloQyxFQUFFMUssSUFBSXlLLEVBQUVhLEdBQUdyTixFQUFFLGFBQWF0WCxFQUFFaG9CLEtBQUsrckMsRUFBRTJyQixPQUFPM3JCLEVBQUUyckIsTUFBTXo0RCxLQUFLWCxLQUFLd3RDLEVBQUVhLEVBQUVuc0MsR0FBR3NLLEVBQUVpaEMsRUFBRTJyQixNQUFNNXJCLEdBQUcsVUFBVVksSUFBSXhCLEVBQUVBLEVBQUUzbUMsUUFBUSxPQUFPLE9BQU0sS0FBTXNvQyxHQUFHcnNDLEVBQUVQLElBQUlpckMsRUFBRTFxQyxFQUFFUixLQUFLNnNDLEVBQUVyc0MsRUFBRXU0QixLQUFLMitCLE9BQU9sM0QsRUFBRXU0QixLQUFLODdCLFFBQVFyMEQsRUFBRXU0QixLQUFLODdCLE9BQU9sekQsU0FBU25CLEVBQUV1NEIsS0FBSzIrQixNQUFNcDRCLEdBQUcsV0FBV3VOLElBQUk3a0IsRUFBRXhrQixRQUFPLEVBQUdoRCxFQUFFdTRCLEtBQUssQ0FBQ3EzQixPQUFPLENBQUNELFNBQVEsRUFBRy8vQyxLQUFLLENBQUNrZ0QsVUFBVSxTQUFTOXZELEVBQUVpNkQsZ0JBQWdCL3RCLEVBQUVsc0MsRUFBRXU0QixLQUFLcVksWUFBWSxxQkFBcUIsZUFBZTFFLEVBQUUsTUFBTSxXQUFXbHNDLEVBQUVSLEtBQUssYUFBejlFLENBQXUrRTNCLE9BQU9nRCxRQUFRLFNBQVMybUIsRUFBRWxkLEVBQUU0TixHQUFHLGFBQ3A2OUIsU0FBRjFRLEVBQVc4QyxHQUFHLElBQUk0TixFQUFFLEdBQW9JLElBQUksSUFBSXF6QixLQUEvR2poQyxHQUExQkEsRUFBRUEsRUFBRWlmLGVBQWVqZixHQUFHa2QsRUFBRWxkLEdBQU15aEIsU0FBU3poQixFQUFFeWhCLFFBQVE1cUIsT0FBT21KLEVBQUV5aEIsUUFBUXpoQixFQUFFa2dCLGdCQUFnQmxnQixFQUFFa2dCLGVBQWVycEIsT0FBT21KLEVBQUVrZ0IsZUFBZSxDQUFDbGdCLEdBQWtCQSxFQUFFaWhDLEdBQUcxZ0IsTUFBTTNTLEVBQUV0WixLQUFLLENBQUN1eUMsRUFBRTdtQyxFQUFFaWhDLEdBQUcxZ0IsTUFBTXFtQixFQUFFNW1DLEVBQUVpaEMsR0FBR3pnQixRQUFReGdCLEVBQUVpaEMsR0FBR2xnQixTQUFTblQsRUFBRXRaLEtBQUssQ0FBQ3V5QyxFQUFFN21DLEVBQUVpaEMsR0FBR2xnQixRQUFRNmxCLEVBQUU1bUMsRUFBRWloQyxHQUFHamdCLFVBQVUsT0FBT3BULEVBQUssU0FBRjRtQixFQUFXdFgsRUFBRWxkLEVBQUU0TixHQUFHLE9BQU81TixHQUFHa2QsRUFBRSxNQUFNdFAsRUFBRXNQLEVBQUUycEIsRUFBRTdtQyxFQUFFNm1DLEVBQUUsTUFBTWo1QixFQUFFc1AsRUFBRTBwQixFQUFFNW1DLEVBQUU0bUMsRUFBRXJ0QyxLQUFLNDNDLEtBQUs1M0MsS0FBSzYzQyxJQUFJbDBCLEVBQUUycEIsRUFBRTdtQyxFQUFFNm1DLEVBQUUsR0FBR3R0QyxLQUFLNjNDLElBQUlsMEIsRUFBRTBwQixFQUFFNW1DLEVBQUU0bUMsRUFBRSxJQUFJLEVBQUssU0FBRjVGLEVBQVc5akIsR0FBRyxHQUFHQSxFQUFFeFAsR0FBRyxtQ0FBbUNFLEVBQUU3WSxXQUFXbW9CLEVBQUVobUIsSUFBSSxHQUFHMDRELFNBQVMsT0FBTSxFQUFHLElBQUksSUFBSTV2RCxFQUFFLEVBQUVpaEMsRUFBRS9qQixFQUFFLEdBQUd4ZixXQUFXaEksRUFBRXVyQyxFQUFFcHFDLE9BQU9tSixFQUFFdEssRUFBRXNLLElBQUksR0FBRyxtQkFBbUJpaEMsRUFBRWpoQyxHQUFHSixTQUFTaXdELE9BQU8sRUFBRSxJQUFJLE9BQU0sRUFBZ1AsU0FBRmpoRCxFQUFXc08sR0FBRyxJQUFJLElBQUlsZCxHQUFFLEdBQTlPQSxFQUEyUGtkLEVBQUVobUIsSUFBSSxHQUExUDBXLEVBQUFBLEVBQUVzUCxFQUFFa0ksaUJBQWlCcGxCLEdBQUcsY0FBY2loQyxFQUFFL2pCLEVBQUVrSSxpQkFBaUJwbEIsR0FBRyxjQUFjdEssR0FBRyxXQUFXa1ksR0FBRyxTQUFTQSxJQUFJNU4sRUFBRTh2RCxhQUFhOXZELEVBQUU0bEMsYUFBYTFvQyxHQUFHLFdBQVcrakMsR0FBRyxTQUFTQSxJQUFJamhDLEVBQUVxdEQsWUFBWXJ0RCxFQUFFMmxDLGNBQTBEM2xDLEVBQXZDdEssR0FBR3dILE9BQTJEZ2dCLEVBQUVBLEVBQUV4VixVQUFZN1EsU0FBUXFtQixFQUFFMFYsU0FBUyxvQkFBbUIxVixFQUFFeFAsR0FBRyxXQUFsVixJQUFTMU4sRUFBTzROLEVBQXNDcXpCLEVBQXNDdnJDLEVBQTREd0gsRUFBd00sT0FBTzhDLEVBQUssU0FBRjhoQyxFQUFXNWtCLEdBQVMxcEIsS0FBTzR4QyxTQUFTbG9CLEVBQWhCMXBCLEtBQW9CdThELElBQUk3eUMsRUFBRXdzQyxNQUFNc0csR0FBaEN4OEQsS0FBcUN5OEQsT0FBTy95QyxFQUFFd3NDLE1BQU1TLE1BQXBEMzJELEtBQTREMDhELFdBQVdoekMsRUFBRXdzQyxNQUFNMWtDLFVBQS9FeHhCLEtBQTJGb2lELFVBQTNGcGlELEtBQXVHMDhELFdBQVduMEMsR0FBRyx5Q0FBeUNuTyxFQUFFeXhCLE1BQWhLN3JDLEtBQXdLLGlCQUQyeTdCLElBQUl5dEMsRUFBb0IvakIsRUFBRStQLHVCQUF1Qi9QLEVBQUV3ckMsNkJBQTZCeHJDLEVBQUV5ckMsMEJBQTBCenJDLEVBQUUwckMsd0JBQXdCLFNBQVM1b0QsR0FDcHcrQixPQUFPa2QsRUFBRTVKLFdBQVd0VCxFQUFFLElBQUksS0FBUXRLLEVBQW9Cd25CLEVBQUVpekMsc0JBQXNCanpDLEVBQUVrekMsNEJBQTRCbHpDLEVBQUVtekMseUJBQXlCbnpDLEVBQUVvekMsdUJBQXVCLFNBQVN0d0QsR0FBR2tkLEVBQUUyVCxhQUFhN3dCLElBQWlxQzhoQyxFQUFFaHJDLFVBQVU4K0MsUUFBUSxXQUFXcGlELEtBQUswOEQsV0FBVzl6QyxJQUFJLGNBQWMwbEIsRUFBRWhyQyxVQUFVeTVELGFBQWEsU0FBU3R2QixHQUFHLElBQUl2ckMsRUFBRWxDLEtBQUtxdUMsRUFBRWowQixFQUFFcXpCLEVBQUVqb0MsUUFBUThvQyxFQUFFcHNDLEVBQUUwdkMsU0FBU3hELEVBQUVFLEVBQUUxSCxRQUFRZ0csRUFBRXdCLEVBQUU0cEIsU0FBU3pwQixFQUFFLGNBQWNkLEVBQUUvckMsS0FBSyxHQUFHNnNDLEdBQUdyc0MsRUFBRXc2RCxXQUFXOXpDLElBQUksdUJBQXVCd2xCLEdBQUdsc0MsRUFBRTB2QyxTQUFTeWxCLGFBQWFuMUQsRUFBRTB2QyxTQUFTZ2xCLFVBQVUsT0FBT25wQixFQUFFdmtCLHVCQUF1QnVrQixFQUFFcmtCLGlCQUFpQixLQUFLcWtCLEVBQUVoaUIsZUFBZSxHQUFHZ2lCLEVBQUVoaUIsY0FBYzFWLFNBQVNzNEIsRUFBRWhyQyxTQUFTbXFDLEVBQUVhLEtBQUtiLEVBQUVhLEVBQUVuNkIsYUFBYXU1QixFQUFFaGlCLGNBQWM4QixRQUFROGdCLEVBQUUsR0FBRzhELFlBQVk5RCxFQUFFcEUsU0FBU3ZTLFFBQVF4MUIsRUFBRTg2RCxZQUFZdHpELEVBQUUrakMsR0FBR3ZyQyxFQUFFODZELGVBQW9DLEVBQXJCOTZELEVBQUU4NkQsWUFBWTM1RCxRQUFVaXJDLEVBQUU4b0IsWUFBWSxDQUFDLEdBQUdsMUQsRUFBRSs2RCxRQUFRNXVCLEVBQUVuc0MsRUFBRTgxRCxTQUFTcHJCLEVBQUUxcUMsRUFBRWc3RCxRQUFPLEVBQUc5aUQsRUFBRTVOLEdBQUdvYyxJQUFJLGFBQWF4TyxFQUFFNU4sR0FBRytiLEdBQUdnbUIsRUFBRSx5Q0FBeUMsdUNBQXVDbjBCLEVBQUV5eEIsTUFBTTNwQyxFQUFFLGVBQWVrWSxFQUFFNU4sR0FBRytiLEdBQUdnbUIsRUFBRSxxQkFBcUIscUJBQXFCbjBCLEVBQUV5eEIsTUFBTTNwQyxFQUFFLGdCQUFnQnVyQyxFQUFFdmtCLG1CQUFtQm9sQixFQUFFMUgsUUFBUW5NLEtBQUtnVyxRQUFRbkMsRUFBRXFxQixXQUFXdHFCLEVBQUVuMEIsR0FBR2hZLEVBQUV1NkQsVUFBVXY2RCxFQUFFdTZELE9BQU9sc0QsS0FBSzg5QixHQUFHaHJDLE9BQU8sWUFBWWdyQyxFQUFFbjBCLEdBQUcsUUFBUXV6QixFQUFFcmtCLGtCQUFrQmhQLEVBQUVnM0MsU0FBUzZFLFdBQVc3NkMsRUFBRWxaLEVBQUUrNkQsVUFBVTdoRCxFQUFFbFosRUFBRSs2RCxRQUFRL29ELFlBQVl1NUIsRUFBRXJrQixpQkFBaUJsbkIsRUFBRWk3RCxZQUFZcDNELEtBQUt5c0IsTUFBTTRiLEVBQUVvcEIsT0FBTyxHQUFHcmxCLGFBQWFqd0MsRUFBRWs3RCxhQUFhcjNELEtBQUt5c0IsTUFBTTRiLEVBQUVvcEIsT0FBTyxHQUFHcGxCLGNBQWNsd0MsRUFBRXE0QixXQUFXLElBQUl2eEIsTUFBTXM4QyxVQUFVcGpELEVBQUVtN0QsVUFBVW43RCxFQUFFbzdELFVBQVVwN0QsRUFBRXE3RCxTQUFTLEVBQUVyN0QsRUFBRXM3RCxXQUFVLEVBQUd0N0QsRUFBRXU3RCxXQUFVLEVBQUd2N0QsRUFBRXc3RCxXQUFVLEVBQUd4N0QsRUFBRXk3RCxlQUFlejdELEVBQUUwN0QsZUFBZSxDQUFDOXRELElBQUksRUFBRTRuQixLQUFLLEdBQUd4MUIsRUFBRTI3RCxnQkFBZ0J6akQsRUFBRWczQyxTQUFTeGhCLGFBQWExdEMsRUFBRTgxRCxVQUFVOTFELEVBQUU0N0QsZUFBZSxLQUFLLElBQUk1N0QsRUFBRTg2RCxZQUFZMzVELFFBQVFuQixFQUFFdzdELFlBQVl4N0QsRUFBRWc3RCxRQUFRNXVCLEVBQUU4b0IsVUFBVSxVQUFVaHBCLEVBQUUxc0MsT0FBT1EsRUFBRTI3RCxnQkFBZ0J6ckMsTUFBTWx3QixFQUFFaTdELFlBQVksR0FBR2o3RCxFQUFFMjdELGdCQUFnQmhxQyxPQUFPM3hCLEVBQUVrN0QsYUFBYSxJQUFJaGpELEVBQUVnM0MsU0FBU3p0QyxLQUFLemhCLEVBQUU4MUQsVUFBVTkxRCxFQUFFODFELFNBQVN0ekMsSUFBSSxzQkFBc0IsT0FBT3hpQixFQUFFczdELFdBQVUsR0FBSXQ3RCxFQUFFdTdELFdBQVUsRUFBR3Y3RCxFQUFFdzZELFdBQVdoK0IsU0FBUyxrQ0FBa0MsSUFBSXg4QixFQUFFODZELFlBQVkzNUQsUUFBUWlyQyxFQUFFK29CLGFBQWFqcEIsRUFBRTZwQixVQUFVLFVBQVU3cEIsRUFBRTFzQyxPQUFPMHNDLEVBQUV1cEIsV0FBV3ZwQixFQUFFaXJCLFNBQVNuM0QsRUFBRXc3RCxXQUFVLEVBQUd4N0QsRUFBRXU3RCxXQUFVLEVBQUd2N0QsRUFBRXM3RCxXQUFVLEVBQUdwakQsRUFBRWczQyxTQUFTenRDLEtBQUt6aEIsRUFBRTgxRCxVQUFVOTFELEVBQUU4MUQsU0FBU3R6QyxJQUFJLHNCQUFzQixPQUFPeGlCLEVBQUU2N0Qsa0JBQWtCLElBQUk3N0QsRUFBRTg2RCxZQUFZLEdBQUczcEIsRUFBRW54QyxFQUFFODZELFlBQVksR0FBRzNwQixHQUFHajVCLEVBQUVzUCxHQUFHa1AsYUFBYTEyQixFQUFFODdELGtCQUFrQixJQUFJOTdELEVBQUU4NkQsWUFBWSxHQUFHNXBCLEVBQUVseEMsRUFBRTg2RCxZQUFZLEdBQUc1cEIsR0FBR2g1QixFQUFFc1AsR0FBR2lQLFlBQVl6MkIsRUFBRSs3RCxnQ0FBZ0MvN0QsRUFBRTY3RCxrQkFBa0I3N0QsRUFBRTI3RCxnQkFBZ0JubUMsTUFBTXgxQixFQUFFMjdELGdCQUFnQnpyQyxNQUFNbHdCLEVBQUVnOEQsZ0NBQWdDaDhELEVBQUU4N0Qsa0JBQWtCOTdELEVBQUUyN0QsZ0JBQWdCL3RELEtBQUs1TixFQUFFMjdELGdCQUFnQmhxQyxPQUFPM3hCLEVBQUVpOEQsNEJBQTRCbjlCLEVBQUU5K0IsRUFBRTg2RCxZQUFZLEdBQUc5NkQsRUFBRTg2RCxZQUFZLE9BQU8xdUIsRUFBRWhyQyxVQUFVODZELFlBQVksU0FBUzEwQyxHQUFHLElBQUlsZCxFQUFFeE0sS0FBSyxHQUFHd00sRUFBRTZ4RCxVQUFVMzBELEVBQUVnZ0IsR0FBR3RQLEVBQUVnM0MsU0FBUzZFLFdBQVc3NkMsRUFBRTVPLEVBQUV5d0QsVUFBVTdoRCxFQUFFNU8sRUFBRXl3RCxRQUFRL29ELFdBQVcsT0FBT3dWLEVBQUVSLHVCQUF1QjFjLEVBQUUwd0QsUUFBTyxHQUFJLElBQUkxd0QsRUFBRW9sQyxTQUFTaEwsUUFBUW5NLEtBQUtnVyxPQUFPamtDLEVBQUVvbEMsU0FBUyttQixXQUFXbnNELEVBQUU2eEQsV0FBVzd4RCxFQUFFNnhELFVBQVVoN0QsU0FBU21KLEVBQUU2d0QsVUFBVXI4QixFQUFFeDBCLEVBQUU2eEQsVUFBVSxHQUFHN3hELEVBQUV3d0QsWUFBWSxHQUFHLEtBQUt4d0QsRUFBRTh3RCxVQUFVdDhCLEVBQUV4MEIsRUFBRTZ4RCxVQUFVLEdBQUc3eEQsRUFBRXd3RCxZQUFZLEdBQUcsS0FBS3h3RCxFQUFFK3dELFNBQVN2OEIsRUFBRXgwQixFQUFFNnhELFVBQVUsR0FBRzd4RCxFQUFFd3dELFlBQVksSUFBZSxFQUFYeHdELEVBQUUrd0QsVUFBWSxDQUFDLElBQUkvd0QsRUFBRXl3RCxRQUFRL2lELEdBQUcxTixFQUFFaXdELFVBQVVqd0QsRUFBRWl3RCxPQUFPbHNELEtBQUsvRCxFQUFFeXdELFNBQVM1NUQsT0FBTyxPQUFPcW1CLEVBQUVSLGtCQUFrQlEsRUFBRU4saUJBQWlCNWMsRUFBRWl4RCxVQUFVanhELEVBQUU4eEQsVUFBVTl4RCxFQUFFZ3hELFVBQVVoeEQsRUFBRSt4RCxRQUFRL3hELEVBQUVreEQsV0FBV2x4RCxFQUFFZ3lELFdBQVdsd0IsRUFBRWhyQyxVQUFVZzdELFFBQVEsV0FBVyxJQUFJOXhELEVBQUU5QyxFQUFFMUosS0FBS2doQyxFQUFFdDNCLEVBQUUrekQsVUFBVWp3QixFQUFFOWpDLEVBQUVpMEQsZUFBZWptQyxNQUFNLEdBQU0sSUFBSnNKLEVBQTRCLEdBQXJCajdCLEtBQUtpdkMsSUFBSXRyQyxFQUFFNnpELFlBQWU3ekQsRUFBRXd6RCxRQUFPLEVBQUd4ekQsRUFBRWtvQyxTQUFTNGpCLE1BQU1ueUQsT0FBTyxHQUFHcUcsRUFBRWtvQyxTQUFTblgsS0FBS2dXLE1BQU0waUIsU0FBU3pwRCxFQUFFK3pELFVBQVUsSUFBSS96RCxFQUFFa29DLFNBQVN3bEIsWUFBNEMsSUFBakMxdEQsRUFBRWtvQyxTQUFTblgsS0FBS2dXLE1BQU0waUIsVUFBZSxTQUFTenBELEVBQUVrb0MsU0FBU25YLEtBQUtnVyxNQUFNMGlCLFVBQXVCLElBQWIvNEMsRUFBRXNQLEdBQUcwSSxRQUFZMW9CLEVBQUUrekQsVUFBVSxLQUFLanhELEVBQUV6RyxLQUFLaXZDLElBQUksSUFBSWp2QyxLQUFLODNDLE1BQU1uMEMsRUFBRTR6RCxVQUFVNXpELEVBQUUyekQsV0FBV3QzRCxLQUFLa3pCLElBQUl2dkIsRUFBRSt6RCxVQUFZLEdBQUZqeEQsR0FBTUEsRUFBRSxJQUFJLElBQUksS0FBSzlDLEVBQUVrb0MsU0FBU3dsQixVQUFVMXRELEVBQUUrekQsVUFBVS96RCxFQUFFc3pELFlBQVl0ekQsRUFBRTIwRCxVQUFVamtELEVBQUVuVyxLQUFLeUYsRUFBRWtvQyxTQUFTaUIsT0FBTyxTQUFTbnBCLEVBQUVsZCxHQUFHNE4sRUFBRWczQyxTQUFTenRDLEtBQUtuWCxFQUFFZ3JELFFBQVFockQsRUFBRWdyRCxPQUFPOXlDLElBQUksc0JBQXNCLE9BQU9sWSxFQUFFaXlELGNBQWEsRUFBR2p5RCxFQUFFZ3NCLE1BQU05dUIsRUFBRWtvQyxTQUFTaEwsUUFBUXBPLE1BQU05dUIsRUFBRWkwRCxlQUFlam1DLEtBQUt0ZCxFQUFFZzNDLFNBQVN4aEIsYUFBYXBqQyxFQUFFZ3JELFFBQVE5L0IsUUFBUWh1QixFQUFFa29DLFNBQVN5bUIsV0FBVzN1RCxFQUFFa29DLFNBQVN5bUIsVUFBVUMsVUFBVTV1RCxFQUFFa29DLFNBQVN5bUIsVUFBVTEwQyxTQUFTLEtBQUtxZCxJQUFnQixFQUFadDNCLEVBQUUyekQsWUFBYzN6RCxFQUFFa29DLFNBQVM0akIsTUFBTW55RCxPQUFPLEdBQUcsSUFBSXFHLEVBQUVrb0MsU0FBU2hMLFFBQVF0ckIsUUFBUTVSLEVBQUVrb0MsU0FBU2hMLFFBQVFuTSxLQUFLNGMsTUFBTTdKLEdBQUd6bkMsS0FBSzYzQyxJQUFJbDBDLEVBQUUyekQsVUFBVSxJQUFJM3pELEVBQUUyekQsVUFBVSxJQUFJM3pELEVBQUVrb0MsU0FBUzRqQixNQUFNbnlELE9BQU8sR0FBR3FHLEVBQUVrb0MsU0FBU2hMLFFBQVF0ckIsUUFBUTVSLEVBQUVrb0MsU0FBUzRqQixNQUFNbnlELE9BQU8sSUFBSXFHLEVBQUVrb0MsU0FBU2hMLFFBQVFuTSxLQUFLNGMsTUFBTTdKLEdBQUd6bkMsS0FBSzYzQyxLQUFLbDBDLEVBQUUyekQsVUFBVSxJQUFJN3ZCLEdBQUc5akMsRUFBRTJ6RCxXQUFXM3pELEVBQUVrMEQsY0FBYyxDQUFDOXRELElBQUksS0FBS2t4QixFQUFFLEVBQUV0M0IsRUFBRWkwRCxlQUFlN3RELElBQUlwRyxFQUFFNHpELFVBQVU1bEMsS0FBSzhWLEdBQUc5akMsRUFBRWcxRCxZQUFZeDhELEVBQUV3SCxFQUFFZzFELFdBQVdoMUQsRUFBRWcxRCxVQUFVLE1BQU1oMUQsRUFBRWcxRCxVQUFVanhCLEVBQUUsV0FBVy9qQyxFQUFFazBELGdCQUFnQnhqRCxFQUFFblcsS0FBS3lGLEVBQUVrb0MsU0FBU2lCLE9BQU8sU0FBU25wQixFQUFFbGQsR0FBRyxJQUFJaWhDLEVBQUVqaEMsRUFBRWdzQixJQUFJOXVCLEVBQUVrb0MsU0FBU2drQixRQUFReDdDLEVBQUVnM0MsU0FBU3BaLGFBQWF4ckMsRUFBRWdyRCxPQUFPLENBQUMxbkQsSUFBSXBHLEVBQUVrMEQsY0FBYzl0RCxJQUFJNG5CLEtBQUtodUIsRUFBRWswRCxjQUFjbG1DLEtBQUsrVixFQUFFL2pDLEVBQUV5ekQsWUFBWTF2QixFQUFFamhDLEVBQUVpdUIsS0FBSzQyQixXQUFXM25ELEVBQUVnekQsV0FBV2grQixTQUFTLDRCQUE0QjRQLEVBQUVockMsVUFBVWk3RCxNQUFNLFdBQVcsSUFBSTcwQyxFQUFFbGQsRUFBRTlDLEVBQUVzM0IsRUFBRWhoQyxLQUFLZ2hDLEVBQUVrOEIsUUFBTyxFQUFHeHpDLEVBQUVzWCxFQUFFNjhCLGdCQUFnQnpyQyxNQUFNNE8sRUFBRW04QixZQUFZbjhCLEVBQUU2OEIsZ0JBQWdCbm1DLEtBQUtzSixFQUFFcThCLFVBQVVyOEIsRUFBRTY4QixnQkFBZ0JubUMsS0FBS2xyQixFQUFFdzBCLEVBQUU2OEIsZ0JBQWdCL3RELElBQUlreEIsRUFBRXM4QixXQUFVNXpELEVBQUVzM0IsRUFBRTI5QixjQUFjajFDLEVBQUVsZCxFQUFFdzBCLEVBQUU2OEIsZ0JBQWdCenJDLE1BQU00TyxFQUFFNjhCLGdCQUFnQmhxQyxTQUFVc2tDLE9BQU9uM0IsRUFBRTY4QixnQkFBZ0IxRixPQUFPenVELEVBQUUwdUQsT0FBT3AzQixFQUFFNjhCLGdCQUFnQnpGLE9BQU9wM0IsRUFBRTg4QixlQUFlcDBELEVBQUVzM0IsRUFBRTA5QixZQUFZeDhELEVBQUU4K0IsRUFBRTA5QixXQUFXMTlCLEVBQUUwOUIsVUFBVSxNQUFNMTlCLEVBQUUwOUIsVUFBVWp4QixFQUFFLFdBQVdyekIsRUFBRWczQyxTQUFTcFosYUFBYWhYLEVBQUVnM0IsU0FBU2gzQixFQUFFODhCLG1CQUFtQnh2QixFQUFFaHJDLFVBQVVxN0QsY0FBYyxTQUFTajFDLEVBQUVsZCxFQUFFNE4sRUFBRXF6QixHQUFHLElBQUl2ckMsRUFBRXdILEVBQUVzM0IsRUFBRXdNLEVBQVNweUIsRUFBTHBiLEtBQVNtOUQsWUFBWTd1QixFQUFyQnR1QyxLQUF5Qm85RCxhQUFhaHZCLEVBQXRDcHVDLEtBQTBDNjlELGdCQUFnQm5tQyxLQUFLa1YsRUFBL0Q1c0MsS0FBbUU2OUQsZ0JBQWdCL3RELElBQUl5K0IsRUFBdkZ2dUMsS0FBMkZxOUQsVUFBVXZrQyxFQUFyRzk0QixLQUF5R3M5RCxVQUFVLE9BQU9wN0QsRUFBRTZELEtBQUtpdkIsSUFBSSxFQUFFLEdBQUc1WixFQUFFLEdBQUdoQixHQUFHMVEsRUFBRTNELEtBQUtpdkIsSUFBSSxFQUFFLEdBQUdzWixFQUFFLEdBQUdiLEdBQUd6TSxFQUFFajdCLEtBQUswMUMsSUFBSXJnQyxFQUFFaEIsRUFBRSxHQUFHZ0IsRUFBRSxHQUFHaEIsR0FBR296QixFQUFFem5DLEtBQUswMUMsSUFBSW5OLEVBQUViLEVBQUUsR0FBR2EsRUFBRSxHQUFHYixHQUFLcnlCLEVBQUZoQixJQUFRLEVBQUZtMEIsR0FBT3JzQyxFQUFGd25CLElBQU1BLEVBQUV4bkIsRUFBRSxFQUFFNkQsS0FBSzYzQyxLQUFLMTdDLEVBQUVrc0MsRUFBRUcsRUFBRSxLQUFLLEdBQUdBLEVBQUUsR0FBRzdrQixFQUFFc1gsSUFBSXRYLEVBQUVzWCxFQUFFLEVBQUVqN0IsS0FBSzYzQyxJQUFJNWMsRUFBRW9OLEVBQUVHLEVBQUUsS0FBSyxJQUFNRCxFQUFGYixJQUFRLEVBQUYzVSxHQUFPcHZCLEVBQUY4QyxJQUFNQSxFQUFFOUMsRUFBRSxFQUFFM0QsS0FBSzYzQyxLQUFLbDBDLEVBQUVrakMsRUFBRTlULEVBQUUsS0FBSyxHQUFHQSxFQUFFLEdBQUd0c0IsRUFBRWdoQyxJQUFJaGhDLEVBQUVnaEMsRUFBRSxFQUFFem5DLEtBQUs2M0MsSUFBSXBRLEVBQUVaLEVBQUU5VCxFQUFFLEtBQUssSUFBSSxDQUFDaHBCLElBQUl0RCxFQUFFa3JCLEtBQUtoTyxJQUFJNGtCLEVBQUVockMsVUFBVXM3RCxjQUFjLFNBQVNsMUMsRUFBRWxkLEVBQUU0TixFQUFFcXpCLEdBQUcsSUFBVy9qQyxFQUFMMUosS0FBU205RCxZQUFZbjhCLEVBQXJCaGhDLEtBQXlCbzlELGFBQWEsT0FBc0IxekMsRUFBYmhnQixFQUFGMFEsR0FBS3NQLEVBQUksRUFBRkEsRUFBSSxFQUFFQSxHQUFNaGdCLEVBQUUwUSxFQUFFMVEsRUFBRTBRLEVBQUVzUCxFQUFLM2pCLEtBQUtpdkIsSUFBSSxFQUFFdHJCLEVBQUUsRUFBRTBRLEVBQUUsR0FBdUQsQ0FBQ3RLLElBQXRDdEQsRUFBYncwQixFQUFGeU0sR0FBS2poQyxFQUFJLEVBQUZBLEVBQUksRUFBRUEsR0FBTXcwQixFQUFFeU0sRUFBRXpNLEVBQUV5TSxFQUFFamhDLEVBQUt6RyxLQUFLaXZCLElBQUksRUFBRWdNLEVBQUUsRUFBRXlNLEVBQUUsR0FBVS9WLEtBQUtoTyxJQUFJNGtCLEVBQUVockMsVUFBVWs3RCxPQUFPLFdBQVcsSUFBSWh5RCxFQUFFeE0sS0FBSzBKLEVBQUU4QyxFQUFFcXhELGdCQUFnQnpyQyxNQUFNb2IsRUFBRWhoQyxFQUFFcXhELGdCQUFnQmhxQyxPQUFPd2EsRUFBRTdoQyxFQUFFcXhELGdCQUFnQm5tQyxLQUFLdGMsRUFBRTVPLEVBQUVxeEQsZ0JBQWdCL3RELElBQXVDcytCLEVBQWpDcE4sRUFBRXgwQixFQUFFNnhELFVBQVUsR0FBRzd4RCxFQUFFNnhELFVBQVUsSUFBUTd4RCxFQUFFMnhELDRCQUE0QnZ4QixFQUFFN21DLEtBQUs2dEMsTUFBTWxxQyxFQUFFMGtDLEdBQUdHLEVBQUV4b0MsS0FBSzZ0QyxNQUFNcEcsRUFBRVksR0FBR3RWLEdBQUdwdkIsRUFBRWtqQyxHQUFHcGdDLEVBQUV5eEQsK0JBQStCL3FCLEdBQUcxRixFQUFFZSxHQUFHL2hDLEVBQUUweEQsK0JBQStCdjBELEdBQUc2QyxFQUFFNnhELFVBQVUsR0FBR2hyQixFQUFFN21DLEVBQUU2eEQsVUFBVSxHQUFHaHJCLEdBQUcsRUFBRWo1QixFQUFFc1AsR0FBR2tQLGFBQWFqc0IsR0FBR0gsRUFBRTZ4RCxVQUFVLEdBQUdqckIsRUFBRTVtQyxFQUFFNnhELFVBQVUsR0FBR2pyQixHQUFHLEVBQUVoNUIsRUFBRXNQLEdBQUdpUCxZQUFZeWEsRUFBRXpwQyxFQUFFNkMsRUFBRXV4RCxrQkFBOER2eEIsRUFBRSxDQUFDMThCLElBQVhzTCxHQUFHODNCLEdBQXJDdm1DLEVBQUVILEVBQUV3eEQsb0JBQStDdG1DLEtBQTNCMlcsR0FBR3ZWLEVBQUVzYSxHQUE2QitrQixPQUFPM3JELEVBQUVxeEQsZ0JBQWdCMUYsT0FBTy9wQixFQUFFZ3FCLE9BQU81ckQsRUFBRXF4RCxnQkFBZ0J6RixPQUFPaHFCLEdBQUc1aEMsRUFBRTB3RCxRQUFPLEVBQUcxd0QsRUFBRXF5RCxTQUFTanlCLEVBQUVwZ0MsRUFBRXN5RCxVQUFVdndCLEVBQUUvaEMsRUFBRXN4RCxlQUFldHhCLEVBQUVoZ0MsRUFBRWt5RCxZQUFZeDhELEVBQUVzSyxFQUFFa3lELFdBQVdseUQsRUFBRWt5RCxVQUFVLE1BQU1seUQsRUFBRWt5RCxVQUFVanhCLEVBQUUsV0FBV3J6QixFQUFFZzNDLFNBQVNwWixhQUFheHJDLEVBQUV3ckQsU0FBU3hyRCxFQUFFc3hELG1CQUFtQnh2QixFQUFFaHJDLFVBQVV5N0QsV0FBVyxTQUFTcjFDLEdBQUcsSUFBSStqQixFQUFFenRDLEtBQUtnaEMsRUFBRWo3QixLQUFLaXZCLEtBQUssSUFBSWhzQixNQUFNczhDLFVBQVU3WCxFQUFFbFQsVUFBVSxHQUFHaVQsRUFBRUMsRUFBRWd3QixVQUFVcHZCLEVBQUVaLEVBQUUrdkIsVUFBVXBpRCxFQUFFcXlCLEVBQUVpd0IsVUFBVSxPQUFPandCLEVBQUV1eEIsVUFBVXQxRCxFQUFFZ2dCLEdBQUcrakIsRUFBRWl2QixXQUFXMzlCLFlBQVksaUNBQWlDM2tCLEVBQUU1TixHQUFHb2MsSUFBSSxhQUFhNmtCLEVBQUVpeEIsWUFBWXg4RCxFQUFFdXJDLEVBQUVpeEIsV0FBV2p4QixFQUFFaXhCLFVBQVUsTUFBTWp4QixFQUFFZ3dCLFdBQVUsRUFBR2h3QixFQUFFK3ZCLFdBQVUsRUFBRy92QixFQUFFaXdCLFdBQVUsRUFBR2p3QixFQUFFeXZCLE9BQU96dkIsRUFBRXd4QixNQUFNdjFDLElBQUkrakIsRUFBRTFSLE1BQU0sSUFBSTBSLEVBQUV5eEIsVUFBVXp4QixFQUFFNHZCLFVBQVVyOEIsRUFBRSxHQUFHeU0sRUFBRTB4QixVQUFVMXhCLEVBQUU2dkIsVUFBVXQ4QixFQUFFLEdBQUd5TSxFQUFFMnhCLE9BQU9yNUQsS0FBS2l2QixJQUFJLEdBQUd5WSxFQUFFMVIsTUFBTWgyQixLQUFLMDFDLElBQUksSUFBSWhPLEVBQUUxUixNQUFNLEVBQUVoMkIsS0FBS2l2QyxJQUFJdkgsRUFBRXl4QixXQUFXenhCLEVBQUUxUixhQUFhc1MsRUFBRVosRUFBRTR4QixhQUFhamtELEVBQUVxeUIsRUFBRTZ4QixhQUFhN3hCLEVBQUU4eEIsV0FBVy94QixNQUFNYyxFQUFFaHJDLFVBQVVpOEQsV0FBVyxTQUFTNzFDLEdBQUcsSUFBSWxkLEVBQUV4TSxLQUFLeXRDLEdBQUUsRUFBR2poQyxFQUFFb2xDLFNBQVN3bEIsV0FBVSxFQUFHNXFELEVBQUVveEQsY0FBYyxLQUFLLEtBQUtsMEMsR0FBeUIsR0FBdEIzakIsS0FBS2l2QyxJQUFJeG9DLEVBQUU4d0QsWUFBZWxqRCxFQUFFZzNDLFNBQVNqMUIsUUFBUTN2QixFQUFFb2xDLFNBQVNoTCxRQUFRNHdCLE9BQU8sQ0FBQzFuRCxJQUFJdEQsRUFBRW14RCxlQUFlN3RELElBQUl0RCxFQUFFOHdELFVBQVUsSUFBSTl3RCxFQUFFMnlELFVBQVVscEMsUUFBUSxHQUFHLEtBQUt3WCxFQUFFamhDLEVBQUVvbEMsU0FBU2loQixPQUFNLEVBQUcsTUFBTSxLQUFLbnBDLEdBQWUsR0FBWmxkLEVBQUU2d0QsV0FBc0MsRUFBeEI3d0QsRUFBRW9sQyxTQUFTNGpCLE1BQU1ueUQsT0FBU29xQyxFQUFFamhDLEVBQUVvbEMsU0FBUzhrQixTQUFTbHFELEVBQUU0eUQsUUFBUSxLQUFLMTFDLEdBQUdsZCxFQUFFNndELFdBQVcsSUFBNEIsRUFBeEI3d0QsRUFBRW9sQyxTQUFTNGpCLE1BQU1ueUQsU0FBV29xQyxFQUFFamhDLEVBQUVvbEMsU0FBU3RsQyxLQUFLRSxFQUFFNHlELFVBQWEsSUFBSjN4QixHQUFRLEtBQUsvakIsR0FBRyxLQUFLQSxHQUFHbGQsRUFBRW9sQyxTQUFTd2tCLE9BQU81cEQsRUFBRW9sQyxTQUFTaEwsUUFBUXRyQixNQUFNLEtBQUs5TyxFQUFFa3dELFdBQVczOUIsWUFBWSx3QkFBd0J1UCxFQUFFaHJDLFVBQVUrN0QsV0FBVyxXQUFXLElBQUkzMUMsRUFBRWxkLEVBQUVpaEMsRUFBRXZyQyxFQUFFbEMsS0FBS2tDLEVBQUU0N0QsaUJBQXNGdHhELEdBQTVCLElBQXpDdEssRUFBRTB2QyxTQUFTaEwsUUFBUW5NLEtBQUtnVyxNQUFNMmlCLFVBQWUxcEMsRUFBRXhuQixFQUFFNDdELGVBQWVwbUMsS0FBT3gxQixFQUFFNDdELGVBQWVodUQsTUFBTTRaLEVBQUV4bkIsRUFBRTQ3RCxlQUFlcG1DLEtBQUt4MUIsRUFBRWc5RCxVQUFVaDlELEVBQUU2NUIsTUFBUTc1QixFQUFFNDdELGVBQWVodUQsSUFBSTVOLEVBQUVpOUQsVUFBVWo5RCxFQUFFNjVCLFFBQU8wUixFQUFFdnJDLEVBQUUwOEQsY0FBY2wxQyxFQUFFbGQsRUFBRXRLLEVBQUUyN0QsZ0JBQWdCenJDLE1BQU1sd0IsRUFBRTI3RCxnQkFBZ0JocUMsU0FBVXpCLE1BQU1sd0IsRUFBRTI3RCxnQkFBZ0J6ckMsTUFBTXFiLEVBQUU1WixPQUFPM3hCLEVBQUUyN0QsZ0JBQWdCaHFDLE9BQU96WixFQUFFZzNDLFNBQVNqMUIsUUFBUWo2QixFQUFFODFELFNBQVN2cUIsRUFBRSxPQUFPYSxFQUFFaHJDLFVBQVVnOEQsV0FBVyxXQUFXLElBQUk1MUMsRUFBRWxkLEVBQUVpaEMsRUFBRXZyQyxFQUFFd0gsRUFBRTFKLEtBQUtnaEMsRUFBRXQzQixFQUFFa29DLFNBQVNoTCxRQUFRNEcsRUFBRTlqQyxFQUFFbTFELFNBQVN4d0IsRUFBRTNrQyxFQUFFbzFELFVBQVVwMUQsRUFBRW8wRCxpQkFBaUJwMEMsRUFBRWhnQixFQUFFbzBELGVBQWVwbUMsS0FBNEJ4MUIsRUFBRSxDQUFDNE4sSUFBMUJ0RCxFQUFFOUMsRUFBRW8wRCxlQUFlaHVELElBQWE0bkIsS0FBS2hPLEVBQUUwSSxNQUFNb2IsRUFBRTNaLE9BQU93YSxFQUFFOHBCLE9BQU8sRUFBRUMsT0FBTyxHQUFHaCtDLEVBQUVnM0MsU0FBU3BaLGFBQWF0dUMsRUFBRXN1RCxTQUFTOTFELEdBQUdzckMsRUFBRTlqQyxFQUFFeXpELGFBQWE5dUIsRUFBRTNrQyxFQUFFMHpELGFBQWExekQsRUFBRWtvQyxTQUFTMm1CLFdBQVcsS0FBSy9xQixFQUFFeE0sRUFBRTVPLE9BQU9pYyxFQUFFck4sRUFBRW5OLE9BQU9ucUIsRUFBRWtvQyxTQUFTbW1CLGNBQWNydUQsRUFBRXEwRCxrQkFBa0JyMEQsRUFBRXMwRCxrQkFBa0IsTUFBTXZ3QixFQUFFL2pDLEVBQUVrMUQsY0FBY2wxQyxFQUFFbGQsRUFBRWdoQyxFQUFFYSxHQUFHajBCLEVBQUVnM0MsU0FBU3BaLGFBQWF0dUMsRUFBRXNTLFFBQVE1QixFQUFFZzNDLFNBQVN4aEIsYUFBYWxtQyxFQUFFc3VELFdBQVc1OUMsRUFBRWczQyxTQUFTajFCLFFBQVF6eUIsRUFBRXN1RCxTQUFTdnFCLEVBQUUsUUFBUWEsRUFBRWhyQyxVQUFVMjdELE1BQU0sU0FBU3YxQyxHQUErSixTQUFGMGtCLEVBQVc1aEMsR0FBRyxJQUFJdEssRUFBRXNyQyxFQUFFL1MsS0FBS2p1QixHQUFHLEdBQUc0TixFQUFFN1ksV0FBV1csS0FBS0EsRUFBRUEsRUFBRXJCLE1BQU1tZ0MsRUFBRSxDQUFDd00sRUFBRTlqQixLQUFLeG5CLEVBQUUsT0FBT0EsR0FBRyxJQUFJLFFBQVE4K0IsRUFBRTZ4QixNQUFNcGxCLEVBQUUreEIsWUFBWSxNQUFNLElBQUksaUJBQWlCeCtCLEVBQUV5NUIsZ0JBQWUsR0FBSSxNQUFNLElBQUksT0FBT3o1QixFQUFFMTBCLE9BQU8sTUFBTSxJQUFJLGNBQTZCLEVBQWYwMEIsRUFBRXcwQixNQUFNbnlELE9BQVMyOUIsRUFBRTEwQixPQUFPMDBCLEVBQUU2eEIsTUFBTXBsQixFQUFFK3hCLFlBQVksTUFBTSxJQUFJLE9BQU8sU0FBU2h5QixFQUFFOXJDLE9BQU84ckMsRUFBRW1xQixVQUFVbnFCLEVBQUU2ckIsVUFBVXI0QixFQUFFMjNCLFNBQVMzM0IsRUFBRXUzQixhQUFhdjNCLEVBQUUwM0IsZUFBZTEzQixFQUFFKzJCLGNBQWMzOEMsRUFBRWt6QixHQUFHdE4sRUFBRXcwQixNQUFNbnlELE9BQU8sR0FBRzI5QixFQUFFNnhCLE1BQU1wbEIsRUFBRSt4QixjQUF4akIsSUFBSWh6RCxFQUFFaWhDLEVBQUV6dEMsS0FBS2tDLEVBQUVrWSxFQUFFc1AsRUFBRWxrQixRQUFRdzdCLEVBQUV5TSxFQUFFbUUsU0FBU3BFLEVBQUV4TSxFQUFFNEYsUUFBUXlILEVBQUUza0IsR0FBR2hnQixFQUFFZ2dCLElBQUkrakIsRUFBRXV2QixZQUFZNWhELEVBQUVpekIsRUFBRSxHQUFHQSxFQUFFLEdBQUdnRixFQUFFNUYsRUFBRWd2QixPQUFPeHlCLFNBQVN2UyxLQUFLLEVBQUU0VyxFQUFFRCxFQUFFLEdBQUdBLEVBQUUsR0FBRytFLEVBQUUzRixFQUFFZ3ZCLE9BQU94eUIsU0FBU242QixJQUFJLEVBQSthLEtBQUs0WixFQUFFK0IsZUFBZSxHQUFHL0IsRUFBRStCLGNBQWMxVixRQUFRaXJCLEVBQUVvMkIsV0FBV2g4QyxFQUFFbFosRUFBRSxHQUFHaXdDLFlBQVlqd0MsRUFBRStuQyxTQUFTdlMsTUFBTSxDQUFDLEdBQUd4MUIsRUFBRWdZLEdBQUcsb0VBQW9FMU4sRUFBRSxlQUFlLEdBQUd0SyxFQUFFZ1ksR0FBRyxtQkFBbUIxTixFQUFFLFlBQVksQ0FBQyxJQUFJdzBCLEVBQUU0RixRQUFRb3hCLFdBQVdoM0IsRUFBRTRGLFFBQVFveEIsU0FBU2xqRCxJQUFJNFUsRUFBRWxrQixRQUFRbkMsT0FBTyxPQUFPbUosRUFBRSxVQUFVLEdBQUdpaEMsRUFBRWd5QixPQUFPLENBQUMsR0FBR3BpQyxhQUFhb1EsRUFBRWd5QixRQUFRaHlCLEVBQUVneUIsT0FBTyxLQUF3QixHQUFuQjE1RCxLQUFLaXZDLElBQUk1NUIsRUFBRXF5QixFQUFFaXlCLE9BQTZCLEdBQW5CMzVELEtBQUtpdkMsSUFBSTFHLEVBQUViLEVBQUVreUIsT0FBVTMrQixFQUFFbzJCLFVBQVUsT0FBT3AzRCxLQUFLb3VDLEVBQUUsV0FBVzVoQyxRQUFRaWhDLEVBQUVpeUIsS0FBS3RrRCxFQUFFcXlCLEVBQUVreUIsS0FBS3J4QixFQUFFZCxFQUFFL1MsS0FBSyxXQUFXanVCLElBQUlnaEMsRUFBRS9TLEtBQUssV0FBV2p1QixLQUFLZ2hDLEVBQUUvUyxLQUFLLFFBQVFqdUIsR0FBR2loQyxFQUFFZ3lCLE9BQU8zL0MsV0FBVyxXQUFXMnRCLEVBQUVneUIsT0FBTyxLQUFLcnhCLEVBQUUsUUFBUTVoQyxJQUFJLEtBQUs0aEMsRUFBRSxRQUFRNWhDLEdBQUcsT0FBT3hNLE9BQU9vYSxFQUFFNU4sR0FBRytiLEdBQUcsZ0JBQWdCLFNBQVNtQixFQUFFbGQsR0FBR0EsSUFBSUEsRUFBRW96RCxZQUFZcHpELEVBQUVvekQsVUFBVSxJQUFJdHhCLEVBQUU5aEMsTUFBTTROLEVBQUU1TixHQUFHK2IsR0FBRyxpQkFBaUIsU0FBU21CLEVBQUVsZCxHQUFHQSxHQUFHQSxFQUFFb3pELFdBQVdwekQsRUFBRW96RCxVQUFVeGQsWUFENmtvQixDQUNoa29CcmlELE9BQU9ILFNBQVNHLE9BQU9nRCxRQUFRLFNBQVMybUIsRUFBRWxkLEdBQUcsYUFBbUIsU0FBRjROLEVBQVdzUCxHQUFHMXBCLEtBQUs0eEMsU0FBU2xvQixFQUFFMXBCLEtBQUttRCxPQUFRcUosRUFBRXRILE9BQU9rVixFQUFFOVcsVUFBVSxDQUFDMjNCLE1BQU0sS0FBS3E5QixVQUFTLEVBQUd1SCxRQUFRLEtBQUs5akMsTUFBTSxJQUFJNTRCLEtBQUssV0FBVyxJQUFJdW1CLEVBQUUxcEIsS0FBSzBwQixFQUFFbTJDLFFBQVFuMkMsRUFBRWtvQixTQUFTc2tCLE1BQU0xRSxRQUFRamhELEtBQUssd0JBQXdCZ1ksR0FBRyxRQUFRLFdBQVdtQixFQUFFOUQsWUFBWThELEVBQUVrb0IsU0FBUzRqQixNQUFNbnlELE9BQU8sSUFBSXFtQixFQUFFa29CLFNBQVM0akIsTUFBTTlyQyxFQUFFa29CLFNBQVM2akIsV0FBV2g3QixLQUFLaTRCLFlBQVlocEMsRUFBRW0yQyxRQUFRbDZDLFFBQVFsRCxJQUFJLFdBQVcsSUFBSWlILEVBQUUxcEIsS0FBSzBwQixFQUFFa29CLFVBQVVsb0IsRUFBRWtvQixTQUFTaEwsVUFBVWxkLEVBQUVrb0IsU0FBU2hMLFFBQVFuTSxLQUFLNGMsTUFBTTN0QixFQUFFa29CLFNBQVM2akIsVUFBVS9yQyxFQUFFa29CLFNBQVM0akIsTUFBTW55RCxPQUFPLEdBQUdxbUIsRUFBRXVSLE1BQU1uYixXQUFXLFdBQVc0SixFQUFFa29CLFNBQVN0bEMsUUFBUW9kLEVBQUVrb0IsU0FBU2hMLFFBQVFuTSxLQUFLaTRCLFVBQVUzMkIsT0FBT3JTLEVBQUVxUyxRQUFRclMsRUFBRS9GLE9BQU8rRixFQUFFa29CLFNBQVNpbEIsbUJBQW1CLEVBQUVudEMsRUFBRWtvQixTQUFTbWxCLGlCQUFpQitJLE1BQU0sV0FBc0J6aUMsYUFBTHI5QixLQUFvQmk3QixPQUFwQmo3QixLQUE2Qmk3QixNQUFNLE1BQU1obkIsTUFBTSxXQUFXLElBQVd6SCxFQUFMeE0sS0FBUzR4QyxTQUFTaEwsUUFBbEI1bUMsS0FBNEI0eEMsVUFBVXBsQyxJQUFJQSxFQUFFaXVCLEtBQUs0YyxNQUFNN3FDLEVBQUU4TyxNQUF6RHRiLEtBQWlFNHhDLFNBQVM0akIsTUFBTW55RCxPQUFPLEtBQXZGckQsS0FBOEZzNEQsVUFBUyxFQUF2R3Q0RCxLQUE0RzYvRCxRQUFRL3RELEtBQUssUUFBUXRGLEVBQUVpdUIsS0FBSzg1QixLQUFLL25ELEVBQUVpdUIsS0FBSzFsQixNQUFNKy9DLFdBQVdwMkIsU0FBUywwQkFBMEJseUIsRUFBRXFyRCxZQUExTTczRCxLQUF3TnlpQixRQUFRa0IsS0FBSyxXQUFXLElBQVduWCxFQUFMeE0sS0FBUzR4QyxTQUFTaEwsUUFBbEI1bUMsS0FBNEI4L0QsUUFBNUI5L0QsS0FBc0M2L0QsUUFBUS90RCxLQUFLLFFBQVF0RixFQUFFaXVCLEtBQUs4NUIsS0FBSy9uRCxFQUFFaXVCLEtBQUsxbEIsTUFBTTgvQyxZQUFZOTFCLFlBQVksMEJBQTVHLytCLEtBQXdJczRELFVBQVMsR0FBSTF5QyxPQUFPLFdBQWlCNWxCLEtBQU9zNEQsU0FBUHQ0RCxLQUFrQjJqQixPQUFsQjNqQixLQUEyQmlVLFdBQVd6SCxFQUFFa2QsR0FBR25CLEdBQUcsQ0FBQ3czQyxZQUFZLFNBQVNyMkMsRUFBRWxkLEdBQUdBLElBQUlBLEVBQUU2ckQsWUFBWTdyRCxFQUFFNnJELFVBQVUsSUFBSWorQyxFQUFFNU4sS0FBS3d6RCxnQkFBZ0IsU0FBU3QyQyxFQUFFbGQsRUFBRTROLEVBQUVxekIsR0FBRyxJQUFJdnJDLEVBQUVzSyxHQUFHQSxFQUFFNnJELFVBQVU1cUIsRUFBRXZyQyxHQUFHa1ksRUFBRXFnQixLQUFLaTRCLFVBQVVRLFdBQVdoeEQsRUFBRStSLFFBQVEvUixHQUFHQSxFQUFFbzJELFVBQVVwMkQsRUFBRTQ5RCxTQUFTRyxlQUFlLFNBQVN2MkMsRUFBRWxkLEdBQUssSUFBSWloQyxFQUFFamhDLEdBQUdBLEVBQUU2ckQsVUFBVTVxQixHQUFHQSxFQUFFNnFCLFVBQVU3cUIsRUFBRWhyQixPQUFPeTlDLGtCQUFrQixTQUFTOWxELEVBQUVxekIsRUFBRXZyQyxFQUFFd0gsRUFBRXMzQixHQUFHLElBQUl3TSxFQUFFQyxHQUFHQSxFQUFFNHFCLFdBQVc3cUIsSUFBSXRyQyxFQUFFdTRCLEtBQUtpNEIsV0FBVyxLQUFLMXhCLEdBQUcsS0FBS0EsR0FBR3gwQixFQUFFa2QsRUFBRXJVLGVBQWU2RSxHQUFHLG9CQUFvQnhRLEVBQUUwZixpQkFBaUJva0IsRUFBRTVuQixXQUFXdTZDLGlDQUFpQyxTQUFTejJDLEVBQUVsZCxHQUFHLElBQUk0TixFQUFFNU4sR0FBR0EsRUFBRTZyRCxVQUFVaitDLEdBQUdBLEVBQUV1SixVQUFVblgsRUFBRWtkLEdBQUduQixHQUFHLG1CQUFtQixXQUFXLElBQUluTyxFQUFFNU4sRUFBRTRrRCxTQUFTNEUsY0FBY3ZvQixFQUFFcnpCLEdBQUdBLEVBQUVpK0MsVUFBVTVxQixHQUFHQSxFQUFFNnFCLFdBQVc1dUMsRUFBRThQLE9BQU9pVSxFQUFFcXlCLFFBQVFyeUIsRUFBRWhyQixTQUFuMUQsQ0FBNjFEN2lCLFNBQVNHLE9BQU9nRCxRQUFRLFNBQVMybUIsRUFBRWxkLEdBQUcsYUFBYSxJQUFJNE4sRUFBRSxXQUFXLElBQUk1TixFQUFFNE4sRUFBRXF6QixFQUFFdnJDLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixpQkFBaUIsb0JBQW9CLG9CQUFvQixtQkFBbUIsbUJBQW1CLENBQUMsMEJBQTBCLHVCQUF1QiwwQkFBMEIsMEJBQTBCLHlCQUF5Qix5QkFBeUIsQ0FBQywwQkFBMEIseUJBQXlCLGlDQUFpQyx5QkFBeUIseUJBQXlCLHlCQUF5QixDQUFDLHVCQUF1QixzQkFBc0IsdUJBQXVCLHVCQUF1QixzQkFBc0Isc0JBQXNCLENBQUMsc0JBQXNCLG1CQUFtQixzQkFBc0Isc0JBQXNCLHFCQUFxQixzQkFBc0J3SCxFQUFFLEdBQUcsSUFBSTBRLEVBQUUsRUFBRUEsRUFBRWxZLEVBQUVtQixPQUFPK1csSUFBSSxJQUFHNU4sRUFBRXRLLEVBQUVrWSxLQUFNNU4sRUFBRSxLQUFLa2QsRUFBRSxDQUFDLElBQUkrakIsRUFBRSxFQUFFQSxFQUFFamhDLEVBQUVuSixPQUFPb3FDLElBQUkvakMsRUFBRXhILEVBQUUsR0FBR3VyQyxJQUFJamhDLEVBQUVpaEMsR0FBRyxPQUFPL2pDLEVBQUUsT0FBTSxFQUF0ekIsR0FBNHpCLElBQUkwUSxFQUFFLE9BQVk1TixFQUFFNGtELFNBQVNqUCxTQUFTc1EsT0FBT0UsWUFBVyxFQUFJLElBQUlsbEIsRUFBRSxDQUFDMnlCLFFBQVEsU0FBUzV6RCxJQUFHQSxFQUFFQSxHQUFHa2QsRUFBRWhhLGlCQUFrQjBLLEVBQUVpbUQsbUJBQW1CN3pELEVBQUU4ekQsdUJBQXVCQyxLQUFLLFdBQVc3MkMsRUFBRXRQLEVBQUVvbUQsbUJBQW1CNTZDLE9BQU8sU0FBU3BaLEdBQUdBLEVBQUVBLEdBQUdrZCxFQUFFaGEsZ0JBQWdCMVAsS0FBS3lnRSxlQUFlemdFLEtBQUt1Z0UsT0FBT3ZnRSxLQUFLb2dFLFFBQVE1ekQsSUFBSWkwRCxhQUFhLFdBQVcsT0FBT0MsUUFBUWgzQyxFQUFFdFAsRUFBRXVtRCxxQkFBcUJsckQsUUFBUSxXQUFXLE9BQU9pckQsUUFBUWgzQyxFQUFFdFAsRUFBRXdtRCxzQkFBc0JwMEQsRUFBRWtkLEdBQUduQixHQUFHLENBQUN3M0MsWUFBWSxTQUFTcjJDLEVBQUVsZCxHQUFHLElBQUk0TixFQUFFbFksRUFBRXNLLEVBQUUwcEQsTUFBTTFFLFFBQVFqaEQsS0FBSyw4QkFBOEIvRCxJQUFJQSxFQUFFcTBELFlBQVlyMEQsRUFBRWdwRCxNQUFNaHBELEVBQUVpcEQsV0FBV2g3QixLQUFLazRCLGFBQVl2NEMsRUFBRTVOLEVBQUUwcEQsTUFBTTFrQyxXQUFZakosR0FBRyxzQkFBc0IsNkJBQTZCLFNBQVNtQixHQUFHQSxFQUFFUixrQkFBa0JRLEVBQUVOLGlCQUFpQnFrQixFQUFFN25CLE9BQU94TCxFQUFFLE1BQU01TixFQUFFaXVCLEtBQUtrNEIsYUFBMEMsSUFBOUJubUQsRUFBRWl1QixLQUFLazRCLFdBQVdPLFdBQWdCemxCLEVBQUUyeUIsUUFBUWhtRCxFQUFFLElBQUk1TixFQUFFcTBELFdBQVdwekIsR0FBR3ZyQyxFQUFFeWpCLFFBQVF1NkMsa0JBQWtCLFNBQVN4MkMsRUFBRWxkLEVBQUU0TixFQUFFcXpCLEVBQUV2ckMsR0FBR3NLLEdBQUdBLEVBQUVxMEQsWUFBWSxLQUFLMytELElBQUl1ckMsRUFBRXJrQixpQkFBaUI1YyxFQUFFcTBELFdBQVdqN0MsT0FBT3BaLEVBQUUwcEQsTUFBTTFrQyxVQUFVLE1BQU1zdkMsaUJBQWlCLFNBQVNwM0MsR0FBR0EsR0FBR0EsRUFBRW0zQyxZQUFZcHpCLEVBQUU4eUIsVUFBVS96RCxFQUFFa2QsR0FBR25CLEdBQUduTyxFQUFFMm1ELGlCQUFpQixXQUFXLElBQUlyM0MsRUFBRWxkLEVBQUU0a0QsU0FBUzRFLGNBQWN0c0MsRUFBRWtkLFNBQVMsVUFBVWxkLEVBQUVrZCxRQUFRbGxDLE1BQU1nb0IsRUFBRTJ0QyxjQUFjM3RDLEVBQUVrZCxRQUFRb3hCLFNBQVN0ekMsSUFBSSxhQUFhLFFBQVFnRixFQUFFMnRDLGFBQVksRUFBRzN0QyxFQUFFdXdCLFFBQU8sR0FBRyxFQUFHLE1BQTcvRCxDQUFvZ0VyNkMsU0FBU0csT0FBT2dELFFBQVEsU0FBUzJtQixFQUFFbGQsR0FBRyxhQUFtQixTQUFGNE4sRUFBV3NQLEdBQUcxcEIsS0FBSzR4QyxTQUFTbG9CLEVBQUUxcEIsS0FBS21ELE9BQVFxSixFQUFFdEgsT0FBT2tWLEVBQUU5VyxVQUFVLENBQUN1OEQsUUFBUSxLQUFLbUIsTUFBTSxLQUFLQyxNQUFNLEtBQUtDLFdBQVUsRUFBRy85RCxLQUFLLFdBQVcsSUFBSXVtQixFQUFFMXBCLEtBQUt3TSxFQUFFa2QsRUFBRWtvQixTQUFTNGpCLE1BQU0sR0FBR3A3QyxFQUFFc1AsRUFBRWtvQixTQUFTNGpCLE1BQU0sR0FBRzlyQyxFQUFFbTJDLFFBQVFuMkMsRUFBRWtvQixTQUFTc2tCLE1BQU0xRSxRQUFRamhELEtBQUssMEJBQWtELEVBQXhCbVosRUFBRWtvQixTQUFTNGpCLE1BQU1ueUQsUUFBVXFtQixFQUFFa29CLFNBQVM0akIsTUFBTTlyQyxFQUFFa29CLFNBQVM2akIsV0FBV2g3QixLQUFLbTRCLFNBQVMsU0FBU3BtRCxFQUFFOUssTUFBTThLLEVBQUVpdUIsS0FBSzIrQixPQUFPNXNELEVBQUVpdUIsS0FBSzg3QixVQUFVLFNBQVNuOEMsRUFBRTFZLE1BQU0wWSxFQUFFcWdCLEtBQUsyK0IsT0FBT2gvQyxFQUFFcWdCLEtBQUs4N0IsU0FBUzdzQyxFQUFFbTJDLFFBQVF0M0MsR0FBRyxRQUFRLFdBQVdtQixFQUFFOUQsV0FBVzhELEVBQUU0dUMsVUFBUyxJQUFLNXVDLEVBQUVtMkMsUUFBUWw2QyxPQUFPK0QsRUFBRTR1QyxVQUFTLElBQUtoMkMsT0FBTyxXQUFXLElBQUlvSCxFQUFFdFAsRUFBRXF6QixFQUFFenRDLEtBQUs0eEMsU0FBUzV4QyxLQUFLZ2hFLE1BQU14MEQsRUFBRSx1Q0FBdUNra0IsU0FBUytjLEVBQUV5b0IsTUFBTTFrQyxXQUFXOUgsRUFBRSxPQUFPbGQsRUFBRXZJLEtBQUt3cEMsRUFBRStuQixNQUFNLFNBQVNocEQsRUFBRWloQyxJQUFHcnpCLEVBQUVxekIsRUFBRWhULEtBQUsyK0IsUUFBUTNyQixFQUFFaFQsS0FBSzg3QixPQUFPOW9CLEVBQUVoVCxLQUFLODdCLE9BQU96a0QsS0FBSyxPQUFPLFFBQVMsVUFBVTI3QixFQUFFL3JDLE9BQU8wWSxFQUFFcXpCLEVBQUU5ckMsS0FBS3lZLEdBQUdBLEVBQUUvVyxTQUFTcW1CLEdBQUcsbUJBQW1CbGQsRUFBRSxrRUFBa0U0TixFQUFFLGVBQWVzUCxHQUFHLFFBQVExcEIsS0FBS2loRSxNQUFNejBELEVBQUVrZCxHQUFHZ0gsU0FBUzF3QixLQUFLZ2hFLE9BQU96NEMsR0FBRyxRQUFRLEtBQUssV0FBV2tsQixFQUFFMm9CLE9BQU81cEQsRUFBRXhNLE1BQU0waUIsS0FBSyxZQUFZMWlCLEtBQUtpaEUsTUFBTTF3RCxLQUFLLE9BQU9vVixPQUFPOEMsSUFBSSxPQUFPLFdBQVcsSUFBSWlCLEVBQUV0UCxFQUFFcXpCLEVBQUV2ckMsRUFBRXdILEVBQUU4QyxFQUFFeE0sTUFBTWtVLFNBQVM2cUIsWUFBWSwyQkFBMkJpQyxFQUFFdDNCLEVBQUVvbEMsYUFBYXRCLEVBQUU5akMsRUFBRXFsQyxjQUFjcmxCLEVBQUUxcEIsS0FBS3k1RCxjQUFjejVELEtBQUtveUIsTUFBOENsd0IsR0FBeENrWSxFQUFFcGEsS0FBSzA1RCxlQUFlMTVELEtBQUs2ekIsUUFBaUIyWixFQUFLLElBQWZDLEVBQUUvakIsRUFBRXNYLElBQWlCLEdBQUg5K0IsSUFBU0EsRUFBRnVyQyxHQUFLL2pCLEdBQUd4bkIsRUFBRWtZLEVBQUVvekIsSUFBSTlqQixFQUFFc1gsRUFBRTVtQixHQUFHcXpCLElBQUlqaEMsRUFBRXhNLE1BQU0wa0IsSUFBSSxDQUFDME4sTUFBTXJzQixLQUFLNnRDLE1BQU1scUIsR0FBR21LLE9BQU85dEIsS0FBSzZ0QyxNQUFNeDVCLEdBQUcrbUQsYUFBYXA3RCxLQUFLMDFDLElBQUksRUFBRTExQyxLQUFLNnRDLE1BQU0sR0FBR3BHLEVBQUUsR0FBR3B6QixJQUFJZ25ELGNBQWNyN0QsS0FBSzAxQyxJQUFJLEVBQUUxMUMsS0FBSzZ0QyxNQUFNLEdBQUc1UyxFQUFFLEdBQUd0WCxNQUFNbEUsU0FBU3ZoQixLQUFLLFdBQVdqRSxLQUFLMkIsSUFBSTZLLEVBQUV4TSxNQUFNMGlCLEtBQUssVUFBVXROLE1BQU0sV0FBV3BWLEtBQUs0eEMsU0FBU2hMLFNBQVM1bUMsS0FBS2loRSxNQUFNbG1ELFdBQVdna0IsWUFBWSwwQkFBMEIxdUIsT0FBTyxnQkFBZ0JyUSxLQUFLNHhDLFNBQVNoTCxRQUFRdHJCLE1BQU0sTUFBTW9qQixTQUFTLDBCQUEwQnRwQixTQUFTeTlDLE1BQU0sV0FBVzd5RCxLQUFLZ2hFLE1BQU1yN0MsUUFBUXMwQixPQUFPLFdBQVdqNkMsS0FBSzR4QyxTQUFTc2tCLE1BQU0xa0MsVUFBVXdOLFlBQVksdUJBQXVCaC9CLEtBQUtraEUsV0FBV2xoRSxLQUFLa2hFLFdBQVdsaEUsS0FBS2doRSxPQUFPaGhFLEtBQUtzaUIsU0FBU3RpQixLQUFLNHhDLFNBQVN2b0IsUUFBUSxnQkFBZ0JycEIsS0FBS29WLFNBQVNwVixLQUFLZ2hFLE9BQU9oaEUsS0FBSzR4QyxTQUFTdm9CLFFBQVEsZ0JBQWdCcnBCLEtBQUs0eEMsU0FBU3FJLFVBQVV0MEIsS0FBSyxXQUFXM2xCLEtBQUtraEUsV0FBVSxFQUFHbGhFLEtBQUtpNkMsVUFBVXowQixLQUFLLFdBQVd4bEIsS0FBS2toRSxXQUFVLEVBQUdsaEUsS0FBS2k2QyxVQUFVcjBCLE9BQU8sV0FBVzVsQixLQUFLa2hFLFdBQVdsaEUsS0FBS2toRSxVQUFVbGhFLEtBQUtpNkMsWUFBWXp0QyxFQUFFa2QsR0FBR25CLEdBQUcsQ0FBQ3czQyxZQUFZLFNBQVNyMkMsRUFBRWxkLEdBQUdBLElBQUlBLEVBQUU2MEQsU0FBUzcwRCxFQUFFNjBELE9BQU8sSUFBSWpuRCxFQUFFNU4sS0FBS3d6RCxnQkFBZ0IsU0FBU3QyQyxFQUFFbGQsRUFBRTROLEVBQUVxekIsR0FBRyxJQUFJdnJDLEVBQUVzSyxHQUFHQSxFQUFFNjBELE9BQU8sR0FBR24vRCxHQUFHQSxFQUFFbzJELFNBQVMsQ0FBQyxHQUFHbCtDLEVBQUV3M0MsTUFBTSxPQUFPMXZELEVBQUUyOUQsUUFBUWw2QyxZQUFZempCLEVBQUV5akIsT0FBTzhuQixJQUE2QixJQUExQmpoQyxFQUFFaXVCLEtBQUttNEIsT0FBT00sV0FBZ0JoeEQsRUFBRXNqQixPQUFPdGpCLEVBQUVnL0QsV0FBV2gvRCxFQUFFa1QsVUFBVThxRCxrQkFBa0IsU0FBU3gyQyxFQUFFbGQsRUFBRTROLEVBQUVxekIsRUFBRXZyQyxHQUFHLElBQUl3SCxFQUFFOEMsR0FBR0EsRUFBRTYwRCxPQUFPMzNELEdBQUdBLEVBQUU0dUQsVUFBVSxLQUFLcDJELElBQUl1ckMsRUFBRXJrQixpQkFBaUIxZixFQUFFa2MsV0FBV2s3QyxpQkFBaUIsU0FBU3AzQyxFQUFFbGQsR0FBRyxJQUFJNE4sRUFBRTVOLEdBQUdBLEVBQUU2MEQsT0FBT2puRCxHQUFHQSxFQUFFOG1ELFlBQXVDLElBQTVCMTBELEVBQUVpdUIsS0FBS200QixPQUFPVSxhQUFrQmw1QyxFQUFFeTRDLFdBQTVsRixDQUF3bUZqekQsU0FBU0csT0FBT2dELFFBQVEsU0FBUzJtQixFQUFFbGQsRUFBRTROLEdBQUcsYUFBYSxTQUFTcXpCLElBQUksSUFBSS9qQixFQUFFbGQsRUFBRTBJLFNBQVNELEtBQUtvbkQsT0FBTyxHQUFHamlELEVBQUVzUCxFQUFFcGlCLE1BQU0sS0FBS21tQyxFQUFXLEVBQVRyekIsRUFBRS9XLFFBQVUsV0FBV21LLEtBQUs0TSxFQUFFQSxFQUFFL1csT0FBTyxLQUFJeXdCLFNBQVMxWixFQUFFeFEsS0FBSyxHQUFHLEtBQU8sRUFBZ0IsT0FBTzZqQyxFQUFFLElBQUlBLEVBQUUsR0FBRyxDQUFDeDRCLEtBQUt5VSxFQUFFcE8sTUFBTW15QixFQUFFNnpCLFFBQTlDbG5ELEVBQUV4TSxLQUFLLE1BQWtELFNBQVMxTCxFQUFFd25CLEdBQUcsSUFBSWxkLEVBQUUsS0FBS2tkLEVBQUU0M0MsV0FBVTkwRCxFQUFFNE4sRUFBRSxtQkFBbUJBLEVBQUVMLGVBQWUyUCxFQUFFNDNDLFNBQVMsTUFBTS84RCxHQUFHbWxCLEVBQUVwTyxNQUFNLElBQUtqWSxPQUFPbUosRUFBRTZjLFFBQVEsU0FBU2pQLEVBQUUsSUFBSUEsRUFBRUwsZUFBZTJQLEVBQUU0M0MsVUFBVWo0QyxRQUFRLFVBQVUsU0FBUzNmLEVBQUVnZ0IsR0FBRyxJQUFJbGQsRUFBRSxRQUFRa2QsS0FBSWxkLEVBQUVrZCxFQUFFa2QsUUFBUWxkLEVBQUVrZCxRQUFRbk0sS0FBSy9RLEVBQUUrUSxNQUFPNDdCLE1BQU03cEQsRUFBRTZwRCxNQUFNM3pDLEtBQUssWUFBWWxXLEVBQUV5SSxNQUFNLElBQUltRixFQUFFTCxpQkFBaUJLLEVBQUVMLGVBQWUsU0FBUzJQLEdBQW1LLE9BQU9BLEVBQUUsSUFBSXpqQixRQUF2SywrQ0FBaUQsU0FBU3lqQixFQUFFbGQsR0FBRyxPQUFPQSxFQUFFLE9BQU9rZCxFQUFFLElBQUlBLEVBQUVscEIsTUFBTSxHQUFHLEdBQUcsS0FBS2twQixFQUFFMWQsV0FBVzBkLEVBQUVybUIsT0FBTyxHQUFHcEMsU0FBUyxJQUFJLElBQUksS0FBS3lvQixNQUErQixJQUFJc1gsRUFBRSxLQUFLd00sRUFBRSxLQUFLcHpCLEVBQUUsV0FBVzBGLFdBQVcsWUFBc0MsSUFBM0IxRixFQUFFZzNDLFNBQVNqUCxTQUFTbHRDLE9BQVltRixFQUFFc1AsR0FBR25CLEdBQUcsQ0FBQ3czQyxZQUFZLFNBQVNyMkMsRUFBRWxkLEdBQUcsSUFBSTROLEVBQUVsWSxHQUFtQyxJQUFqQ3NLLEVBQUVncEQsTUFBTWhwRCxFQUFFaXBELFdBQVdoN0IsS0FBS3hsQixPQUFZbUYsRUFBRXF6QixLQUFJdnJDLEVBQUV3SCxFQUFFOEMsS0FBTTROLEVBQUVrbkQsU0FBU3AvRCxHQUFHa1ksRUFBRWtuRCxVQUFVOTBELEVBQUVpcEQsVUFBVXI3QyxFQUFFa0IsTUFBTSxLQUFLMGtELGdCQUFnQixTQUFTNWxELEVBQUVxekIsRUFBRXZyQyxFQUFFbXNDLEdBQUcsSUFBSWp6QixHQUFnQixJQUFkbFosRUFBRXU0QixLQUFLeGxCLE9BQVltRyxFQUFFMVIsRUFBRStqQyxLQUFNLEtBQUtyeUIsSUFBSTVPLEVBQUUwSSxTQUFTRCxLQUFLbFUsUUFBUXFhLEdBQUcsSUFBSXF5QixFQUFFaFQsS0FBSzhtQyxTQUFTLzBELEVBQUUwSSxTQUFTRCxNQUFNK3JCLEVBQUU1bEIsR0FBa0IsRUFBZnF5QixFQUFFK25CLE1BQU1ueUQsT0FBUyxLQUFLbkIsRUFBRW9aLE1BQU0sR0FBRyxJQUFJLGlCQUFpQjlPLEVBQUUyZ0MsU0FBU0ssR0FBR25RLGFBQWFtUSxHQUFHQSxFQUFFMXRCLFdBQVcsV0FBV3RULEVBQUUyZ0MsUUFBUWtCLEVBQUUsWUFBWSxnQkFBZ0IsR0FBRzNrQixFQUFFODNDLE1BQU1oMUQsRUFBRTBJLFNBQVN3NEMsU0FBU2xoRCxFQUFFMEksU0FBU3VzRCxPQUFPLElBQUl6Z0MsR0FBR3dNLEVBQUUsTUFBTSxNQUFNaGhDLEVBQUUwSSxTQUFTRCxLQUFLK3JCLElBQUs4L0IsaUJBQWlCLFNBQVNyekIsRUFBRXZyQyxFQUFFbXNDLEdBQUcsSUFBSWp6QixFQUFFa3pCLEVBQUVkLEdBQUduUSxhQUFhbVEsSUFBaUIsSUFBZGEsRUFBRTVULEtBQUt4bEIsT0FBWW1HLEVBQUUxUixFQUFFeEgsR0FBR29zQyxFQUFFcHNDLEdBQUdBLEVBQUV1NEIsS0FBSzhtQyxTQUFTci9ELEVBQUV1NEIsS0FBSzhtQyxTQUFTLEdBQUdubUQsR0FBRyxLQUFLQSxJQUFJLGlCQUFpQit4QixRQUFRM2dDLEVBQUUyZ0MsUUFBUXFnQixhQUFhLEdBQUc5akMsRUFBRTgzQyxNQUFNaDFELEVBQUUwSSxTQUFTdzRDLFNBQVNsaEQsRUFBRTBJLFNBQVN1c0QsT0FBT256QixJQUFJOWhDLEVBQUUwSSxTQUFTRCxLQUFLcTVCLEVBQUVsMEIsRUFBRTVOLEdBQUdtc0IsVUFBVXoyQixFQUFFeTJCLFdBQVdDLFdBQVcxMkIsRUFBRTAyQixjQUFjb0ksRUFBRSxTQUFTNW1CLEVBQUU1TixHQUFHK2IsR0FBRyxnQkFBZ0IsV0FBVyxJQUFJbUIsRUFBRStqQixJQUFJcnpCLEVBQUVnM0MsU0FBUzRFLGVBQWVoMUIsR0FBR0EsSUFBSXRYLEVBQUU0M0MsUUFBUSxJQUFJNTNDLEVBQUVwTyxPQUFPLElBQUlvTyxFQUFFcE8sT0FBTzBsQixHQUFHdFgsRUFBRTQzQyxVQUFVdGdDLEVBQUUsS0FBSzVtQixFQUFFZzNDLFNBQVN5QixTQUFTLEtBQUtucEMsRUFBRTQzQyxTQUFTcC9ELEVBQUV3bkIsS0FBS3RQLEVBQUU1TixHQUFHaWMsSUFBSSx3QkFBd0IsV0FBV3JPLEVBQUVnM0MsU0FBUzRFLFlBQVksU0FBUSxFQUFHLEtBQUs5ekQsRUFBRXVyQyxPQUFPLE1BQWw3RCxDQUF5N0Q3dEMsU0FBU0csT0FBT0EsT0FBT2dELFFDTHZobkIsU0FBU3RELEdBQ04sbUJBQXFCMnNDLFFBQVVBLE9BQU9DLElBQU1ELE9BQU8sQ0FBRSxVQUFZM3NDLEdBQVdBLEVBQVEsV0FBQSxvQkFBbUJFLFFBQW5CLFlBQUErc0MsUUFBbUIvc0MsVUFBVStoRSxRQUFRLFVBQVkzK0QsUUFEeEksQ0FFQyxTQUFTeXBDLEdBQ1AsSUFBSW0xQixFQUFnQkMsRUFBSzMwQixVQUFVQyxVQUFXMjBCLEVBQVMsVUFBVXIwRCxLQUFLbzBELEdBQUtFLEVBQVMsVUFBVXQwRCxLQUFLbzBELEdBQUtybkIsRUFBVSxXQUFXL3NDLEtBQUtvMEQsR0FDbElwMUIsRUFBRXUxQixLQUFPLENBQ0xDLFlBQWEsQ0FDVEMsRUFBSyxRQUNMdjRELEVBQUcsV0FDSHl4QixJQUFLLGVBRVQrbUMsV0FBVyxFQUNYQyxTQUFVLFlBQ1ZDLFlBQWEsS0FDZDUxQixFQUFFdHBDLEdBQUdnQyxPQUFPLENBQ1htOUQsTUFBTyxTQUFTQyxFQUFPdjlELEdBQ25CLElBQUl3OUQsRUFDSixHQUFJLElBQU12aUUsS0FBS3FELFNBQVdyRCxLQUFLa2EsR0FBRyxXQUFZLE1BQU8saUJBQW1Cb29ELEdBQVN2OUQsRUFBTSxpQkFBbUJBLEVBQU1BLEVBQU11OUQsRUFDdEh0aUUsS0FBS2lFLEtBQUssV0FDTmpFLEtBQUt3aUUsa0JBQW9CeGlFLEtBQUt3aUUsa0JBQWtCRixFQUFPdjlELEdBQU8vRSxLQUFLeWlFLG1CQUFvQkYsRUFBUXZpRSxLQUFLeWlFLG1CQUM5RkMsVUFBUyxHQUFLSCxFQUFNSSxRQUFRLFlBQWE1OUQsR0FBTXc5RCxFQUFNSyxVQUFVLFlBQWFOLEdBQ2xGQyxFQUFNaDZELGNBQ0h2SSxLQUFLLEdBQUd3aUUsbUJBQXFCRixFQUFRdGlFLEtBQUssR0FBRzZpRSxlQUFnQjk5RCxFQUFNL0UsS0FBSyxHQUFHOGlFLGNBQWdCbGpFLFNBQVMybkIsV0FBYTNuQixTQUFTMm5CLFVBQVV3N0MsY0FBZ0JSLEVBQVEzaUUsU0FBUzJuQixVQUFVdzdDLGNBQ3RMVCxFQUFRLEVBQUlDLEVBQU1TLFlBQVlKLFVBQVUsYUFBYyxLQUFNNzlELEVBQU11OUQsRUFBUUMsRUFBTWpnRSxLQUFLZSxRQUNyRixDQUNJaS9ELE1BQU9BLEVBQ1B2OUQsSUFBS0EsS0FHYmsrRCxPQUFRLFdBQ0osT0FBT2pqRSxLQUFLcXBCLFFBQVEsV0FFeEIwNEMsS0FBTSxTQUFTQSxFQUFNaitCLEdBQ2pCLElBQVdvL0IsRUFBTUMsRUFBT0MsRUFBaUJDLEVBQWlCQyxFQUF3QnorRCxFQUFLMCtELEVBQ3ZGLElBQUt4QixHQUFzQixFQUFkL2hFLEtBQUtxRCxPQUFZLENBRTFCLElBQUlILEVBRElzcEMsRUFBRXhzQyxLQUFLLElBQ0EwaUIsS0FBSzhwQixFQUFFdTFCLEtBQUtJLFVBQzNCLE9BQU9qL0QsRUFBS0EsU0FBTyxFQUV2QixPQUFPNGdDLEVBQVcwSSxFQUFFdG5DLE9BQU8sQ0FDdkJnOUQsVUFBVzExQixFQUFFdTFCLEtBQUtHLFVBQ2xCRSxZQUFhNTFCLEVBQUV1MUIsS0FBS0ssWUFDcEJ0aEQsVUFBVyxNQUNaZ2pCLEdBQVdvL0IsRUFBTzEyQixFQUFFdTFCLEtBQUtDLFlBQWFtQixFQUFRLEdBQUlDLEVBQWtCditELEVBQU1rOUQsRUFBSzErRCxPQUNsRmdnRSxFQUFrQixLQUFNNzJCLEVBQUV2b0MsS0FBSzg5RCxFQUFLejZELE1BQU0sSUFBSyxTQUFTcEYsRUFBR21zQyxHQUN2RCxLQUFPQSxHQUFLeHBDLElBQU91K0QsRUFBa0JsaEUsR0FBS2doRSxFQUFLNzBCLElBQU04MEIsRUFBTXJpRSxLQUFLLElBQUl1SixPQUFPNjRELEVBQUs3MEIsS0FDaEYsT0FBU2cxQixJQUFvQkEsRUFBa0JGLEVBQU05L0QsT0FBUyxHQUFzQm5CLEVBQWxCa2hFLElBQXdCRSxFQUF5QkgsRUFBTTkvRCxPQUFTLElBQU04L0QsRUFBTXJpRSxLQUFLLFFBQ25KZCxLQUFLcXBCLFFBQVEsVUFBVXBsQixLQUFLLFdBQzVCLFNBQVN1L0QsSUFDTCxHQUFJMS9CLEVBQVNoakIsVUFBVyxDQUNwQixJQUFLLElBQUk1ZSxFQUFJbWhFLEVBQTJDbmhFLEdBQTFCb2hFLEVBQTZCcGhFLElBQUssR0FBSWloRSxFQUFNamhFLElBQU11aEUsRUFBT3ZoRSxLQUFPd2hFLEVBQWV4aEUsR0FBSSxPQUNqSDRoQyxFQUFTaGpCLFVBQVVuZ0IsS0FBS2dRLElBR2hDLFNBQVMreUQsRUFBZXhoRSxHQUNwQixPQUFPNGhDLEVBQVNzK0IsWUFBWTlMLE9BQU9wMEQsRUFBSTRoQyxFQUFTcytCLFlBQVkvK0QsT0FBU25CLEVBQUksR0FFN0UsU0FBU3loRSxFQUFTbnJDLEdBQ2QsT0FBUUEsRUFBTTN6QixJQUFRcytELEVBQU0zcUMsS0FDNUIsT0FBT0EsRUFNWCxTQUFTb3JDLEVBQU90QixFQUFPdjlELEdBQ25CLElBQUk3QyxFQUFHNEMsRUFDUCxLQUFVdzlELEVBQUosR0FBWSxDQUNkLElBQUtwZ0UsRUFBSW9nRSxFQUFPeDlELEVBQUk2K0QsRUFBUzUrRCxHQUFZN0MsRUFBTjJDLEVBQVMzQyxJQUFLLEdBQUlpaEUsRUFBTWpoRSxHQUFJLENBQzNELEtBQVk0QyxFQUFORCxHQUFXcytELEVBQU1qaEUsR0FBR3NMLEtBQUtpMkQsRUFBTzMrRCxLQUFNLE1BQzVDMitELEVBQU92aEUsR0FBS3VoRSxFQUFPMytELEdBQUkyK0QsRUFBTzMrRCxHQUFLNCtELEVBQWU1K0QsR0FBSUEsRUFBSTYrRCxFQUFTNytELEdBRXZFKytELElBQWVsekQsRUFBTTB4RCxNQUFNdDhELEtBQUtpdkIsSUFBSXF1QyxFQUFpQmYsS0FzQjdELFNBQVN3QixJQUNMQyxJQUFZcHpELEVBQU14TyxPQUFTNmhFLEdBQWFyekQsRUFBTXN6RCxTQThCbEQsU0FBU0MsRUFBWWp3RCxFQUFPbFAsR0FDeEIsSUFBSTdDLEVBQ0osSUFBS0EsRUFBSStSLEVBQWEvUixFQUFONkMsR0FBaUI3QyxFQUFOMkMsRUFBUzNDLElBQUtpaEUsRUFBTWpoRSxLQUFPdWhFLEVBQU92aEUsR0FBS3doRSxFQUFleGhFLElBRXJGLFNBQVMyaEUsSUFDTGx6RCxFQUFNeE8sSUFBSXNoRSxFQUFPNzFELEtBQUssS0FFMUIsU0FBU20yRCxFQUFTSSxHQUNkLElBQUlqaUUsRUFBR21zQyxFQUFHN1YsRUFBS2hyQixFQUFPbUQsRUFBTXhPLE1BQU9paUUsR0FBYSxFQUNoRCxJQUFZNXJDLEVBQVB0MkIsRUFBSSxFQUFrQkEsRUFBTjJDLEVBQVMzQyxJQUFLLEdBQUlpaEUsRUFBTWpoRSxHQUFJLENBQzdDLElBQUt1aEUsRUFBT3ZoRSxHQUFLd2hFLEVBQWV4aEUsR0FBSXMyQixJQUFRaHJCLEVBQUtuSyxRQUFVLEdBQUlnckMsRUFBSTdnQyxFQUFLOG9ELE9BQU85OUIsRUFBTSxHQUNyRjJxQyxFQUFNamhFLEdBQUdzTCxLQUFLNmdDLEdBQUksQ0FDZG8xQixFQUFPdmhFLEdBQUttc0MsRUFBRysxQixFQUFZbGlFLEVBQzNCLE1BRUosR0FBSXMyQixFQUFNaHJCLEVBQUtuSyxPQUFRLENBQ25CNmdFLEVBQVloaUUsRUFBSSxFQUFHMkMsR0FDbkIsWUFFRDQrRCxFQUFPdmhFLEtBQU9zTCxFQUFLOG9ELE9BQU85OUIsSUFBUUEsSUFBeUJ0MkIsRUFBbEJraEUsSUFBd0JnQixFQUFZbGlFLEdBQ3BGLE9BQU9paUUsRUFBUU4sSUFBa0NPLEVBQVksRUFBOUJoQixFQUFrQ3QvQixFQUFTbytCLFdBQWF1QixFQUFPNzFELEtBQUssTUFBUXkyRCxHQUFpQjF6RCxFQUFNeE8sT0FBU3dPLEVBQU14TyxJQUFJLElBQ3JKK2hFLEVBQVksRUFBR3IvRCxJQUFRZy9ELEtBQWlCQSxJQUFlbHpELEVBQU14TyxJQUFJd08sRUFBTXhPLE1BQU0rMkQsVUFBVSxFQUFHa0wsRUFBWSxLQUN0R2hCLEVBQWtCbGhFLEVBQUltaEUsRUFFMUIsSUFBSTF5RCxFQUFRNjdCLEVBQUV4c0MsTUFBT3lqRSxFQUFTajNCLEVBQUVyb0MsSUFBSTQ5RCxFQUFLejZELE1BQU0sSUFBSyxTQUFTK21DLEVBQUduc0MsR0FDNUQsTUFBTyxLQUFPbXNDLEVBQUk2MEIsRUFBSzcwQixHQUFLcTFCLEVBQWV4aEUsR0FBS21zQyxPQUFJLElBQ3BEZzJCLEVBQWdCWixFQUFPNzFELEtBQUssSUFBS28yRCxFQUFZcnpELEVBQU14TyxNQUN2RHdPLEVBQU0rUixLQUFLOHBCLEVBQUV1MUIsS0FBS0ksU0FBVSxXQUN4QixPQUFPMzFCLEVBQUVyb0MsSUFBSXMvRCxFQUFRLFNBQVNwMUIsRUFBR25zQyxHQUM3QixPQUFPaWhFLEVBQU1qaEUsSUFBTW1zQyxHQUFLcTFCLEVBQWV4aEUsR0FBS21zQyxFQUFJLE9BQ2pEemdDLEtBQUssTUFDUitDLEVBQU04WCxJQUFJLFNBQVUsV0FDcEI5WCxFQUFNaVksSUFBSSxTQUFTeEYsV0FBV29wQixFQUFFdTFCLEtBQUtJLFlBQ3RDNTVDLEdBQUcsYUFBYyxXQUdaLElBQUlpUSxFQUZIN25CLEVBQU1nUyxLQUFLLGNBQ1owYSxhQUFhc2tDLEdBRWJxQyxFQUFZcnpELEVBQU14TyxNQUFPcTJCLEVBQU11ckMsSUFBWXBDLEVBQWlCN2hELFdBQVcsV0FDbkVuUCxFQUFNak4sSUFBSSxLQUFPOUQsU0FBU3lWLGdCQUFrQnd1RCxJQUFlcnJDLEdBQU91cEMsRUFBSzk3RCxRQUFRLElBQUssSUFBSTVDLE9BQVNzTixFQUFNMHhELE1BQU0sRUFBRzdwQyxHQUFPN25CLEVBQU0weEQsTUFBTTdwQyxLQUNwSSxPQUVSalEsR0FBRyxZQUFhdTdDLEdBQVd2N0MsR0FBRyxlQXJFakMsU0FBc0IvYixHQUNsQixJQUFLbUUsRUFBTWdTLEtBQUssWUFBYSxDQUN6QixJQUFJNlYsRUFBSzhwQyxFQUFPdjlELEVBQUtxdkMsRUFBSTVuQyxFQUFFMGhCLE9BQVMxaEIsRUFBRTZnQixRQUN0Q2syQyxFQUFTNXlELEVBQU14TyxNQUFPLElBQU1peUMsR0FBSyxLQUFPQSxHQUFLeXRCLEdBQVUsTUFBUXp0QixHQUMvRGt1QixHQURvRTlwQyxFQUFNN25CLEVBQU0weEQsU0FDcEVDLE9BQU92OUQsRUFBTXl6QixFQUFJenpCLEtBQVd1OUQsR0FBVSxJQUFNQSxFQUFRLEtBQU9sdUIsRUF4Qy9FLFNBQWtCNWIsR0FDZCxLQUFlLEtBQVBBLElBQWEycUMsRUFBTTNxQyxLQUMzQixPQUFPQSxFQXNDd0U4ckMsQ0FBU2hDLEdBQVN2OUQsRUFBTTQrRCxFQUFTckIsRUFBUSxHQUNwSHY5RCxFQUFNLEtBQU9xdkMsRUFBSXV2QixFQUFTNStELEdBQU9BLEdBQU1tL0QsRUFBWTVCLEVBQU92OUQsR0FBTTYrRCxFQUFPdEIsRUFBT3Y5RCxFQUFNLEdBQ3BGeUgsRUFBRTRjLGtCQUFvQixLQUFPZ3JCLEVBQUkwdkIsRUFBVW5qRSxLQUFLWCxLQUFNd00sR0FBSyxLQUFPNG5DLElBQU16akMsRUFBTXhPLElBQUk2aEUsR0FDbEZyekQsRUFBTTB4RCxNQUFNLEVBQUcwQixLQUFhdjNELEVBQUU0YyxxQkE4RHlCYixHQUFHLGdCQTNEbEUsU0FBdUIvYixHQUNuQixJQUFLbUUsRUFBTWdTLEtBQUssWUFBYSxDQUN6QixJQUFJbVcsRUFBR3VWLEVBQUcvaEMsRUFBTThuQyxFQUFJNW5DLEVBQUUwaEIsT0FBUzFoQixFQUFFNmdCLFFBQVNtTCxFQUFNN25CLEVBQU0weEQsUUFDdEQsS0FBTTcxRCxFQUFFbWdCLFNBQVduZ0IsRUFBRStmLFFBQVUvZixFQUFFc2dCLFNBQWdCc25CLEVBQUwsS0FBV0EsR0FBSyxLQUFPQSxFQUFHLENBQ2xFLEdBQUk1YixFQUFJenpCLElBQU15ekIsRUFBSThwQyxPQUFVLElBQU00QixFQUFZMXJDLEVBQUk4cEMsTUFBTzlwQyxFQUFJenpCLEtBQU02K0QsRUFBT3ByQyxFQUFJOHBDLE1BQU85cEMsRUFBSXp6QixJQUFNLEtBQy9GK3pCLEVBQUk2cUMsRUFBU25yQyxFQUFJOHBDLE1BQVEsSUFBSXo5RCxJQUFZd3BDLEVBQUl2bUMsT0FBT0MsYUFBYXFzQyxHQUFJK3VCLEVBQU1ycUMsR0FBR3RyQixLQUFLNmdDLElBQUssQ0FDcEYsR0F0Q2hCLFNBQWdCN1YsR0FDWixJQUFJdDJCLEVBQUdtc0MsRUFBR3ZwQyxFQUFHNGtCLEVBQ2IsSUFBYzJrQixFQUFJcTFCLEVBQWJ4aEUsRUFBSXMyQixHQUFvQ3QyQixFQUFOMkMsRUFBUzNDLElBQUssR0FBSWloRSxFQUFNamhFLEdBQUksQ0FDL0QsR0FBSTRDLEVBQUk2K0QsRUFBU3poRSxHQUFJd25CLEVBQUkrNUMsRUFBT3ZoRSxHQUFJdWhFLEVBQU92aEUsR0FBS21zQyxJQUFXdnBDLEVBQU5ELEdBQVdzK0QsRUFBTXIrRCxHQUFHMEksS0FBS2tjLElBQUssTUFDbkYya0IsRUFBSTNrQixHQWtDUTY2QyxDQUFPenJDLEdBQUkycUMsRUFBTzNxQyxHQUFLdVYsRUFBR3cxQixJQUFldjNELEVBQU9xM0QsRUFBUzdxQyxHQUFJeWhCLEVBQVMsQ0FJdEV6NkIsV0FIWSxXQUNSMHNCLEVBQUVYLE1BQU1XLEVBQUV0cEMsR0FBR20vRCxNQUFPMXhELEVBQU9yRSxFQUEzQmtnQyxJQUVjLFFBQ2Y3N0IsRUFBTTB4RCxNQUFNLzFELEdBQ25Ca3NCLEVBQUk4cEMsT0FBU2dCLEdBQTBCRSxJQUUzQ2gzRCxFQUFFNGMscUJBNkNvRmIsR0FBRyx3QkFBeUIsV0FDMUg1WCxFQUFNZ1MsS0FBSyxhQUFlN0MsV0FBVyxXQUNqQyxJQUFJMFksRUFBTXVyQyxHQUFTLEdBQ25CcHpELEVBQU0weEQsTUFBTTdwQyxHQUFNZ3JDLEtBQ25CLEtBQ0gxQixHQUFVdm5CLEdBQVc1cEMsRUFBTWlZLElBQUksY0FBY0wsR0FBRyxhQXpGcEQsV0FDSSxJQUFJaThDLEVBQVM3ekQsRUFBTXhPLE1BQU9xMkIsRUFBTTduQixFQUFNMHhELFFBQ3RDLEdBQUlrQixHQUFVQSxFQUFPbGdFLFFBQVVrZ0UsRUFBT2xnRSxPQUFTbWhFLEVBQU9uaEUsT0FBUSxDQUMxRCxJQUFLMGdFLEdBQVMsR0FBaUIsRUFBWnZyQyxFQUFJOHBDLFFBQWNhLEVBQU0zcUMsRUFBSThwQyxNQUFRLElBQU05cEMsRUFBSThwQyxRQUNqRSxHQUFJLElBQU05cEMsRUFBSThwQyxNQUFPLEtBQU05cEMsRUFBSThwQyxNQUFRZSxJQUFvQkYsRUFBTTNxQyxFQUFJOHBDLFFBQVU5cEMsRUFBSThwQyxRQUNuRjN4RCxFQUFNMHhELE1BQU03cEMsRUFBSThwQyxNQUFPOXBDLEVBQUk4cEMsV0FDeEIsQ0FDSCxJQUFLeUIsR0FBUyxHQUFLdnJDLEVBQUk4cEMsTUFBUXo5RCxJQUFRcytELEVBQU0zcUMsRUFBSThwQyxRQUFVOXBDLEVBQUk4cEMsUUFDL0QzeEQsRUFBTTB4RCxNQUFNN3BDLEVBQUk4cEMsTUFBTzlwQyxFQUFJOHBDLE9BRS9Ca0IsTUFnRkpPLFdDaEtkLFNBQVN0a0UsR0FDUCxhQUNzQixtQkFBWDJzQyxRQUF5QkEsT0FBT0MsSUFDdkNELE9BQU8sQ0FBQyxVQUFXM3NDLEdBQ08sb0JBQVpFLFFBQ2RELE9BQU9DLFFBQVVGLEVBQVFpaUUsUUFBUSxXQUVqQ2ppRSxFQUFRc0QsUUFQZCxDQVVBLFNBQVN5cEMsR0FDUCxhQUNBLElBSVFpNEIsRUFKSkMsRUFBUTNrRSxPQUFPMmtFLE9BQVMsR0FJcEJELEVBQWMsR0FGdEJDLEVBSUksU0FBZUMsRUFBUzdnQyxHQUVwQixJQUFjOGdDLEVBQVYzbkQsRUFBSWpkLEtBRVJpZCxFQUFFa2xDLFNBQVcsQ0FDVDBpQixlQUFlLEVBQ2ZDLGdCQUFnQixFQUNoQkMsYUFBY3Y0QixFQUFFbTRCLEdBQ2hCSyxXQUFZeDRCLEVBQUVtNEIsR0FDZHJULFFBQVEsRUFDUjJULFNBQVUsS0FDVkMsVUFBVyxtRkFDWEMsVUFBVywyRUFDWC9mLFVBQVUsRUFDVmdnQixjQUFlLElBQ2ZDLFlBQVksRUFDWkMsY0FBZSxPQUNmQyxRQUFTLE9BQ1RDLGFBQWMsU0FBU0MsRUFBUXZqRSxHQUMzQixPQUFPc3FDLEVBQUUsNEJBQTRCbHFDLEtBQUtKLEVBQUksSUFFbER3akUsTUFBTSxFQUNOQyxVQUFXLGFBQ1hoZCxXQUFXLEVBQ1g1eUIsT0FBUSxTQUNSNnZDLGFBQWMsSUFDZEMsTUFBTSxFQUNOQyxlQUFlLEVBQ2ZDLGVBQWUsRUFDZkMsVUFBVSxFQUNWM3RCLGFBQWMsRUFDZDR0QixTQUFVLFdBQ1ZDLGFBQWEsRUFDYkMsY0FBYyxFQUNkQyxjQUFjLEVBQ2RDLGtCQUFrQixFQUNsQkMsVUFBVyxTQUNYQyxXQUFZLEtBQ1pDLEtBQU0sRUFDTnBsQixLQUFLLEVBQ0xKLE1BQU8sR0FDUHlsQixhQUFjLEVBQ2RDLGFBQWMsRUFDZEMsZUFBZ0IsRUFDaEI1cUMsTUFBTyxJQUNQNnFDLE9BQU8sRUFDUEMsY0FBYyxFQUNkQyxXQUFXLEVBQ1hDLGVBQWdCLEVBQ2hCQyxRQUFRLEVBQ1JDLGNBQWMsRUFDZEMsZUFBZSxFQUNmL1QsVUFBVSxFQUNWZ1UsaUJBQWlCLEVBQ2pCQyxnQkFBZ0IsRUFDaEJsd0MsT0FBUSxLQUdaamEsRUFBRW9xRCxTQUFXLENBQ1RsdkIsV0FBVyxFQUNYbXZCLFVBQVUsRUFDVkMsY0FBZSxLQUNmQyxpQkFBa0IsRUFDbEJDLFlBQWEsS0FDYkMsYUFBYyxFQUNkam5CLFVBQVcsRUFDWGtuQixNQUFPLEtBQ1BDLFVBQVcsS0FDWEMsV0FBWSxLQUNaQyxVQUFXLEVBQ1hDLFdBQVksS0FDWkMsV0FBWSxLQUNaaFcsV0FBVyxFQUNYaVcsV0FBWSxLQUNaL2QsV0FBWSxLQUNaZ2UsWUFBYSxLQUNiQyxRQUFTLEtBQ1RDLFNBQVMsRUFDVEMsWUFBYSxFQUNiQyxVQUFXLEtBQ1hDLFNBQVMsRUFDVHRILE1BQU8sS0FDUHVILFlBQWEsR0FDYkMsbUJBQW1CLEVBQ25CQyxXQUFXLEdBR2ZsOEIsRUFBRXRuQyxPQUFPK1gsRUFBR0EsRUFBRW9xRCxVQUVkcHFELEVBQUUwckQsaUJBQW1CLEtBQ3JCMXJELEVBQUUyckQsU0FBVyxLQUNiM3JELEVBQUU0ckQsU0FBVyxLQUNiNXJELEVBQUVxK0IsWUFBYyxHQUNoQnIrQixFQUFFNnJELG1CQUFxQixHQUN2QjdyRCxFQUFFOHJELGdCQUFpQixFQUNuQjlyRCxFQUFFK3JELFVBQVcsRUFDYi9yRCxFQUFFZ3NELGFBQWMsRUFDaEJoc0QsRUFBRXVjLE9BQVMsU0FDWHZjLEVBQUVxeEMsUUFBUyxFQUNYcnhDLEVBQUVpc0QsYUFBZSxLQUNqQmpzRCxFQUFFcXBELFVBQVksS0FDZHJwRCxFQUFFa3NELFNBQVcsRUFDYmxzRCxFQUFFbXNELGFBQWMsRUFDaEJuc0QsRUFBRW9zRCxRQUFVNzhCLEVBQUVtNEIsR0FDZDFuRCxFQUFFcXNELGFBQWUsS0FDakJyc0QsRUFBRXNzRCxjQUFnQixLQUNsQnRzRCxFQUFFdXNELGVBQWlCLEtBQ25CdnNELEVBQUV3c0QsaUJBQW1CLG1CQUNyQnhzRCxFQUFFeXNELFlBQWMsRUFDaEJ6c0QsRUFBRTBzRCxZQUFjLEtBRWhCL0UsRUFBZXA0QixFQUFFbTRCLEdBQVNqaUQsS0FBSyxVQUFZLEdBRTNDekYsRUFBRTlYLFFBQVVxbkMsRUFBRXRuQyxPQUFPLEdBQUkrWCxFQUFFa2xDLFNBQVVyZSxFQUFVOGdDLEdBRS9DM25ELEVBQUV5cUQsYUFBZXpxRCxFQUFFOVgsUUFBUWt6QyxhQUUzQnA3QixFQUFFcXNCLGlCQUFtQnJzQixFQUFFOVgsYUFFVyxJQUF2QnZGLFNBQVNncUUsV0FDaEIzc0QsRUFBRXVjLE9BQVMsWUFDWHZjLEVBQUV3c0QsaUJBQW1CLDRCQUNtQixJQUExQjdwRSxTQUFTaXFFLGVBQ3ZCNXNELEVBQUV1YyxPQUFTLGVBQ1h2YyxFQUFFd3NELGlCQUFtQiwwQkFHekJ4c0QsRUFBRTZzRCxTQUFXdDlCLEVBQUVYLE1BQU01dUIsRUFBRTZzRCxTQUFVN3NELEdBQ2pDQSxFQUFFOHNELGNBQWdCdjlCLEVBQUVYLE1BQU01dUIsRUFBRThzRCxjQUFlOXNELEdBQzNDQSxFQUFFK3NELGlCQUFtQng5QixFQUFFWCxNQUFNNXVCLEVBQUUrc0QsaUJBQWtCL3NELEdBQ2pEQSxFQUFFZ3RELFlBQWN6OUIsRUFBRVgsTUFBTTV1QixFQUFFZ3RELFlBQWFodEQsR0FDdkNBLEVBQUVpdEQsYUFBZTE5QixFQUFFWCxNQUFNNXVCLEVBQUVpdEQsYUFBY2p0RCxHQUN6Q0EsRUFBRWt0RCxjQUFnQjM5QixFQUFFWCxNQUFNNXVCLEVBQUVrdEQsY0FBZWx0RCxHQUMzQ0EsRUFBRW10RCxZQUFjNTlCLEVBQUVYLE1BQU01dUIsRUFBRW10RCxZQUFhbnRELEdBQ3ZDQSxFQUFFcS9CLGFBQWU5UCxFQUFFWCxNQUFNNXVCLEVBQUVxL0IsYUFBY3IvQixHQUN6Q0EsRUFBRW90RCxZQUFjNzlCLEVBQUVYLE1BQU01dUIsRUFBRW90RCxZQUFhcHRELEdBQ3ZDQSxFQUFFcXRELFdBQWE5OUIsRUFBRVgsTUFBTTV1QixFQUFFcXRELFdBQVlydEQsR0FFckNBLEVBQUV3bkQsWUFBY0EsSUFLaEJ4bkQsRUFBRXN0RCxTQUFXLDRCQUdidHRELEVBQUV1dEQsc0JBQ0Z2dEQsRUFBRTlaLE1BQUssS0FRVEcsVUFBVW1uRSxZQUFjLFdBQ2xCenFFLEtBRU5rb0UsWUFBWTMzRCxLQUFLLGlCQUFpQnVCLEtBQUssQ0FDckM0NEQsY0FBZSxVQUNoQm42RCxLQUFLLDRCQUE0QnVCLEtBQUssQ0FDckN5c0IsU0FBWSxPQUtwQm1tQyxFQUFNcGhFLFVBQVU2MkMsU0FBV3VxQixFQUFNcGhFLFVBQVVxbkUsU0FBVyxTQUFTQyxFQUFRdHZELEVBQU91dkQsR0FFMUUsSUFBSTV0RCxFQUFJamQsS0FFUixHQUFzQixrQkFBWHNiLEVBQ1B1dkQsRUFBWXZ2RCxFQUNaQSxFQUFRLFVBQ0wsR0FBSUEsRUFBUSxHQUFNQSxHQUFTMkIsRUFBRWdyRCxXQUNoQyxPQUFPLEVBR1hockQsRUFBRTZ0RCxTQUVvQixpQkFBWHh2RCxFQUNPLElBQVZBLEdBQW9DLElBQXJCMkIsRUFBRWtyRCxRQUFROWtFLE9BQ3pCbXBDLEVBQUVvK0IsR0FBUWw2QyxTQUFTelQsRUFBRWlyRCxhQUNkMkMsRUFDUHIrQixFQUFFbytCLEdBQVF2NkMsYUFBYXBULEVBQUVrckQsUUFBUTVqRSxHQUFHK1csSUFFcENreEIsRUFBRW8rQixHQUFRaDZDLFlBQVkzVCxFQUFFa3JELFFBQVE1akUsR0FBRytXLEtBR3JCLElBQWR1dkQsRUFDQXIrQixFQUFFbytCLEdBQVFqNkMsVUFBVTFULEVBQUVpckQsYUFFdEIxN0IsRUFBRW8rQixHQUFRbDZDLFNBQVN6VCxFQUFFaXJELGFBSTdCanJELEVBQUVrckQsUUFBVWxyRCxFQUFFaXJELFlBQVludEQsU0FBUy9hLEtBQUttRixRQUFRNjdDLE9BRWhEL2pDLEVBQUVpckQsWUFBWW50RCxTQUFTL2EsS0FBS21GLFFBQVE2N0MsT0FBTzl3QixTQUUzQ2pULEVBQUVpckQsWUFBWS8zQyxPQUFPbFQsRUFBRWtyRCxTQUV2QmxyRCxFQUFFa3JELFFBQVFsa0UsS0FBSyxTQUFTcVgsRUFBT3FwRCxHQUMzQm40QixFQUFFbTRCLEdBQVM3eUQsS0FBSyxtQkFBb0J3SixLQUd4QzJCLEVBQUVxc0QsYUFBZXJzRCxFQUFFa3JELFFBRW5CbHJELEVBQUU4dEQsVUFJTnJHLEVBQU1waEUsVUFBVTBuRSxjQUFnQixXQUU1QixHQUErQixJQUR2QmhyRSxLQUNGbUYsUUFBUXVoRSxlQUFtRCxJQUR6RDFtRSxLQUM4Qm1GLFFBQVEyL0QsaUJBQWtELElBRHhGOWtFLEtBQ21FbUYsUUFBUWd1RCxTQUFvQixDQUNuRyxJQUFJOFgsRUFGQWpyRSxLQUVpQm1vRSxRQUFRNWpFLEdBRnpCdkUsS0FFOEIwbkUsY0FBYzM0QixhQUFZLEdBRnhEL3VDLEtBR0ZpaEUsTUFBTTlrQyxRQUFRLENBQ1p0SSxPQUFRbzNDLEdBSlJqckUsS0FLQ21GLFFBQVE0MkIsU0FJckIyb0MsRUFBTXBoRSxVQUFVNG5FLGFBQWUsU0FBU0MsRUFBWWpuRSxHQUVoRCxJQUFJa25FLEVBQVksR0FDWm51RCxFQUFJamQsS0FFUmlkLEVBQUUrdEQsaUJBRW9CLElBQWxCL3RELEVBQUU5WCxRQUFRaThDLE1BQXVDLElBQXZCbmtDLEVBQUU5WCxRQUFRZ3VELFdBQ3BDZ1ksR0FBY0EsSUFFVSxJQUF4Qmx1RCxFQUFFd3JELG1CQUN5QixJQUF2QnhyRCxFQUFFOVgsUUFBUWd1RCxTQUNWbDJDLEVBQUVpckQsWUFBWS9yQyxRQUFRLENBQ2xCekUsS0FBTXl6QyxHQUNQbHVELEVBQUU5WCxRQUFRNDJCLE1BQU85ZSxFQUFFOVgsUUFBUTR3QixPQUFRN3hCLEdBRXRDK1ksRUFBRWlyRCxZQUFZL3JDLFFBQVEsQ0FDbEJyc0IsSUFBS3E3RCxHQUNObHVELEVBQUU5WCxRQUFRNDJCLE1BQU85ZSxFQUFFOVgsUUFBUTR3QixPQUFRN3hCLElBS2pCLElBQXJCK1ksRUFBRThyRCxpQkFDb0IsSUFBbEI5ckQsRUFBRTlYLFFBQVFpOEMsTUFDVm5rQyxFQUFFd3FELGFBQWdCeHFELEVBQUV3cUQsYUFFeEJqN0IsRUFBRSxDQUNFNitCLFVBQVdwdUQsRUFBRXdxRCxjQUNkdHJDLFFBQVEsQ0FDUGt2QyxVQUFXRixHQUNaLENBQ0M1eUMsU0FBVXRiLEVBQUU5WCxRQUFRNDJCLE1BQ3BCaEcsT0FBUTlZLEVBQUU5WCxRQUFRNHdCLE9BQ2xCMEMsS0FBTSxTQUFTcE0sR0FDWEEsRUFBTXRtQixLQUFLMHZCLEtBQUtwSixJQUNXLElBQXZCcFAsRUFBRTlYLFFBQVFndUQsU0FDVmlZLEVBQVVudUQsRUFBRTJyRCxVQUFZLGFBQ3BCdjhDLEVBQU0sV0FHVisrQyxFQUFVbnVELEVBQUUyckQsVUFBWSxpQkFDcEJ2OEMsRUFBTSxNQUhWcFAsRUFBRWlyRCxZQUFZeGpELElBQUkwbUQsSUFPMUJwd0MsU0FBVSxXQUNGOTJCLEdBQ0FBLEVBQVN2RCxZQU9yQnNjLEVBQUVxdUQsa0JBQ0ZILEVBQWFwbEUsS0FBSzB2QixLQUFLMDFDLElBRUksSUFBdkJsdUQsRUFBRTlYLFFBQVFndUQsU0FDVmlZLEVBQVVudUQsRUFBRTJyRCxVQUFZLGVBQWlCdUMsRUFBYSxnQkFFdERDLEVBQVVudUQsRUFBRTJyRCxVQUFZLG1CQUFxQnVDLEVBQWEsV0FFOURsdUQsRUFBRWlyRCxZQUFZeGpELElBQUkwbUQsR0FFZGxuRSxHQUNBNGIsV0FBVyxXQUVQN0MsRUFBRXN1RCxvQkFFRnJuRSxFQUFTdkQsUUFDVnNjLEVBQUU5WCxRQUFRNDJCLFNBUzdCMm9DLEVBQU1waEUsVUFBVWtvRSxhQUFlLFdBRTNCLElBQ0l2RyxFQURJamxFLEtBQ1NtRixRQUFROC9ELFNBTXpCLE9BSktBLEdBQXlCLE9BQWJBLElBQ2JBLEVBQVd6NEIsRUFBRXk0QixHQUFVdHdELElBSm5CM1UsS0FJeUJxcEUsVUFHMUJwRSxHQUlYUCxFQUFNcGhFLFVBQVUyaEUsU0FBVyxTQUFTM3BELEdBRWhDLElBQ0kycEQsRUFESWpsRSxLQUNTd3JFLGVBRUMsT0FBYnZHLEdBQXlDLGlCQUFiQSxHQUM3QkEsRUFBU2hoRSxLQUFLLFdBQ1YsSUFBSXVCLEVBQVNnbkMsRUFBRXhzQyxNQUFNeXJFLE1BQU0sWUFDdkJqbUUsRUFBT2tqRSxXQUNQbGpFLEVBQU9rbUUsYUFBYXB3RCxHQUFPLE1BTzNDb3BELEVBQU1waEUsVUFBVWdvRSxnQkFBa0IsU0FBU3RxQixHQUV2QyxJQUFJL2pDLEVBQUlqZCxLQUNKZ3VDLEVBQWEsSUFFTSxJQUFuQi93QixFQUFFOVgsUUFBUTBnRSxLQUNWNzNCLEVBQVcvd0IsRUFBRXVzRCxnQkFBa0J2c0QsRUFBRXNzRCxjQUFnQixJQUFNdHNELEVBQUU5WCxRQUFRNDJCLE1BQVEsTUFBUTllLEVBQUU5WCxRQUFRb2dFLFFBRTNGdjNCLEVBQVcvd0IsRUFBRXVzRCxnQkFBa0IsV0FBYXZzRCxFQUFFOVgsUUFBUTQyQixNQUFRLE1BQVE5ZSxFQUFFOVgsUUFBUW9nRSxTQUc3RCxJQUFuQnRvRCxFQUFFOVgsUUFBUTBnRSxLQUNWNW9ELEVBQUVpckQsWUFBWXhqRCxJQUFJc3BCLEdBRWxCL3dCLEVBQUVrckQsUUFBUTVqRSxHQUFHeThDLEdBQU90OEIsSUFBSXNwQixJQUtoQzAyQixFQUFNcGhFLFVBQVV3bUUsU0FBVyxXQUVmOXBFLEtBRU4rcEUsZ0JBRk0vcEUsS0FJRGlvRSxXQUpDam9FLEtBSWNtRixRQUFRdWhFLGVBSnRCMW1FLEtBS0Z1bkUsY0FBZ0J0USxZQUxkajNELEtBSzZCZ3FFLGlCQUw3QmhxRSxLQUtpRG1GLFFBQVFpZ0UsaUJBS3JFVixFQUFNcGhFLFVBQVV5bUUsY0FBZ0IsV0FFcEIvcEUsS0FFRnVuRSxlQUNGcFEsY0FISW4zRCxLQUdZdW5FLGdCQUt4QjdDLEVBQU1waEUsVUFBVTBtRSxpQkFBbUIsV0FFL0IsSUFBSS9zRCxFQUFJamQsS0FDSms0QyxFQUFVajdCLEVBQUV5cUQsYUFBZXpxRCxFQUFFOVgsUUFBUXdoRSxlQUVuQzFwRCxFQUFFcXhDLFFBQVdyeEMsRUFBRWdzRCxhQUFnQmhzRCxFQUFFK3JELFlBRVAsSUFBdkIvckQsRUFBRTlYLFFBQVE2Z0UsV0FFVSxJQUFoQi9vRCxFQUFFd2pDLFdBQXFCeGpDLEVBQUV5cUQsYUFBZSxJQUFVenFELEVBQUVnckQsV0FBYSxFQUNsRWhyRCxFQUFFd2pDLFVBQVksRUFHUSxJQUFoQnhqQyxFQUFFd2pDLFlBRVJ2SSxFQUFVajdCLEVBQUV5cUQsYUFBZXpxRCxFQUFFOVgsUUFBUXdoRSxlQUVoQzFwRCxFQUFFeXFELGFBQWUsR0FBTSxJQUN4QnpxRCxFQUFFd2pDLFVBQVksS0FPMUJ4akMsRUFBRXl1RCxhQUFjeHpCLEtBTXhCd3NCLEVBQU1waEUsVUFBVXFvRSxZQUFjLFdBRTFCLElBQUkxdUQsRUFBSWpkLE1BRWlCLElBQXJCaWQsRUFBRTlYLFFBQVFtc0QsU0FFVnIwQyxFQUFFK3FELFdBQWF4N0IsRUFBRXZ2QixFQUFFOVgsUUFBUSsvRCxXQUFXeG1DLFNBQVMsZUFDL0N6aEIsRUFBRThxRCxXQUFhdjdCLEVBQUV2dkIsRUFBRTlYLFFBQVFnZ0UsV0FBV3ptQyxTQUFTLGVBRTNDemhCLEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxjQUV6QnpwRCxFQUFFK3FELFdBQVdqcEMsWUFBWSxnQkFBZ0JyQixXQUFXLHdCQUNwRHpnQixFQUFFOHFELFdBQVdocEMsWUFBWSxnQkFBZ0JyQixXQUFXLHdCQUVoRHpnQixFQUFFc3RELFNBQVMvOEQsS0FBS3lQLEVBQUU5WCxRQUFRKy9ELFlBQzFCam9ELEVBQUUrcUQsV0FBV3IzQyxVQUFVMVQsRUFBRTlYLFFBQVE0L0QsY0FHakM5bkQsRUFBRXN0RCxTQUFTLzhELEtBQUt5UCxFQUFFOVgsUUFBUWdnRSxZQUMxQmxvRCxFQUFFOHFELFdBQVdyM0MsU0FBU3pULEVBQUU5WCxRQUFRNC9ELGVBR1QsSUFBdkI5bkQsRUFBRTlYLFFBQVE2Z0UsVUFDVi9vRCxFQUFFK3FELFdBQ0d0cEMsU0FBUyxrQkFDVDVzQixLQUFLLGdCQUFpQixTQUsvQm1MLEVBQUUrcUQsV0FBV3hzRCxJQUFLeUIsRUFBRThxRCxZQUVmcnBDLFNBQVMsZ0JBQ1Q1c0IsS0FBSyxDQUNGODVELGdCQUFpQixPQUNqQnJ0QyxTQUFZLFNBU2hDbW1DLEVBQU1waEUsVUFBVXVvRSxVQUFZLFdBRXhCLElBQ0kzcEUsRUFBRzRwRSxFQURIN3VELEVBQUlqZCxLQUdSLElBQXVCLElBQW5CaWQsRUFBRTlYLFFBQVF1Z0UsTUFBaUJ6b0QsRUFBRWdyRCxXQUFhaHJELEVBQUU5WCxRQUFRdWhFLGFBQWMsQ0FNbEUsSUFKQXpwRCxFQUFFb3NELFFBQVEzcUMsU0FBUyxnQkFFbkJvdEMsRUFBTXQvQixFQUFFLFVBQVU5TixTQUFTemhCLEVBQUU5WCxRQUFRd2dFLFdBRWhDempFLEVBQUksRUFBR0EsR0FBSythLEVBQUU4dUQsY0FBZTdwRSxHQUFLLEVBQ25DNHBFLEVBQUkzN0MsT0FBT3FjLEVBQUUsVUFBVXJjLE9BQU9sVCxFQUFFOVgsUUFBUXFnRSxhQUFhN2tFLEtBQUtYLEtBQU1pZCxFQUFHL2EsS0FHdkUrYSxFQUFFMHFELE1BQVFtRSxFQUFJcDdDLFNBQVN6VCxFQUFFOVgsUUFBUTYvRCxZQUVqQy9uRCxFQUFFMHFELE1BQU1wM0QsS0FBSyxNQUFNak0sUUFBUW82QixTQUFTLGtCQU01Q2dtQyxFQUFNcGhFLFVBQVUwb0UsU0FBVyxXQUV2QixJQUFJL3VELEVBQUlqZCxLQUVSaWQsRUFBRWtyRCxRQUNFbHJELEVBQUVvc0QsUUFDR3R1RCxTQUFVa0MsRUFBRTlYLFFBQVE2N0MsTUFBUSx1QkFDNUJ0aUIsU0FBUyxlQUVsQnpoQixFQUFFZ3JELFdBQWFockQsRUFBRWtyRCxRQUFROWtFLE9BRXpCNFosRUFBRWtyRCxRQUFRbGtFLEtBQUssU0FBU3FYLEVBQU9xcEQsR0FDM0JuNEIsRUFBRW00QixHQUNHN3lELEtBQUssbUJBQW9Cd0osR0FDekJvSCxLQUFLLGtCQUFtQjhwQixFQUFFbTRCLEdBQVM3eUQsS0FBSyxVQUFZLE1BRzdEbUwsRUFBRW9zRCxRQUFRM3FDLFNBQVMsZ0JBRW5CemhCLEVBQUVpckQsWUFBZ0MsSUFBakJqckQsRUFBRWdyRCxXQUNmejdCLEVBQUUsOEJBQThCOWIsU0FBU3pULEVBQUVvc0QsU0FDM0Nwc0QsRUFBRWtyRCxRQUFRL2dDLFFBQVEsOEJBQThCbHpCLFNBRXBEK0ksRUFBRWdrRCxNQUFRaGtELEVBQUVpckQsWUFBWXpnRCxLQUNwQiw2QkFBNkJ2VCxTQUNqQytJLEVBQUVpckQsWUFBWXhqRCxJQUFJLFVBQVcsSUFFQSxJQUF6QnpILEVBQUU5WCxRQUFRa2dFLGFBQWtELElBQTNCcG9ELEVBQUU5WCxRQUFRMGhFLGVBQzNDNXBELEVBQUU5WCxRQUFRd2hFLGVBQWlCLEdBRy9CbjZCLEVBQUUsaUJBQWtCdnZCLEVBQUVvc0QsU0FBUzEwRCxJQUFJLFNBQVMrcEIsU0FBUyxpQkFFckR6aEIsRUFBRWd2RCxnQkFFRmh2RCxFQUFFMHVELGNBRUYxdUQsRUFBRTR1RCxZQUVGNXVELEVBQUVpdkQsYUFHRmp2RCxFQUFFa3ZELGdCQUEwQyxpQkFBbkJsdkQsRUFBRXlxRCxhQUE0QnpxRCxFQUFFeXFELGFBQWUsSUFFNUMsSUFBeEJ6cUQsRUFBRTlYLFFBQVF3akQsV0FDVjFyQyxFQUFFZ2tELE1BQU12aUMsU0FBUyxjQUt6QmdtQyxFQUFNcGhFLFVBQVU4b0UsVUFBWSxXQUV4QixJQUFjMWlFLEVBQUdDLEVBQUcwa0MsRUFBR2crQixFQUFXQyxFQUFhQyxFQUFlQyxFQUExRHZ2RCxFQUFJamQsS0FLUixHQUhBcXNFLEVBQVl6c0UsU0FBU3FtQix5QkFDckJzbUQsRUFBaUJ0dkQsRUFBRW9zRCxRQUFRdHVELFdBRVAsRUFBakJrQyxFQUFFOVgsUUFBUXFoRSxLQUFVLENBT25CLElBTEFnRyxFQUFtQnZ2RCxFQUFFOVgsUUFBUXNoRSxhQUFleHBELEVBQUU5WCxRQUFRcWhFLEtBQ3REOEYsRUFBY3ZtRSxLQUFLMHZCLEtBQ2Y4MkMsRUFBZWxwRSxPQUFTbXBFLEdBR3hCOWlFLEVBQUksRUFBR0EsRUFBSTRpRSxFQUFhNWlFLElBQUksQ0FDNUIsSUFBSXMzQyxFQUFRcGhELFNBQVN5QyxjQUFjLE9BQ25DLElBQUlzSCxFQUFJLEVBQUdBLEVBQUlzVCxFQUFFOVgsUUFBUXFoRSxLQUFNNzhELElBQUssQ0FDaEMsSUFBSThpRSxFQUFNN3NFLFNBQVN5QyxjQUFjLE9BQ2pDLElBQUlnc0MsRUFBSSxFQUFHQSxFQUFJcHhCLEVBQUU5WCxRQUFRc2hFLGFBQWNwNEIsSUFBSyxDQUN4QyxJQUFJN29DLEVBQVVrRSxFQUFJOGlFLEdBQXFCN2lFLEVBQUlzVCxFQUFFOVgsUUFBUXNoRSxhQUFnQnA0QixHQUNqRWsrQixFQUFlN29FLElBQUk4QixJQUNuQmluRSxFQUFJL3BFLFlBQVk2cEUsRUFBZTdvRSxJQUFJOEIsSUFHM0N3N0MsRUFBTXQrQyxZQUFZK3BFLEdBRXRCSixFQUFVM3BFLFlBQVlzK0MsR0FHMUIvakMsRUFBRW9zRCxRQUFReHpELFFBQVFzYSxPQUFPazhDLEdBQ3pCcHZELEVBQUVvc0QsUUFBUXR1RCxXQUFXQSxXQUFXQSxXQUMzQjJKLElBQUksQ0FDRDBOLE1BQVMsSUFBTW5WLEVBQUU5WCxRQUFRc2hFLGFBQWdCLElBQ3pDaGlELFFBQVcsbUJBTzNCaWdELEVBQU1waEUsVUFBVW9wRSxnQkFBa0IsU0FBU3huRCxFQUFTeW5ELEdBRWhELElBQ0lDLEVBQVlDLEVBQWtCQyxFQUQ5Qjd2RCxFQUFJamQsS0FDMEMrc0UsR0FBb0IsRUFDbEVDLEVBQWMvdkQsRUFBRW9zRCxRQUFRajNDLFFBQ3hCczNDLEVBQWMzcEUsT0FBT3NnRCxZQUFjN1QsRUFBRXpzQyxRQUFRcXlCLFFBVWpELEdBUm9CLFdBQWhCblYsRUFBRXFwRCxVQUNGd0csRUFBaUJwRCxFQUNNLFdBQWhCenNELEVBQUVxcEQsVUFDVHdHLEVBQWlCRSxFQUNNLFFBQWhCL3ZELEVBQUVxcEQsWUFDVHdHLEVBQWlCL21FLEtBQUswMUMsSUFBSWl1QixFQUFhc0QsSUFHdEMvdkQsRUFBRTlYLFFBQVFvaEUsWUFDWHRwRCxFQUFFOVgsUUFBUW9oRSxXQUFXbGpFLFFBQ0ksT0FBekI0WixFQUFFOVgsUUFBUW9oRSxXQUFxQixDQUkvQixJQUFLcUcsS0FGTEMsRUFBbUIsS0FFQTV2RCxFQUFFcStCLFlBQ2JyK0IsRUFBRXErQixZQUFZbjZDLGVBQWV5ckUsTUFDVSxJQUFuQzN2RCxFQUFFcXNCLGlCQUFpQjQ4QixZQUNmNEcsRUFBaUI3dkQsRUFBRXErQixZQUFZc3hCLEtBQy9CQyxFQUFtQjV2RCxFQUFFcStCLFlBQVlzeEIsSUFHakNFLEVBQWlCN3ZELEVBQUVxK0IsWUFBWXN4QixLQUMvQkMsRUFBbUI1dkQsRUFBRXErQixZQUFZc3hCLEtBTXhCLE9BQXJCQyxFQUMyQixPQUF2QjV2RCxFQUFFMHJELGtCQUNFa0UsSUFBcUI1dkQsRUFBRTByRCxtQkFBb0JnRSxJQWlCL0MxdkQsRUFBRTByRCxpQkFBbUJrRSxFQUMwQixZQUEzQzV2RCxFQUFFNnJELG1CQUFtQitELEdBQ3JCNXZELEVBQUVnd0QsUUFBUUosSUFFVjV2RCxFQUFFOVgsUUFBVXFuQyxFQUFFdG5DLE9BQU8sR0FBSStYLEVBQUVxc0IsaUJBQ3ZCcnNCLEVBQUU2ckQsbUJBQ0UrRCxLQUNRLElBQVozbkQsSUFDQWpJLEVBQUV5cUQsYUFBZXpxRCxFQUFFOVgsUUFBUWt6QyxjQUUvQnA3QixFQUFFaXdELFFBQVFob0QsSUFFZDZuRCxFQUFvQkYsR0FHRyxPQUF2QjV2RCxFQUFFMHJELG1CQUNGMXJELEVBQUUwckQsaUJBQW1CLEtBQ3JCMXJELEVBQUU5WCxRQUFVOFgsRUFBRXFzQixrQkFDRSxJQUFacGtCLElBQ0FqSSxFQUFFeXFELGFBQWV6cUQsRUFBRTlYLFFBQVFrekMsY0FFL0JwN0IsRUFBRWl3RCxRQUFRaG9ELEdBQ1Y2bkQsRUFBb0JGLEdBS3ZCM25ELElBQWlDLElBQXRCNm5ELEdBQ1o5dkQsRUFBRW9zRCxRQUFRaGdELFFBQVEsYUFBYyxDQUFDcE0sRUFBRzh2RCxNQU1oRHJJLEVBQU1waEUsVUFBVTJtRSxZQUFjLFNBQVN0aEQsRUFBT3drRCxHQUUxQyxJQUVJQyxFQUFhL0UsRUFGYnByRCxFQUFJamQsS0FDSmk5RCxFQUFVendCLEVBQUU3akIsRUFBTXFDLGVBZ0J0QixPQVpHaXlDLEVBQVEvaUQsR0FBRyxNQUNWeU8sRUFBTVMsaUJBSU42ekMsRUFBUS9pRCxHQUFHLFFBQ1graUQsRUFBVUEsRUFBUTVoRCxRQUFRLE9BSTlCK3hELEVBRGdCbndELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXdoRSxnQkFBbUIsRUFDL0IsR0FBSzFwRCxFQUFFZ3JELFdBQWFockQsRUFBRXlxRCxjQUFnQnpxRCxFQUFFOVgsUUFBUXdoRSxlQUVyRWgrQyxFQUFNakcsS0FBSy9CLFNBRWYsSUFBSyxXQUNEMG5ELEVBQThCLEdBQWhCK0UsRUFBb0Jud0QsRUFBRTlYLFFBQVF3aEUsZUFBaUIxcEQsRUFBRTlYLFFBQVF1aEUsYUFBZTBHLEVBQ2xGbndELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxjQUN6QnpwRCxFQUFFeXVELGFBQWF6dUQsRUFBRXlxRCxhQUFlVyxHQUFhLEVBQU84RSxHQUV4RCxNQUVKLElBQUssT0FDRDlFLEVBQThCLEdBQWhCK0UsRUFBb0Jud0QsRUFBRTlYLFFBQVF3aEUsZUFBaUJ5RyxFQUN6RG53RCxFQUFFZ3JELFdBQWFockQsRUFBRTlYLFFBQVF1aEUsY0FDekJ6cEQsRUFBRXl1RCxhQUFhenVELEVBQUV5cUQsYUFBZVcsR0FBYSxFQUFPOEUsR0FFeEQsTUFFSixJQUFLLFFBQ0QsSUFBSTd4RCxFQUE2QixJQUFyQnFOLEVBQU1qRyxLQUFLcEgsTUFBYyxFQUNqQ3FOLEVBQU1qRyxLQUFLcEgsT0FBUzJoRCxFQUFRM2hELFFBQVUyQixFQUFFOVgsUUFBUXdoRSxlQUVwRDFwRCxFQUFFeXVELGFBQWF6dUQsRUFBRW93RCxlQUFlL3hELElBQVEsRUFBTzZ4RCxHQUMvQ2xRLEVBQVFsaUQsV0FBV3NPLFFBQVEsU0FDM0IsTUFFSixRQUNJLFNBS1pxN0MsRUFBTXBoRSxVQUFVK3BFLGVBQWlCLFNBQVMveEQsR0FFdEMsSUFDSWd5RCxFQUFZQyxFQUloQixHQURBQSxFQUFnQixFQUNaanlELEdBRkpneUQsRUFIUXR0RSxLQUdPd3RFLHVCQUVRRixFQUFXanFFLE9BQVMsR0FDdkNpWSxFQUFRZ3lELEVBQVdBLEVBQVdqcUUsT0FBUyxRQUV2QyxJQUFLLElBQUkrVyxLQUFLa3pELEVBQVksQ0FDdEIsR0FBSWh5RCxFQUFRZ3lELEVBQVdsekQsR0FBSSxDQUN2QmtCLEVBQVFpeUQsRUFDUixNQUVKQSxFQUFnQkQsRUFBV2x6RCxHQUluQyxPQUFPa0IsR0FHWG9wRCxFQUFNcGhFLFVBQVVtcUUsY0FBZ0IsV0FFNUIsSUFBSXh3RCxFQUFJamQsS0FFSmlkLEVBQUU5WCxRQUFRdWdFLE1BQW9CLE9BQVp6b0QsRUFBRTBxRCxRQUVwQm43QixFQUFFLEtBQU12dkIsRUFBRTBxRCxPQUNMLytDLElBQUksY0FBZTNMLEVBQUVndEQsYUFDckJyaEQsSUFBSSxtQkFBb0I0akIsRUFBRVgsTUFBTTV1QixFQUFFeXdELFVBQVd6d0QsR0FBRyxJQUNoRDJMLElBQUksbUJBQW9CNGpCLEVBQUVYLE1BQU01dUIsRUFBRXl3RCxVQUFXendELEdBQUcsS0FFckIsSUFBNUJBLEVBQUU5WCxRQUFRMC9ELGVBQ1Y1bkQsRUFBRTBxRCxNQUFNLytDLElBQUksZ0JBQWlCM0wsRUFBRXF0RCxhQUl2Q3J0RCxFQUFFb3NELFFBQVF6Z0QsSUFBSSwyQkFFVyxJQUFyQjNMLEVBQUU5WCxRQUFRbXNELFFBQW1CcjBDLEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxlQUN0RHpwRCxFQUFFK3FELFlBQWMvcUQsRUFBRStxRCxXQUFXcC9DLElBQUksY0FBZTNMLEVBQUVndEQsYUFDbERodEQsRUFBRThxRCxZQUFjOXFELEVBQUU4cUQsV0FBV24vQyxJQUFJLGNBQWUzTCxFQUFFZ3RELGNBRWxCLElBQTVCaHRELEVBQUU5WCxRQUFRMC9ELGdCQUNWNW5ELEVBQUUrcUQsWUFBYy9xRCxFQUFFK3FELFdBQVdwL0MsSUFBSSxnQkFBaUIzTCxFQUFFcXRELFlBQ3BEcnRELEVBQUU4cUQsWUFBYzlxRCxFQUFFOHFELFdBQVduL0MsSUFBSSxnQkFBaUIzTCxFQUFFcXRELGNBSTVEcnRELEVBQUVna0QsTUFBTXI0QyxJQUFJLG1DQUFvQzNMLEVBQUVxL0IsY0FDbERyL0IsRUFBRWdrRCxNQUFNcjRDLElBQUksa0NBQW1DM0wsRUFBRXEvQixjQUNqRHIvQixFQUFFZ2tELE1BQU1yNEMsSUFBSSwrQkFBZ0MzTCxFQUFFcS9CLGNBQzlDci9CLEVBQUVna0QsTUFBTXI0QyxJQUFJLHFDQUFzQzNMLEVBQUVxL0IsY0FFcERyL0IsRUFBRWdrRCxNQUFNcjRDLElBQUksY0FBZTNMLEVBQUVpdEQsY0FFN0IxOUIsRUFBRTVzQyxVQUFVZ3BCLElBQUkzTCxFQUFFd3NELGlCQUFrQnhzRCxFQUFFeVgsWUFFdEN6WCxFQUFFMHdELHNCQUU4QixJQUE1QjF3RCxFQUFFOVgsUUFBUTAvRCxlQUNWNW5ELEVBQUVna0QsTUFBTXI0QyxJQUFJLGdCQUFpQjNMLEVBQUVxdEQsYUFHSCxJQUE1QnJ0RCxFQUFFOVgsUUFBUTJnRSxlQUNWdDVCLEVBQUV2dkIsRUFBRWlyRCxhQUFhbnRELFdBQVc2TixJQUFJLGNBQWUzTCxFQUFFa3RELGVBR3JEMzlCLEVBQUV6c0MsUUFBUTZvQixJQUFJLGlDQUFtQzNMLEVBQUV3bkQsWUFBYXhuRCxFQUFFMndELG1CQUVsRXBoQyxFQUFFenNDLFFBQVE2b0IsSUFBSSxzQkFBd0IzTCxFQUFFd25ELFlBQWF4bkQsRUFBRXdsQyxRQUV2RGpXLEVBQUUsb0JBQXFCdnZCLEVBQUVpckQsYUFBYXQvQyxJQUFJLFlBQWEzTCxFQUFFbU0sZ0JBRXpEb2pCLEVBQUV6c0MsUUFBUTZvQixJQUFJLG9CQUFzQjNMLEVBQUV3bkQsWUFBYXhuRCxFQUFFbXRELGNBSXpEMUYsRUFBTXBoRSxVQUFVcXFFLG1CQUFxQixXQUV6QjN0RSxLQUVOaWhFLE1BQU1yNEMsSUFBSSxtQkFBb0I0akIsRUFBRVgsTUFGMUI3ckMsS0FFa0MwdEUsVUFGbEMxdEUsTUFFZ0QsSUFGaERBLEtBR05paEUsTUFBTXI0QyxJQUFJLG1CQUFvQjRqQixFQUFFWCxNQUgxQjdyQyxLQUdrQzB0RSxVQUhsQzF0RSxNQUdnRCxLQUk1RDBrRSxFQUFNcGhFLFVBQVV1cUUsWUFBYyxXQUUxQixJQUFjdEIsRUFFTSxFQUZadnNFLEtBRUhtRixRQUFRcWhFLFFBQ1QrRixFQUhJdnNFLEtBR2Vtb0UsUUFBUXB0RCxXQUFXQSxZQUN2QjJpQixXQUFXLFNBSnRCMTlCLEtBS0ZxcEUsUUFBUXh6RCxRQUFRc2EsT0FBT284QyxLQUtqQzdILEVBQU1waEUsVUFBVTRtRSxhQUFlLFNBQVN2aEQsSUFJZCxJQUZkM29CLEtBRUZvcEUsY0FDRnpnRCxFQUFNUSwyQkFDTlIsRUFBTU8sa0JBQ05QLEVBQU1TLG1CQUtkczdDLEVBQU1waEUsVUFBVTgrQyxRQUFVLFNBQVM4cUIsR0FFL0IsSUFBSWp3RCxFQUFJamQsS0FFUmlkLEVBQUU4c0QsZ0JBRUY5c0QsRUFBRXVyRCxZQUFjLEdBRWhCdnJELEVBQUV3d0QsZ0JBRUZqaEMsRUFBRSxnQkFBaUJ2dkIsRUFBRW9zRCxTQUFTbjVDLFNBRTFCalQsRUFBRTBxRCxPQUNGMXFELEVBQUUwcUQsTUFBTS9wRCxTQUdQWCxFQUFFK3FELFlBQWMvcUQsRUFBRStxRCxXQUFXM2tFLFNBRTlCNFosRUFBRStxRCxXQUNHanBDLFlBQVksMkNBQ1pyQixXQUFXLHNDQUNYaFosSUFBSSxVQUFVLElBRWR6SCxFQUFFc3RELFNBQVMvOEQsS0FBTXlQLEVBQUU5WCxRQUFRKy9ELFlBQzVCam9ELEVBQUUrcUQsV0FBV3BxRCxVQUloQlgsRUFBRThxRCxZQUFjOXFELEVBQUU4cUQsV0FBVzFrRSxTQUU5QjRaLEVBQUU4cUQsV0FDR2hwQyxZQUFZLDJDQUNackIsV0FBVyxzQ0FDWGhaLElBQUksVUFBVSxJQUVkekgsRUFBRXN0RCxTQUFTLzhELEtBQU15UCxFQUFFOVgsUUFBUWdnRSxZQUM1QmxvRCxFQUFFOHFELFdBQVducUQsVUFLakJYLEVBQUVrckQsVUFFRmxyRCxFQUFFa3JELFFBQ0dwcEMsWUFBWSxxRUFDWnJCLFdBQVcsZUFDWEEsV0FBVyxvQkFDWHo1QixLQUFLLFdBQ0Z1b0MsRUFBRXhzQyxNQUFNOFIsS0FBSyxRQUFTMDZCLEVBQUV4c0MsTUFBTTBpQixLQUFLLHNCQUczQ3pGLEVBQUVpckQsWUFBWW50RCxTQUFTL2EsS0FBS21GLFFBQVE2N0MsT0FBTzl3QixTQUUzQ2pULEVBQUVpckQsWUFBWWg0QyxTQUVkalQsRUFBRWdrRCxNQUFNL3dDLFNBRVJqVCxFQUFFb3NELFFBQVFsNUMsT0FBT2xULEVBQUVrckQsVUFHdkJsckQsRUFBRTR3RCxjQUVGNXdELEVBQUVvc0QsUUFBUXRxQyxZQUFZLGdCQUN0QjloQixFQUFFb3NELFFBQVF0cUMsWUFBWSxxQkFDdEI5aEIsRUFBRW9zRCxRQUFRdHFDLFlBQVksZ0JBRXRCOWhCLEVBQUV5ckQsV0FBWSxFQUVWd0UsR0FDQWp3RCxFQUFFb3NELFFBQVFoZ0QsUUFBUSxVQUFXLENBQUNwTSxLQUt0Q3luRCxFQUFNcGhFLFVBQVVpb0Usa0JBQW9CLFNBQVN2cUIsR0FFekMsSUFDSWhULEVBQWEsR0FFakJBLEVBSFFodUMsS0FHS3dwRSxnQkFBa0IsSUFFUixJQUxmeHBFLEtBS0ZtRixRQUFRMGdFLEtBTE43bEUsS0FNRmtvRSxZQUFZeGpELElBQUlzcEIsR0FOZGh1QyxLQVFGbW9FLFFBQVE1akUsR0FBR3k4QyxHQUFPdDhCLElBQUlzcEIsSUFLaEMwMkIsRUFBTXBoRSxVQUFVd3FFLFVBQVksU0FBU0MsRUFBWTdwRSxHQUU3QyxJQUFJK1ksRUFBSWpkLE1BRWlCLElBQXJCaWQsRUFBRThyRCxnQkFFRjlyRCxFQUFFa3JELFFBQVE1akUsR0FBR3dwRSxHQUFZcnBELElBQUksQ0FDekJ3UyxPQUFRamEsRUFBRTlYLFFBQVEreEIsU0FHdEJqYSxFQUFFa3JELFFBQVE1akUsR0FBR3dwRSxHQUFZNXhDLFFBQVEsQ0FDN0JsRyxRQUFTLEdBQ1ZoWixFQUFFOVgsUUFBUTQyQixNQUFPOWUsRUFBRTlYLFFBQVE0d0IsT0FBUTd4QixLQUl0QytZLEVBQUVxdUQsZ0JBQWdCeUMsR0FFbEI5d0QsRUFBRWtyRCxRQUFRNWpFLEdBQUd3cEUsR0FBWXJwRCxJQUFJLENBQ3pCdVIsUUFBUyxFQUNUaUIsT0FBUWphLEVBQUU5WCxRQUFRK3hCLFNBR2xCaHpCLEdBQ0E0YixXQUFXLFdBRVA3QyxFQUFFc3VELGtCQUFrQndDLEdBRXBCN3BFLEVBQVN2RCxRQUNWc2MsRUFBRTlYLFFBQVE0MkIsU0FPekIyb0MsRUFBTXBoRSxVQUFVMHFFLGFBQWUsU0FBU0QsSUFJWCxJQUZqQi90RSxLQUVGK29FLGVBRkUvb0UsS0FJRm1vRSxRQUFRNWpFLEdBQUd3cEUsR0FBWTV4QyxRQUFRLENBQzdCbEcsUUFBUyxFQUNUaUIsT0FOQWwzQixLQU1VbUYsUUFBUSt4QixPQUFTLEdBTjNCbDNCLEtBT0NtRixRQUFRNDJCLE1BUFQvN0IsS0FPa0JtRixRQUFRNHdCLFNBUDFCLzFCLEtBV0ZzckUsZ0JBQWdCeUMsR0FYZC90RSxLQWFGbW9FLFFBQVE1akUsR0FBR3dwRSxHQUFZcnBELElBQUksQ0FDekJ1UixRQUFTLEVBQ1RpQixPQWZBbDNCLEtBZVVtRixRQUFRK3hCLE9BQVMsTUFPdkN3dEMsRUFBTXBoRSxVQUFVMnFFLGFBQWV2SixFQUFNcGhFLFVBQVU0cUUsWUFBYyxTQUFTNzlELEdBSW5ELE9BQVhBLElBRklyUSxLQUlGc3BFLGFBSkV0cEUsS0FJZW1vRSxRQUpmbm9FLEtBTUY4cUUsU0FORTlxRSxLQVFGa29FLFlBQVludEQsU0FBUy9hLEtBQUttRixRQUFRNjdDLE9BQU85d0IsU0FSdkNsd0IsS0FVRnNwRSxhQUFhajVELE9BQU9BLEdBQVFxZ0IsU0FWMUIxd0IsS0FVcUNrb0UsYUFWckNsb0UsS0FZRitxRSxXQU1WckcsRUFBTXBoRSxVQUFVNnFFLGFBQWUsV0FFM0IsSUFBSWx4RCxFQUFJamQsS0FFUmlkLEVBQUVvc0QsUUFDR3pnRCxJQUFJLDBCQUNKTCxHQUFHLHlCQUEwQixJQUFLLFNBQVNJLEdBRTVDQSxFQUFNUSwyQkFDTixJQUFJaWxELEVBQU01aEMsRUFBRXhzQyxNQUVaOGYsV0FBVyxXQUVIN0MsRUFBRTlYLFFBQVFpaEUsZUFDVm5wRCxFQUFFK3JELFNBQVdvRixFQUFJbDBELEdBQUcsVUFDcEIrQyxFQUFFNnNELGFBR1AsTUFLWHBGLEVBQU1waEUsVUFBVStxRSxXQUFhM0osRUFBTXBoRSxVQUFVZ3JFLGtCQUFvQixXQUc3RCxPQURRdHVFLEtBQ0MwbkUsY0FJYmhELEVBQU1waEUsVUFBVXlvRSxZQUFjLFdBRTFCLElBQUk5dUQsRUFBSWpkLEtBRUp1dUUsRUFBYSxFQUNiQyxFQUFVLEVBQ1ZDLEVBQVcsRUFFZixJQUEyQixJQUF2Qnh4RCxFQUFFOVgsUUFBUTZnRSxTQUNWLEdBQUkvb0QsRUFBRWdyRCxZQUFjaHJELEVBQUU5WCxRQUFRdWhFLGVBQ3ZCK0gsT0FFSCxLQUFPRixFQUFhdHhELEVBQUVnckQsY0FDaEJ3RyxFQUNGRixFQUFhQyxFQUFVdnhELEVBQUU5WCxRQUFRd2hFLGVBQ2pDNkgsR0FBV3Z4RCxFQUFFOVgsUUFBUXdoRSxnQkFBa0IxcEQsRUFBRTlYLFFBQVF1aEUsYUFBZXpwRCxFQUFFOVgsUUFBUXdoRSxlQUFpQjFwRCxFQUFFOVgsUUFBUXVoRSxrQkFHMUcsSUFBNkIsSUFBekJ6cEQsRUFBRTlYLFFBQVFrZ0UsV0FDakJvSixFQUFXeHhELEVBQUVnckQsZ0JBQ1YsR0FBSWhyRCxFQUFFOVgsUUFBUTgvRCxTQUdqQixLQUFPc0osRUFBYXR4RCxFQUFFZ3JELGNBQ2hCd0csRUFDRkYsRUFBYUMsRUFBVXZ4RCxFQUFFOVgsUUFBUXdoRSxlQUNqQzZILEdBQVd2eEQsRUFBRTlYLFFBQVF3aEUsZ0JBQWtCMXBELEVBQUU5WCxRQUFRdWhFLGFBQWV6cEQsRUFBRTlYLFFBQVF3aEUsZUFBaUIxcEQsRUFBRTlYLFFBQVF1aEUsa0JBTHpHK0gsRUFBVyxFQUFJMW9FLEtBQUswdkIsTUFBTXhZLEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxjQUFnQnpwRCxFQUFFOVgsUUFBUXdoRSxnQkFTakYsT0FBTzhILEVBQVcsR0FJdEIvSixFQUFNcGhFLFVBQVVvckUsUUFBVSxTQUFTWCxHQUUvQixJQUNJNUMsRUFDQXdELEVBRUFDLEVBQ0FDLEVBTEE1eEQsRUFBSWpkLEtBR0o4dUUsRUFBaUIsRUFrR3JCLE9BOUZBN3hELEVBQUVvckQsWUFBYyxFQUNoQnNHLEVBQWlCMXhELEVBQUVrckQsUUFBUTdqRSxRQUFReXFDLGFBQVksSUFFcEIsSUFBdkI5eEIsRUFBRTlYLFFBQVE2Z0UsVUFDTi9vRCxFQUFFZ3JELFdBQWFockQsRUFBRTlYLFFBQVF1aEUsZUFDekJ6cEQsRUFBRW9yRCxZQUFlcHJELEVBQUVpdEMsV0FBYWp0QyxFQUFFOVgsUUFBUXVoRSxjQUFpQixFQUMzRG1JLEdBQVEsR0FFbUIsSUFBdkI1eEQsRUFBRTlYLFFBQVFndUQsV0FBOEMsSUFBekJsMkMsRUFBRTlYLFFBQVFrZ0UsYUFDVixJQUEzQnBvRCxFQUFFOVgsUUFBUXVoRSxhQUNWbUksR0FBUSxJQUMwQixJQUEzQjV4RCxFQUFFOVgsUUFBUXVoRSxlQUNqQm1JLEdBQVEsSUFHaEJDLEVBQWtCSCxFQUFpQjF4RCxFQUFFOVgsUUFBUXVoRSxhQUFnQm1JLEdBRTdENXhELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXdoRSxnQkFBbUIsR0FDeENvSCxFQUFhOXdELEVBQUU5WCxRQUFRd2hFLGVBQWlCMXBELEVBQUVnckQsWUFBY2hyRCxFQUFFZ3JELFdBQWFockQsRUFBRTlYLFFBQVF1aEUsZUFHN0VvSSxFQUZBZixFQUFhOXdELEVBQUVnckQsWUFDZmhyRCxFQUFFb3JELGFBQWdCcHJELEVBQUU5WCxRQUFRdWhFLGNBQWdCcUgsRUFBYTl3RCxFQUFFZ3JELGFBQWVockQsRUFBRWl0QyxZQUFlLEdBQ3hFanRDLEVBQUU5WCxRQUFRdWhFLGNBQWdCcUgsRUFBYTl3RCxFQUFFZ3JELGFBQWUwRyxHQUFtQixJQUU5RjF4RCxFQUFFb3JELFlBQWdCcHJELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXdoRSxlQUFrQjFwRCxFQUFFaXRDLFlBQWUsRUFDM0RqdEMsRUFBRWdyRCxXQUFhaHJELEVBQUU5WCxRQUFRd2hFLGVBQWtCZ0ksR0FBbUIsS0FLekZaLEVBQWE5d0QsRUFBRTlYLFFBQVF1aEUsYUFBZXpwRCxFQUFFZ3JELGFBQ3hDaHJELEVBQUVvckQsYUFBZ0IwRixFQUFhOXdELEVBQUU5WCxRQUFRdWhFLGFBQWdCenBELEVBQUVnckQsWUFBY2hyRCxFQUFFaXRDLFdBQzNFNGtCLEdBQW1CZixFQUFhOXdELEVBQUU5WCxRQUFRdWhFLGFBQWdCenBELEVBQUVnckQsWUFBYzBHLEdBSTlFMXhELEVBQUVnckQsWUFBY2hyRCxFQUFFOVgsUUFBUXVoRSxlQUUxQm9JLEVBREE3eEQsRUFBRW9yRCxZQUFjLElBSVMsSUFBekJwckQsRUFBRTlYLFFBQVFrZ0UsWUFBdUJwb0QsRUFBRWdyRCxZQUFjaHJELEVBQUU5WCxRQUFRdWhFLGFBQzNEenBELEVBQUVvckQsWUFBZ0JwckQsRUFBRWl0QyxXQUFhbmtELEtBQUs2dEMsTUFBTTMyQixFQUFFOVgsUUFBUXVoRSxjQUFpQixFQUFPenBELEVBQUVpdEMsV0FBYWp0QyxFQUFFZ3JELFdBQWMsR0FDN0UsSUFBekJockQsRUFBRTlYLFFBQVFrZ0UsYUFBOEMsSUFBdkJwb0QsRUFBRTlYLFFBQVE2Z0UsU0FDbEQvb0QsRUFBRW9yRCxhQUFlcHJELEVBQUVpdEMsV0FBYW5rRCxLQUFLNnRDLE1BQU0zMkIsRUFBRTlYLFFBQVF1aEUsYUFBZSxHQUFLenBELEVBQUVpdEMsWUFDM0MsSUFBekJqdEMsRUFBRTlYLFFBQVFrZ0UsYUFDakJwb0QsRUFBRW9yRCxZQUFjLEVBQ2hCcHJELEVBQUVvckQsYUFBZXByRCxFQUFFaXRDLFdBQWFua0QsS0FBSzZ0QyxNQUFNMzJCLEVBQUU5WCxRQUFRdWhFLGFBQWUsSUFJcEV5RSxHQUR1QixJQUF2Qmx1RCxFQUFFOVgsUUFBUWd1RCxTQUNLNGEsRUFBYTl3RCxFQUFFaXRDLFlBQWUsRUFBS2p0QyxFQUFFb3JELFlBRXJDMEYsRUFBYVksR0FBbUIsRUFBS0csR0FHeEIsSUFBNUI3eEQsRUFBRTlYLFFBQVEraEUsZ0JBR04wSCxFQURBM3hELEVBQUVnckQsWUFBY2hyRCxFQUFFOVgsUUFBUXVoRSxlQUF1QyxJQUF2QnpwRCxFQUFFOVgsUUFBUTZnRSxTQUN0Qy9vRCxFQUFFaXJELFlBQVludEQsU0FBUyxnQkFBZ0J4VyxHQUFHd3BFLEdBRTFDOXdELEVBQUVpckQsWUFBWW50RCxTQUFTLGdCQUFnQnhXLEdBQUd3cEUsRUFBYTl3RCxFQUFFOVgsUUFBUXVoRSxjQUszRXlFLEdBRmMsSUFBbEJsdUQsRUFBRTlYLFFBQVFpOEMsSUFDTnd0QixFQUFZLElBQzhFLEdBQTVFM3hELEVBQUVpckQsWUFBWTkxQyxRQUFVdzhDLEVBQVksR0FBR3o0QixXQUFheTRCLEVBQVl4OEMsU0FFaEUsRUFHTHc4QyxFQUFZLElBQWtDLEVBQTdCQSxFQUFZLEdBQUd6NEIsV0FBa0IsR0FHdEMsSUFBekJsNUIsRUFBRTlYLFFBQVFrZ0UsYUFFTnVKLEVBREEzeEQsRUFBRWdyRCxZQUFjaHJELEVBQUU5WCxRQUFRdWhFLGVBQXVDLElBQXZCenBELEVBQUU5WCxRQUFRNmdFLFNBQ3RDL29ELEVBQUVpckQsWUFBWW50RCxTQUFTLGdCQUFnQnhXLEdBQUd3cEUsR0FFMUM5d0QsRUFBRWlyRCxZQUFZbnRELFNBQVMsZ0JBQWdCeFcsR0FBR3dwRSxFQUFhOXdELEVBQUU5WCxRQUFRdWhFLGFBQWUsR0FLMUZ5RSxHQUZjLElBQWxCbHVELEVBQUU5WCxRQUFRaThDLElBQ053dEIsRUFBWSxJQUM4RSxHQUE1RTN4RCxFQUFFaXJELFlBQVk5MUMsUUFBVXc4QyxFQUFZLEdBQUd6NEIsV0FBYXk0QixFQUFZeDhDLFNBRWhFLEVBR0x3OEMsRUFBWSxJQUFrQyxFQUE3QkEsRUFBWSxHQUFHejRCLFdBQWtCLEVBR25FZzFCLElBQWVsdUQsRUFBRWdrRCxNQUFNN3VDLFFBQVV3OEMsRUFBWTkvQixjQUFnQixJQUk5RHE4QixHQUlYekcsRUFBTXBoRSxVQUFVeXJFLFVBQVlySyxFQUFNcGhFLFVBQVUwckUsZUFBaUIsU0FBUzNvRCxHQUlsRSxPQUZRcm1CLEtBRUNtRixRQUFRa2hCLElBSXJCcStDLEVBQU1waEUsVUFBVWtxRSxvQkFBc0IsV0FFbEMsSUFJSXg0QyxFQUpBL1gsRUFBSWpkLEtBQ0p1dUUsRUFBYSxFQUNiQyxFQUFVLEVBQ1ZTLEVBQVUsR0FXZCxJQVBJajZDLEdBRHVCLElBQXZCL1gsRUFBRTlYLFFBQVE2Z0UsU0FDSi9vRCxFQUFFZ3JELFlBRVJzRyxHQUF5QyxFQUE1QnR4RCxFQUFFOVgsUUFBUXdoRSxlQUN2QjZILEdBQXNDLEVBQTVCdnhELEVBQUU5WCxRQUFRd2hFLGVBQ0MsRUFBZjFwRCxFQUFFZ3JELFlBR0xzRyxFQUFhdjVDLEdBQ2hCaTZDLEVBQVFudUUsS0FBS3l0RSxHQUNiQSxFQUFhQyxFQUFVdnhELEVBQUU5WCxRQUFRd2hFLGVBQ2pDNkgsR0FBV3Z4RCxFQUFFOVgsUUFBUXdoRSxnQkFBa0IxcEQsRUFBRTlYLFFBQVF1aEUsYUFBZXpwRCxFQUFFOVgsUUFBUXdoRSxlQUFpQjFwRCxFQUFFOVgsUUFBUXVoRSxhQUd6RyxPQUFPdUksR0FJWHZLLEVBQU1waEUsVUFBVTRyRSxTQUFXLFdBRXZCLE9BQU9sdkUsTUFJWDBrRSxFQUFNcGhFLFVBQVU2ckUsY0FBZ0IsV0FFNUIsSUFDcUJDLEVBQWFDLEVBRDlCcHlELEVBQUlqZCxLQUtSLE9BRkFxdkUsR0FBd0MsSUFBekJweUQsRUFBRTlYLFFBQVFrZ0UsV0FBc0Jwb0QsRUFBRWl0QyxXQUFhbmtELEtBQUs2dEMsTUFBTTMyQixFQUFFOVgsUUFBUXVoRSxhQUFlLEdBQUssR0FFeEUsSUFBM0J6cEQsRUFBRTlYLFFBQVEwaEUsY0FDVjVwRCxFQUFFaXJELFlBQVkzM0QsS0FBSyxnQkFBZ0J0TSxLQUFLLFNBQVNxWCxFQUFPMGxDLEdBQ3BELEdBQUlBLEVBQU03SyxXQUFhazVCLEVBQWdCN2lDLEVBQUV3VSxHQUFPbFMsYUFBZSxHQUFxQixFQUFmN3hCLEVBQUVxckQsVUFFbkUsT0FEQThHLEVBQWNwdUIsR0FDUCxJQUlHajdDLEtBQUtpdkMsSUFBSXhJLEVBQUU0aUMsR0FBYXQ5RCxLQUFLLG9CQUFzQm1MLEVBQUV5cUQsZUFBaUIsR0FLakZ6cUQsRUFBRTlYLFFBQVF3aEUsZ0JBS3pCakMsRUFBTXBoRSxVQUFVZ3NFLEtBQU81SyxFQUFNcGhFLFVBQVVpc0UsVUFBWSxTQUFTdnVCLEVBQU9tc0IsR0FFdkRudEUsS0FFTmlxRSxZQUFZLENBQ1Z2bkQsS0FBTSxDQUNGL0IsUUFBUyxRQUNUckYsTUFBT3dZLFNBQVNrdEIsS0FFckJtc0IsSUFJUHpJLEVBQU1waEUsVUFBVUgsS0FBTyxTQUFTcXNFLEdBRTVCLElBQUl2eUQsRUFBSWpkLEtBRUh3c0MsRUFBRXZ2QixFQUFFb3NELFNBQVNqcUMsU0FBUyx1QkFFdkJvTixFQUFFdnZCLEVBQUVvc0QsU0FBUzNxQyxTQUFTLHFCQUV0QnpoQixFQUFFbXZELFlBQ0ZudkQsRUFBRSt1RCxXQUNGL3VELEVBQUV3eUQsV0FDRnh5RCxFQUFFeXlELFlBQ0Z6eUQsRUFBRTB5RCxhQUNGMXlELEVBQUUyeUQsbUJBQ0YzeUQsRUFBRTR5RCxlQUNGNXlELEVBQUVpdkQsYUFDRmp2RCxFQUFFeXZELGlCQUFnQixHQUNsQnp2RCxFQUFFa3hELGdCQUlGcUIsR0FDQXZ5RCxFQUFFb3NELFFBQVFoZ0QsUUFBUSxPQUFRLENBQUNwTSxLQUdDLElBQTVCQSxFQUFFOVgsUUFBUTAvRCxlQUNWNW5ELEVBQUU2eUQsVUFHRDd5RCxFQUFFOVgsUUFBUWlnRCxXQUVYbm9DLEVBQUVxeEMsUUFBUyxFQUNYcnhDLEVBQUU2c0QsYUFNVnBGLEVBQU1waEUsVUFBVXdzRSxRQUFVLFdBQ3RCLElBQUk3eUQsRUFBSWpkLEtBQ0ErdkUsRUFBZWhxRSxLQUFLMHZCLEtBQUt4WSxFQUFFZ3JELFdBQWFockQsRUFBRTlYLFFBQVF1aEUsY0FDbERzSixFQUFvQi95RCxFQUFFdXdELHNCQUFzQm45RCxPQUFPLFNBQVNsTyxHQUN4RCxPQUFlLEdBQVBBLEdBQWNBLEVBQU04YSxFQUFFZ3JELGFBRzFDaHJELEVBQUVrckQsUUFBUTNzRCxJQUFJeUIsRUFBRWlyRCxZQUFZMzNELEtBQUssa0JBQWtCdUIsS0FBSyxDQUNwRDQ0RCxjQUFlLE9BQ2Zuc0MsU0FBWSxPQUNiaHVCLEtBQUssNEJBQTRCdUIsS0FBSyxDQUNyQ3lzQixTQUFZLE9BR0EsT0FBWnRoQixFQUFFMHFELFFBQ0YxcUQsRUFBRWtyRCxRQUFReHpELElBQUlzSSxFQUFFaXJELFlBQVkzM0QsS0FBSyxrQkFBa0J0TSxLQUFLLFNBQVMvQixHQUM3RCxJQUFJK3RFLEVBQW9CRCxFQUFrQmp2RSxRQUFRbUIsR0FRbEQsR0FOQXNxQyxFQUFFeHNDLE1BQU04UixLQUFLLENBQ1RvK0QsS0FBUSxXQUNSOWlFLEdBQU0sY0FBZ0I2UCxFQUFFd25ELFlBQWN2aUUsRUFDdENxOEIsVUFBYSxLQUdVLElBQXZCMHhDLEVBQTBCLENBQzNCLElBQUlFLEVBQW9CLHNCQUF3Qmx6RCxFQUFFd25ELFlBQWN3TCxFQUM1RHpqQyxFQUFFLElBQU0yakMsR0FBbUI5c0UsUUFDN0JtcEMsRUFBRXhzQyxNQUFNOFIsS0FBSyxDQUNUcytELG1CQUFvQkQsT0FNakNsekQsRUFBRTBxRCxNQUFNNzFELEtBQUssT0FBUSxXQUFXdkIsS0FBSyxNQUFNdE0sS0FBSyxTQUFTL0IsR0FDckQsSUFBSW11RSxFQUFtQkwsRUFBa0I5dEUsR0FFekNzcUMsRUFBRXhzQyxNQUFNOFIsS0FBSyxDQUNUbytELEtBQVEsaUJBR1oxakMsRUFBRXhzQyxNQUFNdVEsS0FBSyxVQUFVak0sUUFBUXdOLEtBQUssQ0FDaENvK0QsS0FBUSxNQUNSOWlFLEdBQU0sc0JBQXdCNlAsRUFBRXduRCxZQUFjdmlFLEVBQzlDb3VFLGdCQUFpQixjQUFnQnJ6RCxFQUFFd25ELFlBQWM0TCxFQUNqREUsYUFBZXJ1RSxFQUFJLEVBQUssT0FBUzZ0RSxFQUNqQ1MsZ0JBQWlCLEtBQ2pCanlDLFNBQVksU0FHakJoNkIsR0FBRzBZLEVBQUV5cUQsY0FBY24zRCxLQUFLLFVBQVV1QixLQUFLLENBQ3RDMCtELGdCQUFpQixPQUNqQmp5QyxTQUFZLE1BQ2J4NUIsT0FHUCxJQUFLLElBQUk3QyxFQUFFK2EsRUFBRXlxRCxhQUFjMXlDLEVBQUk5eUIsRUFBRSthLEVBQUU5WCxRQUFRdWhFLGFBQWN4a0UsRUFBSTh5QixFQUFLOXlCLElBQzVEK2EsRUFBRTlYLFFBQVE0Z0UsY0FDWjlvRCxFQUFFa3JELFFBQVE1akUsR0FBR3JDLEdBQUc0UCxLQUFLLENBQUN5c0IsU0FBWSxNQUVsQ3RoQixFQUFFa3JELFFBQVE1akUsR0FBR3JDLEdBQUd3N0IsV0FBVyxZQUkvQnpnQixFQUFFd3RELGVBSU4vRixFQUFNcGhFLFVBQVVtdEUsZ0JBQWtCLFdBRTlCLElBQUl4ekQsRUFBSWpkLE1BRWlCLElBQXJCaWQsRUFBRTlYLFFBQVFtc0QsUUFBbUJyMEMsRUFBRWdyRCxXQUFhaHJELEVBQUU5WCxRQUFRdWhFLGVBQ3REenBELEVBQUUrcUQsV0FDRXAvQyxJQUFJLGVBQ0pMLEdBQUcsY0FBZSxDQUNkNUgsUUFBUyxZQUNYMUQsRUFBRWd0RCxhQUNSaHRELEVBQUU4cUQsV0FDRW4vQyxJQUFJLGVBQ0pMLEdBQUcsY0FBZSxDQUNkNUgsUUFBUyxRQUNYMUQsRUFBRWd0RCxjQUV3QixJQUE1Qmh0RCxFQUFFOVgsUUFBUTAvRCxnQkFDVjVuRCxFQUFFK3FELFdBQVd6L0MsR0FBRyxnQkFBaUJ0TCxFQUFFcXRELFlBQ25DcnRELEVBQUU4cUQsV0FBV3gvQyxHQUFHLGdCQUFpQnRMLEVBQUVxdEQsZUFNL0M1RixFQUFNcGhFLFVBQVVvdEUsY0FBZ0IsV0FFNUIsSUFBSXp6RCxFQUFJamQsTUFFZSxJQUFuQmlkLEVBQUU5WCxRQUFRdWdFLE1BQWlCem9ELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxlQUNwRGw2QixFQUFFLEtBQU12dkIsRUFBRTBxRCxPQUFPcC9DLEdBQUcsY0FBZSxDQUMvQjVILFFBQVMsU0FDVjFELEVBQUVndEQsY0FFMkIsSUFBNUJodEQsRUFBRTlYLFFBQVEwL0QsZUFDVjVuRCxFQUFFMHFELE1BQU1wL0MsR0FBRyxnQkFBaUJ0TCxFQUFFcXRELGNBSWYsSUFBbkJydEQsRUFBRTlYLFFBQVF1Z0UsT0FBZ0QsSUFBL0J6b0QsRUFBRTlYLFFBQVFraEUsa0JBQTZCcHBELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxjQUUzRmw2QixFQUFFLEtBQU12dkIsRUFBRTBxRCxPQUNMcC9DLEdBQUcsbUJBQW9CaWtCLEVBQUVYLE1BQU01dUIsRUFBRXl3RCxVQUFXendELEdBQUcsSUFDL0NzTCxHQUFHLG1CQUFvQmlrQixFQUFFWCxNQUFNNXVCLEVBQUV5d0QsVUFBV3p3RCxHQUFHLEtBTTVEeW5ELEVBQU1waEUsVUFBVXF0RSxnQkFBa0IsV0FFdEIzd0UsS0FFRG1GLFFBQVFnaEUsZUFGUG5tRSxLQUlGaWhFLE1BQU0xNEMsR0FBRyxtQkFBb0Jpa0IsRUFBRVgsTUFKN0I3ckMsS0FJcUMwdEUsVUFKckMxdEUsTUFJbUQsSUFKbkRBLEtBS0ZpaEUsTUFBTTE0QyxHQUFHLG1CQUFvQmlrQixFQUFFWCxNQUw3QjdyQyxLQUtxQzB0RSxVQUxyQzF0RSxNQUttRCxNQU0vRDBrRSxFQUFNcGhFLFVBQVVzc0UsaUJBQW1CLFdBRS9CLElBQUkzeUQsRUFBSWpkLEtBRVJpZCxFQUFFd3pELGtCQUVGeHpELEVBQUV5ekQsZ0JBQ0Z6ekQsRUFBRTB6RCxrQkFFRjF6RCxFQUFFZ2tELE1BQU0xNEMsR0FBRyxtQ0FBb0MsQ0FDM0Nxb0QsT0FBUSxTQUNUM3pELEVBQUVxL0IsY0FDTHIvQixFQUFFZ2tELE1BQU0xNEMsR0FBRyxrQ0FBbUMsQ0FDMUNxb0QsT0FBUSxRQUNUM3pELEVBQUVxL0IsY0FDTHIvQixFQUFFZ2tELE1BQU0xNEMsR0FBRywrQkFBZ0MsQ0FDdkNxb0QsT0FBUSxPQUNUM3pELEVBQUVxL0IsY0FDTHIvQixFQUFFZ2tELE1BQU0xNEMsR0FBRyxxQ0FBc0MsQ0FDN0Nxb0QsT0FBUSxPQUNUM3pELEVBQUVxL0IsY0FFTHIvQixFQUFFZ2tELE1BQU0xNEMsR0FBRyxjQUFldEwsRUFBRWl0RCxjQUU1QjE5QixFQUFFNXNDLFVBQVUyb0IsR0FBR3RMLEVBQUV3c0QsaUJBQWtCajlCLEVBQUVYLE1BQU01dUIsRUFBRXlYLFdBQVl6WCxLQUV6QixJQUE1QkEsRUFBRTlYLFFBQVEwL0QsZUFDVjVuRCxFQUFFZ2tELE1BQU0xNEMsR0FBRyxnQkFBaUJ0TCxFQUFFcXRELGFBR0YsSUFBNUJydEQsRUFBRTlYLFFBQVEyZ0UsZUFDVnQ1QixFQUFFdnZCLEVBQUVpckQsYUFBYW50RCxXQUFXd04sR0FBRyxjQUFldEwsRUFBRWt0RCxlQUdwRDM5QixFQUFFenNDLFFBQVF3b0IsR0FBRyxpQ0FBbUN0TCxFQUFFd25ELFlBQWFqNEIsRUFBRVgsTUFBTTV1QixFQUFFMndELGtCQUFtQjN3RCxJQUU1RnV2QixFQUFFenNDLFFBQVF3b0IsR0FBRyxzQkFBd0J0TCxFQUFFd25ELFlBQWFqNEIsRUFBRVgsTUFBTTV1QixFQUFFd2xDLE9BQVF4bEMsSUFFdEV1dkIsRUFBRSxvQkFBcUJ2dkIsRUFBRWlyRCxhQUFhMy9DLEdBQUcsWUFBYXRMLEVBQUVtTSxnQkFFeERvakIsRUFBRXpzQyxRQUFRd29CLEdBQUcsb0JBQXNCdEwsRUFBRXduRCxZQUFheG5ELEVBQUVtdEQsYUFDcEQ1OUIsRUFBRXZ2QixFQUFFbXRELGNBSVIxRixFQUFNcGhFLFVBQVV1dEUsT0FBUyxZQUlJLElBRmpCN3dFLEtBRUZtRixRQUFRbXNELFFBRk50eEQsS0FFMkJpb0UsV0FGM0Jqb0UsS0FFMENtRixRQUFRdWhFLGVBRmxEMW1FLEtBSUZnb0UsV0FBV3hpRCxPQUpUeGxCLEtBS0YrbkUsV0FBV3ZpRCxTQUlNLElBVGZ4bEIsS0FTRm1GLFFBQVF1Z0UsTUFUTjFsRSxLQVN5QmlvRSxXQVR6QmpvRSxLQVN3Q21GLFFBQVF1aEUsY0FUaEQxbUUsS0FXRjJuRSxNQUFNbmlELFFBTWhCay9DLEVBQU1waEUsVUFBVWduRSxXQUFhLFNBQVMzaEQsR0FJOUJBLEVBQU1uakIsT0FBT3NyRSxRQUFRamtFLE1BQU0sMkJBQ0wsS0FBbEI4YixFQUFNMEUsVUFBOEMsSUFIcERydEIsS0FHMEJtRixRQUFRMC9ELGNBSGxDN2tFLEtBSUVpcUUsWUFBWSxDQUNWdm5ELEtBQU0sQ0FDRi9CLFNBQTJCLElBTm5DM2dCLEtBTW1CbUYsUUFBUWk4QyxJQUFlLE9BQVUsY0FHM0IsS0FBbEJ6NEIsRUFBTTBFLFVBQThDLElBVDNEcnRCLEtBU2lDbUYsUUFBUTAvRCxlQVR6QzdrRSxLQVVFaXFFLFlBQVksQ0FDVnZuRCxLQUFNLENBQ0YvQixTQUEyQixJQVpuQzNnQixLQVltQm1GLFFBQVFpOEMsSUFBZSxXQUFhLFlBUW5Fc2pCLEVBQU1waEUsVUFBVTJpRSxTQUFXLFdBRXZCLElBQ0k4SyxFQUF1QkMsRUFBWUMsRUFEbkNoMEQsRUFBSWpkLEtBR1IsU0FBU2t4RSxFQUFXQyxHQUVoQjNrQyxFQUFFLGlCQUFrQjJrQyxHQUFhbHRFLEtBQUssV0FFbEMsSUFBSXNTLEVBQVFpMkIsRUFBRXhzQyxNQUNWb3hFLEVBQWM1a0MsRUFBRXhzQyxNQUFNOFIsS0FBSyxhQUMzQnUvRCxFQUFjN2tDLEVBQUV4c0MsTUFBTThSLEtBQUssZUFDM0J3L0QsRUFBYzlrQyxFQUFFeHNDLE1BQU04UixLQUFLLGVBQWlCbUwsRUFBRW9zRCxRQUFRdjNELEtBQUssY0FDM0R5L0QsRUFBYzN4RSxTQUFTeUMsY0FBYyxPQUV6Q2t2RSxFQUFZanBDLE9BQVMsV0FFakIveEIsRUFDSzRsQixRQUFRLENBQUVsRyxRQUFTLEdBQUssSUFBSyxXQUV0Qm83QyxJQUNBOTZELEVBQ0t6RSxLQUFLLFNBQVV1L0QsR0FFaEJDLEdBQ0EvNkQsRUFDS3pFLEtBQUssUUFBU3cvRCxJQUkzQi82RCxFQUNLekUsS0FBSyxNQUFPcy9ELEdBQ1pqMUMsUUFBUSxDQUFFbEcsUUFBUyxHQUFLLElBQUssV0FDMUIxZixFQUNLbW5CLFdBQVcsb0NBQ1hxQixZQUFZLG1CQUV6QjloQixFQUFFb3NELFFBQVFoZ0QsUUFBUSxhQUFjLENBQUNwTSxFQUFHMUcsRUFBTzY2RCxPQUt2REcsRUFBWWhwQyxRQUFVLFdBRWxCaHlCLEVBQ0ttbkIsV0FBWSxhQUNacUIsWUFBYSxpQkFDYkwsU0FBVSx3QkFFZnpoQixFQUFFb3NELFFBQVFoZ0QsUUFBUSxnQkFBaUIsQ0FBRXBNLEVBQUcxRyxFQUFPNjZELEtBSW5ERyxFQUFZNXZFLElBQU15dkUsSUF5QjFCLElBbkI2QixJQUF6Qm4wRCxFQUFFOVgsUUFBUWtnRSxXQUdONEwsR0FGdUIsSUFBdkJoMEQsRUFBRTlYLFFBQVE2Z0UsVUFDVmdMLEVBQWEvekQsRUFBRXlxRCxjQUFnQnpxRCxFQUFFOVgsUUFBUXVoRSxhQUFlLEVBQUksSUFDcEN6cEQsRUFBRTlYLFFBQVF1aEUsYUFBZSxHQUVqRHNLLEVBQWFqckUsS0FBS2l2QixJQUFJLEVBQUcvWCxFQUFFeXFELGNBQWdCenFELEVBQUU5WCxRQUFRdWhFLGFBQWUsRUFBSSxJQUN4RHpwRCxFQUFFOVgsUUFBUXVoRSxhQUFlLEVBQUksRUFBbEMsRUFBdUN6cEQsRUFBRXlxRCxlQUd4RHNKLEVBQWEvekQsRUFBRTlYLFFBQVE2Z0UsU0FBVy9vRCxFQUFFOVgsUUFBUXVoRSxhQUFlenBELEVBQUV5cUQsYUFBZXpxRCxFQUFFeXFELGFBQzlFdUosRUFBV2xyRSxLQUFLMHZCLEtBQUt1N0MsRUFBYS96RCxFQUFFOVgsUUFBUXVoRSxlQUNyQixJQUFuQnpwRCxFQUFFOVgsUUFBUTBnRSxPQUNPLEVBQWJtTCxHQUFnQkEsSUFDaEJDLEdBQVloMEQsRUFBRWdyRCxZQUFZZ0osTUFJdENGLEVBQVk5ekQsRUFBRW9zRCxRQUFROTRELEtBQUssZ0JBQWdCL1AsTUFBTXd3RSxFQUFZQyxHQUVsQyxnQkFBdkJoMEQsRUFBRTlYLFFBQVE4Z0UsU0FLVixJQUpBLElBQUl1TCxFQUFZUixFQUFhLEVBQ3pCUyxFQUFZUixFQUNaOUksRUFBVWxyRCxFQUFFb3NELFFBQVE5NEQsS0FBSyxnQkFFcEJyTyxFQUFJLEVBQUdBLEVBQUkrYSxFQUFFOVgsUUFBUXdoRSxlQUFnQnprRSxJQUN0Q3N2RSxFQUFZLElBQUdBLEVBQVl2MEQsRUFBRWdyRCxXQUFhLEdBRTlDOEksR0FEQUEsRUFBWUEsRUFBVXYxRCxJQUFJMnNELEVBQVE1akUsR0FBR2l0RSxLQUNmaDJELElBQUkyc0QsRUFBUTVqRSxHQUFHa3RFLElBQ3JDRCxJQUNBQyxJQUlSUCxFQUFXSCxHQUVQOXpELEVBQUVnckQsWUFBY2hyRCxFQUFFOVgsUUFBUXVoRSxhQUUxQndLLEVBRGFqMEQsRUFBRW9zRCxRQUFROTRELEtBQUssaUJBRzVCME0sRUFBRXlxRCxjQUFnQnpxRCxFQUFFZ3JELFdBQWFockQsRUFBRTlYLFFBQVF1aEUsYUFFM0N3SyxFQURhajBELEVBQUVvc0QsUUFBUTk0RCxLQUFLLGlCQUFpQi9QLE1BQU0sRUFBR3ljLEVBQUU5WCxRQUFRdWhFLGVBRXRDLElBQW5CenBELEVBQUV5cUQsY0FFVHdKLEVBRGFqMEQsRUFBRW9zRCxRQUFROTRELEtBQUssaUJBQWlCL1AsT0FBZ0MsRUFBMUJ5YyxFQUFFOVgsUUFBUXVoRSxnQkFNckVoQyxFQUFNcGhFLFVBQVVxc0UsV0FBYSxXQUVqQjN2RSxLQUVOb3FFLGNBRk1wcUUsS0FJTmtvRSxZQUFZeGpELElBQUksQ0FDZHVSLFFBQVMsSUFMTGoyQixLQVFOcXBFLFFBQVF0cUMsWUFBWSxpQkFSZC8rQixLQVVONndFLFNBRXlCLGdCQVpuQjd3RSxLQVlGbUYsUUFBUThnRSxVQVpOam1FLEtBYUYweEUsdUJBS1ZoTixFQUFNcGhFLFVBQVVnSixLQUFPbzRELEVBQU1waEUsVUFBVXF1RSxVQUFZLFdBRXZDM3hFLEtBRU5pcUUsWUFBWSxDQUNWdm5ELEtBQU0sQ0FDRi9CLFFBQVMsV0FNckIrakQsRUFBTXBoRSxVQUFVc3FFLGtCQUFvQixXQUV4QjV0RSxLQUVOMHNFLGtCQUZNMXNFLEtBR05vcUUsZUFJTjFGLEVBQU1waEUsVUFBVStxRCxNQUFRcVcsRUFBTXBoRSxVQUFVc3VFLFdBQWEsV0FFekM1eEUsS0FFTitwRSxnQkFGTS9wRSxLQUdOc3VELFFBQVMsR0FJZm9XLEVBQU1waEUsVUFBVXV1RSxLQUFPbk4sRUFBTXBoRSxVQUFVd3VFLFVBQVksV0FFdkM5eEUsS0FFTjhwRSxXQUZNOXBFLEtBR05tRixRQUFRaWdELFVBQVcsRUFIYnBsRCxLQUlOc3VELFFBQVMsRUFKSHR1RCxLQUtOZ3BFLFVBQVcsRUFMTGhwRSxLQU1OaXBFLGFBQWMsR0FJcEJ2RSxFQUFNcGhFLFVBQVV5dUUsVUFBWSxTQUFTejJELEdBRWpDLElBQUkyQixFQUFJamQsS0FFSGlkLEVBQUV5ckQsWUFFSHpyRCxFQUFFb3NELFFBQVFoZ0QsUUFBUSxjQUFlLENBQUNwTSxFQUFHM0IsSUFFckMyQixFQUFFazdCLFdBQVksRUFFVmw3QixFQUFFZ3JELFdBQWFockQsRUFBRTlYLFFBQVF1aEUsY0FDekJ6cEQsRUFBRW10RCxjQUdObnRELEVBQUVxckQsVUFBWSxLQUVUcnJELEVBQUU5WCxRQUFRaWdELFVBQ1hub0MsRUFBRTZzRCxZQUcwQixJQUE1QjdzRCxFQUFFOVgsUUFBUTAvRCxnQkFDVjVuRCxFQUFFNnlELFVBRUU3eUQsRUFBRTlYLFFBQVE0Z0UsZUFDVXY1QixFQUFFdnZCLEVBQUVrckQsUUFBUXprRSxJQUFJdVosRUFBRXlxRCxlQUN4QjUxRCxLQUFLLFdBQVksR0FBR3NELFdBUWxEc3ZELEVBQU1waEUsVUFBVTJYLEtBQU95cEQsRUFBTXBoRSxVQUFVMHVFLFVBQVksV0FFdkNoeUUsS0FFTmlxRSxZQUFZLENBQ1Z2bkQsS0FBTSxDQUNGL0IsUUFBUyxlQU1yQitqRCxFQUFNcGhFLFVBQVU4bEIsZUFBaUIsU0FBU1QsR0FFdENBLEVBQU1TLGtCQUlWczdDLEVBQU1waEUsVUFBVW91RSxvQkFBc0IsU0FBVU8sR0FFNUNBLEVBQVdBLEdBQVksRUFFdkIsSUFFSTE3RCxFQUNBNjZELEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBTkF0MEQsRUFBSWpkLEtBQ0preUUsRUFBYzFsQyxFQUFHLGlCQUFrQnZ2QixFQUFFb3NELFNBT3BDNkksRUFBWTd1RSxRQUVia1QsRUFBUTI3RCxFQUFZNXRFLFFBQ3BCOHNFLEVBQWM3NkQsRUFBTXpFLEtBQUssYUFDekJ1L0QsRUFBYzk2RCxFQUFNekUsS0FBSyxlQUN6QncvRCxFQUFjLzZELEVBQU16RSxLQUFLLGVBQWlCbUwsRUFBRW9zRCxRQUFRdjNELEtBQUssZUFDekR5L0QsRUFBYzN4RSxTQUFTeUMsY0FBYyxRQUV6QmltQyxPQUFTLFdBRWIrb0MsSUFDQTk2RCxFQUNLekUsS0FBSyxTQUFVdS9ELEdBRWhCQyxHQUNBLzZELEVBQ0t6RSxLQUFLLFFBQVN3L0QsSUFJM0IvNkQsRUFDS3pFLEtBQU0sTUFBT3MvRCxHQUNiMXpDLFdBQVcsb0NBQ1hxQixZQUFZLGtCQUVpQixJQUE3QjloQixFQUFFOVgsUUFBUTIvRCxnQkFDWDduRCxFQUFFbXRELGNBR05udEQsRUFBRW9zRCxRQUFRaGdELFFBQVEsYUFBYyxDQUFFcE0sRUFBRzFHLEVBQU82NkQsSUFDNUNuMEQsRUFBRXkwRCx1QkFJTkgsRUFBWWhwQyxRQUFVLFdBRWIwcEMsRUFBVyxFQU9abnlELFdBQVksV0FDUjdDLEVBQUV5MEQsb0JBQXFCTyxFQUFXLElBQ25DLE1BSUgxN0QsRUFDS21uQixXQUFZLGFBQ1pxQixZQUFhLGlCQUNiTCxTQUFVLHdCQUVmemhCLEVBQUVvc0QsUUFBUWhnRCxRQUFRLGdCQUFpQixDQUFFcE0sRUFBRzFHLEVBQU82NkQsSUFFL0NuMEQsRUFBRXkwRCx3QkFNVkgsRUFBWTV2RSxJQUFNeXZFLEdBSWxCbjBELEVBQUVvc0QsUUFBUWhnRCxRQUFRLGtCQUFtQixDQUFFcE0sS0FNL0N5bkQsRUFBTXBoRSxVQUFVNHBFLFFBQVUsU0FBVWlGLEdBRWhDLElBQWN6SyxFQUFjMEssRUFBeEJuMUQsRUFBSWpkLEtBRVJveUUsRUFBbUJuMUQsRUFBRWdyRCxXQUFhaHJELEVBQUU5WCxRQUFRdWhFLGNBSXZDenBELEVBQUU5WCxRQUFRNmdFLFVBQWMvb0QsRUFBRXlxRCxhQUFlMEssSUFDMUNuMUQsRUFBRXlxRCxhQUFlMEssR0FJaEJuMUQsRUFBRWdyRCxZQUFjaHJELEVBQUU5WCxRQUFRdWhFLGVBQzNCenBELEVBQUV5cUQsYUFBZSxHQUlyQkEsRUFBZXpxRCxFQUFFeXFELGFBRWpCenFELEVBQUVtbEMsU0FBUSxHQUVWNVYsRUFBRXRuQyxPQUFPK1gsRUFBR0EsRUFBRW9xRCxTQUFVLENBQUVLLGFBQWNBLElBRXhDenFELEVBQUU5WixPQUVHZ3ZFLEdBRURsMUQsRUFBRWd0RCxZQUFZLENBQ1Z2bkQsS0FBTSxDQUNGL0IsUUFBUyxRQUNUckYsTUFBT29zRCxLQUVaLElBTVhoRCxFQUFNcGhFLFVBQVVrbkUsb0JBQXNCLFdBRWxDLElBQWNvQyxFQUFZenNCLEVBQW1CL2tDLEVBQXpDNkIsRUFBSWpkLEtBQ0pxeUUsRUFBcUJwMUQsRUFBRTlYLFFBQVFvaEUsWUFBYyxLQUVqRCxHQUFvQyxVQUEvQi81QixFQUFFOXFDLEtBQUsyd0UsSUFBbUNBLEVBQW1CaHZFLE9BQVMsQ0FJdkUsSUFBTXVwRSxLQUZOM3ZELEVBQUVxcEQsVUFBWXJwRCxFQUFFOVgsUUFBUW1oRSxXQUFhLFNBRWpCK0wsRUFJaEIsR0FGQWozRCxFQUFJNkIsRUFBRXErQixZQUFZajRDLE9BQU8sRUFFckJndkUsRUFBbUJseEUsZUFBZXlyRSxHQUFhLENBSy9DLElBSkF6c0IsRUFBb0JreUIsRUFBbUJ6RixHQUFZQSxXQUl2QyxHQUFMeHhELEdBQ0M2QixFQUFFcStCLFlBQVlsZ0MsSUFBTTZCLEVBQUVxK0IsWUFBWWxnQyxLQUFPK2tDLEdBQ3pDbGpDLEVBQUVxK0IsWUFBWXIyQyxPQUFPbVcsRUFBRSxHQUUzQkEsSUFHSjZCLEVBQUVxK0IsWUFBWXg2QyxLQUFLcS9DLEdBQ25CbGpDLEVBQUU2ckQsbUJBQW1CM29CLEdBQXFCa3lCLEVBQW1CekYsR0FBWTlvQyxTQU1qRjdtQixFQUFFcStCLFlBQVl0MkMsS0FBSyxTQUFTMEUsRUFBR0MsR0FDM0IsT0FBU3NULEVBQUU5WCxRQUFRK2dFLFlBQWdCeDhELEVBQUVDLEVBQUlBLEVBQUVELE1BT3ZEZzdELEVBQU1waEUsVUFBVXluRSxPQUFTLFdBRXJCLElBQUk5dEQsRUFBSWpkLEtBRVJpZCxFQUFFa3JELFFBQ0VsckQsRUFBRWlyRCxZQUNHbnRELFNBQVNrQyxFQUFFOVgsUUFBUTY3QyxPQUNuQnRpQixTQUFTLGVBRWxCemhCLEVBQUVnckQsV0FBYWhyRCxFQUFFa3JELFFBQVE5a0UsT0FFckI0WixFQUFFeXFELGNBQWdCenFELEVBQUVnckQsWUFBaUMsSUFBbkJockQsRUFBRXlxRCxlQUNwQ3pxRCxFQUFFeXFELGFBQWV6cUQsRUFBRXlxRCxhQUFlenFELEVBQUU5WCxRQUFRd2hFLGdCQUc1QzFwRCxFQUFFZ3JELFlBQWNockQsRUFBRTlYLFFBQVF1aEUsZUFDMUJ6cEQsRUFBRXlxRCxhQUFlLEdBR3JCenFELEVBQUV1dEQsc0JBRUZ2dEQsRUFBRXd5RCxXQUNGeHlELEVBQUVndkQsZ0JBQ0ZodkQsRUFBRTB1RCxjQUNGMXVELEVBQUU0eUQsZUFDRjV5RCxFQUFFd3pELGtCQUNGeHpELEVBQUU0dUQsWUFDRjV1RCxFQUFFaXZELGFBQ0ZqdkQsRUFBRXl6RCxnQkFDRnp6RCxFQUFFMHdELHFCQUNGMXdELEVBQUUwekQsa0JBRUYxekQsRUFBRXl2RCxpQkFBZ0IsR0FBTyxJQUVPLElBQTVCenZELEVBQUU5WCxRQUFRMmdFLGVBQ1Z0NUIsRUFBRXZ2QixFQUFFaXJELGFBQWFudEQsV0FBV3dOLEdBQUcsY0FBZXRMLEVBQUVrdEQsZUFHcERsdEQsRUFBRWt2RCxnQkFBMEMsaUJBQW5CbHZELEVBQUV5cUQsYUFBNEJ6cUQsRUFBRXlxRCxhQUFlLEdBRXhFenFELEVBQUVtdEQsY0FDRm50RCxFQUFFa3hELGVBRUZseEQsRUFBRXF4QyxRQUFVcnhDLEVBQUU5WCxRQUFRaWdELFNBQ3RCbm9DLEVBQUU2c0QsV0FFRjdzRCxFQUFFb3NELFFBQVFoZ0QsUUFBUSxTQUFVLENBQUNwTSxLQUlqQ3luRCxFQUFNcGhFLFVBQVVtL0MsT0FBUyxXQUVyQixJQUFJeGxDLEVBQUlqZCxLQUVKd3NDLEVBQUV6c0MsUUFBUXF5QixVQUFZblYsRUFBRXlzRCxjQUN4QnJzQyxhQUFhcGdCLEVBQUVxMUQsYUFDZnIxRCxFQUFFcTFELFlBQWN2eUUsT0FBTytmLFdBQVcsV0FDOUI3QyxFQUFFeXNELFlBQWNsOUIsRUFBRXpzQyxRQUFRcXlCLFFBQzFCblYsRUFBRXl2RCxrQkFDR3p2RCxFQUFFeXJELFdBQWN6ckQsRUFBRW10RCxlQUN4QixNQUlYMUYsRUFBTXBoRSxVQUFVODJDLFlBQWNzcUIsRUFBTXBoRSxVQUFVaXZFLFlBQWMsU0FBU2ozRCxFQUFPazNELEVBQWNDLEdBRXRGLElBQUl4MUQsRUFBSWpkLEtBU1IsR0FMSXNiLEVBRmtCLGtCQUFYQSxHQUVrQixLQUR6QmszRCxFQUFlbDNELEdBQ2lCLEVBQUkyQixFQUFFZ3JELFdBQWEsR0FFMUIsSUFBakJ1SyxJQUEwQmwzRCxFQUFRQSxFQUcxQzJCLEVBQUVnckQsV0FBYSxHQUFLM3NELEVBQVEsR0FBS0EsRUFBUTJCLEVBQUVnckQsV0FBYSxFQUN4RCxPQUFPLEVBR1hockQsRUFBRTZ0RCxVQUVnQixJQUFkMkgsRUFDQXgxRCxFQUFFaXJELFlBQVludEQsV0FBVzZDLFNBRXpCWCxFQUFFaXJELFlBQVludEQsU0FBUy9hLEtBQUttRixRQUFRNjdDLE9BQU96OEMsR0FBRytXLEdBQU9zQyxTQUd6RFgsRUFBRWtyRCxRQUFVbHJELEVBQUVpckQsWUFBWW50RCxTQUFTL2EsS0FBS21GLFFBQVE2N0MsT0FFaEQvakMsRUFBRWlyRCxZQUFZbnRELFNBQVMvYSxLQUFLbUYsUUFBUTY3QyxPQUFPOXdCLFNBRTNDalQsRUFBRWlyRCxZQUFZLzNDLE9BQU9sVCxFQUFFa3JELFNBRXZCbHJELEVBQUVxc0QsYUFBZXJzRCxFQUFFa3JELFFBRW5CbHJELEVBQUU4dEQsVUFJTnJHLEVBQU1waEUsVUFBVW92RSxPQUFTLFNBQVNyZ0QsR0FFOUIsSUFFSWdoQixFQUFHRCxFQUZIbjJCLEVBQUlqZCxLQUNKMnlFLEVBQWdCLElBR0UsSUFBbEIxMUQsRUFBRTlYLFFBQVFpOEMsTUFDVi91QixHQUFZQSxHQUVoQmdoQixFQUFzQixRQUFsQnAyQixFQUFFaXNELGFBQXlCbmpFLEtBQUswdkIsS0FBS3BELEdBQVksS0FBTyxNQUM1RCtnQixFQUFzQixPQUFsQm4yQixFQUFFaXNELGFBQXdCbmpFLEtBQUswdkIsS0FBS3BELEdBQVksS0FBTyxNQUUzRHNnRCxFQUFjMTFELEVBQUVpc0QsY0FBZ0I3MkMsR0FFSixJQUF4QnBWLEVBQUV3ckQsc0JBR0ZrSyxFQUFnQixNQUNaMTFELEVBQUU4ckQsZUFDRjRKLEVBQWMxMUQsRUFBRTJyRCxVQUFZLGFBQWV2MUIsRUFBSSxLQUFPRCxFQUFJLElBRzFEdS9CLEVBQWMxMUQsRUFBRTJyRCxVQUFZLGVBQWlCdjFCLEVBQUksS0FBT0QsRUFBSSxVQVBoRW4yQixFQUFFaXJELFlBQVl4akQsSUFBSWl1RCxJQWMxQmpPLEVBQU1waEUsVUFBVXN2RSxjQUFnQixXQUU1QixJQUFJMzFELEVBQUlqZCxNQUVtQixJQUF2QmlkLEVBQUU5WCxRQUFRZ3VELFVBQ21CLElBQXpCbDJDLEVBQUU5WCxRQUFRa2dFLFlBQ1Zwb0QsRUFBRWdrRCxNQUFNdjhDLElBQUksQ0FDUmtULFFBQVUsT0FBUzNhLEVBQUU5WCxRQUFRbWdFLGlCQUlyQ3JvRCxFQUFFZ2tELE1BQU1wdEMsT0FBTzVXLEVBQUVrckQsUUFBUTdqRSxRQUFReXFDLGFBQVksR0FBUTl4QixFQUFFOVgsUUFBUXVoRSxlQUNsQyxJQUF6QnpwRCxFQUFFOVgsUUFBUWtnRSxZQUNWcG9ELEVBQUVna0QsTUFBTXY4QyxJQUFJLENBQ1JrVCxRQUFVM2EsRUFBRTlYLFFBQVFtZ0UsY0FBZ0IsVUFLaERyb0QsRUFBRTJxRCxVQUFZM3FELEVBQUVna0QsTUFBTTd1QyxRQUN0Qm5WLEVBQUU0cUQsV0FBYTVxRCxFQUFFZ2tELE1BQU1wdEMsVUFHSSxJQUF2QjVXLEVBQUU5WCxRQUFRZ3VELFdBQWtELElBQTVCbDJDLEVBQUU5WCxRQUFRK2hFLGVBQzFDanFELEVBQUVpdEMsV0FBYW5rRCxLQUFLMHZCLEtBQUt4WSxFQUFFMnFELFVBQVkzcUQsRUFBRTlYLFFBQVF1aEUsY0FDakR6cEQsRUFBRWlyRCxZQUFZOTFDLE1BQU1yc0IsS0FBSzB2QixLQUFNeFksRUFBRWl0QyxXQUFhanRDLEVBQUVpckQsWUFBWW50RCxTQUFTLGdCQUFnQjFYLFdBRWxELElBQTVCNFosRUFBRTlYLFFBQVEraEUsY0FDakJqcUQsRUFBRWlyRCxZQUFZOTFDLE1BQU0sSUFBT25WLEVBQUVnckQsYUFFN0JockQsRUFBRWl0QyxXQUFhbmtELEtBQUswdkIsS0FBS3hZLEVBQUUycUQsV0FDM0IzcUQsRUFBRWlyRCxZQUFZcjBDLE9BQU85dEIsS0FBSzB2QixLQUFNeFksRUFBRWtyRCxRQUFRN2pFLFFBQVF5cUMsYUFBWSxHQUFROXhCLEVBQUVpckQsWUFBWW50RCxTQUFTLGdCQUFnQjFYLFVBR2pILElBQUk0bUMsRUFBU2h0QixFQUFFa3JELFFBQVE3akUsUUFBUXdxQyxZQUFXLEdBQVE3eEIsRUFBRWtyRCxRQUFRN2pFLFFBQVE4dEIsU0FDcEMsSUFBNUJuVixFQUFFOVgsUUFBUStoRSxlQUF5QmpxRCxFQUFFaXJELFlBQVludEQsU0FBUyxnQkFBZ0JxWCxNQUFNblYsRUFBRWl0QyxXQUFhamdCLElBSXZHeTZCLEVBQU1waEUsVUFBVXV2RSxRQUFVLFdBRXRCLElBQ0kxSCxFQURBbHVELEVBQUlqZCxLQUdSaWQsRUFBRWtyRCxRQUFRbGtFLEtBQUssU0FBU3FYLEVBQU9xcEQsR0FDM0J3RyxFQUFjbHVELEVBQUVpdEMsV0FBYTV1QyxHQUFVLEdBQ2pCLElBQWxCMkIsRUFBRTlYLFFBQVFpOEMsSUFDVjVVLEVBQUVtNEIsR0FBU2pnRCxJQUFJLENBQ1gyTixTQUFVLFdBQ1ZGLE1BQU9nNUMsRUFDUHI3RCxJQUFLLEVBQ0xvbkIsT0FBUWphLEVBQUU5WCxRQUFRK3hCLE9BQVMsRUFDM0JqQixRQUFTLElBR2J1VyxFQUFFbTRCLEdBQVNqZ0QsSUFBSSxDQUNYMk4sU0FBVSxXQUNWcUYsS0FBTXl6QyxFQUNOcjdELElBQUssRUFDTG9uQixPQUFRamEsRUFBRTlYLFFBQVEreEIsT0FBUyxFQUMzQmpCLFFBQVMsTUFLckJoWixFQUFFa3JELFFBQVE1akUsR0FBRzBZLEVBQUV5cUQsY0FBY2hqRCxJQUFJLENBQzdCd1MsT0FBUWphLEVBQUU5WCxRQUFRK3hCLE9BQVMsRUFDM0JqQixRQUFTLEtBS2pCeXVDLEVBQU1waEUsVUFBVXd2RSxVQUFZLFdBSXhCLEdBQStCLElBRnZCOXlFLEtBRUZtRixRQUFRdWhFLGVBQW1ELElBRnpEMW1FLEtBRThCbUYsUUFBUTIvRCxpQkFBa0QsSUFGeEY5a0UsS0FFbUVtRixRQUFRZ3VELFNBQW9CLENBQ25HLElBQUk4WCxFQUhBanJFLEtBR2lCbW9FLFFBQVE1akUsR0FIekJ2RSxLQUc4QjBuRSxjQUFjMzRCLGFBQVksR0FIeEQvdUMsS0FJRmloRSxNQUFNdjhDLElBQUksU0FBVXVtRCxLQUs5QnZHLEVBQU1waEUsVUFBVXl2RSxVQUNoQnJPLEVBQU1waEUsVUFBVTB2RSxlQUFpQixXQWU3QixJQUFjNTNELEVBQUc2M0QsRUFBTTVzRCxFQUFRbmYsRUFBd0J4RixFQUFuRHViLEVBQUlqZCxLQUE4Qmt0RSxHQUFVLEVBMEJoRCxHQXhCK0IsV0FBM0IxZ0MsRUFBRTlxQyxLQUFNMkMsVUFBVSxLQUVsQmdpQixFQUFVaGlCLFVBQVUsR0FDcEI2b0UsRUFBVTdvRSxVQUFVLEdBQ3BCM0MsRUFBTyxZQUU0QixXQUEzQjhxQyxFQUFFOXFDLEtBQU0yQyxVQUFVLE1BRzFCNkMsRUFBUTdDLFVBQVUsR0FDbEI2b0UsRUFBVTdvRSxVQUFVLEdBRUUsZ0JBSnRCZ2lCLEVBQVVoaUIsVUFBVSxLQUk2QyxVQUEzQm1vQyxFQUFFOXFDLEtBQU0yQyxVQUFVLElBRXBEM0MsRUFBTyxrQkFFeUIsSUFBakIyQyxVQUFVLEtBRXpCM0MsRUFBTyxXQU1ELFdBQVRBLEVBRUR1YixFQUFFOVgsUUFBUWtoQixHQUFVbmYsT0FHakIsR0FBYyxhQUFUeEYsRUFFUjhxQyxFQUFFdm9DLEtBQU1vaUIsRUFBUyxTQUFVK1MsRUFBS2ozQixHQUU1QjhhLEVBQUU5WCxRQUFRaTBCLEdBQU9qM0IsU0FLbEIsR0FBYyxlQUFUVCxFQUVSLElBQU11eEUsS0FBUS9yRSxFQUVWLEdBQXVDLFVBQW5Dc2xDLEVBQUU5cUMsS0FBTXViLEVBQUU5WCxRQUFRb2hFLFlBRWxCdHBELEVBQUU5WCxRQUFRb2hFLFdBQWEsQ0FBRXIvRCxFQUFNK3JFLFFBRTVCLENBS0gsSUFIQTczRCxFQUFJNkIsRUFBRTlYLFFBQVFvaEUsV0FBV2xqRSxPQUFPLEVBR3BCLEdBQUwrWCxHQUVDNkIsRUFBRTlYLFFBQVFvaEUsV0FBV25yRCxHQUFHd3hELGFBQWUxbEUsRUFBTStyRSxHQUFNckcsWUFFbkQzdkQsRUFBRTlYLFFBQVFvaEUsV0FBV3RoRSxPQUFPbVcsRUFBRSxHQUlsQ0EsSUFJSjZCLEVBQUU5WCxRQUFRb2hFLFdBQVd6bEUsS0FBTW9HLEVBQU0rckUsSUFReEMvRixJQUVEandELEVBQUU2dEQsU0FDRjd0RCxFQUFFOHRELFdBTVZyRyxFQUFNcGhFLFVBQVU4bUUsWUFBYyxXQUVsQnBxRSxLQUVONHlFLGdCQUZNNXlFLEtBSU44eUUsYUFFcUIsSUFOZjl5RSxLQU1GbUYsUUFBUTBnRSxLQU5ON2xFLEtBT0YweUUsT0FQRTF5RSxLQU9PMHVFLFFBUFAxdUUsS0FPaUIwbkUsZUFQakIxbkUsS0FTRjZ5RSxVQVRFN3lFLEtBWU5xcEUsUUFBUWhnRCxRQUFRLGNBQWUsQ0FaekJycEIsUUFnQlowa0UsRUFBTXBoRSxVQUFVbXNFLFNBQVcsV0FFdkIsSUFBSXh5RCxFQUFJamQsS0FDSmt6RSxFQUFZdHpFLFNBQVM4bEIsS0FBS2xCLE1BRTlCdkgsRUFBRWlzRCxjQUFzQyxJQUF2QmpzRCxFQUFFOVgsUUFBUWd1RCxTQUFvQixNQUFRLE9BRWhDLFFBQW5CbDJDLEVBQUVpc0QsYUFDRmpzRCxFQUFFb3NELFFBQVEzcUMsU0FBUyxrQkFFbkJ6aEIsRUFBRW9zRCxRQUFRdHFDLFlBQVksdUJBR1NsNUIsSUFBL0JxdEUsRUFBVTNkLHVCQUNrQjF2RCxJQUE1QnF0RSxFQUFVNWQsb0JBQ2lCenZELElBQTNCcXRFLEVBQVVDLGVBQ2UsSUFBckJsMkQsRUFBRTlYLFFBQVE2aEUsU0FDVi9wRCxFQUFFOHJELGdCQUFpQixHQUl0QjlyRCxFQUFFOVgsUUFBUTBnRSxPQUNzQixpQkFBckI1b0QsRUFBRTlYLFFBQVEreEIsT0FDZGphLEVBQUU5WCxRQUFRK3hCLE9BQVMsSUFDbkJqYSxFQUFFOVgsUUFBUSt4QixPQUFTLEdBR3ZCamEsRUFBRTlYLFFBQVEreEIsT0FBU2phLEVBQUVrbEMsU0FBU2pyQixhQUlUcnhCLElBQXpCcXRFLEVBQVVuakMsYUFDVjl5QixFQUFFMnJELFNBQVcsYUFDYjNyRCxFQUFFc3NELGNBQWdCLGVBQ2xCdHNELEVBQUV1c0QsZUFBaUIsbUJBQ21CM2pFLElBQWxDcXRFLEVBQVVFLDBCQUFxRXZ0RSxJQUFoQ3F0RSxFQUFVRyxvQkFBaUNwMkQsRUFBRTJyRCxVQUFXLFNBRWhGL2lFLElBQTNCcXRFLEVBQVVwakMsZUFDVjd5QixFQUFFMnJELFNBQVcsZUFDYjNyRCxFQUFFc3NELGNBQWdCLGlCQUNsQnRzRCxFQUFFdXNELGVBQWlCLHFCQUNtQjNqRSxJQUFsQ3F0RSxFQUFVRSwwQkFBa0V2dEUsSUFBN0JxdEUsRUFBVUksaUJBQThCcjJELEVBQUUyckQsVUFBVyxTQUUxRS9pRSxJQUE5QnF0RSxFQUFVbmxDLGtCQUNWOXdCLEVBQUUyckQsU0FBVyxrQkFDYjNyRCxFQUFFc3NELGNBQWdCLG9CQUNsQnRzRCxFQUFFdXNELGVBQWlCLHdCQUNtQjNqRSxJQUFsQ3F0RSxFQUFVRSwwQkFBcUV2dEUsSUFBaENxdEUsRUFBVUcsb0JBQWlDcDJELEVBQUUyckQsVUFBVyxTQUVqRi9pRSxJQUExQnF0RSxFQUFVampDLGNBQ1ZoekIsRUFBRTJyRCxTQUFXLGNBQ2IzckQsRUFBRXNzRCxjQUFnQixnQkFDbEJ0c0QsRUFBRXVzRCxlQUFpQixvQkFDVzNqRSxJQUExQnF0RSxFQUFVampDLGNBQTJCaHpCLEVBQUUyckQsVUFBVyxTQUU5Qi9pRSxJQUF4QnF0RSxFQUFVcGxDLFlBQTBDLElBQWY3d0IsRUFBRTJyRCxXQUN2QzNyRCxFQUFFMnJELFNBQVcsWUFDYjNyRCxFQUFFc3NELGNBQWdCLFlBQ2xCdHNELEVBQUV1c0QsZUFBaUIsY0FFdkJ2c0QsRUFBRXdyRCxrQkFBb0J4ckQsRUFBRTlYLFFBQVE4aEUsY0FBZ0MsT0FBZmhxRCxFQUFFMnJELFdBQW9DLElBQWYzckQsRUFBRTJyRCxVQUk5RWxFLEVBQU1waEUsVUFBVTZvRSxnQkFBa0IsU0FBUzd3RCxHQUV2QyxJQUNJK3pELEVBQWNrRSxFQUFXbkcsRUFBYW9HLEVBRHRDdjJELEVBQUlqZCxLQVlSLEdBVEF1ekUsRUFBWXQyRCxFQUFFb3NELFFBQ1Q5NEQsS0FBSyxnQkFDTHd1QixZQUFZLDJDQUNaanRCLEtBQUssY0FBZSxRQUV6Qm1MLEVBQUVrckQsUUFDRzVqRSxHQUFHK1csR0FDSG9qQixTQUFTLGtCQUVlLElBQXpCemhCLEVBQUU5WCxRQUFRa2dFLFdBQXFCLENBRS9CLElBQUlvTyxFQUFXeDJELEVBQUU5WCxRQUFRdWhFLGFBQWUsR0FBTSxFQUFJLEVBQUksRUFFdEQySSxFQUFldHBFLEtBQUs2dEMsTUFBTTMyQixFQUFFOVgsUUFBUXVoRSxhQUFlLElBRXhCLElBQXZCenBELEVBQUU5WCxRQUFRNmdFLFdBRUdxSixHQUFUL3pELEdBQXlCQSxHQUFVMkIsRUFBRWdyRCxXQUFhLEVBQUtvSCxFQUN2RHB5RCxFQUFFa3JELFFBQ0czbkUsTUFBTThhLEVBQVErekQsRUFBZW9FLEVBQVVuNEQsRUFBUSt6RCxFQUFlLEdBQzlEM3dDLFNBQVMsZ0JBQ1Q1c0IsS0FBSyxjQUFlLFVBSXpCczdELEVBQWNud0QsRUFBRTlYLFFBQVF1aEUsYUFBZXByRCxFQUN2Q2k0RCxFQUNLL3lFLE1BQU00c0UsRUFBY2lDLEVBQWUsRUFBSW9FLEVBQVVyRyxFQUFjaUMsRUFBZSxHQUM5RTN3QyxTQUFTLGdCQUNUNXNCLEtBQUssY0FBZSxVQUlmLElBQVZ3SixFQUVBaTRELEVBQ0todkUsR0FBR2d2RSxFQUFVbHdFLE9BQVMsRUFBSTRaLEVBQUU5WCxRQUFRdWhFLGNBQ3BDaG9DLFNBQVMsZ0JBRVBwakIsSUFBVTJCLEVBQUVnckQsV0FBYSxHQUVoQ3NMLEVBQ0todkUsR0FBRzBZLEVBQUU5WCxRQUFRdWhFLGNBQ2Job0MsU0FBUyxpQkFNdEJ6aEIsRUFBRWtyRCxRQUNHNWpFLEdBQUcrVyxHQUNIb2pCLFNBQVMscUJBSUQsR0FBVHBqQixHQUFjQSxHQUFVMkIsRUFBRWdyRCxXQUFhaHJELEVBQUU5WCxRQUFRdWhFLGFBRWpEenBELEVBQUVrckQsUUFDRzNuRSxNQUFNOGEsRUFBT0EsRUFBUTJCLEVBQUU5WCxRQUFRdWhFLGNBQy9CaG9DLFNBQVMsZ0JBQ1Q1c0IsS0FBSyxjQUFlLFNBRWxCeWhFLEVBQVVsd0UsUUFBVTRaLEVBQUU5WCxRQUFRdWhFLGFBRXJDNk0sRUFDSzcwQyxTQUFTLGdCQUNUNXNCLEtBQUssY0FBZSxVQUl6QjBoRSxFQUFZdjJELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxhQUNyQzBHLEdBQXFDLElBQXZCbndELEVBQUU5WCxRQUFRNmdFLFNBQW9CL29ELEVBQUU5WCxRQUFRdWhFLGFBQWVwckQsRUFBUUEsRUFFekUyQixFQUFFOVgsUUFBUXVoRSxjQUFnQnpwRCxFQUFFOVgsUUFBUXdoRSxnQkFBbUIxcEQsRUFBRWdyRCxXQUFhM3NELEVBQVMyQixFQUFFOVgsUUFBUXVoRSxhQUV6RjZNLEVBQ0sveUUsTUFBTTRzRSxHQUFlbndELEVBQUU5WCxRQUFRdWhFLGFBQWU4TSxHQUFZcEcsRUFBY29HLEdBQ3hFOTBDLFNBQVMsZ0JBQ1Q1c0IsS0FBSyxjQUFlLFNBSXpCeWhFLEVBQ0sveUUsTUFBTTRzRSxFQUFhQSxFQUFjbndELEVBQUU5WCxRQUFRdWhFLGNBQzNDaG9DLFNBQVMsZ0JBQ1Q1c0IsS0FBSyxjQUFlLFVBUVYsYUFBdkJtTCxFQUFFOVgsUUFBUThnRSxVQUFrRCxnQkFBdkJocEQsRUFBRTlYLFFBQVE4Z0UsVUFDL0NocEQsRUFBRWdwRCxZQUlWdkIsRUFBTXBoRSxVQUFVMm9FLGNBQWdCLFdBRTVCLElBQ0kvcEUsRUFBRzZyRSxFQUFZMkYsRUFEZnoyRCxFQUFJamQsS0FPUixJQUp1QixJQUFuQmlkLEVBQUU5WCxRQUFRMGdFLE9BQ1Y1b0QsRUFBRTlYLFFBQVFrZ0UsWUFBYSxJQUdBLElBQXZCcG9ELEVBQUU5WCxRQUFRNmdFLFdBQXdDLElBQW5CL29ELEVBQUU5WCxRQUFRMGdFLE9BRXpDa0ksRUFBYSxLQUVUOXdELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxjQUFjLENBUXZDLElBTElnTixHQUR5QixJQUF6QnoyRCxFQUFFOVgsUUFBUWtnRSxXQUNNcG9ELEVBQUU5WCxRQUFRdWhFLGFBQWUsRUFFekJ6cEQsRUFBRTlYLFFBQVF1aEUsYUFHekJ4a0UsRUFBSSthLEVBQUVnckQsV0FBWS9sRSxFQUFLK2EsRUFBRWdyRCxXQUN0QnlMLElBQWdCeHhFLEVBQ3BCNnJFLEVBQWE3ckUsRUFBSSxFQUNqQnNxQyxFQUFFdnZCLEVBQUVrckQsUUFBUTRGLElBQWF4b0UsT0FBTSxHQUFNdU0sS0FBSyxLQUFNLElBQzNDQSxLQUFLLG1CQUFvQmk4RCxFQUFhOXdELEVBQUVnckQsWUFDeEN0M0MsVUFBVTFULEVBQUVpckQsYUFBYXhwQyxTQUFTLGdCQUUzQyxJQUFLeDhCLEVBQUksRUFBR0EsRUFBSXd4RSxFQUFpQnoyRCxFQUFFZ3JELFdBQVkvbEUsR0FBSyxFQUNoRDZyRSxFQUFhN3JFLEVBQ2JzcUMsRUFBRXZ2QixFQUFFa3JELFFBQVE0RixJQUFheG9FLE9BQU0sR0FBTXVNLEtBQUssS0FBTSxJQUMzQ0EsS0FBSyxtQkFBb0JpOEQsRUFBYTl3RCxFQUFFZ3JELFlBQ3hDdjNDLFNBQVN6VCxFQUFFaXJELGFBQWF4cEMsU0FBUyxnQkFFMUN6aEIsRUFBRWlyRCxZQUFZMzNELEtBQUssaUJBQWlCQSxLQUFLLFFBQVF0TSxLQUFLLFdBQ2xEdW9DLEVBQUV4c0MsTUFBTThSLEtBQUssS0FBTSxRQVNuQzR5RCxFQUFNcGhFLFVBQVVvcUUsVUFBWSxTQUFVOW5ELEdBSTdCQSxHQUZHNWxCLEtBR0Y4cEUsV0FIRTlwRSxLQUtOaXBFLFlBQWNyakQsR0FJcEI4K0MsRUFBTXBoRSxVQUFVNm1FLGNBQWdCLFNBQVN4aEQsR0FFckMsSUFFSWdyRCxFQUNBbm5DLEVBQUU3akIsRUFBTW5qQixRQUFRMFUsR0FBRyxnQkFDZnN5QixFQUFFN2pCLEVBQU1uakIsUUFDUmduQyxFQUFFN2pCLEVBQU1uakIsUUFBUWtXLFFBQVEsZ0JBRTVCSixFQUFRd1ksU0FBUzYvQyxFQUFjN2hFLEtBQUsscUJBRTVCd0osRUFBUEEsR0FBZSxFQVRadGIsS0FXRmlvRSxZQVhFam9FLEtBV2NtRixRQUFRdWhFLGFBWHRCMW1FLEtBYUYwckUsYUFBYXB3RCxHQUFPLEdBQU8sR0FiekJ0YixLQWtCTjByRSxhQUFhcHdELElBSW5Cb3BELEVBQU1waEUsVUFBVW9vRSxhQUFlLFNBQVNwd0QsRUFBT3M0RCxFQUFNekcsR0FFakQsSUFBSXlCLEVBQWFpRixFQUFXQyxFQUFVQyxFQUFXNUksRUFDbkM2SSxFQUFWLzJELEVBQUlqZCxLQUlSLEdBRkE0ekUsRUFBT0EsSUFBUSxLQUVLLElBQWhCMzJELEVBQUVrN0IsWUFBbUQsSUFBN0JsN0IsRUFBRTlYLFFBQVFpaUUsaUJBSWYsSUFBbkJucUQsRUFBRTlYLFFBQVEwZ0UsTUFBaUI1b0QsRUFBRXlxRCxlQUFpQnBzRCxHQWNsRCxJQVZhLElBQVRzNEQsR0FDQTMyRCxFQUFFZ29ELFNBQVMzcEQsR0FHZnN6RCxFQUFjdHpELEVBQ2Q2dkQsRUFBYWx1RCxFQUFFeXhELFFBQVFFLEdBQ3ZCbUYsRUFBWTkyRCxFQUFFeXhELFFBQVF6eEQsRUFBRXlxRCxjQUV4QnpxRCxFQUFFd3FELFlBQThCLE9BQWhCeHFELEVBQUVxckQsVUFBcUJ5TCxFQUFZOTJELEVBQUVxckQsV0FFMUIsSUFBdkJyckQsRUFBRTlYLFFBQVE2Z0UsV0FBK0MsSUFBekIvb0QsRUFBRTlYLFFBQVFrZ0UsYUFBeUIvcEQsRUFBUSxHQUFLQSxFQUFRMkIsRUFBRTh1RCxjQUFnQjl1RCxFQUFFOVgsUUFBUXdoRSxpQkFDN0YsSUFBbkIxcEQsRUFBRTlYLFFBQVEwZ0UsT0FDVitJLEVBQWMzeEQsRUFBRXlxRCxjQUNJLElBQWhCeUYsR0FBd0Jsd0QsRUFBRWdyRCxXQUFhaHJELEVBQUU5WCxRQUFRdWhFLGFBQ2pEenBELEVBQUVpdUQsYUFBYTZJLEVBQVcsV0FDdEI5MkQsRUFBRTgwRCxVQUFVbkQsS0FHaEIzeEQsRUFBRTgwRCxVQUFVbkQsU0FJakIsSUFBMkIsSUFBdkIzeEQsRUFBRTlYLFFBQVE2Z0UsV0FBK0MsSUFBekIvb0QsRUFBRTlYLFFBQVFrZ0UsYUFBd0IvcEQsRUFBUSxHQUFLQSxFQUFTMkIsRUFBRWdyRCxXQUFhaHJELEVBQUU5WCxRQUFRd2hFLGlCQUNqRyxJQUFuQjFwRCxFQUFFOVgsUUFBUTBnRSxPQUNWK0ksRUFBYzN4RCxFQUFFeXFELGNBQ0ksSUFBaEJ5RixHQUF3Qmx3RCxFQUFFZ3JELFdBQWFockQsRUFBRTlYLFFBQVF1aEUsYUFDakR6cEQsRUFBRWl1RCxhQUFhNkksRUFBVyxXQUN0QjkyRCxFQUFFODBELFVBQVVuRCxLQUdoQjN4RCxFQUFFODBELFVBQVVuRCxRQVJqQixDQXlEUCxHQTNDSzN4RCxFQUFFOVgsUUFBUWlnRCxVQUNYK1IsY0FBY2w2QyxFQUFFc3FELGVBS1pzTSxFQUZKakYsRUFBYyxFQUNWM3hELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXdoRSxnQkFBbUIsRUFDaEMxcEQsRUFBRWdyRCxXQUFjaHJELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXdoRSxlQUV6QzFwRCxFQUFFZ3JELFdBQWEyRyxFQUV4QkEsR0FBZTN4RCxFQUFFZ3JELFdBQ3BCaHJELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXdoRSxnQkFBbUIsRUFDaEMsRUFFQWlJLEVBQWMzeEQsRUFBRWdyRCxXQUdwQjJHLEVBR2hCM3hELEVBQUVrN0IsV0FBWSxFQUVkbDdCLEVBQUVvc0QsUUFBUWhnRCxRQUFRLGVBQWdCLENBQUNwTSxFQUFHQSxFQUFFeXFELGFBQWNtTSxJQUV0REMsRUFBVzcyRCxFQUFFeXFELGFBQ2J6cUQsRUFBRXlxRCxhQUFlbU0sRUFFakI1MkQsRUFBRWt2RCxnQkFBZ0JsdkQsRUFBRXlxRCxjQUVmenFELEVBQUU5WCxRQUFROC9ELFdBR1grTyxHQURBQSxFQUFZLzJELEVBQUV1dUQsZ0JBQ1FDLE1BQU0sYUFFYnhELFlBQWMrTCxFQUFVN3VFLFFBQVF1aEUsY0FDM0NzTixFQUFVN0gsZ0JBQWdCbHZELEVBQUV5cUQsY0FLcEN6cUQsRUFBRWl2RCxhQUNGanZELEVBQUU0eUQsZ0JBRXFCLElBQW5CNXlELEVBQUU5WCxRQUFRMGdFLEtBYVYsT0Fab0IsSUFBaEJzSCxHQUVBbHdELEVBQUUrd0QsYUFBYThGLEdBRWY3MkQsRUFBRTZ3RCxVQUFVK0YsRUFBVyxXQUNuQjUyRCxFQUFFODBELFVBQVU4QixNQUloQjUyRCxFQUFFODBELFVBQVU4QixRQUVoQjUyRCxFQUFFK3RELGlCQUljLElBQWhCbUMsR0FBd0Jsd0QsRUFBRWdyRCxXQUFhaHJELEVBQUU5WCxRQUFRdWhFLGFBQ2pEenBELEVBQUVpdUQsYUFBYUMsRUFBWSxXQUN2Qmx1RCxFQUFFODBELFVBQVU4QixLQUdoQjUyRCxFQUFFODBELFVBQVU4QixLQUtwQm5QLEVBQU1waEUsVUFBVW9zRSxVQUFZLFdBRXhCLElBQUl6eUQsRUFBSWpkLE1BRWlCLElBQXJCaWQsRUFBRTlYLFFBQVFtc0QsUUFBbUJyMEMsRUFBRWdyRCxXQUFhaHJELEVBQUU5WCxRQUFRdWhFLGVBRXREenBELEVBQUUrcUQsV0FBV3JpRCxPQUNiMUksRUFBRThxRCxXQUFXcGlELFNBSU0sSUFBbkIxSSxFQUFFOVgsUUFBUXVnRSxNQUFpQnpvRCxFQUFFZ3JELFdBQWFockQsRUFBRTlYLFFBQVF1aEUsY0FFcER6cEQsRUFBRTBxRCxNQUFNaGlELE9BSVoxSSxFQUFFb3NELFFBQVEzcUMsU0FBUyxrQkFJdkJnbUMsRUFBTXBoRSxVQUFVNjVDLGVBQWlCLFdBRTdCLElBQUk4MkIsRUFBT0MsRUFBTzFtQyxFQUFHMm1DLEVBV3JCLE9BVEFGLEVBRnFDajBFLEtBRTNCd29FLFlBQVl4ckIsT0FGZWg5QyxLQUVKd29FLFlBQVk0TCxLQUM3Q0YsRUFIcUNsMEUsS0FHM0J3b0UsWUFBWXZyQixPQUhlajlDLEtBR0p3b0UsWUFBWTZMLEtBQzdDN21DLEVBQUl6bkMsS0FBSzgzQyxNQUFNcTJCLEVBQU9ELElBRXRCRSxFQUFhcHVFLEtBQUt5c0IsTUFBVSxJQUFKZ2IsRUFBVXpuQyxLQUFLa3pCLEtBQ3RCLElBQ2JrN0MsRUFBYSxJQUFNcHVFLEtBQUtpdkMsSUFBSW0vQixJQUczQkEsR0FBYyxJQUFzQixHQUFkQSxHQUd0QkEsR0FBYyxLQUF1QixLQUFkQSxHQUZFLElBWk9uMEUsS0FZdkJtRixRQUFRaThDLElBQWdCLE9BQVMsUUFLNUIsS0FBZCt5QixHQUF1QkEsR0FBYyxLQUNaLElBbEJPbjBFLEtBa0J2Qm1GLFFBQVFpOEMsSUFBZ0IsUUFBVSxRQUVkLElBcEJHcGhELEtBb0IvQm1GLFFBQVFnaUUsZ0JBQ1MsSUFBZGdOLEdBQXNCQSxHQUFjLElBQzlCLE9BRUEsS0FJUixZQUlYelAsRUFBTXBoRSxVQUFVZ3hFLFNBQVcsU0FBUzNyRCxHQUVoQyxJQUNJcy9DLEVBQ0F4bkIsRUFGQXhqQyxFQUFJamQsS0FPUixHQUhBaWQsRUFBRXFxRCxVQUFXLEVBQ2JycUQsRUFBRXNyRCxTQUFVLEVBRVJ0ckQsRUFBRSswQyxVQUVGLE9BREEvMEMsRUFBRSswQyxXQUFZLEVBT2xCLEdBSEEvMEMsRUFBRWdzRCxhQUFjLEVBQ2hCaHNELEVBQUVtc0QsY0FBNEMsR0FBNUJuc0QsRUFBRXVyRCxZQUFZK0wsa0JBRUoxdUUsSUFBdkJvWCxFQUFFdXJELFlBQVk0TCxLQUNmLE9BQU8sRUFPWCxJQUorQixJQUExQm4zRCxFQUFFdXJELFlBQVlnTSxTQUNmdjNELEVBQUVvc0QsUUFBUWhnRCxRQUFRLE9BQVEsQ0FBQ3BNLEVBQUdBLEVBQUVrZ0MsbUJBRy9CbGdDLEVBQUV1ckQsWUFBWStMLGFBQWV0M0QsRUFBRXVyRCxZQUFZaU0sU0FBVyxDQUl2RCxPQUZBaDBCLEVBQVl4akMsRUFBRWtnQyxrQkFJVixJQUFLLE9BQ0wsSUFBSyxPQUVEOHFCLEVBQ0lockQsRUFBRTlYLFFBQVEwaEUsYUFDTjVwRCxFQUFFb3dELGVBQWdCcHdELEVBQUV5cUQsYUFBZXpxRCxFQUFFa3lELGlCQUNyQ2x5RCxFQUFFeXFELGFBQWV6cUQsRUFBRWt5RCxnQkFFM0JseUQsRUFBRXVxRCxpQkFBbUIsRUFFckIsTUFFSixJQUFLLFFBQ0wsSUFBSyxLQUVEUyxFQUNJaHJELEVBQUU5WCxRQUFRMGhFLGFBQ041cEQsRUFBRW93RCxlQUFnQnB3RCxFQUFFeXFELGFBQWV6cUQsRUFBRWt5RCxpQkFDckNseUQsRUFBRXlxRCxhQUFlenFELEVBQUVreUQsZ0JBRTNCbHlELEVBQUV1cUQsaUJBQW1CLEVBU1osWUFBYi9tQixJQUVBeGpDLEVBQUV5dUQsYUFBY3pELEdBQ2hCaHJELEVBQUV1ckQsWUFBYyxHQUNoQnZyRCxFQUFFb3NELFFBQVFoZ0QsUUFBUSxRQUFTLENBQUNwTSxFQUFHd2pDLFVBTTlCeGpDLEVBQUV1ckQsWUFBWXhyQixTQUFXLy9CLEVBQUV1ckQsWUFBWTRMLE9BRXhDbjNELEVBQUV5dUQsYUFBY3p1RCxFQUFFeXFELGNBQ2xCenFELEVBQUV1ckQsWUFBYyxLQVE1QjlELEVBQU1waEUsVUFBVWc1QyxhQUFlLFNBQVMzekIsR0FFcEMsSUFBSTFMLEVBQUlqZCxLQUVSLE1BQXlCLElBQXBCaWQsRUFBRTlYLFFBQVF5aEUsT0FBcUIsZUFBZ0JobkUsV0FBZ0MsSUFBcEJxZCxFQUFFOVgsUUFBUXloRSxRQUV2QyxJQUF4QjNwRCxFQUFFOVgsUUFBUXdqRCxZQUF3RCxJQUFqQ2hnQyxFQUFNam5CLEtBQUtYLFFBQVEsVUFlL0QsT0FYQWtjLEVBQUV1ckQsWUFBWWtNLFlBQWMvckQsRUFBTThDLG9CQUFpRDVsQixJQUFoQzhpQixFQUFNOEMsY0FBY3dDLFFBQ25FdEYsRUFBTThDLGNBQWN3QyxRQUFRNXFCLE9BQVMsRUFFekM0WixFQUFFdXJELFlBQVlpTSxTQUFXeDNELEVBQUUycUQsVUFBWTNxRCxFQUFFOVgsUUFDcEM0aEUsZ0JBRTZCLElBQTlCOXBELEVBQUU5WCxRQUFRZ2lFLGtCQUNWbHFELEVBQUV1ckQsWUFBWWlNLFNBQVd4M0QsRUFBRTRxRCxXQUFhNXFELEVBQUU5WCxRQUNyQzRoRSxnQkFHRHArQyxFQUFNakcsS0FBS2t1RCxRQUVmLElBQUssUUFDRDN6RCxFQUFFMDNELFdBQVdoc0QsR0FDYixNQUVKLElBQUssT0FDRDFMLEVBQUUyM0QsVUFBVWpzRCxHQUNaLE1BRUosSUFBSyxNQUNEMUwsRUFBRXEzRCxTQUFTM3JELEtBT3ZCKzdDLEVBQU1waEUsVUFBVXN4RSxVQUFZLFNBQVNqc0QsR0FFakMsSUFFSXloQixFQUFTK1MsRUFBZ0JvM0IsRUFBYU0sRUFBZ0I1bUQsRUFBUzZtRCxFQUYvRDczRCxFQUFJamQsS0FNUixPQUZBaXVCLE9BQWtDcG9CLElBQXhCOGlCLEVBQU04QyxjQUE4QjlDLEVBQU04QyxjQUFjd0MsUUFBVSxRQUV2RWhSLEVBQUVxcUQsVUFBWXJxRCxFQUFFKzBDLFdBQWEvakMsR0FBOEIsSUFBbkJBLEVBQVE1cUIsVUFJckQrbUMsRUFBVW50QixFQUFFeXhELFFBQVF6eEQsRUFBRXlxRCxjQUV0QnpxRCxFQUFFdXJELFlBQVk0TCxVQUFtQnZ1RSxJQUFab29CLEVBQXdCQSxFQUFRLEdBQUdsQixNQUFRcEUsRUFBTTRFLFFBQ3RFdFEsRUFBRXVyRCxZQUFZNkwsVUFBbUJ4dUUsSUFBWm9vQixFQUF3QkEsRUFBUSxHQUFHakIsTUFBUXJFLEVBQU02RSxRQUV0RXZRLEVBQUV1ckQsWUFBWStMLFlBQWN4dUUsS0FBS3lzQixNQUFNenNCLEtBQUs0M0MsS0FDeEM1M0MsS0FBSzYzQyxJQUFJM2dDLEVBQUV1ckQsWUFBWTRMLEtBQU9uM0QsRUFBRXVyRCxZQUFZeHJCLE9BQVEsS0FFeEQ4M0IsRUFBc0IvdUUsS0FBS3lzQixNQUFNenNCLEtBQUs0M0MsS0FDbEM1M0MsS0FBSzYzQyxJQUFJM2dDLEVBQUV1ckQsWUFBWTZMLEtBQU9wM0QsRUFBRXVyRCxZQUFZdnJCLE9BQVEsTUFFbkRoZ0MsRUFBRTlYLFFBQVFnaUUsa0JBQW9CbHFELEVBQUVzckQsU0FBaUMsRUFBdEJ1TSxJQUM1QzczRCxFQUFFKzBDLFdBQVksS0FJZ0IsSUFBOUIvMEMsRUFBRTlYLFFBQVFnaUUsa0JBQ1ZscUQsRUFBRXVyRCxZQUFZK0wsWUFBY08sR0FHaEMzM0IsRUFBaUJsZ0MsRUFBRWtnQyxzQkFFU3QzQyxJQUF4QjhpQixFQUFNOEMsZUFBMkQsRUFBNUJ4TyxFQUFFdXJELFlBQVkrTCxjQUNuRHQzRCxFQUFFc3JELFNBQVUsRUFDWjUvQyxFQUFNUyxrQkFHVnlyRCxJQUFvQyxJQUFsQjUzRCxFQUFFOVgsUUFBUWk4QyxJQUFnQixHQUFLLElBQU1ua0MsRUFBRXVyRCxZQUFZNEwsS0FBT24zRCxFQUFFdXJELFlBQVl4ckIsT0FBUyxHQUFLLElBQ3RFLElBQTlCLy9CLEVBQUU5WCxRQUFRZ2lFLGtCQUNWME4sRUFBaUI1M0QsRUFBRXVyRCxZQUFZNkwsS0FBT3AzRCxFQUFFdXJELFlBQVl2ckIsT0FBUyxHQUFLLEdBSXRFczNCLEVBQWN0M0QsRUFBRXVyRCxZQUFZK0wsYUFFNUJ0M0QsRUFBRXVyRCxZQUFZZ00sU0FBVSxLQUVwQnYzRCxFQUFFOVgsUUFBUTZnRSxXQUNjLElBQW5CL29ELEVBQUV5cUQsY0FBeUMsVUFBbkJ2cUIsR0FBZ0NsZ0MsRUFBRXlxRCxjQUFnQnpxRCxFQUFFOHVELGVBQW9DLFNBQW5CNXVCLEtBQzlGbzNCLEVBQWN0M0QsRUFBRXVyRCxZQUFZK0wsWUFBY3QzRCxFQUFFOVgsUUFBUXlnRSxhQUNwRDNvRCxFQUFFdXJELFlBQVlnTSxTQUFVLElBSUwsSUFBdkJ2M0QsRUFBRTlYLFFBQVFndUQsU0FDVmwyQyxFQUFFcXJELFVBQVlsK0IsRUFBVW1xQyxFQUFjTSxFQUV0QzUzRCxFQUFFcXJELFVBQVlsK0IsRUFBV21xQyxHQUFldDNELEVBQUVna0QsTUFBTXB0QyxTQUFXNVcsRUFBRTJxRCxXQUFjaU4sR0FFN0MsSUFBOUI1M0QsRUFBRTlYLFFBQVFnaUUsa0JBQ1ZscUQsRUFBRXFyRCxVQUFZbCtCLEVBQVVtcUMsRUFBY00sSUFHbkIsSUFBbkI1M0QsRUFBRTlYLFFBQVEwZ0UsT0FBeUMsSUFBeEI1b0QsRUFBRTlYLFFBQVEyaEUsYUFJckIsSUFBaEI3cEQsRUFBRWs3QixXQUNGbDdCLEVBQUVxckQsVUFBWSxNQUNQLFFBR1hyckQsRUFBRXkxRCxPQUFPejFELEVBQUVxckQsZUFJZjVELEVBQU1waEUsVUFBVXF4RSxXQUFhLFNBQVNoc0QsR0FFbEMsSUFDSXNGLEVBREFoUixFQUFJamQsS0FLUixHQUZBaWQsRUFBRWdzRCxhQUFjLEVBRWtCLElBQTlCaHNELEVBQUV1ckQsWUFBWWtNLGFBQXFCejNELEVBQUVnckQsWUFBY2hyRCxFQUFFOVgsUUFBUXVoRSxhQUU3RCxRQURBenBELEVBQUV1ckQsWUFBYyxTQUlRM2lFLElBQXhCOGlCLEVBQU04QyxvQkFBK0Q1bEIsSUFBaEM4aUIsRUFBTThDLGNBQWN3QyxVQUN6REEsRUFBVXRGLEVBQU04QyxjQUFjd0MsUUFBUSxJQUcxQ2hSLEVBQUV1ckQsWUFBWXhyQixPQUFTLy9CLEVBQUV1ckQsWUFBWTRMLFVBQW1CdnVFLElBQVpvb0IsRUFBd0JBLEVBQVFsQixNQUFRcEUsRUFBTTRFLFFBQzFGdFEsRUFBRXVyRCxZQUFZdnJCLE9BQVNoZ0MsRUFBRXVyRCxZQUFZNkwsVUFBbUJ4dUUsSUFBWm9vQixFQUF3QkEsRUFBUWpCLE1BQVFyRSxFQUFNNkUsUUFFMUZ2USxFQUFFcXFELFVBQVcsR0FJakI1QyxFQUFNcGhFLFVBQVV5eEUsZUFBaUJyUSxFQUFNcGhFLFVBQVUweEUsY0FBZ0IsV0FJdEMsT0FGZmgxRSxLQUVGc3BFLGVBRkV0cEUsS0FJRjhxRSxTQUpFOXFFLEtBTUZrb0UsWUFBWW50RCxTQUFTL2EsS0FBS21GLFFBQVE2N0MsT0FBTzl3QixTQU52Q2x3QixLQVFGc3BFLGFBQWE1NEMsU0FSWDF3QixLQVFzQmtvRSxhQVJ0QmxvRSxLQVVGK3FFLFdBTVZyRyxFQUFNcGhFLFVBQVV3bkUsT0FBUyxXQUVyQixJQUFJN3RELEVBQUlqZCxLQUVSd3NDLEVBQUUsZ0JBQWlCdnZCLEVBQUVvc0QsU0FBU3pyRCxTQUUxQlgsRUFBRTBxRCxPQUNGMXFELEVBQUUwcUQsTUFBTS9wRCxTQUdSWCxFQUFFK3FELFlBQWMvcUQsRUFBRXN0RCxTQUFTLzhELEtBQUt5UCxFQUFFOVgsUUFBUSsvRCxZQUMxQ2pvRCxFQUFFK3FELFdBQVdwcUQsU0FHYlgsRUFBRThxRCxZQUFjOXFELEVBQUVzdEQsU0FBUy84RCxLQUFLeVAsRUFBRTlYLFFBQVFnZ0UsWUFDMUNsb0QsRUFBRThxRCxXQUFXbnFELFNBR2pCWCxFQUFFa3JELFFBQ0dwcEMsWUFBWSx3REFDWmp0QixLQUFLLGNBQWUsUUFDcEI0UyxJQUFJLFFBQVMsS0FJdEJnZ0QsRUFBTXBoRSxVQUFVMnBFLFFBQVUsU0FBU2dJLEdBRXZCajFFLEtBQ05xcEUsUUFBUWhnRCxRQUFRLFVBQVcsQ0FEckJycEIsS0FDeUJpMUUsSUFEekJqMUUsS0FFTm9pRCxXQUlOc2lCLEVBQU1waEUsVUFBVXVzRSxhQUFlLFdBRTNCLElBQUk1eUQsRUFBSWpkLEtBR08rRixLQUFLNnRDLE1BQU0zMkIsRUFBRTlYLFFBQVF1aEUsYUFBZSxJQUV6QixJQUFyQnpwRCxFQUFFOVgsUUFBUW1zRCxRQUNYcjBDLEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxlQUN4QnpwRCxFQUFFOVgsUUFBUTZnRSxXQUVYL29ELEVBQUUrcUQsV0FBV2pwQyxZQUFZLGtCQUFrQmp0QixLQUFLLGdCQUFpQixTQUNqRW1MLEVBQUU4cUQsV0FBV2hwQyxZQUFZLGtCQUFrQmp0QixLQUFLLGdCQUFpQixTQUUxQyxJQUFuQm1MLEVBQUV5cUQsY0FFRnpxRCxFQUFFK3FELFdBQVd0cEMsU0FBUyxrQkFBa0I1c0IsS0FBSyxnQkFBaUIsUUFDOURtTCxFQUFFOHFELFdBQVdocEMsWUFBWSxrQkFBa0JqdEIsS0FBSyxnQkFBaUIsV0FFMURtTCxFQUFFeXFELGNBQWdCenFELEVBQUVnckQsV0FBYWhyRCxFQUFFOVgsUUFBUXVoRSxlQUF5QyxJQUF6QnpwRCxFQUFFOVgsUUFBUWtnRSxZQUtyRXBvRCxFQUFFeXFELGNBQWdCenFELEVBQUVnckQsV0FBYSxJQUE4QixJQUF6QmhyRCxFQUFFOVgsUUFBUWtnRSxjQUh2RHBvRCxFQUFFOHFELFdBQVdycEMsU0FBUyxrQkFBa0I1c0IsS0FBSyxnQkFBaUIsUUFDOURtTCxFQUFFK3FELFdBQVdqcEMsWUFBWSxrQkFBa0JqdEIsS0FBSyxnQkFBaUIsWUFhN0U0eUQsRUFBTXBoRSxVQUFVNG9FLFdBQWEsV0FJVCxPQUZSbHNFLEtBRUYybkUsUUFGRTNuRSxLQUlGMm5FLE1BQ0dwM0QsS0FBSyxNQUNEd3VCLFlBQVksZ0JBQ1poNkIsTUFQTC9FLEtBU0YybkUsTUFDR3AzRCxLQUFLLE1BQ0xoTSxHQUFHd0IsS0FBSzZ0QyxNQVhUNXpDLEtBV2lCMG5FLGFBWGpCMW5FLEtBV2tDbUYsUUFBUXdoRSxpQkFDekNqb0MsU0FBUyxrQkFNdEJnbUMsRUFBTXBoRSxVQUFVb3hCLFdBQWEsV0FFakIxMEIsS0FFRG1GLFFBQVFpZ0QsV0FFTnhsRCxTQUpESSxLQUlZdzVCLFFBSlp4NUIsS0FNRWlwRSxhQUFjLEVBTmhCanBFLEtBVUVpcEUsYUFBYyxJQVE1Qno4QixFQUFFdHBDLEdBQUd1b0UsTUFBUSxXQUNULElBSUl2cEUsRUFDQTRCLEVBSkFzMUIsRUFBTS8wQixVQUFVLEdBQ2hCa1EsRUFBTzVPLE1BQU1yQyxVQUFVOUMsTUFBTUcsS0FBSzBELFVBQVcsR0FDN0MrVyxFQUhJcGIsS0FHRXFELE9BR1YsSUFBS25CLEVBQUksRUFBR0EsRUFBSWtaLEVBQUdsWixJQUtmLEdBSmtCLGlCQUFQazNCLFFBQWlDLElBQVBBLEVBUGpDcDVCLEtBUUVrQyxHQUFHdXBFLE1BQVEsSUFBSS9HLEVBUmpCMWtFLEtBUXlCa0MsR0FBSWszQixHQUU3QnQxQixFQVZBOUQsS0FVUWtDLEdBQUd1cEUsTUFBTXJ5QyxHQUFLdjRCLE1BVnRCYixLQVU4QmtDLEdBQUd1cEUsTUFBT2wzRCxRQUMxQixJQUFQelEsRUFBb0IsT0FBT0EsRUFFMUMsT0FiUTlEIiwiZmlsZSI6ImxpYnMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjUuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjAtMDQtMTBUMTU6MDdaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNS4wXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy41XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIwLTAzLTE0XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHhcIjtcblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQgKSA+IDM7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmIGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy50b3AgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLnRvcCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy5sZWZ0ID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy5sZWZ0ICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLyoqXG4gKiBTd2lwZXIgNC4zLjVcbiAqIE1vc3QgbW9kZXJuIG1vYmlsZSB0b3VjaCBzbGlkZXIgYW5kIGZyYW1ld29yayB3aXRoIGhhcmR3YXJlIGFjY2VsZXJhdGVkIHRyYW5zaXRpb25zXG4gKiBodHRwOi8vd3d3LmlkYW5nZXJvLnVzL3N3aXBlci9cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE4IFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogUmVsZWFzZWQgb246IEp1bHkgMzEsIDIwMThcbiAqL1xuIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6ZS5Td2lwZXI9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGY9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50P3tib2R5Ont9LGFkZEV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oKXt9LHJlbW92ZUV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oKXt9LGFjdGl2ZUVsZW1lbnQ6e2JsdXI6ZnVuY3Rpb24oKXt9LG5vZGVOYW1lOlwiXCJ9LHF1ZXJ5U2VsZWN0b3I6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0scXVlcnlTZWxlY3RvckFsbDpmdW5jdGlvbigpe3JldHVybltdfSxnZXRFbGVtZW50QnlJZDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxjcmVhdGVFdmVudDpmdW5jdGlvbigpe3JldHVybntpbml0RXZlbnQ6ZnVuY3Rpb24oKXt9fX0sY3JlYXRlRWxlbWVudDpmdW5jdGlvbigpe3JldHVybntjaGlsZHJlbjpbXSxjaGlsZE5vZGVzOltdLHN0eWxlOnt9LHNldEF0dHJpYnV0ZTpmdW5jdGlvbigpe30sZ2V0RWxlbWVudHNCeVRhZ05hbWU6ZnVuY3Rpb24oKXtyZXR1cm5bXX19fSxsb2NhdGlvbjp7aGFzaDpcIlwifX06ZG9jdW1lbnQsQj1cInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93P3tkb2N1bWVudDpmLG5hdmlnYXRvcjp7dXNlckFnZW50OlwiXCJ9LGxvY2F0aW9uOnt9LGhpc3Rvcnk6e30sQ3VzdG9tRXZlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sYWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbigpe30scmVtb3ZlRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbigpe30sZ2V0Q29tcHV0ZWRTdHlsZTpmdW5jdGlvbigpe3JldHVybntnZXRQcm9wZXJ0eVZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJcIn19fSxJbWFnZTpmdW5jdGlvbigpe30sRGF0ZTpmdW5jdGlvbigpe30sc2NyZWVuOnt9LHNldFRpbWVvdXQ6ZnVuY3Rpb24oKXt9LGNsZWFyVGltZW91dDpmdW5jdGlvbigpe319OndpbmRvdyxsPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCs9MSl0aGlzW3RdPWVbdF07cmV0dXJuIHRoaXMubGVuZ3RoPWUubGVuZ3RoLHRoaXN9O2Z1bmN0aW9uIEwoZSx0KXt2YXIgYT1bXSxpPTA7aWYoZSYmIXQmJmUgaW5zdGFuY2VvZiBsKXJldHVybiBlO2lmKGUpaWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciBzLHIsbj1lLnRyaW0oKTtpZigwPD1uLmluZGV4T2YoXCI8XCIpJiYwPD1uLmluZGV4T2YoXCI+XCIpKXt2YXIgbz1cImRpdlwiO2ZvcigwPT09bi5pbmRleE9mKFwiPGxpXCIpJiYobz1cInVsXCIpLDA9PT1uLmluZGV4T2YoXCI8dHJcIikmJihvPVwidGJvZHlcIiksMCE9PW4uaW5kZXhPZihcIjx0ZFwiKSYmMCE9PW4uaW5kZXhPZihcIjx0aFwiKXx8KG89XCJ0clwiKSwwPT09bi5pbmRleE9mKFwiPHRib2R5XCIpJiYobz1cInRhYmxlXCIpLDA9PT1uLmluZGV4T2YoXCI8b3B0aW9uXCIpJiYobz1cInNlbGVjdFwiKSwocj1mLmNyZWF0ZUVsZW1lbnQobykpLmlubmVySFRNTD1uLGk9MDtpPHIuY2hpbGROb2Rlcy5sZW5ndGg7aSs9MSlhLnB1c2goci5jaGlsZE5vZGVzW2ldKX1lbHNlIGZvcihzPXR8fFwiI1wiIT09ZVswXXx8ZS5tYXRjaCgvWyAuPD46fl0vKT8odHx8ZikucXVlcnlTZWxlY3RvckFsbChlLnRyaW0oKSk6W2YuZ2V0RWxlbWVudEJ5SWQoZS50cmltKCkuc3BsaXQoXCIjXCIpWzFdKV0saT0wO2k8cy5sZW5ndGg7aSs9MSlzW2ldJiZhLnB1c2goc1tpXSl9ZWxzZSBpZihlLm5vZGVUeXBlfHxlPT09Qnx8ZT09PWYpYS5wdXNoKGUpO2Vsc2UgaWYoMDxlLmxlbmd0aCYmZVswXS5ub2RlVHlwZSlmb3IoaT0wO2k8ZS5sZW5ndGg7aSs9MSlhLnB1c2goZVtpXSk7cmV0dXJuIG5ldyBsKGEpfWZ1bmN0aW9uIHIoZSl7Zm9yKHZhciB0PVtdLGE9MDthPGUubGVuZ3RoO2ErPTEpLTE9PT10LmluZGV4T2YoZVthXSkmJnQucHVzaChlW2FdKTtyZXR1cm4gdH1MLmZuPWwucHJvdG90eXBlLEwuQ2xhc3M9bCxMLkRvbTc9bDt2YXIgdD17YWRkQ2xhc3M6ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcztmb3IodmFyIHQ9ZS5zcGxpdChcIiBcIiksYT0wO2E8dC5sZW5ndGg7YSs9MSlmb3IodmFyIGk9MDtpPHRoaXMubGVuZ3RoO2krPTEpdm9pZCAwIT09dGhpc1tpXSYmdm9pZCAwIT09dGhpc1tpXS5jbGFzc0xpc3QmJnRoaXNbaV0uY2xhc3NMaXN0LmFkZCh0W2FdKTtyZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuc3BsaXQoXCIgXCIpLGE9MDthPHQubGVuZ3RoO2ErPTEpZm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aDtpKz0xKXZvaWQgMCE9PXRoaXNbaV0mJnZvaWQgMCE9PXRoaXNbaV0uY2xhc3NMaXN0JiZ0aGlzW2ldLmNsYXNzTGlzdC5yZW1vdmUodFthXSk7cmV0dXJuIHRoaXN9LGhhc0NsYXNzOmZ1bmN0aW9uKGUpe3JldHVybiEhdGhpc1swXSYmdGhpc1swXS5jbGFzc0xpc3QuY29udGFpbnMoZSl9LHRvZ2dsZUNsYXNzOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLnNwbGl0KFwiIFwiKSxhPTA7YTx0Lmxlbmd0aDthKz0xKWZvcih2YXIgaT0wO2k8dGhpcy5sZW5ndGg7aSs9MSl2b2lkIDAhPT10aGlzW2ldJiZ2b2lkIDAhPT10aGlzW2ldLmNsYXNzTGlzdCYmdGhpc1tpXS5jbGFzc0xpc3QudG9nZ2xlKHRbYV0pO3JldHVybiB0aGlzfSxhdHRyOmZ1bmN0aW9uKGUsdCl7dmFyIGE9YXJndW1lbnRzO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoJiZcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gdGhpc1swXT90aGlzWzBdLmdldEF0dHJpYnV0ZShlKTp2b2lkIDA7Zm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aDtpKz0xKWlmKDI9PT1hLmxlbmd0aCl0aGlzW2ldLnNldEF0dHJpYnV0ZShlLHQpO2Vsc2UgZm9yKHZhciBzIGluIGUpdGhpc1tpXVtzXT1lW3NdLHRoaXNbaV0uc2V0QXR0cmlidXRlKHMsZVtzXSk7cmV0dXJuIHRoaXN9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDx0aGlzLmxlbmd0aDt0Kz0xKXRoaXNbdF0ucmVtb3ZlQXR0cmlidXRlKGUpO3JldHVybiB0aGlzfSxkYXRhOmZ1bmN0aW9uKGUsdCl7dmFyIGE7aWYodm9pZCAwIT09dCl7Zm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aDtpKz0xKShhPXRoaXNbaV0pLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2V8fChhLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2U9e30pLGEuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtlXT10O3JldHVybiB0aGlzfWlmKGE9dGhpc1swXSl7aWYoYS5kb203RWxlbWVudERhdGFTdG9yYWdlJiZlIGluIGEuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSlyZXR1cm4gYS5kb203RWxlbWVudERhdGFTdG9yYWdlW2VdO3ZhciBzPWEuZ2V0QXR0cmlidXRlKFwiZGF0YS1cIitlKTtyZXR1cm4gc3x8dm9pZCAwfX0sdHJhbnNmb3JtOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8dGhpcy5sZW5ndGg7dCs9MSl7dmFyIGE9dGhpc1t0XS5zdHlsZTthLndlYmtpdFRyYW5zZm9ybT1lLGEudHJhbnNmb3JtPWV9cmV0dXJuIHRoaXN9LHRyYW5zaXRpb246ZnVuY3Rpb24oZSl7XCJzdHJpbmdcIiE9dHlwZW9mIGUmJihlKz1cIm1zXCIpO2Zvcih2YXIgdD0wO3Q8dGhpcy5sZW5ndGg7dCs9MSl7dmFyIGE9dGhpc1t0XS5zdHlsZTthLndlYmtpdFRyYW5zaXRpb25EdXJhdGlvbj1lLGEudHJhbnNpdGlvbkR1cmF0aW9uPWV9cmV0dXJuIHRoaXN9LG9uOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9W10sYT1hcmd1bWVudHMubGVuZ3RoO2EtLTspdFthXT1hcmd1bWVudHNbYV07dmFyIGk9dFswXSxyPXRbMV0sbj10WzJdLHM9dFszXTtmdW5jdGlvbiBvKGUpe3ZhciB0PWUudGFyZ2V0O2lmKHQpe3ZhciBhPWUudGFyZ2V0LmRvbTdFdmVudERhdGF8fFtdO2lmKGEuaW5kZXhPZihlKTwwJiZhLnVuc2hpZnQoZSksTCh0KS5pcyhyKSluLmFwcGx5KHQsYSk7ZWxzZSBmb3IodmFyIGk9TCh0KS5wYXJlbnRzKCkscz0wO3M8aS5sZW5ndGg7cys9MSlMKGlbc10pLmlzKHIpJiZuLmFwcGx5KGlbc10sYSl9fWZ1bmN0aW9uIGwoZSl7dmFyIHQ9ZSYmZS50YXJnZXQmJmUudGFyZ2V0LmRvbTdFdmVudERhdGF8fFtdO3QuaW5kZXhPZihlKTwwJiZ0LnVuc2hpZnQoZSksbi5hcHBseSh0aGlzLHQpfVwiZnVuY3Rpb25cIj09dHlwZW9mIHRbMV0mJihpPShlPXQpWzBdLG49ZVsxXSxzPWVbMl0scj12b2lkIDApLHN8fChzPSExKTtmb3IodmFyIGQscD1pLnNwbGl0KFwiIFwiKSxjPTA7Yzx0aGlzLmxlbmd0aDtjKz0xKXt2YXIgdT10aGlzW2NdO2lmKHIpZm9yKGQ9MDtkPHAubGVuZ3RoO2QrPTEpe3ZhciBoPXBbZF07dS5kb203TGl2ZUxpc3RlbmVyc3x8KHUuZG9tN0xpdmVMaXN0ZW5lcnM9e30pLHUuZG9tN0xpdmVMaXN0ZW5lcnNbaF18fCh1LmRvbTdMaXZlTGlzdGVuZXJzW2hdPVtdKSx1LmRvbTdMaXZlTGlzdGVuZXJzW2hdLnB1c2goe2xpc3RlbmVyOm4scHJveHlMaXN0ZW5lcjpvfSksdS5hZGRFdmVudExpc3RlbmVyKGgsbyxzKX1lbHNlIGZvcihkPTA7ZDxwLmxlbmd0aDtkKz0xKXt2YXIgdj1wW2RdO3UuZG9tN0xpc3RlbmVyc3x8KHUuZG9tN0xpc3RlbmVycz17fSksdS5kb203TGlzdGVuZXJzW3ZdfHwodS5kb203TGlzdGVuZXJzW3ZdPVtdKSx1LmRvbTdMaXN0ZW5lcnNbdl0ucHVzaCh7bGlzdGVuZXI6bixwcm94eUxpc3RlbmVyOmx9KSx1LmFkZEV2ZW50TGlzdGVuZXIodixsLHMpfX1yZXR1cm4gdGhpc30sb2ZmOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9W10sYT1hcmd1bWVudHMubGVuZ3RoO2EtLTspdFthXT1hcmd1bWVudHNbYV07dmFyIGk9dFswXSxzPXRbMV0scj10WzJdLG49dFszXTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0WzFdJiYoaT0oZT10KVswXSxyPWVbMV0sbj1lWzJdLHM9dm9pZCAwKSxufHwobj0hMSk7Zm9yKHZhciBvPWkuc3BsaXQoXCIgXCIpLGw9MDtsPG8ubGVuZ3RoO2wrPTEpZm9yKHZhciBkPW9bbF0scD0wO3A8dGhpcy5sZW5ndGg7cCs9MSl7dmFyIGM9dGhpc1twXSx1PXZvaWQgMDtpZighcyYmYy5kb203TGlzdGVuZXJzP3U9Yy5kb203TGlzdGVuZXJzW2RdOnMmJmMuZG9tN0xpdmVMaXN0ZW5lcnMmJih1PWMuZG9tN0xpdmVMaXN0ZW5lcnNbZF0pLHUmJnUubGVuZ3RoKWZvcih2YXIgaD11Lmxlbmd0aC0xOzA8PWg7aC09MSl7dmFyIHY9dVtoXTtyJiZ2Lmxpc3RlbmVyPT09cj8oYy5yZW1vdmVFdmVudExpc3RlbmVyKGQsdi5wcm94eUxpc3RlbmVyLG4pLHUuc3BsaWNlKGgsMSkpOnJ8fChjLnJlbW92ZUV2ZW50TGlzdGVuZXIoZCx2LnByb3h5TGlzdGVuZXIsbiksdS5zcGxpY2UoaCwxKSl9fXJldHVybiB0aGlzfSx0cmlnZ2VyOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9YXJndW1lbnRzLmxlbmd0aDt0LS07KWVbdF09YXJndW1lbnRzW3RdO2Zvcih2YXIgYT1lWzBdLnNwbGl0KFwiIFwiKSxpPWVbMV0scz0wO3M8YS5sZW5ndGg7cys9MSlmb3IodmFyIHI9YVtzXSxuPTA7bjx0aGlzLmxlbmd0aDtuKz0xKXt2YXIgbz10aGlzW25dLGw9dm9pZCAwO3RyeXtsPW5ldyBCLkN1c3RvbUV2ZW50KHIse2RldGFpbDppLGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMH0pfWNhdGNoKGUpeyhsPWYuY3JlYXRlRXZlbnQoXCJFdmVudFwiKSkuaW5pdEV2ZW50KHIsITAsITApLGwuZGV0YWlsPWl9by5kb203RXZlbnREYXRhPWUuZmlsdGVyKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIDA8dH0pLG8uZGlzcGF0Y2hFdmVudChsKSxvLmRvbTdFdmVudERhdGE9W10sZGVsZXRlIG8uZG9tN0V2ZW50RGF0YX1yZXR1cm4gdGhpc30sdHJhbnNpdGlvbkVuZDpmdW5jdGlvbih0KXt2YXIgYSxpPVtcIndlYmtpdFRyYW5zaXRpb25FbmRcIixcInRyYW5zaXRpb25lbmRcIl0scz10aGlzO2Z1bmN0aW9uIHIoZSl7aWYoZS50YXJnZXQ9PT10aGlzKWZvcih0LmNhbGwodGhpcyxlKSxhPTA7YTxpLmxlbmd0aDthKz0xKXMub2ZmKGlbYV0scil9aWYodClmb3IoYT0wO2E8aS5sZW5ndGg7YSs9MSlzLm9uKGlbYV0scik7cmV0dXJuIHRoaXN9LG91dGVyV2lkdGg6ZnVuY3Rpb24oZSl7aWYoMDx0aGlzLmxlbmd0aCl7aWYoZSl7dmFyIHQ9dGhpcy5zdHlsZXMoKTtyZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCtwYXJzZUZsb2F0KHQuZ2V0UHJvcGVydHlWYWx1ZShcIm1hcmdpbi1yaWdodFwiKSkrcGFyc2VGbG9hdCh0LmdldFByb3BlcnR5VmFsdWUoXCJtYXJnaW4tbGVmdFwiKSl9cmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGh9cmV0dXJuIG51bGx9LG91dGVySGVpZ2h0OmZ1bmN0aW9uKGUpe2lmKDA8dGhpcy5sZW5ndGgpe2lmKGUpe3ZhciB0PXRoaXMuc3R5bGVzKCk7cmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0K3BhcnNlRmxvYXQodC5nZXRQcm9wZXJ0eVZhbHVlKFwibWFyZ2luLXRvcFwiKSkrcGFyc2VGbG9hdCh0LmdldFByb3BlcnR5VmFsdWUoXCJtYXJnaW4tYm90dG9tXCIpKX1yZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHR9cmV0dXJuIG51bGx9LG9mZnNldDpmdW5jdGlvbigpe2lmKDA8dGhpcy5sZW5ndGgpe3ZhciBlPXRoaXNbMF0sdD1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGE9Zi5ib2R5LGk9ZS5jbGllbnRUb3B8fGEuY2xpZW50VG9wfHwwLHM9ZS5jbGllbnRMZWZ0fHxhLmNsaWVudExlZnR8fDAscj1lPT09Qj9CLnNjcm9sbFk6ZS5zY3JvbGxUb3Asbj1lPT09Qj9CLnNjcm9sbFg6ZS5zY3JvbGxMZWZ0O3JldHVybnt0b3A6dC50b3Arci1pLGxlZnQ6dC5sZWZ0K24tc319cmV0dXJuIG51bGx9LGNzczpmdW5jdGlvbihlLHQpe3ZhciBhO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl7Zm9yKGE9MDthPHRoaXMubGVuZ3RoO2ErPTEpZm9yKHZhciBpIGluIGUpdGhpc1thXS5zdHlsZVtpXT1lW2ldO3JldHVybiB0aGlzfWlmKHRoaXNbMF0pcmV0dXJuIEIuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLG51bGwpLmdldFByb3BlcnR5VmFsdWUoZSl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgmJlwic3RyaW5nXCI9PXR5cGVvZiBlKXtmb3IoYT0wO2E8dGhpcy5sZW5ndGg7YSs9MSl0aGlzW2FdLnN0eWxlW2VdPXQ7cmV0dXJuIHRoaXN9cmV0dXJuIHRoaXN9LGVhY2g6ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIHRoaXM7Zm9yKHZhciB0PTA7dDx0aGlzLmxlbmd0aDt0Kz0xKWlmKCExPT09ZS5jYWxsKHRoaXNbdF0sdCx0aGlzW3RdKSlyZXR1cm4gdGhpcztyZXR1cm4gdGhpc30saHRtbDpmdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzWzBdP3RoaXNbMF0uaW5uZXJIVE1MOnZvaWQgMDtmb3IodmFyIHQ9MDt0PHRoaXMubGVuZ3RoO3QrPTEpdGhpc1t0XS5pbm5lckhUTUw9ZTtyZXR1cm4gdGhpc30sdGV4dDpmdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzWzBdP3RoaXNbMF0udGV4dENvbnRlbnQudHJpbSgpOm51bGw7Zm9yKHZhciB0PTA7dDx0aGlzLmxlbmd0aDt0Kz0xKXRoaXNbdF0udGV4dENvbnRlbnQ9ZTtyZXR1cm4gdGhpc30saXM6ZnVuY3Rpb24oZSl7dmFyIHQsYSxpPXRoaXNbMF07aWYoIWl8fHZvaWQgMD09PWUpcmV0dXJuITE7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKGkubWF0Y2hlcylyZXR1cm4gaS5tYXRjaGVzKGUpO2lmKGkud2Via2l0TWF0Y2hlc1NlbGVjdG9yKXJldHVybiBpLndlYmtpdE1hdGNoZXNTZWxlY3RvcihlKTtpZihpLm1zTWF0Y2hlc1NlbGVjdG9yKXJldHVybiBpLm1zTWF0Y2hlc1NlbGVjdG9yKGUpO2Zvcih0PUwoZSksYT0wO2E8dC5sZW5ndGg7YSs9MSlpZih0W2FdPT09aSlyZXR1cm4hMDtyZXR1cm4hMX1pZihlPT09ZilyZXR1cm4gaT09PWY7aWYoZT09PUIpcmV0dXJuIGk9PT1CO2lmKGUubm9kZVR5cGV8fGUgaW5zdGFuY2VvZiBsKXtmb3IodD1lLm5vZGVUeXBlP1tlXTplLGE9MDthPHQubGVuZ3RoO2ErPTEpaWYodFthXT09PWkpcmV0dXJuITA7cmV0dXJuITF9cmV0dXJuITF9LGluZGV4OmZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzWzBdO2lmKHQpe2ZvcihlPTA7bnVsbCE9PSh0PXQucHJldmlvdXNTaWJsaW5nKTspMT09PXQubm9kZVR5cGUmJihlKz0xKTtyZXR1cm4gZX19LGVxOmZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXM7dmFyIHQsYT10aGlzLmxlbmd0aDtyZXR1cm4gbmV3IGwoYS0xPGU/W106ZTwwPyh0PWErZSk8MD9bXTpbdGhpc1t0XV06W3RoaXNbZV1dKX0sYXBwZW5kOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9W10sYT1hcmd1bWVudHMubGVuZ3RoO2EtLTspdFthXT1hcmd1bWVudHNbYV07Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKz0xKXtlPXRbaV07Zm9yKHZhciBzPTA7czx0aGlzLmxlbmd0aDtzKz0xKWlmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgcj1mLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zm9yKHIuaW5uZXJIVE1MPWU7ci5maXJzdENoaWxkOyl0aGlzW3NdLmFwcGVuZENoaWxkKHIuZmlyc3RDaGlsZCl9ZWxzZSBpZihlIGluc3RhbmNlb2YgbClmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rPTEpdGhpc1tzXS5hcHBlbmRDaGlsZChlW25dKTtlbHNlIHRoaXNbc10uYXBwZW5kQ2hpbGQoZSl9cmV0dXJuIHRoaXN9LHByZXBlbmQ6ZnVuY3Rpb24oZSl7dmFyIHQsYSxpPXRoaXM7Zm9yKHQ9MDt0PHRoaXMubGVuZ3RoO3QrPTEpaWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciBzPWYuY3JlYXRlRWxlbWVudChcImRpdlwiKTtmb3Iocy5pbm5lckhUTUw9ZSxhPXMuY2hpbGROb2Rlcy5sZW5ndGgtMTswPD1hO2EtPTEpaVt0XS5pbnNlcnRCZWZvcmUocy5jaGlsZE5vZGVzW2FdLGlbdF0uY2hpbGROb2Rlc1swXSl9ZWxzZSBpZihlIGluc3RhbmNlb2YgbClmb3IoYT0wO2E8ZS5sZW5ndGg7YSs9MSlpW3RdLmluc2VydEJlZm9yZShlW2FdLGlbdF0uY2hpbGROb2Rlc1swXSk7ZWxzZSBpW3RdLmluc2VydEJlZm9yZShlLGlbdF0uY2hpbGROb2Rlc1swXSk7cmV0dXJuIHRoaXN9LG5leHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIDA8dGhpcy5sZW5ndGg/ZT90aGlzWzBdLm5leHRFbGVtZW50U2libGluZyYmTCh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykuaXMoZSk/bmV3IGwoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk6bmV3IGwoW10pOnRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nP25ldyBsKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pOm5ldyBsKFtdKTpuZXcgbChbXSl9LG5leHRBbGw6ZnVuY3Rpb24oZSl7dmFyIHQ9W10sYT10aGlzWzBdO2lmKCFhKXJldHVybiBuZXcgbChbXSk7Zm9yKDthLm5leHRFbGVtZW50U2libGluZzspe3ZhciBpPWEubmV4dEVsZW1lbnRTaWJsaW5nO2U/TChpKS5pcyhlKSYmdC5wdXNoKGkpOnQucHVzaChpKSxhPWl9cmV0dXJuIG5ldyBsKHQpfSxwcmV2OmZ1bmN0aW9uKGUpe2lmKDA8dGhpcy5sZW5ndGgpe3ZhciB0PXRoaXNbMF07cmV0dXJuIGU/dC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nJiZMKHQucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoZSk/bmV3IGwoW3QucHJldmlvdXNFbGVtZW50U2libGluZ10pOm5ldyBsKFtdKTp0LnByZXZpb3VzRWxlbWVudFNpYmxpbmc/bmV3IGwoW3QucHJldmlvdXNFbGVtZW50U2libGluZ10pOm5ldyBsKFtdKX1yZXR1cm4gbmV3IGwoW10pfSxwcmV2QWxsOmZ1bmN0aW9uKGUpe3ZhciB0PVtdLGE9dGhpc1swXTtpZighYSlyZXR1cm4gbmV3IGwoW10pO2Zvcig7YS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyl7dmFyIGk9YS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO2U/TChpKS5pcyhlKSYmdC5wdXNoKGkpOnQucHVzaChpKSxhPWl9cmV0dXJuIG5ldyBsKHQpfSxwYXJlbnQ6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLGE9MDthPHRoaXMubGVuZ3RoO2ErPTEpbnVsbCE9PXRoaXNbYV0ucGFyZW50Tm9kZSYmKGU/TCh0aGlzW2FdLnBhcmVudE5vZGUpLmlzKGUpJiZ0LnB1c2godGhpc1thXS5wYXJlbnROb2RlKTp0LnB1c2godGhpc1thXS5wYXJlbnROb2RlKSk7cmV0dXJuIEwocih0KSl9LHBhcmVudHM6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLGE9MDthPHRoaXMubGVuZ3RoO2ErPTEpZm9yKHZhciBpPXRoaXNbYV0ucGFyZW50Tm9kZTtpOyllP0woaSkuaXMoZSkmJnQucHVzaChpKTp0LnB1c2goaSksaT1pLnBhcmVudE5vZGU7cmV0dXJuIEwocih0KSl9LGNsb3Nlc3Q6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gdm9pZCAwPT09ZT9uZXcgbChbXSk6KHQuaXMoZSl8fCh0PXQucGFyZW50cyhlKS5lcSgwKSksdCl9LGZpbmQ6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLGE9MDthPHRoaXMubGVuZ3RoO2ErPTEpZm9yKHZhciBpPXRoaXNbYV0ucXVlcnlTZWxlY3RvckFsbChlKSxzPTA7czxpLmxlbmd0aDtzKz0xKXQucHVzaChpW3NdKTtyZXR1cm4gbmV3IGwodCl9LGNoaWxkcmVuOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxhPTA7YTx0aGlzLmxlbmd0aDthKz0xKWZvcih2YXIgaT10aGlzW2FdLmNoaWxkTm9kZXMscz0wO3M8aS5sZW5ndGg7cys9MSllPzE9PT1pW3NdLm5vZGVUeXBlJiZMKGlbc10pLmlzKGUpJiZ0LnB1c2goaVtzXSk6MT09PWlbc10ubm9kZVR5cGUmJnQucHVzaChpW3NdKTtyZXR1cm4gbmV3IGwocih0KSl9LHJlbW92ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT0wO2U8dGhpcy5sZW5ndGg7ZSs9MSl0aGlzW2VdLnBhcmVudE5vZGUmJnRoaXNbZV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzW2VdKTtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9YXJndW1lbnRzLmxlbmd0aDt0LS07KWVbdF09YXJndW1lbnRzW3RdO3ZhciBhLGk7Zm9yKGE9MDthPGUubGVuZ3RoO2ErPTEpe3ZhciBzPUwoZVthXSk7Zm9yKGk9MDtpPHMubGVuZ3RoO2krPTEpdGhpc1t0aGlzLmxlbmd0aF09c1tpXSx0aGlzLmxlbmd0aCs9MX1yZXR1cm4gdGhpc30sc3R5bGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbMF0/Qi5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sbnVsbCk6e319fTtPYmplY3Qua2V5cyh0KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe0wuZm5bZV09dFtlXX0pO3ZhciBlLGEsaSxYPXtkZWxldGVQcm9wczpmdW5jdGlvbihlKXt2YXIgdD1lO09iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24oZSl7dHJ5e3RbZV09bnVsbH1jYXRjaChlKXt9dHJ5e2RlbGV0ZSB0W2VdfWNhdGNoKGUpe319KX0sbmV4dFRpY2s6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCksc2V0VGltZW91dChlLHQpfSxub3c6ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX0sZ2V0VHJhbnNsYXRlOmZ1bmN0aW9uKGUsdCl7dmFyIGEsaSxzO3ZvaWQgMD09PXQmJih0PVwieFwiKTt2YXIgcj1CLmdldENvbXB1dGVkU3R5bGUoZSxudWxsKTtyZXR1cm4gQi5XZWJLaXRDU1NNYXRyaXg/KDY8KGk9ci50cmFuc2Zvcm18fHIud2Via2l0VHJhbnNmb3JtKS5zcGxpdChcIixcIikubGVuZ3RoJiYoaT1pLnNwbGl0KFwiLCBcIikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoXCIsXCIsXCIuXCIpfSkuam9pbihcIiwgXCIpKSxzPW5ldyBCLldlYktpdENTU01hdHJpeChcIm5vbmVcIj09PWk/XCJcIjppKSk6YT0ocz1yLk1velRyYW5zZm9ybXx8ci5PVHJhbnNmb3JtfHxyLk1zVHJhbnNmb3JtfHxyLm1zVHJhbnNmb3JtfHxyLnRyYW5zZm9ybXx8ci5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpLnJlcGxhY2UoXCJ0cmFuc2xhdGUoXCIsXCJtYXRyaXgoMSwgMCwgMCwgMSxcIikpLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLFwieFwiPT09dCYmKGk9Qi5XZWJLaXRDU1NNYXRyaXg/cy5tNDE6MTY9PT1hLmxlbmd0aD9wYXJzZUZsb2F0KGFbMTJdKTpwYXJzZUZsb2F0KGFbNF0pKSxcInlcIj09PXQmJihpPUIuV2ViS2l0Q1NTTWF0cml4P3MubTQyOjE2PT09YS5sZW5ndGg/cGFyc2VGbG9hdChhWzEzXSk6cGFyc2VGbG9hdChhWzVdKSksaXx8MH0scGFyc2VVcmxRdWVyeTpmdW5jdGlvbihlKXt2YXIgdCxhLGkscyxyPXt9LG49ZXx8Qi5sb2NhdGlvbi5ocmVmO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuJiZuLmxlbmd0aClmb3Iocz0oYT0obj0tMTxuLmluZGV4T2YoXCI/XCIpP24ucmVwbGFjZSgvXFxTKlxcPy8sXCJcIik6XCJcIikuc3BsaXQoXCImXCIpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm5cIlwiIT09ZX0pKS5sZW5ndGgsdD0wO3Q8czt0Kz0xKWk9YVt0XS5yZXBsYWNlKC8jXFxTKy9nLFwiXCIpLnNwbGl0KFwiPVwiKSxyW2RlY29kZVVSSUNvbXBvbmVudChpWzBdKV09dm9pZCAwPT09aVsxXT92b2lkIDA6ZGVjb2RlVVJJQ29tcG9uZW50KGlbMV0pfHxcIlwiO3JldHVybiByfSxpc09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJmUuY29uc3RydWN0b3ImJmUuY29uc3RydWN0b3I9PT1PYmplY3R9LGV4dGVuZDpmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PWFyZ3VtZW50cy5sZW5ndGg7dC0tOyllW3RdPWFyZ3VtZW50c1t0XTtmb3IodmFyIGE9T2JqZWN0KGVbMF0pLGk9MTtpPGUubGVuZ3RoO2krPTEpe3ZhciBzPWVbaV07aWYobnVsbCE9cylmb3IodmFyIHI9T2JqZWN0LmtleXMoT2JqZWN0KHMpKSxuPTAsbz1yLmxlbmd0aDtuPG87bis9MSl7dmFyIGw9cltuXSxkPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocyxsKTt2b2lkIDAhPT1kJiZkLmVudW1lcmFibGUmJihYLmlzT2JqZWN0KGFbbF0pJiZYLmlzT2JqZWN0KHNbbF0pP1guZXh0ZW5kKGFbbF0sc1tsXSk6IVguaXNPYmplY3QoYVtsXSkmJlguaXNPYmplY3Qoc1tsXSk/KGFbbF09e30sWC5leHRlbmQoYVtsXSxzW2xdKSk6YVtsXT1zW2xdKX19cmV0dXJuIGF9fSxZPShpPWYuY3JlYXRlRWxlbWVudChcImRpdlwiKSx7dG91Y2g6Qi5Nb2Rlcm5penImJiEwPT09Qi5Nb2Rlcm5penIudG91Y2h8fCEhKFwib250b3VjaHN0YXJ0XCJpbiBCfHxCLkRvY3VtZW50VG91Y2gmJmYgaW5zdGFuY2VvZiBCLkRvY3VtZW50VG91Y2gpLHBvaW50ZXJFdmVudHM6ISghQi5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQmJiFCLlBvaW50ZXJFdmVudCkscHJlZml4ZWRQb2ludGVyRXZlbnRzOiEhQi5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCx0cmFuc2l0aW9uOihhPWkuc3R5bGUsXCJ0cmFuc2l0aW9uXCJpbiBhfHxcIndlYmtpdFRyYW5zaXRpb25cImluIGF8fFwiTW96VHJhbnNpdGlvblwiaW4gYSksdHJhbnNmb3JtczNkOkIuTW9kZXJuaXpyJiYhMD09PUIuTW9kZXJuaXpyLmNzc3RyYW5zZm9ybXMzZHx8KGU9aS5zdHlsZSxcIndlYmtpdFBlcnNwZWN0aXZlXCJpbiBlfHxcIk1velBlcnNwZWN0aXZlXCJpbiBlfHxcIk9QZXJzcGVjdGl2ZVwiaW4gZXx8XCJNc1BlcnNwZWN0aXZlXCJpbiBlfHxcInBlcnNwZWN0aXZlXCJpbiBlKSxmbGV4Ym94OmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWkuc3R5bGUsdD1cImFsaWduSXRlbXMgd2Via2l0QWxpZ25JdGVtcyB3ZWJraXRCb3hBbGlnbiBtc0ZsZXhBbGlnbiBtb3pCb3hBbGlnbiB3ZWJraXRGbGV4RGlyZWN0aW9uIG1zRmxleERpcmVjdGlvbiBtb3pCb3hEaXJlY3Rpb24gbW96Qm94T3JpZW50IHdlYmtpdEJveERpcmVjdGlvbiB3ZWJraXRCb3hPcmllbnRcIi5zcGxpdChcIiBcIiksYT0wO2E8dC5sZW5ndGg7YSs9MSlpZih0W2FdaW4gZSlyZXR1cm4hMDtyZXR1cm4hMX0oKSxvYnNlcnZlcjpcIk11dGF0aW9uT2JzZXJ2ZXJcImluIEJ8fFwiV2Via2l0TXV0YXRpb25PYnNlcnZlclwiaW4gQixwYXNzaXZlTGlzdGVuZXI6ZnVuY3Rpb24oKXt2YXIgZT0hMTt0cnl7dmFyIHQ9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtlPSEwfX0pO0IuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RQYXNzaXZlTGlzdGVuZXJcIixudWxsLHQpfWNhdGNoKGUpe31yZXR1cm4gZX0oKSxnZXN0dXJlczpcIm9uZ2VzdHVyZXN0YXJ0XCJpbiBCfSkscz1mdW5jdGlvbihlKXt2b2lkIDA9PT1lJiYoZT17fSk7dmFyIHQ9dGhpczt0LnBhcmFtcz1lLHQuZXZlbnRzTGlzdGVuZXJzPXt9LHQucGFyYW1zJiZ0LnBhcmFtcy5vbiYmT2JqZWN0LmtleXModC5wYXJhbXMub24pLmZvckVhY2goZnVuY3Rpb24oZSl7dC5vbihlLHQucGFyYW1zLm9uW2VdKX0pfSxuPXtjb21wb25lbnRzOntjb25maWd1cmFibGU6ITB9fTtzLnByb3RvdHlwZS5vbj1mdW5jdGlvbihlLHQsYSl7dmFyIGk9dGhpcztpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXJldHVybiBpO3ZhciBzPWE/XCJ1bnNoaWZ0XCI6XCJwdXNoXCI7cmV0dXJuIGUuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7aS5ldmVudHNMaXN0ZW5lcnNbZV18fChpLmV2ZW50c0xpc3RlbmVyc1tlXT1bXSksaS5ldmVudHNMaXN0ZW5lcnNbZV1bc10odCl9KSxpfSxzLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGkscyxlKXt2YXIgcj10aGlzO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHMpcmV0dXJuIHI7cmV0dXJuIHIub24oaSxmdW5jdGlvbiBlKCl7Zm9yKHZhciB0PVtdLGE9YXJndW1lbnRzLmxlbmd0aDthLS07KXRbYV09YXJndW1lbnRzW2FdO3MuYXBwbHkocix0KSxyLm9mZihpLGUpfSxlKX0scy5wcm90b3R5cGUub2ZmPWZ1bmN0aW9uKGUsaSl7dmFyIHM9dGhpcztyZXR1cm4gcy5ldmVudHNMaXN0ZW5lcnMmJmUuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dm9pZCAwPT09aT9zLmV2ZW50c0xpc3RlbmVyc1thXT1bXTpzLmV2ZW50c0xpc3RlbmVyc1thXS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7ZT09PWkmJnMuZXZlbnRzTGlzdGVuZXJzW2FdLnNwbGljZSh0LDEpfSl9KSxzfSxzLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9YXJndW1lbnRzLmxlbmd0aDt0LS07KWVbdF09YXJndW1lbnRzW3RdO3ZhciBhLGkscyxyPXRoaXM7cmV0dXJuIHIuZXZlbnRzTGlzdGVuZXJzJiYoXCJzdHJpbmdcIj09dHlwZW9mIGVbMF18fEFycmF5LmlzQXJyYXkoZVswXSk/KGE9ZVswXSxpPWUuc2xpY2UoMSxlLmxlbmd0aCkscz1yKTooYT1lWzBdLmV2ZW50cyxpPWVbMF0uZGF0YSxzPWVbMF0uY29udGV4dHx8ciksKEFycmF5LmlzQXJyYXkoYSk/YTphLnNwbGl0KFwiIFwiKSkuZm9yRWFjaChmdW5jdGlvbihlKXtpZihyLmV2ZW50c0xpc3RlbmVycyYmci5ldmVudHNMaXN0ZW5lcnNbZV0pe3ZhciB0PVtdO3IuZXZlbnRzTGlzdGVuZXJzW2VdLmZvckVhY2goZnVuY3Rpb24oZSl7dC5wdXNoKGUpfSksdC5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuYXBwbHkocyxpKX0pfX0pKSxyfSxzLnByb3RvdHlwZS51c2VNb2R1bGVzUGFyYW1zPWZ1bmN0aW9uKGEpe3ZhciBpPXRoaXM7aS5tb2R1bGVzJiZPYmplY3Qua2V5cyhpLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9aS5tb2R1bGVzW2VdO3QucGFyYW1zJiZYLmV4dGVuZChhLHQucGFyYW1zKX0pfSxzLnByb3RvdHlwZS51c2VNb2R1bGVzPWZ1bmN0aW9uKGkpe3ZvaWQgMD09PWkmJihpPXt9KTt2YXIgcz10aGlzO3MubW9kdWxlcyYmT2JqZWN0LmtleXMocy5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBhPXMubW9kdWxlc1tlXSx0PWlbZV18fHt9O2EuaW5zdGFuY2UmJk9iamVjdC5rZXlzKGEuaW5zdGFuY2UpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9YS5pbnN0YW5jZVtlXTtzW2VdPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dC5iaW5kKHMpOnR9KSxhLm9uJiZzLm9uJiZPYmplY3Qua2V5cyhhLm9uKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3Mub24oZSxhLm9uW2VdKX0pLGEuY3JlYXRlJiZhLmNyZWF0ZS5iaW5kKHMpKHQpfSl9LG4uY29tcG9uZW50cy5zZXQ9ZnVuY3Rpb24oZSl7dGhpcy51c2UmJnRoaXMudXNlKGUpfSxzLmluc3RhbGxNb2R1bGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLGE9YXJndW1lbnRzLmxlbmd0aC0xOzA8YS0tOyllW2FdPWFyZ3VtZW50c1thKzFdO3ZhciBpPXRoaXM7aS5wcm90b3R5cGUubW9kdWxlc3x8KGkucHJvdG90eXBlLm1vZHVsZXM9e30pO3ZhciBzPXQubmFtZXx8T2JqZWN0LmtleXMoaS5wcm90b3R5cGUubW9kdWxlcykubGVuZ3RoK1wiX1wiK1gubm93KCk7cmV0dXJuKGkucHJvdG90eXBlLm1vZHVsZXNbc109dCkucHJvdG8mJk9iamVjdC5rZXlzKHQucHJvdG8pLmZvckVhY2goZnVuY3Rpb24oZSl7aS5wcm90b3R5cGVbZV09dC5wcm90b1tlXX0pLHQuc3RhdGljJiZPYmplY3Qua2V5cyh0LnN0YXRpYykuZm9yRWFjaChmdW5jdGlvbihlKXtpW2VdPXQuc3RhdGljW2VdfSksdC5pbnN0YWxsJiZ0Lmluc3RhbGwuYXBwbHkoaSxlKSxpfSxzLnVzZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10sYT1hcmd1bWVudHMubGVuZ3RoLTE7MDxhLS07KXRbYV09YXJndW1lbnRzW2ErMV07dmFyIGk9dGhpcztyZXR1cm4gQXJyYXkuaXNBcnJheShlKT8oZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBpLmluc3RhbGxNb2R1bGUoZSl9KSxpKTppLmluc3RhbGxNb2R1bGUuYXBwbHkoaSxbZV0uY29uY2F0KHQpKX0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocyxuKTt2YXIgbz17dXBkYXRlU2l6ZTpmdW5jdGlvbigpe3ZhciBlLHQsYT10aGlzLGk9YS4kZWw7ZT12b2lkIDAhPT1hLnBhcmFtcy53aWR0aD9hLnBhcmFtcy53aWR0aDppWzBdLmNsaWVudFdpZHRoLHQ9dm9pZCAwIT09YS5wYXJhbXMuaGVpZ2h0P2EucGFyYW1zLmhlaWdodDppWzBdLmNsaWVudEhlaWdodCwwPT09ZSYmYS5pc0hvcml6b250YWwoKXx8MD09PXQmJmEuaXNWZXJ0aWNhbCgpfHwoZT1lLXBhcnNlSW50KGkuY3NzKFwicGFkZGluZy1sZWZ0XCIpLDEwKS1wYXJzZUludChpLmNzcyhcInBhZGRpbmctcmlnaHRcIiksMTApLHQ9dC1wYXJzZUludChpLmNzcyhcInBhZGRpbmctdG9wXCIpLDEwKS1wYXJzZUludChpLmNzcyhcInBhZGRpbmctYm90dG9tXCIpLDEwKSxYLmV4dGVuZChhLHt3aWR0aDplLGhlaWdodDp0LHNpemU6YS5pc0hvcml6b250YWwoKT9lOnR9KSl9LHVwZGF0ZVNsaWRlczpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLnBhcmFtcyxhPWUuJHdyYXBwZXJFbCxpPWUuc2l6ZSxzPWUucnRsVHJhbnNsYXRlLHI9ZS53cm9uZ1JUTCxuPWUudmlydHVhbCYmdC52aXJ0dWFsLmVuYWJsZWQsbz1uP2UudmlydHVhbC5zbGlkZXMubGVuZ3RoOmUuc2xpZGVzLmxlbmd0aCxsPWEuY2hpbGRyZW4oXCIuXCIrZS5wYXJhbXMuc2xpZGVDbGFzcyksZD1uP2UudmlydHVhbC5zbGlkZXMubGVuZ3RoOmwubGVuZ3RoLHA9W10sYz1bXSx1PVtdLGg9dC5zbGlkZXNPZmZzZXRCZWZvcmU7XCJmdW5jdGlvblwiPT10eXBlb2YgaCYmKGg9dC5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChlKSk7dmFyIHY9dC5zbGlkZXNPZmZzZXRBZnRlcjtcImZ1bmN0aW9uXCI9PXR5cGVvZiB2JiYodj10LnNsaWRlc09mZnNldEFmdGVyLmNhbGwoZSkpO3ZhciBmPWUuc25hcEdyaWQubGVuZ3RoLG09ZS5zbmFwR3JpZC5sZW5ndGgsZz10LnNwYWNlQmV0d2VlbixiPS1oLHc9MCx5PTA7aWYodm9pZCAwIT09aSl7dmFyIHgsRTtcInN0cmluZ1wiPT10eXBlb2YgZyYmMDw9Zy5pbmRleE9mKFwiJVwiKSYmKGc9cGFyc2VGbG9hdChnLnJlcGxhY2UoXCIlXCIsXCJcIikpLzEwMCppKSxlLnZpcnR1YWxTaXplPS1nLHM/bC5jc3Moe21hcmdpbkxlZnQ6XCJcIixtYXJnaW5Ub3A6XCJcIn0pOmwuY3NzKHttYXJnaW5SaWdodDpcIlwiLG1hcmdpbkJvdHRvbTpcIlwifSksMTx0LnNsaWRlc1BlckNvbHVtbiYmKHg9TWF0aC5mbG9vcihkL3Quc2xpZGVzUGVyQ29sdW1uKT09PWQvZS5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uP2Q6TWF0aC5jZWlsKGQvdC5zbGlkZXNQZXJDb2x1bW4pKnQuc2xpZGVzUGVyQ29sdW1uLFwiYXV0b1wiIT09dC5zbGlkZXNQZXJWaWV3JiZcInJvd1wiPT09dC5zbGlkZXNQZXJDb2x1bW5GaWxsJiYoeD1NYXRoLm1heCh4LHQuc2xpZGVzUGVyVmlldyp0LnNsaWRlc1BlckNvbHVtbikpKTtmb3IodmFyIFQsUz10LnNsaWRlc1BlckNvbHVtbixDPXgvUyxNPUMtKHQuc2xpZGVzUGVyQ29sdW1uKkMtZCksej0wO3o8ZDt6Kz0xKXtFPTA7dmFyIGs9bC5lcSh6KTtpZigxPHQuc2xpZGVzUGVyQ29sdW1uKXt2YXIgUD12b2lkIDAsJD12b2lkIDAsTD12b2lkIDA7XCJjb2x1bW5cIj09PXQuc2xpZGVzUGVyQ29sdW1uRmlsbD8oTD16LSgkPU1hdGguZmxvb3Ioei9TKSkqUywoTTwkfHwkPT09TSYmTD09PVMtMSkmJlM8PShMKz0xKSYmKEw9MCwkKz0xKSxQPSQrTCp4L1Msay5jc3Moe1wiLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cFwiOlAsXCItbW96LWJveC1vcmRpbmFsLWdyb3VwXCI6UCxcIi1tcy1mbGV4LW9yZGVyXCI6UCxcIi13ZWJraXQtb3JkZXJcIjpQLG9yZGVyOlB9KSk6JD16LShMPU1hdGguZmxvb3Ioei9DKSkqQyxrLmNzcyhcIm1hcmdpbi1cIisoZS5pc0hvcml6b250YWwoKT9cInRvcFwiOlwibGVmdFwiKSwwIT09TCYmdC5zcGFjZUJldHdlZW4mJnQuc3BhY2VCZXR3ZWVuK1wicHhcIikuYXR0cihcImRhdGEtc3dpcGVyLWNvbHVtblwiLCQpLmF0dHIoXCJkYXRhLXN3aXBlci1yb3dcIixMKX1pZihcIm5vbmVcIiE9PWsuY3NzKFwiZGlzcGxheVwiKSl7aWYoXCJhdXRvXCI9PT10LnNsaWRlc1BlclZpZXcpe3ZhciBJPUIuZ2V0Q29tcHV0ZWRTdHlsZShrWzBdLG51bGwpLEQ9a1swXS5zdHlsZS50cmFuc2Zvcm0sTz1rWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybTtEJiYoa1swXS5zdHlsZS50cmFuc2Zvcm09XCJub25lXCIpLE8mJihrWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybT1cIm5vbmVcIiksRT1lLmlzSG9yaXpvbnRhbCgpP2tbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgrcGFyc2VGbG9hdChJLmdldFByb3BlcnR5VmFsdWUoXCJtYXJnaW4tbGVmdFwiKSkrcGFyc2VGbG9hdChJLmdldFByb3BlcnR5VmFsdWUoXCJtYXJnaW4tcmlnaHRcIikpOmtbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0K3BhcnNlRmxvYXQoSS5nZXRQcm9wZXJ0eVZhbHVlKFwibWFyZ2luLXRvcFwiKSkrcGFyc2VGbG9hdChJLmdldFByb3BlcnR5VmFsdWUoXCJtYXJnaW4tYm90dG9tXCIpKSxEJiYoa1swXS5zdHlsZS50cmFuc2Zvcm09RCksTyYmKGtbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtPU8pLHQucm91bmRMZW5ndGhzJiYoRT1NYXRoLmZsb29yKEUpKX1lbHNlIEU9KGktKHQuc2xpZGVzUGVyVmlldy0xKSpnKS90LnNsaWRlc1BlclZpZXcsdC5yb3VuZExlbmd0aHMmJihFPU1hdGguZmxvb3IoRSkpLGxbel0mJihlLmlzSG9yaXpvbnRhbCgpP2xbel0uc3R5bGUud2lkdGg9RStcInB4XCI6bFt6XS5zdHlsZS5oZWlnaHQ9RStcInB4XCIpO2xbel0mJihsW3pdLnN3aXBlclNsaWRlU2l6ZT1FKSx1LnB1c2goRSksdC5jZW50ZXJlZFNsaWRlcz8oYj1iK0UvMit3LzIrZywwPT09dyYmMCE9PXomJihiPWItaS8yLWcpLDA9PT16JiYoYj1iLWkvMi1nKSxNYXRoLmFicyhiKTwuMDAxJiYoYj0wKSx0LnJvdW5kTGVuZ3RocyYmKGI9TWF0aC5mbG9vcihiKSkseSV0LnNsaWRlc1Blckdyb3VwPT0wJiZwLnB1c2goYiksYy5wdXNoKGIpKToodC5yb3VuZExlbmd0aHMmJihiPU1hdGguZmxvb3IoYikpLHkldC5zbGlkZXNQZXJHcm91cD09MCYmcC5wdXNoKGIpLGMucHVzaChiKSxiPWIrRStnKSxlLnZpcnR1YWxTaXplKz1FK2csdz1FLHkrPTF9fWlmKGUudmlydHVhbFNpemU9TWF0aC5tYXgoZS52aXJ0dWFsU2l6ZSxpKSt2LHMmJnImJihcInNsaWRlXCI9PT10LmVmZmVjdHx8XCJjb3ZlcmZsb3dcIj09PXQuZWZmZWN0KSYmYS5jc3Moe3dpZHRoOmUudmlydHVhbFNpemUrdC5zcGFjZUJldHdlZW4rXCJweFwifSksWS5mbGV4Ym94JiYhdC5zZXRXcmFwcGVyU2l6ZXx8KGUuaXNIb3Jpem9udGFsKCk/YS5jc3Moe3dpZHRoOmUudmlydHVhbFNpemUrdC5zcGFjZUJldHdlZW4rXCJweFwifSk6YS5jc3Moe2hlaWdodDplLnZpcnR1YWxTaXplK3Quc3BhY2VCZXR3ZWVuK1wicHhcIn0pKSwxPHQuc2xpZGVzUGVyQ29sdW1uJiYoZS52aXJ0dWFsU2l6ZT0oRSt0LnNwYWNlQmV0d2VlbikqeCxlLnZpcnR1YWxTaXplPU1hdGguY2VpbChlLnZpcnR1YWxTaXplL3Quc2xpZGVzUGVyQ29sdW1uKS10LnNwYWNlQmV0d2VlbixlLmlzSG9yaXpvbnRhbCgpP2EuY3NzKHt3aWR0aDplLnZpcnR1YWxTaXplK3Quc3BhY2VCZXR3ZWVuK1wicHhcIn0pOmEuY3NzKHtoZWlnaHQ6ZS52aXJ0dWFsU2l6ZSt0LnNwYWNlQmV0d2VlbitcInB4XCJ9KSx0LmNlbnRlcmVkU2xpZGVzKSl7VD1bXTtmb3IodmFyIEE9MDtBPHAubGVuZ3RoO0ErPTEpe3ZhciBIPXBbQV07dC5yb3VuZExlbmd0aHMmJihIPU1hdGguZmxvb3IoSCkpLHBbQV08ZS52aXJ0dWFsU2l6ZStwWzBdJiZULnB1c2goSCl9cD1UfWlmKCF0LmNlbnRlcmVkU2xpZGVzKXtUPVtdO2Zvcih2YXIgRz0wO0c8cC5sZW5ndGg7Rys9MSl7dmFyIE49cFtHXTt0LnJvdW5kTGVuZ3RocyYmKE49TWF0aC5mbG9vcihOKSkscFtHXTw9ZS52aXJ0dWFsU2l6ZS1pJiZULnB1c2goTil9cD1ULDE8TWF0aC5mbG9vcihlLnZpcnR1YWxTaXplLWkpLU1hdGguZmxvb3IocFtwLmxlbmd0aC0xXSkmJnAucHVzaChlLnZpcnR1YWxTaXplLWkpfTA9PT1wLmxlbmd0aCYmKHA9WzBdKSwwIT09dC5zcGFjZUJldHdlZW4mJihlLmlzSG9yaXpvbnRhbCgpP3M/bC5jc3Moe21hcmdpbkxlZnQ6ZytcInB4XCJ9KTpsLmNzcyh7bWFyZ2luUmlnaHQ6ZytcInB4XCJ9KTpsLmNzcyh7bWFyZ2luQm90dG9tOmcrXCJweFwifSkpLFguZXh0ZW5kKGUse3NsaWRlczpsLHNuYXBHcmlkOnAsc2xpZGVzR3JpZDpjLHNsaWRlc1NpemVzR3JpZDp1fSksZCE9PW8mJmUuZW1pdChcInNsaWRlc0xlbmd0aENoYW5nZVwiKSxwLmxlbmd0aCE9PWYmJihlLnBhcmFtcy53YXRjaE92ZXJmbG93JiZlLmNoZWNrT3ZlcmZsb3coKSxlLmVtaXQoXCJzbmFwR3JpZExlbmd0aENoYW5nZVwiKSksYy5sZW5ndGghPT1tJiZlLmVtaXQoXCJzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlXCIpLCh0LndhdGNoU2xpZGVzUHJvZ3Jlc3N8fHQud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSYmZS51cGRhdGVTbGlkZXNPZmZzZXQoKX19LHVwZGF0ZUF1dG9IZWlnaHQ6ZnVuY3Rpb24oZSl7dmFyIHQsYT10aGlzLGk9W10scz0wO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlP2Euc2V0VHJhbnNpdGlvbihlKTohMD09PWUmJmEuc2V0VHJhbnNpdGlvbihhLnBhcmFtcy5zcGVlZCksXCJhdXRvXCIhPT1hLnBhcmFtcy5zbGlkZXNQZXJWaWV3JiYxPGEucGFyYW1zLnNsaWRlc1BlclZpZXcpZm9yKHQ9MDt0PE1hdGguY2VpbChhLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTt0Kz0xKXt2YXIgcj1hLmFjdGl2ZUluZGV4K3Q7aWYocj5hLnNsaWRlcy5sZW5ndGgpYnJlYWs7aS5wdXNoKGEuc2xpZGVzLmVxKHIpWzBdKX1lbHNlIGkucHVzaChhLnNsaWRlcy5lcShhLmFjdGl2ZUluZGV4KVswXSk7Zm9yKHQ9MDt0PGkubGVuZ3RoO3QrPTEpaWYodm9pZCAwIT09aVt0XSl7dmFyIG49aVt0XS5vZmZzZXRIZWlnaHQ7cz1zPG4/bjpzfXMmJmEuJHdyYXBwZXJFbC5jc3MoXCJoZWlnaHRcIixzK1wicHhcIil9LHVwZGF0ZVNsaWRlc09mZnNldDpmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLnNsaWRlcyx0PTA7dDxlLmxlbmd0aDt0Kz0xKWVbdF0uc3dpcGVyU2xpZGVPZmZzZXQ9dGhpcy5pc0hvcml6b250YWwoKT9lW3RdLm9mZnNldExlZnQ6ZVt0XS5vZmZzZXRUb3B9LHVwZGF0ZVNsaWRlc1Byb2dyZXNzOmZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPXRoaXMmJnRoaXMudHJhbnNsYXRlfHwwKTt2YXIgdD10aGlzLGE9dC5wYXJhbXMsaT10LnNsaWRlcyxzPXQucnRsVHJhbnNsYXRlO2lmKDAhPT1pLmxlbmd0aCl7dm9pZCAwPT09aVswXS5zd2lwZXJTbGlkZU9mZnNldCYmdC51cGRhdGVTbGlkZXNPZmZzZXQoKTt2YXIgcj0tZTtzJiYocj1lKSxpLnJlbW92ZUNsYXNzKGEuc2xpZGVWaXNpYmxlQ2xhc3MpO2Zvcih2YXIgbj0wO248aS5sZW5ndGg7bis9MSl7dmFyIG89aVtuXSxsPShyKyhhLmNlbnRlcmVkU2xpZGVzP3QubWluVHJhbnNsYXRlKCk6MCktby5zd2lwZXJTbGlkZU9mZnNldCkvKG8uc3dpcGVyU2xpZGVTaXplK2Euc3BhY2VCZXR3ZWVuKTtpZihhLndhdGNoU2xpZGVzVmlzaWJpbGl0eSl7dmFyIGQ9LShyLW8uc3dpcGVyU2xpZGVPZmZzZXQpLHA9ZCt0LnNsaWRlc1NpemVzR3JpZFtuXTsoMDw9ZCYmZDx0LnNpemV8fDA8cCYmcDw9dC5zaXplfHxkPD0wJiZwPj10LnNpemUpJiZpLmVxKG4pLmFkZENsYXNzKGEuc2xpZGVWaXNpYmxlQ2xhc3MpfW8ucHJvZ3Jlc3M9cz8tbDpsfX19LHVwZGF0ZVByb2dyZXNzOmZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPXRoaXMmJnRoaXMudHJhbnNsYXRlfHwwKTt2YXIgdD10aGlzLGE9dC5wYXJhbXMsaT10Lm1heFRyYW5zbGF0ZSgpLXQubWluVHJhbnNsYXRlKCkscz10LnByb2dyZXNzLHI9dC5pc0JlZ2lubmluZyxuPXQuaXNFbmQsbz1yLGw9bjswPT09aT9uPXI9IShzPTApOihyPShzPShlLXQubWluVHJhbnNsYXRlKCkpL2kpPD0wLG49MTw9cyksWC5leHRlbmQodCx7cHJvZ3Jlc3M6cyxpc0JlZ2lubmluZzpyLGlzRW5kOm59KSwoYS53YXRjaFNsaWRlc1Byb2dyZXNzfHxhLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkmJnQudXBkYXRlU2xpZGVzUHJvZ3Jlc3MoZSksciYmIW8mJnQuZW1pdChcInJlYWNoQmVnaW5uaW5nIHRvRWRnZVwiKSxuJiYhbCYmdC5lbWl0KFwicmVhY2hFbmQgdG9FZGdlXCIpLChvJiYhcnx8bCYmIW4pJiZ0LmVtaXQoXCJmcm9tRWRnZVwiKSx0LmVtaXQoXCJwcm9ncmVzc1wiLHMpfSx1cGRhdGVTbGlkZXNDbGFzc2VzOmZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLGE9dC5zbGlkZXMsaT10LnBhcmFtcyxzPXQuJHdyYXBwZXJFbCxyPXQuYWN0aXZlSW5kZXgsbj10LnJlYWxJbmRleCxvPXQudmlydHVhbCYmaS52aXJ0dWFsLmVuYWJsZWQ7YS5yZW1vdmVDbGFzcyhpLnNsaWRlQWN0aXZlQ2xhc3MrXCIgXCIraS5zbGlkZU5leHRDbGFzcytcIiBcIitpLnNsaWRlUHJldkNsYXNzK1wiIFwiK2kuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcytcIiBcIitpLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzK1wiIFwiK2kuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpLChlPW8/dC4kd3JhcHBlckVsLmZpbmQoXCIuXCIraS5zbGlkZUNsYXNzKydbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInK3IrJ1wiXScpOmEuZXEocikpLmFkZENsYXNzKGkuc2xpZGVBY3RpdmVDbGFzcyksaS5sb29wJiYoZS5oYXNDbGFzcyhpLnNsaWRlRHVwbGljYXRlQ2xhc3MpP3MuY2hpbGRyZW4oXCIuXCIraS5zbGlkZUNsYXNzK1wiOm5vdCguXCIraS5zbGlkZUR1cGxpY2F0ZUNsYXNzKycpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJytuKydcIl0nKS5hZGRDbGFzcyhpLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpOnMuY2hpbGRyZW4oXCIuXCIraS5zbGlkZUNsYXNzK1wiLlwiK2kuc2xpZGVEdXBsaWNhdGVDbGFzcysnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJytuKydcIl0nKS5hZGRDbGFzcyhpLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpKTt2YXIgbD1lLm5leHRBbGwoXCIuXCIraS5zbGlkZUNsYXNzKS5lcSgwKS5hZGRDbGFzcyhpLnNsaWRlTmV4dENsYXNzKTtpLmxvb3AmJjA9PT1sLmxlbmd0aCYmKGw9YS5lcSgwKSkuYWRkQ2xhc3MoaS5zbGlkZU5leHRDbGFzcyk7dmFyIGQ9ZS5wcmV2QWxsKFwiLlwiK2kuc2xpZGVDbGFzcykuZXEoMCkuYWRkQ2xhc3MoaS5zbGlkZVByZXZDbGFzcyk7aS5sb29wJiYwPT09ZC5sZW5ndGgmJihkPWEuZXEoLTEpKS5hZGRDbGFzcyhpLnNsaWRlUHJldkNsYXNzKSxpLmxvb3AmJihsLmhhc0NsYXNzKGkuc2xpZGVEdXBsaWNhdGVDbGFzcyk/cy5jaGlsZHJlbihcIi5cIitpLnNsaWRlQ2xhc3MrXCI6bm90KC5cIitpLnNsaWRlRHVwbGljYXRlQ2xhc3MrJylbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInK2wuYXR0cihcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpKydcIl0nKS5hZGRDbGFzcyhpLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTpzLmNoaWxkcmVuKFwiLlwiK2kuc2xpZGVDbGFzcytcIi5cIitpLnNsaWRlRHVwbGljYXRlQ2xhc3MrJ1tkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIicrbC5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIikrJ1wiXScpLmFkZENsYXNzKGkuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpLGQuaGFzQ2xhc3MoaS5zbGlkZUR1cGxpY2F0ZUNsYXNzKT9zLmNoaWxkcmVuKFwiLlwiK2kuc2xpZGVDbGFzcytcIjpub3QoLlwiK2kuc2xpZGVEdXBsaWNhdGVDbGFzcysnKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIicrZC5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIikrJ1wiXScpLmFkZENsYXNzKGkuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpOnMuY2hpbGRyZW4oXCIuXCIraS5zbGlkZUNsYXNzK1wiLlwiK2kuc2xpZGVEdXBsaWNhdGVDbGFzcysnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJytkLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSsnXCJdJykuYWRkQ2xhc3MoaS5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcykpfSx1cGRhdGVBY3RpdmVJbmRleDpmdW5jdGlvbihlKXt2YXIgdCxhPXRoaXMsaT1hLnJ0bFRyYW5zbGF0ZT9hLnRyYW5zbGF0ZTotYS50cmFuc2xhdGUscz1hLnNsaWRlc0dyaWQscj1hLnNuYXBHcmlkLG49YS5wYXJhbXMsbz1hLmFjdGl2ZUluZGV4LGw9YS5yZWFsSW5kZXgsZD1hLnNuYXBJbmRleCxwPWU7aWYodm9pZCAwPT09cCl7Zm9yKHZhciBjPTA7YzxzLmxlbmd0aDtjKz0xKXZvaWQgMCE9PXNbYysxXT9pPj1zW2NdJiZpPHNbYysxXS0oc1tjKzFdLXNbY10pLzI/cD1jOmk+PXNbY10mJmk8c1tjKzFdJiYocD1jKzEpOmk+PXNbY10mJihwPWMpO24ubm9ybWFsaXplU2xpZGVJbmRleCYmKHA8MHx8dm9pZCAwPT09cCkmJihwPTApfWlmKCh0PTA8PXIuaW5kZXhPZihpKT9yLmluZGV4T2YoaSk6TWF0aC5mbG9vcihwL24uc2xpZGVzUGVyR3JvdXApKT49ci5sZW5ndGgmJih0PXIubGVuZ3RoLTEpLHAhPT1vKXt2YXIgdT1wYXJzZUludChhLnNsaWRlcy5lcShwKS5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIil8fHAsMTApO1guZXh0ZW5kKGEse3NuYXBJbmRleDp0LHJlYWxJbmRleDp1LHByZXZpb3VzSW5kZXg6byxhY3RpdmVJbmRleDpwfSksYS5lbWl0KFwiYWN0aXZlSW5kZXhDaGFuZ2VcIiksYS5lbWl0KFwic25hcEluZGV4Q2hhbmdlXCIpLGwhPT11JiZhLmVtaXQoXCJyZWFsSW5kZXhDaGFuZ2VcIiksYS5lbWl0KFwic2xpZGVDaGFuZ2VcIil9ZWxzZSB0IT09ZCYmKGEuc25hcEluZGV4PXQsYS5lbWl0KFwic25hcEluZGV4Q2hhbmdlXCIpKX0sdXBkYXRlQ2xpY2tlZFNsaWRlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsYT10LnBhcmFtcyxpPUwoZS50YXJnZXQpLmNsb3Nlc3QoXCIuXCIrYS5zbGlkZUNsYXNzKVswXSxzPSExO2lmKGkpZm9yKHZhciByPTA7cjx0LnNsaWRlcy5sZW5ndGg7cis9MSl0LnNsaWRlc1tyXT09PWkmJihzPSEwKTtpZighaXx8IXMpcmV0dXJuIHQuY2xpY2tlZFNsaWRlPXZvaWQgMCx2b2lkKHQuY2xpY2tlZEluZGV4PXZvaWQgMCk7dC5jbGlja2VkU2xpZGU9aSx0LnZpcnR1YWwmJnQucGFyYW1zLnZpcnR1YWwuZW5hYmxlZD90LmNsaWNrZWRJbmRleD1wYXJzZUludChMKGkpLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSwxMCk6dC5jbGlja2VkSW5kZXg9TChpKS5pbmRleCgpLGEuc2xpZGVUb0NsaWNrZWRTbGlkZSYmdm9pZCAwIT09dC5jbGlja2VkSW5kZXgmJnQuY2xpY2tlZEluZGV4IT09dC5hY3RpdmVJbmRleCYmdC5zbGlkZVRvQ2xpY2tlZFNsaWRlKCl9fTt2YXIgZD17Z2V0VHJhbnNsYXRlOmZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPXRoaXMuaXNIb3Jpem9udGFsKCk/XCJ4XCI6XCJ5XCIpO3ZhciB0PXRoaXMucGFyYW1zLGE9dGhpcy5ydGxUcmFuc2xhdGUsaT10aGlzLnRyYW5zbGF0ZSxzPXRoaXMuJHdyYXBwZXJFbDtpZih0LnZpcnR1YWxUcmFuc2xhdGUpcmV0dXJuIGE/LWk6aTt2YXIgcj1YLmdldFRyYW5zbGF0ZShzWzBdLGUpO3JldHVybiBhJiYocj0tcikscnx8MH0sc2V0VHJhbnNsYXRlOmZ1bmN0aW9uKGUsdCl7dmFyIGE9dGhpcyxpPWEucnRsVHJhbnNsYXRlLHM9YS5wYXJhbXMscj1hLiR3cmFwcGVyRWwsbj1hLnByb2dyZXNzLG89MCxsPTA7YS5pc0hvcml6b250YWwoKT9vPWk/LWU6ZTpsPWUscy5yb3VuZExlbmd0aHMmJihvPU1hdGguZmxvb3IobyksbD1NYXRoLmZsb29yKGwpKSxzLnZpcnR1YWxUcmFuc2xhdGV8fChZLnRyYW5zZm9ybXMzZD9yLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiK28rXCJweCwgXCIrbCtcInB4LCAwcHgpXCIpOnIudHJhbnNmb3JtKFwidHJhbnNsYXRlKFwiK28rXCJweCwgXCIrbCtcInB4KVwiKSksYS5wcmV2aW91c1RyYW5zbGF0ZT1hLnRyYW5zbGF0ZSxhLnRyYW5zbGF0ZT1hLmlzSG9yaXpvbnRhbCgpP286bDt2YXIgZD1hLm1heFRyYW5zbGF0ZSgpLWEubWluVHJhbnNsYXRlKCk7KDA9PT1kPzA6KGUtYS5taW5UcmFuc2xhdGUoKSkvZCkhPT1uJiZhLnVwZGF0ZVByb2dyZXNzKGUpLGEuZW1pdChcInNldFRyYW5zbGF0ZVwiLGEudHJhbnNsYXRlLHQpfSxtaW5UcmFuc2xhdGU6ZnVuY3Rpb24oKXtyZXR1cm4tdGhpcy5zbmFwR3JpZFswXX0sbWF4VHJhbnNsYXRlOmZ1bmN0aW9uKCl7cmV0dXJuLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGgtMV19fTt2YXIgcD17c2V0VHJhbnNpdGlvbjpmdW5jdGlvbihlLHQpe3RoaXMuJHdyYXBwZXJFbC50cmFuc2l0aW9uKGUpLHRoaXMuZW1pdChcInNldFRyYW5zaXRpb25cIixlLHQpfSx0cmFuc2l0aW9uU3RhcnQ6ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT1lJiYoZT0hMCk7dmFyIGE9dGhpcyxpPWEuYWN0aXZlSW5kZXgscz1hLnBhcmFtcyxyPWEucHJldmlvdXNJbmRleDtzLmF1dG9IZWlnaHQmJmEudXBkYXRlQXV0b0hlaWdodCgpO3ZhciBuPXQ7aWYobnx8KG49cjxpP1wibmV4dFwiOmk8cj9cInByZXZcIjpcInJlc2V0XCIpLGEuZW1pdChcInRyYW5zaXRpb25TdGFydFwiKSxlJiZpIT09cil7aWYoXCJyZXNldFwiPT09bilyZXR1cm4gdm9pZCBhLmVtaXQoXCJzbGlkZVJlc2V0VHJhbnNpdGlvblN0YXJ0XCIpO2EuZW1pdChcInNsaWRlQ2hhbmdlVHJhbnNpdGlvblN0YXJ0XCIpLFwibmV4dFwiPT09bj9hLmVtaXQoXCJzbGlkZU5leHRUcmFuc2l0aW9uU3RhcnRcIik6YS5lbWl0KFwic2xpZGVQcmV2VHJhbnNpdGlvblN0YXJ0XCIpfX0sdHJhbnNpdGlvbkVuZDpmdW5jdGlvbihlLHQpe3ZvaWQgMD09PWUmJihlPSEwKTt2YXIgYT10aGlzLGk9YS5hY3RpdmVJbmRleCxzPWEucHJldmlvdXNJbmRleDthLmFuaW1hdGluZz0hMSxhLnNldFRyYW5zaXRpb24oMCk7dmFyIHI9dDtpZihyfHwocj1zPGk/XCJuZXh0XCI6aTxzP1wicHJldlwiOlwicmVzZXRcIiksYS5lbWl0KFwidHJhbnNpdGlvbkVuZFwiKSxlJiZpIT09cyl7aWYoXCJyZXNldFwiPT09cilyZXR1cm4gdm9pZCBhLmVtaXQoXCJzbGlkZVJlc2V0VHJhbnNpdGlvbkVuZFwiKTthLmVtaXQoXCJzbGlkZUNoYW5nZVRyYW5zaXRpb25FbmRcIiksXCJuZXh0XCI9PT1yP2EuZW1pdChcInNsaWRlTmV4dFRyYW5zaXRpb25FbmRcIik6YS5lbWl0KFwic2xpZGVQcmV2VHJhbnNpdGlvbkVuZFwiKX19fTt2YXIgYz17c2xpZGVUbzpmdW5jdGlvbihlLHQsYSxpKXt2b2lkIDA9PT1lJiYoZT0wKSx2b2lkIDA9PT10JiYodD10aGlzLnBhcmFtcy5zcGVlZCksdm9pZCAwPT09YSYmKGE9ITApO3ZhciBzPXRoaXMscj1lO3I8MCYmKHI9MCk7dmFyIG49cy5wYXJhbXMsbz1zLnNuYXBHcmlkLGw9cy5zbGlkZXNHcmlkLGQ9cy5wcmV2aW91c0luZGV4LHA9cy5hY3RpdmVJbmRleCxjPXMucnRsVHJhbnNsYXRlO2lmKHMuYW5pbWF0aW5nJiZuLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbilyZXR1cm4hMTt2YXIgdT1NYXRoLmZsb29yKHIvbi5zbGlkZXNQZXJHcm91cCk7dT49by5sZW5ndGgmJih1PW8ubGVuZ3RoLTEpLChwfHxuLmluaXRpYWxTbGlkZXx8MCk9PT0oZHx8MCkmJmEmJnMuZW1pdChcImJlZm9yZVNsaWRlQ2hhbmdlU3RhcnRcIik7dmFyIGgsdj0tb1t1XTtpZihzLnVwZGF0ZVByb2dyZXNzKHYpLG4ubm9ybWFsaXplU2xpZGVJbmRleClmb3IodmFyIGY9MDtmPGwubGVuZ3RoO2YrPTEpLU1hdGguZmxvb3IoMTAwKnYpPj1NYXRoLmZsb29yKDEwMCpsW2ZdKSYmKHI9Zik7aWYocy5pbml0aWFsaXplZCYmciE9PXApe2lmKCFzLmFsbG93U2xpZGVOZXh0JiZ2PHMudHJhbnNsYXRlJiZ2PHMubWluVHJhbnNsYXRlKCkpcmV0dXJuITE7aWYoIXMuYWxsb3dTbGlkZVByZXYmJnY+cy50cmFuc2xhdGUmJnY+cy5tYXhUcmFuc2xhdGUoKSYmKHB8fDApIT09cilyZXR1cm4hMX1yZXR1cm4gaD1wPHI/XCJuZXh0XCI6cjxwP1wicHJldlwiOlwicmVzZXRcIixjJiYtdj09PXMudHJhbnNsYXRlfHwhYyYmdj09PXMudHJhbnNsYXRlPyhzLnVwZGF0ZUFjdGl2ZUluZGV4KHIpLG4uYXV0b0hlaWdodCYmcy51cGRhdGVBdXRvSGVpZ2h0KCkscy51cGRhdGVTbGlkZXNDbGFzc2VzKCksXCJzbGlkZVwiIT09bi5lZmZlY3QmJnMuc2V0VHJhbnNsYXRlKHYpLFwicmVzZXRcIiE9PWgmJihzLnRyYW5zaXRpb25TdGFydChhLGgpLHMudHJhbnNpdGlvbkVuZChhLGgpKSwhMSk6KDAhPT10JiZZLnRyYW5zaXRpb24/KHMuc2V0VHJhbnNpdGlvbih0KSxzLnNldFRyYW5zbGF0ZSh2KSxzLnVwZGF0ZUFjdGl2ZUluZGV4KHIpLHMudXBkYXRlU2xpZGVzQ2xhc3NlcygpLHMuZW1pdChcImJlZm9yZVRyYW5zaXRpb25TdGFydFwiLHQsaSkscy50cmFuc2l0aW9uU3RhcnQoYSxoKSxzLmFuaW1hdGluZ3x8KHMuYW5pbWF0aW5nPSEwLHMub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmR8fChzLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kPWZ1bmN0aW9uKGUpe3MmJiFzLmRlc3Ryb3llZCYmZS50YXJnZXQ9PT10aGlzJiYocy4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIscy5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkscy4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIscy5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkscy5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZD1udWxsLGRlbGV0ZSBzLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kLHMudHJhbnNpdGlvbkVuZChhLGgpKX0pLHMuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLHMub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpLHMuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0VHJhbnNpdGlvbkVuZFwiLHMub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpKSk6KHMuc2V0VHJhbnNpdGlvbigwKSxzLnNldFRyYW5zbGF0ZSh2KSxzLnVwZGF0ZUFjdGl2ZUluZGV4KHIpLHMudXBkYXRlU2xpZGVzQ2xhc3NlcygpLHMuZW1pdChcImJlZm9yZVRyYW5zaXRpb25TdGFydFwiLHQsaSkscy50cmFuc2l0aW9uU3RhcnQoYSxoKSxzLnRyYW5zaXRpb25FbmQoYSxoKSksITApfSxzbGlkZVRvTG9vcDpmdW5jdGlvbihlLHQsYSxpKXt2b2lkIDA9PT1lJiYoZT0wKSx2b2lkIDA9PT10JiYodD10aGlzLnBhcmFtcy5zcGVlZCksdm9pZCAwPT09YSYmKGE9ITApO3ZhciBzPWU7cmV0dXJuIHRoaXMucGFyYW1zLmxvb3AmJihzKz10aGlzLmxvb3BlZFNsaWRlcyksdGhpcy5zbGlkZVRvKHMsdCxhLGkpfSxzbGlkZU5leHQ6ZnVuY3Rpb24oZSx0LGEpe3ZvaWQgMD09PWUmJihlPXRoaXMucGFyYW1zLnNwZWVkKSx2b2lkIDA9PT10JiYodD0hMCk7dmFyIGk9dGhpcyxzPWkucGFyYW1zLHI9aS5hbmltYXRpbmc7cmV0dXJuIHMubG9vcD8hciYmKGkubG9vcEZpeCgpLGkuX2NsaWVudExlZnQ9aS4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQsaS5zbGlkZVRvKGkuYWN0aXZlSW5kZXgrcy5zbGlkZXNQZXJHcm91cCxlLHQsYSkpOmkuc2xpZGVUbyhpLmFjdGl2ZUluZGV4K3Muc2xpZGVzUGVyR3JvdXAsZSx0LGEpfSxzbGlkZVByZXY6ZnVuY3Rpb24oZSx0LGEpe3ZvaWQgMD09PWUmJihlPXRoaXMucGFyYW1zLnNwZWVkKSx2b2lkIDA9PT10JiYodD0hMCk7dmFyIGk9dGhpcyxzPWkucGFyYW1zLHI9aS5hbmltYXRpbmcsbj1pLnNuYXBHcmlkLG89aS5zbGlkZXNHcmlkLGw9aS5ydGxUcmFuc2xhdGU7aWYocy5sb29wKXtpZihyKXJldHVybiExO2kubG9vcEZpeCgpLGkuX2NsaWVudExlZnQ9aS4kd3JhcHBlckVsWzBdLmNsaWVudExlZnR9ZnVuY3Rpb24gZChlKXtyZXR1cm4gZTwwPy1NYXRoLmZsb29yKE1hdGguYWJzKGUpKTpNYXRoLmZsb29yKGUpfXZhciBwLGM9ZChsP2kudHJhbnNsYXRlOi1pLnRyYW5zbGF0ZSksdT1uLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZChlKX0pLGg9KG8ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBkKGUpfSksblt1LmluZGV4T2YoYyldLG5bdS5pbmRleE9mKGMpLTFdKTtyZXR1cm4gdm9pZCAwIT09aCYmKHA9by5pbmRleE9mKGgpKTwwJiYocD1pLmFjdGl2ZUluZGV4LTEpLGkuc2xpZGVUbyhwLGUsdCxhKX0sc2xpZGVSZXNldDpmdW5jdGlvbihlLHQsYSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPXRoaXMucGFyYW1zLnNwZWVkKSx2b2lkIDA9PT10JiYodD0hMCksdGhpcy5zbGlkZVRvKHRoaXMuYWN0aXZlSW5kZXgsZSx0LGEpfSxzbGlkZVRvQ2xvc2VzdDpmdW5jdGlvbihlLHQsYSl7dm9pZCAwPT09ZSYmKGU9dGhpcy5wYXJhbXMuc3BlZWQpLHZvaWQgMD09PXQmJih0PSEwKTt2YXIgaT10aGlzLHM9aS5hY3RpdmVJbmRleCxyPU1hdGguZmxvb3Iocy9pLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7aWYocjxpLnNuYXBHcmlkLmxlbmd0aC0xKXt2YXIgbj1pLnJ0bFRyYW5zbGF0ZT9pLnRyYW5zbGF0ZTotaS50cmFuc2xhdGUsbz1pLnNuYXBHcmlkW3JdOyhpLnNuYXBHcmlkW3IrMV0tbykvMjxuLW8mJihzPWkucGFyYW1zLnNsaWRlc1Blckdyb3VwKX1yZXR1cm4gaS5zbGlkZVRvKHMsZSx0LGEpfSxzbGlkZVRvQ2xpY2tlZFNsaWRlOmZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLGE9dC5wYXJhbXMsaT10LiR3cmFwcGVyRWwscz1cImF1dG9cIj09PWEuc2xpZGVzUGVyVmlldz90LnNsaWRlc1BlclZpZXdEeW5hbWljKCk6YS5zbGlkZXNQZXJWaWV3LHI9dC5jbGlja2VkSW5kZXg7aWYoYS5sb29wKXtpZih0LmFuaW1hdGluZylyZXR1cm47ZT1wYXJzZUludChMKHQuY2xpY2tlZFNsaWRlKS5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIiksMTApLGEuY2VudGVyZWRTbGlkZXM/cjx0Lmxvb3BlZFNsaWRlcy1zLzJ8fHI+dC5zbGlkZXMubGVuZ3RoLXQubG9vcGVkU2xpZGVzK3MvMj8odC5sb29wRml4KCkscj1pLmNoaWxkcmVuKFwiLlwiK2Euc2xpZGVDbGFzcysnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJytlKydcIl06bm90KC4nK2Euc2xpZGVEdXBsaWNhdGVDbGFzcytcIilcIikuZXEoMCkuaW5kZXgoKSxYLm5leHRUaWNrKGZ1bmN0aW9uKCl7dC5zbGlkZVRvKHIpfSkpOnQuc2xpZGVUbyhyKTpyPnQuc2xpZGVzLmxlbmd0aC1zPyh0Lmxvb3BGaXgoKSxyPWkuY2hpbGRyZW4oXCIuXCIrYS5zbGlkZUNsYXNzKydbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInK2UrJ1wiXTpub3QoLicrYS5zbGlkZUR1cGxpY2F0ZUNsYXNzK1wiKVwiKS5lcSgwKS5pbmRleCgpLFgubmV4dFRpY2soZnVuY3Rpb24oKXt0LnNsaWRlVG8ocil9KSk6dC5zbGlkZVRvKHIpfWVsc2UgdC5zbGlkZVRvKHIpfX07dmFyIHU9e2xvb3BDcmVhdGU6ZnVuY3Rpb24oKXt2YXIgaT10aGlzLGU9aS5wYXJhbXMsdD1pLiR3cmFwcGVyRWw7dC5jaGlsZHJlbihcIi5cIitlLnNsaWRlQ2xhc3MrXCIuXCIrZS5zbGlkZUR1cGxpY2F0ZUNsYXNzKS5yZW1vdmUoKTt2YXIgcz10LmNoaWxkcmVuKFwiLlwiK2Uuc2xpZGVDbGFzcyk7aWYoZS5sb29wRmlsbEdyb3VwV2l0aEJsYW5rKXt2YXIgYT1lLnNsaWRlc1Blckdyb3VwLXMubGVuZ3RoJWUuc2xpZGVzUGVyR3JvdXA7aWYoYSE9PWUuc2xpZGVzUGVyR3JvdXApe2Zvcih2YXIgcj0wO3I8YTtyKz0xKXt2YXIgbj1MKGYuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuYWRkQ2xhc3MoZS5zbGlkZUNsYXNzK1wiIFwiK2Uuc2xpZGVCbGFua0NsYXNzKTt0LmFwcGVuZChuKX1zPXQuY2hpbGRyZW4oXCIuXCIrZS5zbGlkZUNsYXNzKX19XCJhdXRvXCIhPT1lLnNsaWRlc1BlclZpZXd8fGUubG9vcGVkU2xpZGVzfHwoZS5sb29wZWRTbGlkZXM9cy5sZW5ndGgpLGkubG9vcGVkU2xpZGVzPXBhcnNlSW50KGUubG9vcGVkU2xpZGVzfHxlLnNsaWRlc1BlclZpZXcsMTApLGkubG9vcGVkU2xpZGVzKz1lLmxvb3BBZGRpdGlvbmFsU2xpZGVzLGkubG9vcGVkU2xpZGVzPnMubGVuZ3RoJiYoaS5sb29wZWRTbGlkZXM9cy5sZW5ndGgpO3ZhciBvPVtdLGw9W107cy5lYWNoKGZ1bmN0aW9uKGUsdCl7dmFyIGE9TCh0KTtlPGkubG9vcGVkU2xpZGVzJiZsLnB1c2godCksZTxzLmxlbmd0aCYmZT49cy5sZW5ndGgtaS5sb29wZWRTbGlkZXMmJm8ucHVzaCh0KSxhLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiLGUpfSk7Zm9yKHZhciBkPTA7ZDxsLmxlbmd0aDtkKz0xKXQuYXBwZW5kKEwobFtkXS5jbG9uZU5vZGUoITApKS5hZGRDbGFzcyhlLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtmb3IodmFyIHA9by5sZW5ndGgtMTswPD1wO3AtPTEpdC5wcmVwZW5kKEwob1twXS5jbG9uZU5vZGUoITApKS5hZGRDbGFzcyhlLnNsaWRlRHVwbGljYXRlQ2xhc3MpKX0sbG9vcEZpeDpmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcyxhPXQucGFyYW1zLGk9dC5hY3RpdmVJbmRleCxzPXQuc2xpZGVzLHI9dC5sb29wZWRTbGlkZXMsbj10LmFsbG93U2xpZGVQcmV2LG89dC5hbGxvd1NsaWRlTmV4dCxsPXQuc25hcEdyaWQsZD10LnJ0bFRyYW5zbGF0ZTt0LmFsbG93U2xpZGVQcmV2PSEwLHQuYWxsb3dTbGlkZU5leHQ9ITA7dmFyIHA9LWxbaV0tdC5nZXRUcmFuc2xhdGUoKTtpPHI/KGU9cy5sZW5ndGgtMypyK2ksZSs9cix0LnNsaWRlVG8oZSwwLCExLCEwKSYmMCE9PXAmJnQuc2V0VHJhbnNsYXRlKChkPy10LnRyYW5zbGF0ZTp0LnRyYW5zbGF0ZSktcCkpOihcImF1dG9cIj09PWEuc2xpZGVzUGVyVmlldyYmMipyPD1pfHxpPj1zLmxlbmd0aC1yKSYmKGU9LXMubGVuZ3RoK2krcixlKz1yLHQuc2xpZGVUbyhlLDAsITEsITApJiYwIT09cCYmdC5zZXRUcmFuc2xhdGUoKGQ/LXQudHJhbnNsYXRlOnQudHJhbnNsYXRlKS1wKSk7dC5hbGxvd1NsaWRlUHJldj1uLHQuYWxsb3dTbGlkZU5leHQ9b30sbG9vcERlc3Ryb3k6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiR3cmFwcGVyRWwsdD10aGlzLnBhcmFtcyxhPXRoaXMuc2xpZGVzO2UuY2hpbGRyZW4oXCIuXCIrdC5zbGlkZUNsYXNzK1wiLlwiK3Quc2xpZGVEdXBsaWNhdGVDbGFzcykucmVtb3ZlKCksYS5yZW1vdmVBdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIil9fTt2YXIgaD17c2V0R3JhYkN1cnNvcjpmdW5jdGlvbihlKXtpZighKFkudG91Y2h8fCF0aGlzLnBhcmFtcy5zaW11bGF0ZVRvdWNofHx0aGlzLnBhcmFtcy53YXRjaE92ZXJmbG93JiZ0aGlzLmlzTG9ja2VkKSl7dmFyIHQ9dGhpcy5lbDt0LnN0eWxlLmN1cnNvcj1cIm1vdmVcIix0LnN0eWxlLmN1cnNvcj1lP1wiLXdlYmtpdC1ncmFiYmluZ1wiOlwiLXdlYmtpdC1ncmFiXCIsdC5zdHlsZS5jdXJzb3I9ZT9cIi1tb3otZ3JhYmJpblwiOlwiLW1vei1ncmFiXCIsdC5zdHlsZS5jdXJzb3I9ZT9cImdyYWJiaW5nXCI6XCJncmFiXCJ9fSx1bnNldEdyYWJDdXJzb3I6ZnVuY3Rpb24oKXtZLnRvdWNofHx0aGlzLnBhcmFtcy53YXRjaE92ZXJmbG93JiZ0aGlzLmlzTG9ja2VkfHwodGhpcy5lbC5zdHlsZS5jdXJzb3I9XCJcIil9fTt2YXIgdj17YXBwZW5kU2xpZGU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxhPXQuJHdyYXBwZXJFbCxpPXQucGFyYW1zO2lmKGkubG9vcCYmdC5sb29wRGVzdHJveSgpLFwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImxlbmd0aFwiaW4gZSlmb3IodmFyIHM9MDtzPGUubGVuZ3RoO3MrPTEpZVtzXSYmYS5hcHBlbmQoZVtzXSk7ZWxzZSBhLmFwcGVuZChlKTtpLmxvb3AmJnQubG9vcENyZWF0ZSgpLGkub2JzZXJ2ZXImJlkub2JzZXJ2ZXJ8fHQudXBkYXRlKCl9LHByZXBlbmRTbGlkZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLGE9dC5wYXJhbXMsaT10LiR3cmFwcGVyRWwscz10LmFjdGl2ZUluZGV4O2EubG9vcCYmdC5sb29wRGVzdHJveSgpO3ZhciByPXMrMTtpZihcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJsZW5ndGhcImluIGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bis9MSllW25dJiZpLnByZXBlbmQoZVtuXSk7cj1zK2UubGVuZ3RofWVsc2UgaS5wcmVwZW5kKGUpO2EubG9vcCYmdC5sb29wQ3JlYXRlKCksYS5vYnNlcnZlciYmWS5vYnNlcnZlcnx8dC51cGRhdGUoKSx0LnNsaWRlVG8ociwwLCExKX0sYWRkU2xpZGU6ZnVuY3Rpb24oZSx0KXt2YXIgYT10aGlzLGk9YS4kd3JhcHBlckVsLHM9YS5wYXJhbXMscj1hLmFjdGl2ZUluZGV4O3MubG9vcCYmKHItPWEubG9vcGVkU2xpZGVzLGEubG9vcERlc3Ryb3koKSxhLnNsaWRlcz1pLmNoaWxkcmVuKFwiLlwiK3Muc2xpZGVDbGFzcykpO3ZhciBuPWEuc2xpZGVzLmxlbmd0aDtpZihlPD0wKWEucHJlcGVuZFNsaWRlKHQpO2Vsc2UgaWYobjw9ZSlhLmFwcGVuZFNsaWRlKHQpO2Vsc2V7Zm9yKHZhciBvPWU8cj9yKzE6cixsPVtdLGQ9bi0xO2U8PWQ7ZC09MSl7dmFyIHA9YS5zbGlkZXMuZXEoZCk7cC5yZW1vdmUoKSxsLnVuc2hpZnQocCl9aWYoXCJvYmplY3RcIj09dHlwZW9mIHQmJlwibGVuZ3RoXCJpbiB0KXtmb3IodmFyIGM9MDtjPHQubGVuZ3RoO2MrPTEpdFtjXSYmaS5hcHBlbmQodFtjXSk7bz1lPHI/cit0Lmxlbmd0aDpyfWVsc2UgaS5hcHBlbmQodCk7Zm9yKHZhciB1PTA7dTxsLmxlbmd0aDt1Kz0xKWkuYXBwZW5kKGxbdV0pO3MubG9vcCYmYS5sb29wQ3JlYXRlKCkscy5vYnNlcnZlciYmWS5vYnNlcnZlcnx8YS51cGRhdGUoKSxzLmxvb3A/YS5zbGlkZVRvKG8rYS5sb29wZWRTbGlkZXMsMCwhMSk6YS5zbGlkZVRvKG8sMCwhMSl9fSxyZW1vdmVTbGlkZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLGE9dC5wYXJhbXMsaT10LiR3cmFwcGVyRWwscz10LmFjdGl2ZUluZGV4O2EubG9vcCYmKHMtPXQubG9vcGVkU2xpZGVzLHQubG9vcERlc3Ryb3koKSx0LnNsaWRlcz1pLmNoaWxkcmVuKFwiLlwiK2Euc2xpZGVDbGFzcykpO3ZhciByLG49cztpZihcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJsZW5ndGhcImluIGUpe2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bys9MSlyPWVbb10sdC5zbGlkZXNbcl0mJnQuc2xpZGVzLmVxKHIpLnJlbW92ZSgpLHI8biYmKG4tPTEpO249TWF0aC5tYXgobiwwKX1lbHNlIHI9ZSx0LnNsaWRlc1tyXSYmdC5zbGlkZXMuZXEocikucmVtb3ZlKCkscjxuJiYobi09MSksbj1NYXRoLm1heChuLDApO2EubG9vcCYmdC5sb29wQ3JlYXRlKCksYS5vYnNlcnZlciYmWS5vYnNlcnZlcnx8dC51cGRhdGUoKSxhLmxvb3A/dC5zbGlkZVRvKG4rdC5sb29wZWRTbGlkZXMsMCwhMSk6dC5zbGlkZVRvKG4sMCwhMSl9LHJlbW92ZUFsbFNsaWRlczpmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDx0aGlzLnNsaWRlcy5sZW5ndGg7dCs9MSllLnB1c2godCk7dGhpcy5yZW1vdmVTbGlkZShlKX19LG09ZnVuY3Rpb24oKXt2YXIgZT1CLm5hdmlnYXRvci51c2VyQWdlbnQsdD17aW9zOiExLGFuZHJvaWQ6ITEsYW5kcm9pZENocm9tZTohMSxkZXNrdG9wOiExLHdpbmRvd3M6ITEsaXBob25lOiExLGlwb2Q6ITEsaXBhZDohMSxjb3Jkb3ZhOkIuY29yZG92YXx8Qi5waG9uZWdhcCxwaG9uZWdhcDpCLmNvcmRvdmF8fEIucGhvbmVnYXB9LGE9ZS5tYXRjaCgvKFdpbmRvd3MgUGhvbmUpOz9bXFxzXFwvXSsoW1xcZC5dKyk/LyksaT1lLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKSxzPWUubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKSxyPWUubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKSxuPSFzJiZlLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO2lmKGEmJih0Lm9zPVwid2luZG93c1wiLHQub3NWZXJzaW9uPWFbMl0sdC53aW5kb3dzPSEwKSxpJiYhYSYmKHQub3M9XCJhbmRyb2lkXCIsdC5vc1ZlcnNpb249aVsyXSx0LmFuZHJvaWQ9ITAsdC5hbmRyb2lkQ2hyb21lPTA8PWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiY2hyb21lXCIpKSwoc3x8bnx8cikmJih0Lm9zPVwiaW9zXCIsdC5pb3M9ITApLG4mJiFyJiYodC5vc1ZlcnNpb249blsyXS5yZXBsYWNlKC9fL2csXCIuXCIpLHQuaXBob25lPSEwKSxzJiYodC5vc1ZlcnNpb249c1syXS5yZXBsYWNlKC9fL2csXCIuXCIpLHQuaXBhZD0hMCksciYmKHQub3NWZXJzaW9uPXJbM10/clszXS5yZXBsYWNlKC9fL2csXCIuXCIpOm51bGwsdC5pcGhvbmU9ITApLHQuaW9zJiZ0Lm9zVmVyc2lvbiYmMDw9ZS5pbmRleE9mKFwiVmVyc2lvbi9cIikmJlwiMTBcIj09PXQub3NWZXJzaW9uLnNwbGl0KFwiLlwiKVswXSYmKHQub3NWZXJzaW9uPWUudG9Mb3dlckNhc2UoKS5zcGxpdChcInZlcnNpb24vXCIpWzFdLnNwbGl0KFwiIFwiKVswXSksdC5kZXNrdG9wPSEodC5vc3x8dC5hbmRyb2lkfHx0LndlYlZpZXcpLHQud2ViVmlldz0obnx8c3x8cikmJmUubWF0Y2goLy4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaSksdC5vcyYmXCJpb3NcIj09PXQub3Mpe3ZhciBvPXQub3NWZXJzaW9uLnNwbGl0KFwiLlwiKSxsPWYucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwidmlld3BvcnRcIl0nKTt0Lm1pbmltYWxVaT0hdC53ZWJWaWV3JiYocnx8bikmJigxKm9bMF09PTc/MTw9MSpvWzFdOjc8MSpvWzBdKSYmbCYmMDw9bC5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpLmluZGV4T2YoXCJtaW5pbWFsLXVpXCIpfXJldHVybiB0LnBpeGVsUmF0aW89Qi5kZXZpY2VQaXhlbFJhdGlvfHwxLHR9KCk7ZnVuY3Rpb24gZygpe3ZhciBlPXRoaXMsdD1lLnBhcmFtcyxhPWUuZWw7aWYoIWF8fDAhPT1hLm9mZnNldFdpZHRoKXt0LmJyZWFrcG9pbnRzJiZlLnNldEJyZWFrcG9pbnQoKTt2YXIgaT1lLmFsbG93U2xpZGVOZXh0LHM9ZS5hbGxvd1NsaWRlUHJldixyPWUuc25hcEdyaWQ7aWYoZS5hbGxvd1NsaWRlTmV4dD0hMCxlLmFsbG93U2xpZGVQcmV2PSEwLGUudXBkYXRlU2l6ZSgpLGUudXBkYXRlU2xpZGVzKCksdC5mcmVlTW9kZSl7dmFyIG49TWF0aC5taW4oTWF0aC5tYXgoZS50cmFuc2xhdGUsZS5tYXhUcmFuc2xhdGUoKSksZS5taW5UcmFuc2xhdGUoKSk7ZS5zZXRUcmFuc2xhdGUobiksZS51cGRhdGVBY3RpdmVJbmRleCgpLGUudXBkYXRlU2xpZGVzQ2xhc3NlcygpLHQuYXV0b0hlaWdodCYmZS51cGRhdGVBdXRvSGVpZ2h0KCl9ZWxzZSBlLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwoXCJhdXRvXCI9PT10LnNsaWRlc1BlclZpZXd8fDE8dC5zbGlkZXNQZXJWaWV3KSYmZS5pc0VuZCYmIWUucGFyYW1zLmNlbnRlcmVkU2xpZGVzP2Uuc2xpZGVUbyhlLnNsaWRlcy5sZW5ndGgtMSwwLCExLCEwKTplLnNsaWRlVG8oZS5hY3RpdmVJbmRleCwwLCExLCEwKTtlLmFsbG93U2xpZGVQcmV2PXMsZS5hbGxvd1NsaWRlTmV4dD1pLGUucGFyYW1zLndhdGNoT3ZlcmZsb3cmJnIhPT1lLnNuYXBHcmlkJiZlLmNoZWNrT3ZlcmZsb3coKX19dmFyIGI9e2F0dGFjaEV2ZW50czpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLnBhcmFtcyxhPWUudG91Y2hFdmVudHMsaT1lLmVsLHM9ZS53cmFwcGVyRWw7ZS5vblRvdWNoU3RhcnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxhPXQudG91Y2hFdmVudHNEYXRhLGk9dC5wYXJhbXMscz10LnRvdWNoZXM7aWYoIXQuYW5pbWF0aW5nfHwhaS5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pe3ZhciByPWU7aWYoci5vcmlnaW5hbEV2ZW50JiYocj1yLm9yaWdpbmFsRXZlbnQpLGEuaXNUb3VjaEV2ZW50PVwidG91Y2hzdGFydFwiPT09ci50eXBlLChhLmlzVG91Y2hFdmVudHx8IShcIndoaWNoXCJpbiByKXx8MyE9PXIud2hpY2gpJiYoIWEuaXNUb3VjaGVkfHwhYS5pc01vdmVkKSlpZihpLm5vU3dpcGluZyYmTChyLnRhcmdldCkuY2xvc2VzdChpLm5vU3dpcGluZ1NlbGVjdG9yP2kubm9Td2lwaW5nU2VsZWN0b3I6XCIuXCIraS5ub1N3aXBpbmdDbGFzcylbMF0pdC5hbGxvd0NsaWNrPSEwO2Vsc2UgaWYoIWkuc3dpcGVIYW5kbGVyfHxMKHIpLmNsb3Nlc3QoaS5zd2lwZUhhbmRsZXIpWzBdKXtzLmN1cnJlbnRYPVwidG91Y2hzdGFydFwiPT09ci50eXBlP3IudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDpyLnBhZ2VYLHMuY3VycmVudFk9XCJ0b3VjaHN0YXJ0XCI9PT1yLnR5cGU/ci50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZOnIucGFnZVk7dmFyIG49cy5jdXJyZW50WCxvPXMuY3VycmVudFksbD1pLmVkZ2VTd2lwZURldGVjdGlvbnx8aS5pT1NFZGdlU3dpcGVEZXRlY3Rpb24sZD1pLmVkZ2VTd2lwZVRocmVzaG9sZHx8aS5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7aWYoIWx8fCEobjw9ZHx8bj49Qi5zY3JlZW4ud2lkdGgtZCkpe2lmKFguZXh0ZW5kKGEse2lzVG91Y2hlZDohMCxpc01vdmVkOiExLGFsbG93VG91Y2hDYWxsYmFja3M6ITAsaXNTY3JvbGxpbmc6dm9pZCAwLHN0YXJ0TW92aW5nOnZvaWQgMH0pLHMuc3RhcnRYPW4scy5zdGFydFk9byxhLnRvdWNoU3RhcnRUaW1lPVgubm93KCksdC5hbGxvd0NsaWNrPSEwLHQudXBkYXRlU2l6ZSgpLHQuc3dpcGVEaXJlY3Rpb249dm9pZCAwLDA8aS50aHJlc2hvbGQmJihhLmFsbG93VGhyZXNob2xkTW92ZT0hMSksXCJ0b3VjaHN0YXJ0XCIhPT1yLnR5cGUpe3ZhciBwPSEwO0woci50YXJnZXQpLmlzKGEuZm9ybUVsZW1lbnRzKSYmKHA9ITEpLGYuYWN0aXZlRWxlbWVudCYmTChmLmFjdGl2ZUVsZW1lbnQpLmlzKGEuZm9ybUVsZW1lbnRzKSYmZi5hY3RpdmVFbGVtZW50IT09ci50YXJnZXQmJmYuYWN0aXZlRWxlbWVudC5ibHVyKCkscCYmdC5hbGxvd1RvdWNoTW92ZSYmci5wcmV2ZW50RGVmYXVsdCgpfXQuZW1pdChcInRvdWNoU3RhcnRcIixyKX19fX0uYmluZChlKSxlLm9uVG91Y2hNb3ZlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsYT10LnRvdWNoRXZlbnRzRGF0YSxpPXQucGFyYW1zLHM9dC50b3VjaGVzLHI9dC5ydGxUcmFuc2xhdGUsbj1lO2lmKG4ub3JpZ2luYWxFdmVudCYmKG49bi5vcmlnaW5hbEV2ZW50KSxhLmlzVG91Y2hlZCl7aWYoIWEuaXNUb3VjaEV2ZW50fHxcIm1vdXNlbW92ZVwiIT09bi50eXBlKXt2YXIgbz1cInRvdWNobW92ZVwiPT09bi50eXBlP24udGFyZ2V0VG91Y2hlc1swXS5wYWdlWDpuLnBhZ2VYLGw9XCJ0b3VjaG1vdmVcIj09PW4udHlwZT9uLnRhcmdldFRvdWNoZXNbMF0ucGFnZVk6bi5wYWdlWTtpZihuLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKXJldHVybiBzLnN0YXJ0WD1vLHZvaWQocy5zdGFydFk9bCk7aWYoIXQuYWxsb3dUb3VjaE1vdmUpcmV0dXJuIHQuYWxsb3dDbGljaz0hMSx2b2lkKGEuaXNUb3VjaGVkJiYoWC5leHRlbmQocyx7c3RhcnRYOm8sc3RhcnRZOmwsY3VycmVudFg6byxjdXJyZW50WTpsfSksYS50b3VjaFN0YXJ0VGltZT1YLm5vdygpKSk7aWYoYS5pc1RvdWNoRXZlbnQmJmkudG91Y2hSZWxlYXNlT25FZGdlcyYmIWkubG9vcClpZih0LmlzVmVydGljYWwoKSl7aWYobDxzLnN0YXJ0WSYmdC50cmFuc2xhdGU8PXQubWF4VHJhbnNsYXRlKCl8fGw+cy5zdGFydFkmJnQudHJhbnNsYXRlPj10Lm1pblRyYW5zbGF0ZSgpKXJldHVybiBhLmlzVG91Y2hlZD0hMSx2b2lkKGEuaXNNb3ZlZD0hMSl9ZWxzZSBpZihvPHMuc3RhcnRYJiZ0LnRyYW5zbGF0ZTw9dC5tYXhUcmFuc2xhdGUoKXx8bz5zLnN0YXJ0WCYmdC50cmFuc2xhdGU+PXQubWluVHJhbnNsYXRlKCkpcmV0dXJuO2lmKGEuaXNUb3VjaEV2ZW50JiZmLmFjdGl2ZUVsZW1lbnQmJm4udGFyZ2V0PT09Zi5hY3RpdmVFbGVtZW50JiZMKG4udGFyZ2V0KS5pcyhhLmZvcm1FbGVtZW50cykpcmV0dXJuIGEuaXNNb3ZlZD0hMCx2b2lkKHQuYWxsb3dDbGljaz0hMSk7aWYoYS5hbGxvd1RvdWNoQ2FsbGJhY2tzJiZ0LmVtaXQoXCJ0b3VjaE1vdmVcIixuKSwhKG4udGFyZ2V0VG91Y2hlcyYmMTxuLnRhcmdldFRvdWNoZXMubGVuZ3RoKSl7cy5jdXJyZW50WD1vLHMuY3VycmVudFk9bDt2YXIgZCxwPXMuY3VycmVudFgtcy5zdGFydFgsYz1zLmN1cnJlbnRZLXMuc3RhcnRZO2lmKCEodC5wYXJhbXMudGhyZXNob2xkJiZNYXRoLnNxcnQoTWF0aC5wb3cocCwyKStNYXRoLnBvdyhjLDIpKTx0LnBhcmFtcy50aHJlc2hvbGQpKWlmKHZvaWQgMD09PWEuaXNTY3JvbGxpbmcmJih0LmlzSG9yaXpvbnRhbCgpJiZzLmN1cnJlbnRZPT09cy5zdGFydFl8fHQuaXNWZXJ0aWNhbCgpJiZzLmN1cnJlbnRYPT09cy5zdGFydFg/YS5pc1Njcm9sbGluZz0hMToyNTw9cCpwK2MqYyYmKGQ9MTgwKk1hdGguYXRhbjIoTWF0aC5hYnMoYyksTWF0aC5hYnMocCkpL01hdGguUEksYS5pc1Njcm9sbGluZz10LmlzSG9yaXpvbnRhbCgpP2Q+aS50b3VjaEFuZ2xlOjkwLWQ+aS50b3VjaEFuZ2xlKSksYS5pc1Njcm9sbGluZyYmdC5lbWl0KFwidG91Y2hNb3ZlT3Bwb3NpdGVcIixuKSx2b2lkIDA9PT1hLnN0YXJ0TW92aW5nJiYocy5jdXJyZW50WD09PXMuc3RhcnRYJiZzLmN1cnJlbnRZPT09cy5zdGFydFl8fChhLnN0YXJ0TW92aW5nPSEwKSksYS5pc1Njcm9sbGluZylhLmlzVG91Y2hlZD0hMTtlbHNlIGlmKGEuc3RhcnRNb3Zpbmcpe3QuYWxsb3dDbGljaz0hMSxuLnByZXZlbnREZWZhdWx0KCksaS50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24mJiFpLm5lc3RlZCYmbi5zdG9wUHJvcGFnYXRpb24oKSxhLmlzTW92ZWR8fChpLmxvb3AmJnQubG9vcEZpeCgpLGEuc3RhcnRUcmFuc2xhdGU9dC5nZXRUcmFuc2xhdGUoKSx0LnNldFRyYW5zaXRpb24oMCksdC5hbmltYXRpbmcmJnQuJHdyYXBwZXJFbC50cmlnZ2VyKFwid2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kXCIpLGEuYWxsb3dNb21lbnR1bUJvdW5jZT0hMSwhaS5ncmFiQ3Vyc29yfHwhMCE9PXQuYWxsb3dTbGlkZU5leHQmJiEwIT09dC5hbGxvd1NsaWRlUHJldnx8dC5zZXRHcmFiQ3Vyc29yKCEwKSx0LmVtaXQoXCJzbGlkZXJGaXJzdE1vdmVcIixuKSksdC5lbWl0KFwic2xpZGVyTW92ZVwiLG4pLGEuaXNNb3ZlZD0hMDt2YXIgdT10LmlzSG9yaXpvbnRhbCgpP3A6YztzLmRpZmY9dSx1Kj1pLnRvdWNoUmF0aW8sciYmKHU9LXUpLHQuc3dpcGVEaXJlY3Rpb249MDx1P1wicHJldlwiOlwibmV4dFwiLGEuY3VycmVudFRyYW5zbGF0ZT11K2Euc3RhcnRUcmFuc2xhdGU7dmFyIGg9ITAsdj1pLnJlc2lzdGFuY2VSYXRpbztpZihpLnRvdWNoUmVsZWFzZU9uRWRnZXMmJih2PTApLDA8dSYmYS5jdXJyZW50VHJhbnNsYXRlPnQubWluVHJhbnNsYXRlKCk/KGg9ITEsaS5yZXNpc3RhbmNlJiYoYS5jdXJyZW50VHJhbnNsYXRlPXQubWluVHJhbnNsYXRlKCktMStNYXRoLnBvdygtdC5taW5UcmFuc2xhdGUoKSthLnN0YXJ0VHJhbnNsYXRlK3UsdikpKTp1PDAmJmEuY3VycmVudFRyYW5zbGF0ZTx0Lm1heFRyYW5zbGF0ZSgpJiYoaD0hMSxpLnJlc2lzdGFuY2UmJihhLmN1cnJlbnRUcmFuc2xhdGU9dC5tYXhUcmFuc2xhdGUoKSsxLU1hdGgucG93KHQubWF4VHJhbnNsYXRlKCktYS5zdGFydFRyYW5zbGF0ZS11LHYpKSksaCYmKG4ucHJldmVudGVkQnlOZXN0ZWRTd2lwZXI9ITApLCF0LmFsbG93U2xpZGVOZXh0JiZcIm5leHRcIj09PXQuc3dpcGVEaXJlY3Rpb24mJmEuY3VycmVudFRyYW5zbGF0ZTxhLnN0YXJ0VHJhbnNsYXRlJiYoYS5jdXJyZW50VHJhbnNsYXRlPWEuc3RhcnRUcmFuc2xhdGUpLCF0LmFsbG93U2xpZGVQcmV2JiZcInByZXZcIj09PXQuc3dpcGVEaXJlY3Rpb24mJmEuY3VycmVudFRyYW5zbGF0ZT5hLnN0YXJ0VHJhbnNsYXRlJiYoYS5jdXJyZW50VHJhbnNsYXRlPWEuc3RhcnRUcmFuc2xhdGUpLDA8aS50aHJlc2hvbGQpe2lmKCEoTWF0aC5hYnModSk+aS50aHJlc2hvbGR8fGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSlyZXR1cm4gdm9pZChhLmN1cnJlbnRUcmFuc2xhdGU9YS5zdGFydFRyYW5zbGF0ZSk7aWYoIWEuYWxsb3dUaHJlc2hvbGRNb3ZlKXJldHVybiBhLmFsbG93VGhyZXNob2xkTW92ZT0hMCxzLnN0YXJ0WD1zLmN1cnJlbnRYLHMuc3RhcnRZPXMuY3VycmVudFksYS5jdXJyZW50VHJhbnNsYXRlPWEuc3RhcnRUcmFuc2xhdGUsdm9pZChzLmRpZmY9dC5pc0hvcml6b250YWwoKT9zLmN1cnJlbnRYLXMuc3RhcnRYOnMuY3VycmVudFktcy5zdGFydFkpfWkuZm9sbG93RmluZ2VyJiYoKGkuZnJlZU1vZGV8fGkud2F0Y2hTbGlkZXNQcm9ncmVzc3x8aS53YXRjaFNsaWRlc1Zpc2liaWxpdHkpJiYodC51cGRhdGVBY3RpdmVJbmRleCgpLHQudXBkYXRlU2xpZGVzQ2xhc3NlcygpKSxpLmZyZWVNb2RlJiYoMD09PWEudmVsb2NpdGllcy5sZW5ndGgmJmEudmVsb2NpdGllcy5wdXNoKHtwb3NpdGlvbjpzW3QuaXNIb3Jpem9udGFsKCk/XCJzdGFydFhcIjpcInN0YXJ0WVwiXSx0aW1lOmEudG91Y2hTdGFydFRpbWV9KSxhLnZlbG9jaXRpZXMucHVzaCh7cG9zaXRpb246c1t0LmlzSG9yaXpvbnRhbCgpP1wiY3VycmVudFhcIjpcImN1cnJlbnRZXCJdLHRpbWU6WC5ub3coKX0pKSx0LnVwZGF0ZVByb2dyZXNzKGEuY3VycmVudFRyYW5zbGF0ZSksdC5zZXRUcmFuc2xhdGUoYS5jdXJyZW50VHJhbnNsYXRlKSl9fX19ZWxzZSBhLnN0YXJ0TW92aW5nJiZhLmlzU2Nyb2xsaW5nJiZ0LmVtaXQoXCJ0b3VjaE1vdmVPcHBvc2l0ZVwiLG4pfS5iaW5kKGUpLGUub25Ub3VjaEVuZD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLGE9dC50b3VjaEV2ZW50c0RhdGEsaT10LnBhcmFtcyxzPXQudG91Y2hlcyxyPXQucnRsVHJhbnNsYXRlLG49dC4kd3JhcHBlckVsLG89dC5zbGlkZXNHcmlkLGw9dC5zbmFwR3JpZCxkPWU7aWYoZC5vcmlnaW5hbEV2ZW50JiYoZD1kLm9yaWdpbmFsRXZlbnQpLGEuYWxsb3dUb3VjaENhbGxiYWNrcyYmdC5lbWl0KFwidG91Y2hFbmRcIixkKSxhLmFsbG93VG91Y2hDYWxsYmFja3M9ITEsIWEuaXNUb3VjaGVkKXJldHVybiBhLmlzTW92ZWQmJmkuZ3JhYkN1cnNvciYmdC5zZXRHcmFiQ3Vyc29yKCExKSxhLmlzTW92ZWQ9ITEsdm9pZChhLnN0YXJ0TW92aW5nPSExKTtpLmdyYWJDdXJzb3ImJmEuaXNNb3ZlZCYmYS5pc1RvdWNoZWQmJighMD09PXQuYWxsb3dTbGlkZU5leHR8fCEwPT09dC5hbGxvd1NsaWRlUHJldikmJnQuc2V0R3JhYkN1cnNvcighMSk7dmFyIHAsYz1YLm5vdygpLHU9Yy1hLnRvdWNoU3RhcnRUaW1lO2lmKHQuYWxsb3dDbGljayYmKHQudXBkYXRlQ2xpY2tlZFNsaWRlKGQpLHQuZW1pdChcInRhcFwiLGQpLHU8MzAwJiYzMDA8Yy1hLmxhc3RDbGlja1RpbWUmJihhLmNsaWNrVGltZW91dCYmY2xlYXJUaW1lb3V0KGEuY2xpY2tUaW1lb3V0KSxhLmNsaWNrVGltZW91dD1YLm5leHRUaWNrKGZ1bmN0aW9uKCl7dCYmIXQuZGVzdHJveWVkJiZ0LmVtaXQoXCJjbGlja1wiLGQpfSwzMDApKSx1PDMwMCYmYy1hLmxhc3RDbGlja1RpbWU8MzAwJiYoYS5jbGlja1RpbWVvdXQmJmNsZWFyVGltZW91dChhLmNsaWNrVGltZW91dCksdC5lbWl0KFwiZG91YmxlVGFwXCIsZCkpKSxhLmxhc3RDbGlja1RpbWU9WC5ub3coKSxYLm5leHRUaWNrKGZ1bmN0aW9uKCl7dC5kZXN0cm95ZWR8fCh0LmFsbG93Q2xpY2s9ITApfSksIWEuaXNUb3VjaGVkfHwhYS5pc01vdmVkfHwhdC5zd2lwZURpcmVjdGlvbnx8MD09PXMuZGlmZnx8YS5jdXJyZW50VHJhbnNsYXRlPT09YS5zdGFydFRyYW5zbGF0ZSlyZXR1cm4gYS5pc1RvdWNoZWQ9ITEsYS5pc01vdmVkPSExLHZvaWQoYS5zdGFydE1vdmluZz0hMSk7aWYoYS5pc1RvdWNoZWQ9ITEsYS5pc01vdmVkPSExLGEuc3RhcnRNb3Zpbmc9ITEscD1pLmZvbGxvd0Zpbmdlcj9yP3QudHJhbnNsYXRlOi10LnRyYW5zbGF0ZTotYS5jdXJyZW50VHJhbnNsYXRlLGkuZnJlZU1vZGUpe2lmKHA8LXQubWluVHJhbnNsYXRlKCkpcmV0dXJuIHZvaWQgdC5zbGlkZVRvKHQuYWN0aXZlSW5kZXgpO2lmKHA+LXQubWF4VHJhbnNsYXRlKCkpcmV0dXJuIHZvaWQodC5zbGlkZXMubGVuZ3RoPGwubGVuZ3RoP3Quc2xpZGVUbyhsLmxlbmd0aC0xKTp0LnNsaWRlVG8odC5zbGlkZXMubGVuZ3RoLTEpKTtpZihpLmZyZWVNb2RlTW9tZW50dW0pe2lmKDE8YS52ZWxvY2l0aWVzLmxlbmd0aCl7dmFyIGg9YS52ZWxvY2l0aWVzLnBvcCgpLHY9YS52ZWxvY2l0aWVzLnBvcCgpLGY9aC5wb3NpdGlvbi12LnBvc2l0aW9uLG09aC50aW1lLXYudGltZTt0LnZlbG9jaXR5PWYvbSx0LnZlbG9jaXR5Lz0yLE1hdGguYWJzKHQudmVsb2NpdHkpPGkuZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkmJih0LnZlbG9jaXR5PTApLCgxNTA8bXx8MzAwPFgubm93KCktaC50aW1lKSYmKHQudmVsb2NpdHk9MCl9ZWxzZSB0LnZlbG9jaXR5PTA7dC52ZWxvY2l0eSo9aS5mcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbyxhLnZlbG9jaXRpZXMubGVuZ3RoPTA7dmFyIGc9MWUzKmkuZnJlZU1vZGVNb21lbnR1bVJhdGlvLGI9dC52ZWxvY2l0eSpnLHc9dC50cmFuc2xhdGUrYjtyJiYodz0tdyk7dmFyIHkseCxFPSExLFQ9MjAqTWF0aC5hYnModC52ZWxvY2l0eSkqaS5mcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW87aWYodzx0Lm1heFRyYW5zbGF0ZSgpKWkuZnJlZU1vZGVNb21lbnR1bUJvdW5jZT8odyt0Lm1heFRyYW5zbGF0ZSgpPC1UJiYodz10Lm1heFRyYW5zbGF0ZSgpLVQpLHk9dC5tYXhUcmFuc2xhdGUoKSxFPSEwLGEuYWxsb3dNb21lbnR1bUJvdW5jZT0hMCk6dz10Lm1heFRyYW5zbGF0ZSgpLGkubG9vcCYmaS5jZW50ZXJlZFNsaWRlcyYmKHg9ITApO2Vsc2UgaWYodz50Lm1pblRyYW5zbGF0ZSgpKWkuZnJlZU1vZGVNb21lbnR1bUJvdW5jZT8ody10Lm1pblRyYW5zbGF0ZSgpPlQmJih3PXQubWluVHJhbnNsYXRlKCkrVCkseT10Lm1pblRyYW5zbGF0ZSgpLEU9ITAsYS5hbGxvd01vbWVudHVtQm91bmNlPSEwKTp3PXQubWluVHJhbnNsYXRlKCksaS5sb29wJiZpLmNlbnRlcmVkU2xpZGVzJiYoeD0hMCk7ZWxzZSBpZihpLmZyZWVNb2RlU3RpY2t5KXtmb3IodmFyIFMsQz0wO0M8bC5sZW5ndGg7Qys9MSlpZihsW0NdPi13KXtTPUM7YnJlYWt9dz0tKHc9TWF0aC5hYnMobFtTXS13KTxNYXRoLmFicyhsW1MtMV0tdyl8fFwibmV4dFwiPT09dC5zd2lwZURpcmVjdGlvbj9sW1NdOmxbUy0xXSl9aWYoeCYmdC5vbmNlKFwidHJhbnNpdGlvbkVuZFwiLGZ1bmN0aW9uKCl7dC5sb29wRml4KCl9KSwwIT09dC52ZWxvY2l0eSlnPXI/TWF0aC5hYnMoKC13LXQudHJhbnNsYXRlKS90LnZlbG9jaXR5KTpNYXRoLmFicygody10LnRyYW5zbGF0ZSkvdC52ZWxvY2l0eSk7ZWxzZSBpZihpLmZyZWVNb2RlU3RpY2t5KXJldHVybiB2b2lkIHQuc2xpZGVUb0Nsb3Nlc3QoKTtpLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UmJkU/KHQudXBkYXRlUHJvZ3Jlc3MoeSksdC5zZXRUcmFuc2l0aW9uKGcpLHQuc2V0VHJhbnNsYXRlKHcpLHQudHJhbnNpdGlvblN0YXJ0KCEwLHQuc3dpcGVEaXJlY3Rpb24pLHQuYW5pbWF0aW5nPSEwLG4udHJhbnNpdGlvbkVuZChmdW5jdGlvbigpe3QmJiF0LmRlc3Ryb3llZCYmYS5hbGxvd01vbWVudHVtQm91bmNlJiYodC5lbWl0KFwibW9tZW50dW1Cb3VuY2VcIiksdC5zZXRUcmFuc2l0aW9uKGkuc3BlZWQpLHQuc2V0VHJhbnNsYXRlKHkpLG4udHJhbnNpdGlvbkVuZChmdW5jdGlvbigpe3QmJiF0LmRlc3Ryb3llZCYmdC50cmFuc2l0aW9uRW5kKCl9KSl9KSk6dC52ZWxvY2l0eT8odC51cGRhdGVQcm9ncmVzcyh3KSx0LnNldFRyYW5zaXRpb24oZyksdC5zZXRUcmFuc2xhdGUodyksdC50cmFuc2l0aW9uU3RhcnQoITAsdC5zd2lwZURpcmVjdGlvbiksdC5hbmltYXRpbmd8fCh0LmFuaW1hdGluZz0hMCxuLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24oKXt0JiYhdC5kZXN0cm95ZWQmJnQudHJhbnNpdGlvbkVuZCgpfSkpKTp0LnVwZGF0ZVByb2dyZXNzKHcpLHQudXBkYXRlQWN0aXZlSW5kZXgoKSx0LnVwZGF0ZVNsaWRlc0NsYXNzZXMoKX1lbHNlIGlmKGkuZnJlZU1vZGVTdGlja3kpcmV0dXJuIHZvaWQgdC5zbGlkZVRvQ2xvc2VzdCgpOyghaS5mcmVlTW9kZU1vbWVudHVtfHx1Pj1pLmxvbmdTd2lwZXNNcykmJih0LnVwZGF0ZVByb2dyZXNzKCksdC51cGRhdGVBY3RpdmVJbmRleCgpLHQudXBkYXRlU2xpZGVzQ2xhc3NlcygpKX1lbHNle2Zvcih2YXIgTT0wLHo9dC5zbGlkZXNTaXplc0dyaWRbMF0saz0wO2s8by5sZW5ndGg7ays9aS5zbGlkZXNQZXJHcm91cCl2b2lkIDAhPT1vW2sraS5zbGlkZXNQZXJHcm91cF0/cD49b1trXSYmcDxvW2sraS5zbGlkZXNQZXJHcm91cF0mJih6PW9bKE09aykraS5zbGlkZXNQZXJHcm91cF0tb1trXSk6cD49b1trXSYmKE09ayx6PW9bby5sZW5ndGgtMV0tb1tvLmxlbmd0aC0yXSk7dmFyIFA9KHAtb1tNXSkvejtpZih1PmkubG9uZ1N3aXBlc01zKXtpZighaS5sb25nU3dpcGVzKXJldHVybiB2b2lkIHQuc2xpZGVUbyh0LmFjdGl2ZUluZGV4KTtcIm5leHRcIj09PXQuc3dpcGVEaXJlY3Rpb24mJihQPj1pLmxvbmdTd2lwZXNSYXRpbz90LnNsaWRlVG8oTStpLnNsaWRlc1Blckdyb3VwKTp0LnNsaWRlVG8oTSkpLFwicHJldlwiPT09dC5zd2lwZURpcmVjdGlvbiYmKFA+MS1pLmxvbmdTd2lwZXNSYXRpbz90LnNsaWRlVG8oTStpLnNsaWRlc1Blckdyb3VwKTp0LnNsaWRlVG8oTSkpfWVsc2V7aWYoIWkuc2hvcnRTd2lwZXMpcmV0dXJuIHZvaWQgdC5zbGlkZVRvKHQuYWN0aXZlSW5kZXgpO1wibmV4dFwiPT09dC5zd2lwZURpcmVjdGlvbiYmdC5zbGlkZVRvKE0raS5zbGlkZXNQZXJHcm91cCksXCJwcmV2XCI9PT10LnN3aXBlRGlyZWN0aW9uJiZ0LnNsaWRlVG8oTSl9fX0uYmluZChlKSxlLm9uQ2xpY2s9ZnVuY3Rpb24oZSl7dGhpcy5hbGxvd0NsaWNrfHwodGhpcy5wYXJhbXMucHJldmVudENsaWNrcyYmZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiYmdGhpcy5hbmltYXRpbmcmJihlLnN0b3BQcm9wYWdhdGlvbigpLGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpKX0uYmluZChlKTt2YXIgcj1cImNvbnRhaW5lclwiPT09dC50b3VjaEV2ZW50c1RhcmdldD9pOnMsbj0hIXQubmVzdGVkO2lmKFkudG91Y2h8fCFZLnBvaW50ZXJFdmVudHMmJiFZLnByZWZpeGVkUG9pbnRlckV2ZW50cyl7aWYoWS50b3VjaCl7dmFyIG89IShcInRvdWNoc3RhcnRcIiE9PWEuc3RhcnR8fCFZLnBhc3NpdmVMaXN0ZW5lcnx8IXQucGFzc2l2ZUxpc3RlbmVycykmJntwYXNzaXZlOiEwLGNhcHR1cmU6ITF9O3IuYWRkRXZlbnRMaXN0ZW5lcihhLnN0YXJ0LGUub25Ub3VjaFN0YXJ0LG8pLHIuYWRkRXZlbnRMaXN0ZW5lcihhLm1vdmUsZS5vblRvdWNoTW92ZSxZLnBhc3NpdmVMaXN0ZW5lcj97cGFzc2l2ZTohMSxjYXB0dXJlOm59Om4pLHIuYWRkRXZlbnRMaXN0ZW5lcihhLmVuZCxlLm9uVG91Y2hFbmQsbyl9KHQuc2ltdWxhdGVUb3VjaCYmIW0uaW9zJiYhbS5hbmRyb2lkfHx0LnNpbXVsYXRlVG91Y2gmJiFZLnRvdWNoJiZtLmlvcykmJihyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixlLm9uVG91Y2hTdGFydCwhMSksZi5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsZS5vblRvdWNoTW92ZSxuKSxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsZS5vblRvdWNoRW5kLCExKSl9ZWxzZSByLmFkZEV2ZW50TGlzdGVuZXIoYS5zdGFydCxlLm9uVG91Y2hTdGFydCwhMSksZi5hZGRFdmVudExpc3RlbmVyKGEubW92ZSxlLm9uVG91Y2hNb3ZlLG4pLGYuYWRkRXZlbnRMaXN0ZW5lcihhLmVuZCxlLm9uVG91Y2hFbmQsITEpOyh0LnByZXZlbnRDbGlja3N8fHQucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSYmci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixlLm9uQ2xpY2ssITApLGUub24obS5pb3N8fG0uYW5kcm9pZD9cInJlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZVwiOlwicmVzaXplIG9ic2VydmVyVXBkYXRlXCIsZywhMCl9LGRldGFjaEV2ZW50czpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLnBhcmFtcyxhPWUudG91Y2hFdmVudHMsaT1lLmVsLHM9ZS53cmFwcGVyRWwscj1cImNvbnRhaW5lclwiPT09dC50b3VjaEV2ZW50c1RhcmdldD9pOnMsbj0hIXQubmVzdGVkO2lmKFkudG91Y2h8fCFZLnBvaW50ZXJFdmVudHMmJiFZLnByZWZpeGVkUG9pbnRlckV2ZW50cyl7aWYoWS50b3VjaCl7dmFyIG89IShcIm9uVG91Y2hTdGFydFwiIT09YS5zdGFydHx8IVkucGFzc2l2ZUxpc3RlbmVyfHwhdC5wYXNzaXZlTGlzdGVuZXJzKSYme3Bhc3NpdmU6ITAsY2FwdHVyZTohMX07ci5yZW1vdmVFdmVudExpc3RlbmVyKGEuc3RhcnQsZS5vblRvdWNoU3RhcnQsbyksci5yZW1vdmVFdmVudExpc3RlbmVyKGEubW92ZSxlLm9uVG91Y2hNb3ZlLG4pLHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLmVuZCxlLm9uVG91Y2hFbmQsbyl9KHQuc2ltdWxhdGVUb3VjaCYmIW0uaW9zJiYhbS5hbmRyb2lkfHx0LnNpbXVsYXRlVG91Y2gmJiFZLnRvdWNoJiZtLmlvcykmJihyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixlLm9uVG91Y2hTdGFydCwhMSksZi5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsZS5vblRvdWNoTW92ZSxuKSxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsZS5vblRvdWNoRW5kLCExKSl9ZWxzZSByLnJlbW92ZUV2ZW50TGlzdGVuZXIoYS5zdGFydCxlLm9uVG91Y2hTdGFydCwhMSksZi5yZW1vdmVFdmVudExpc3RlbmVyKGEubW92ZSxlLm9uVG91Y2hNb3ZlLG4pLGYucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLmVuZCxlLm9uVG91Y2hFbmQsITEpOyh0LnByZXZlbnRDbGlja3N8fHQucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSYmci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIixlLm9uQ2xpY2ssITApLGUub2ZmKG0uaW9zfHxtLmFuZHJvaWQ/XCJyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGVcIjpcInJlc2l6ZSBvYnNlcnZlclVwZGF0ZVwiLGcpfX07dmFyIHcseT17c2V0QnJlYWtwb2ludDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLmFjdGl2ZUluZGV4LGE9ZS5pbml0aWFsaXplZCxpPWUubG9vcGVkU2xpZGVzO3ZvaWQgMD09PWkmJihpPTApO3ZhciBzPWUucGFyYW1zLHI9cy5icmVha3BvaW50cztpZihyJiYoIXJ8fDAhPT1PYmplY3Qua2V5cyhyKS5sZW5ndGgpKXt2YXIgbj1lLmdldEJyZWFrcG9pbnQocik7aWYobiYmZS5jdXJyZW50QnJlYWtwb2ludCE9PW4pe3ZhciBvPW4gaW4gcj9yW25dOmUub3JpZ2luYWxQYXJhbXMsbD1zLmxvb3AmJm8uc2xpZGVzUGVyVmlldyE9PXMuc2xpZGVzUGVyVmlldztYLmV4dGVuZChlLnBhcmFtcyxvKSxYLmV4dGVuZChlLHthbGxvd1RvdWNoTW92ZTplLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxhbGxvd1NsaWRlTmV4dDplLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxhbGxvd1NsaWRlUHJldjplLnBhcmFtcy5hbGxvd1NsaWRlUHJldn0pLGUuY3VycmVudEJyZWFrcG9pbnQ9bixsJiZhJiYoZS5sb29wRGVzdHJveSgpLGUubG9vcENyZWF0ZSgpLGUudXBkYXRlU2xpZGVzKCksZS5zbGlkZVRvKHQtaStlLmxvb3BlZFNsaWRlcywwLCExKSksZS5lbWl0KFwiYnJlYWtwb2ludFwiLG8pfX19LGdldEJyZWFrcG9pbnQ6ZnVuY3Rpb24oZSl7aWYoZSl7dmFyIHQ9ITEsYT1bXTtPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2EucHVzaChlKX0pLGEuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiBwYXJzZUludChlLDEwKS1wYXJzZUludCh0LDEwKX0pO2Zvcih2YXIgaT0wO2k8YS5sZW5ndGg7aSs9MSl7dmFyIHM9YVtpXTtzPj1CLmlubmVyV2lkdGgmJiF0JiYodD1zKX1yZXR1cm4gdHx8XCJtYXhcIn19fSxJPXtpc0lFOiEhQi5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9UcmlkZW50L2cpfHwhIUIubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvTVNJRS9nKSxpc1NhZmFyaToodz1CLm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSwwPD13LmluZGV4T2YoXCJzYWZhcmlcIikmJncuaW5kZXhPZihcImNocm9tZVwiKTwwJiZ3LmluZGV4T2YoXCJhbmRyb2lkXCIpPDApLGlzVWlXZWJWaWV3Oi8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdChCLm5hdmlnYXRvci51c2VyQWdlbnQpfTt2YXIgeD17aW5pdDohMCxkaXJlY3Rpb246XCJob3Jpem9udGFsXCIsdG91Y2hFdmVudHNUYXJnZXQ6XCJjb250YWluZXJcIixpbml0aWFsU2xpZGU6MCxzcGVlZDozMDAscHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiExLGVkZ2VTd2lwZURldGVjdGlvbjohMSxlZGdlU3dpcGVUaHJlc2hvbGQ6MjAsZnJlZU1vZGU6ITEsZnJlZU1vZGVNb21lbnR1bTohMCxmcmVlTW9kZU1vbWVudHVtUmF0aW86MSxmcmVlTW9kZU1vbWVudHVtQm91bmNlOiEwLGZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbzoxLGZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvOjEsZnJlZU1vZGVTdGlja3k6ITEsZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHk6LjAyLGF1dG9IZWlnaHQ6ITEsc2V0V3JhcHBlclNpemU6ITEsdmlydHVhbFRyYW5zbGF0ZTohMSxlZmZlY3Q6XCJzbGlkZVwiLGJyZWFrcG9pbnRzOnZvaWQgMCxzcGFjZUJldHdlZW46MCxzbGlkZXNQZXJWaWV3OjEsc2xpZGVzUGVyQ29sdW1uOjEsc2xpZGVzUGVyQ29sdW1uRmlsbDpcImNvbHVtblwiLHNsaWRlc1Blckdyb3VwOjEsY2VudGVyZWRTbGlkZXM6ITEsc2xpZGVzT2Zmc2V0QmVmb3JlOjAsc2xpZGVzT2Zmc2V0QWZ0ZXI6MCxub3JtYWxpemVTbGlkZUluZGV4OiEwLHdhdGNoT3ZlcmZsb3c6ITEscm91bmRMZW5ndGhzOiExLHRvdWNoUmF0aW86MSx0b3VjaEFuZ2xlOjQ1LHNpbXVsYXRlVG91Y2g6ITAsc2hvcnRTd2lwZXM6ITAsbG9uZ1N3aXBlczohMCxsb25nU3dpcGVzUmF0aW86LjUsbG9uZ1N3aXBlc01zOjMwMCxmb2xsb3dGaW5nZXI6ITAsYWxsb3dUb3VjaE1vdmU6ITAsdGhyZXNob2xkOjAsdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiEwLHRvdWNoUmVsZWFzZU9uRWRnZXM6ITEsdW5pcXVlTmF2RWxlbWVudHM6ITAscmVzaXN0YW5jZTohMCxyZXNpc3RhbmNlUmF0aW86Ljg1LHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ITEsd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiExLGdyYWJDdXJzb3I6ITEscHJldmVudENsaWNrczohMCxwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246ITAsc2xpZGVUb0NsaWNrZWRTbGlkZTohMSxwcmVsb2FkSW1hZ2VzOiEwLHVwZGF0ZU9uSW1hZ2VzUmVhZHk6ITAsbG9vcDohMSxsb29wQWRkaXRpb25hbFNsaWRlczowLGxvb3BlZFNsaWRlczpudWxsLGxvb3BGaWxsR3JvdXBXaXRoQmxhbms6ITEsYWxsb3dTbGlkZVByZXY6ITAsYWxsb3dTbGlkZU5leHQ6ITAsc3dpcGVIYW5kbGVyOm51bGwsbm9Td2lwaW5nOiEwLG5vU3dpcGluZ0NsYXNzOlwic3dpcGVyLW5vLXN3aXBpbmdcIixub1N3aXBpbmdTZWxlY3RvcjpudWxsLHBhc3NpdmVMaXN0ZW5lcnM6ITAsY29udGFpbmVyTW9kaWZpZXJDbGFzczpcInN3aXBlci1jb250YWluZXItXCIsc2xpZGVDbGFzczpcInN3aXBlci1zbGlkZVwiLHNsaWRlQmxhbmtDbGFzczpcInN3aXBlci1zbGlkZS1pbnZpc2libGUtYmxhbmtcIixzbGlkZUFjdGl2ZUNsYXNzOlwic3dpcGVyLXNsaWRlLWFjdGl2ZVwiLHNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3M6XCJzd2lwZXItc2xpZGUtZHVwbGljYXRlLWFjdGl2ZVwiLHNsaWRlVmlzaWJsZUNsYXNzOlwic3dpcGVyLXNsaWRlLXZpc2libGVcIixzbGlkZUR1cGxpY2F0ZUNsYXNzOlwic3dpcGVyLXNsaWRlLWR1cGxpY2F0ZVwiLHNsaWRlTmV4dENsYXNzOlwic3dpcGVyLXNsaWRlLW5leHRcIixzbGlkZUR1cGxpY2F0ZU5leHRDbGFzczpcInN3aXBlci1zbGlkZS1kdXBsaWNhdGUtbmV4dFwiLHNsaWRlUHJldkNsYXNzOlwic3dpcGVyLXNsaWRlLXByZXZcIixzbGlkZUR1cGxpY2F0ZVByZXZDbGFzczpcInN3aXBlci1zbGlkZS1kdXBsaWNhdGUtcHJldlwiLHdyYXBwZXJDbGFzczpcInN3aXBlci13cmFwcGVyXCIscnVuQ2FsbGJhY2tzT25Jbml0OiEwfSxFPXt1cGRhdGU6byx0cmFuc2xhdGU6ZCx0cmFuc2l0aW9uOnAsc2xpZGU6Yyxsb29wOnUsZ3JhYkN1cnNvcjpoLG1hbmlwdWxhdGlvbjp2LGV2ZW50czpiLGJyZWFrcG9pbnRzOnksY2hlY2tPdmVyZmxvdzp7Y2hlY2tPdmVyZmxvdzpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLmlzTG9ja2VkO2UuaXNMb2NrZWQ9MT09PWUuc25hcEdyaWQubGVuZ3RoLGUuYWxsb3dTbGlkZU5leHQ9IWUuaXNMb2NrZWQsZS5hbGxvd1NsaWRlUHJldj0hZS5pc0xvY2tlZCx0IT09ZS5pc0xvY2tlZCYmZS5lbWl0KGUuaXNMb2NrZWQ/XCJsb2NrXCI6XCJ1bmxvY2tcIiksdCYmdCE9PWUuaXNMb2NrZWQmJihlLmlzRW5kPSExLGUubmF2aWdhdGlvbi51cGRhdGUoKSl9fSxjbGFzc2VzOnthZGRDbGFzc2VzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jbGFzc05hbWVzLGE9dGhpcy5wYXJhbXMsZT10aGlzLnJ0bCxpPXRoaXMuJGVsLHM9W107cy5wdXNoKGEuZGlyZWN0aW9uKSxhLmZyZWVNb2RlJiZzLnB1c2goXCJmcmVlLW1vZGVcIiksWS5mbGV4Ym94fHxzLnB1c2goXCJuby1mbGV4Ym94XCIpLGEuYXV0b0hlaWdodCYmcy5wdXNoKFwiYXV0b2hlaWdodFwiKSxlJiZzLnB1c2goXCJydGxcIiksMTxhLnNsaWRlc1BlckNvbHVtbiYmcy5wdXNoKFwibXVsdGlyb3dcIiksbS5hbmRyb2lkJiZzLnB1c2goXCJhbmRyb2lkXCIpLG0uaW9zJiZzLnB1c2goXCJpb3NcIiksSS5pc0lFJiYoWS5wb2ludGVyRXZlbnRzfHxZLnByZWZpeGVkUG9pbnRlckV2ZW50cykmJnMucHVzaChcIndwOC1cIithLmRpcmVjdGlvbikscy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QucHVzaChhLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MrZSl9KSxpLmFkZENsYXNzKHQuam9pbihcIiBcIikpfSxyZW1vdmVDbGFzc2VzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kZWwsdD10aGlzLmNsYXNzTmFtZXM7ZS5yZW1vdmVDbGFzcyh0LmpvaW4oXCIgXCIpKX19LGltYWdlczp7bG9hZEltYWdlOmZ1bmN0aW9uKGUsdCxhLGkscyxyKXt2YXIgbjtmdW5jdGlvbiBvKCl7ciYmcigpfWUuY29tcGxldGUmJnM/bygpOnQ/KChuPW5ldyBCLkltYWdlKS5vbmxvYWQ9byxuLm9uZXJyb3I9byxpJiYobi5zaXplcz1pKSxhJiYobi5zcmNzZXQ9YSksdCYmKG4uc3JjPXQpKTpvKCl9LHByZWxvYWRJbWFnZXM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Z1bmN0aW9uIHQoKXtudWxsIT1lJiZlJiYhZS5kZXN0cm95ZWQmJih2b2lkIDAhPT1lLmltYWdlc0xvYWRlZCYmKGUuaW1hZ2VzTG9hZGVkKz0xKSxlLmltYWdlc0xvYWRlZD09PWUuaW1hZ2VzVG9Mb2FkLmxlbmd0aCYmKGUucGFyYW1zLnVwZGF0ZU9uSW1hZ2VzUmVhZHkmJmUudXBkYXRlKCksZS5lbWl0KFwiaW1hZ2VzUmVhZHlcIikpKX1lLmltYWdlc1RvTG9hZD1lLiRlbC5maW5kKFwiaW1nXCIpO2Zvcih2YXIgYT0wO2E8ZS5pbWFnZXNUb0xvYWQubGVuZ3RoO2ErPTEpe3ZhciBpPWUuaW1hZ2VzVG9Mb2FkW2FdO2UubG9hZEltYWdlKGksaS5jdXJyZW50U3JjfHxpLmdldEF0dHJpYnV0ZShcInNyY1wiKSxpLnNyY3NldHx8aS5nZXRBdHRyaWJ1dGUoXCJzcmNzZXRcIiksaS5zaXplc3x8aS5nZXRBdHRyaWJ1dGUoXCJzaXplc1wiKSwhMCx0KX19fX0sVD17fSxTPWZ1bmN0aW9uKHUpe2Z1bmN0aW9uIGgoKXtmb3IodmFyIGUsdCxzLGE9W10saT1hcmd1bWVudHMubGVuZ3RoO2ktLTspYVtpXT1hcmd1bWVudHNbaV07MT09PWEubGVuZ3RoJiZhWzBdLmNvbnN0cnVjdG9yJiZhWzBdLmNvbnN0cnVjdG9yPT09T2JqZWN0P3M9YVswXToodD0oZT1hKVswXSxzPWVbMV0pLHN8fChzPXt9KSxzPVguZXh0ZW5kKHt9LHMpLHQmJiFzLmVsJiYocy5lbD10KSx1LmNhbGwodGhpcyxzKSxPYmplY3Qua2V5cyhFKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe09iamVjdC5rZXlzKEVbdF0pLmZvckVhY2goZnVuY3Rpb24oZSl7aC5wcm90b3R5cGVbZV18fChoLnByb3RvdHlwZVtlXT1FW3RdW2VdKX0pfSk7dmFyIHI9dGhpczt2b2lkIDA9PT1yLm1vZHVsZXMmJihyLm1vZHVsZXM9e30pLE9iamVjdC5rZXlzKHIubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1yLm1vZHVsZXNbZV07aWYodC5wYXJhbXMpe3ZhciBhPU9iamVjdC5rZXlzKHQucGFyYW1zKVswXSxpPXQucGFyYW1zW2FdO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBpKXJldHVybjtpZighKGEgaW4gcyYmXCJlbmFibGVkXCJpbiBpKSlyZXR1cm47ITA9PT1zW2FdJiYoc1thXT17ZW5hYmxlZDohMH0pLFwib2JqZWN0XCIhPXR5cGVvZiBzW2FdfHxcImVuYWJsZWRcImluIHNbYV18fChzW2FdLmVuYWJsZWQ9ITApLHNbYV18fChzW2FdPXtlbmFibGVkOiExfSl9fSk7dmFyIG49WC5leHRlbmQoe30seCk7ci51c2VNb2R1bGVzUGFyYW1zKG4pLHIucGFyYW1zPVguZXh0ZW5kKHt9LG4sVCxzKSxyLm9yaWdpbmFsUGFyYW1zPVguZXh0ZW5kKHt9LHIucGFyYW1zKSxyLnBhc3NlZFBhcmFtcz1YLmV4dGVuZCh7fSxzKTt2YXIgbz0oci4kPUwpKHIucGFyYW1zLmVsKTtpZih0PW9bMF0pe2lmKDE8by5sZW5ndGgpe3ZhciBsPVtdO3JldHVybiBvLmVhY2goZnVuY3Rpb24oZSx0KXt2YXIgYT1YLmV4dGVuZCh7fSxzLHtlbDp0fSk7bC5wdXNoKG5ldyBoKGEpKX0pLGx9dC5zd2lwZXI9cixvLmRhdGEoXCJzd2lwZXJcIixyKTt2YXIgZCxwLGM9by5jaGlsZHJlbihcIi5cIityLnBhcmFtcy53cmFwcGVyQ2xhc3MpO3JldHVybiBYLmV4dGVuZChyLHskZWw6byxlbDp0LCR3cmFwcGVyRWw6Yyx3cmFwcGVyRWw6Y1swXSxjbGFzc05hbWVzOltdLHNsaWRlczpMKCksc2xpZGVzR3JpZDpbXSxzbmFwR3JpZDpbXSxzbGlkZXNTaXplc0dyaWQ6W10saXNIb3Jpem9udGFsOmZ1bmN0aW9uKCl7cmV0dXJuXCJob3Jpem9udGFsXCI9PT1yLnBhcmFtcy5kaXJlY3Rpb259LGlzVmVydGljYWw6ZnVuY3Rpb24oKXtyZXR1cm5cInZlcnRpY2FsXCI9PT1yLnBhcmFtcy5kaXJlY3Rpb259LHJ0bDpcInJ0bFwiPT09dC5kaXIudG9Mb3dlckNhc2UoKXx8XCJydGxcIj09PW8uY3NzKFwiZGlyZWN0aW9uXCIpLHJ0bFRyYW5zbGF0ZTpcImhvcml6b250YWxcIj09PXIucGFyYW1zLmRpcmVjdGlvbiYmKFwicnRsXCI9PT10LmRpci50b0xvd2VyQ2FzZSgpfHxcInJ0bFwiPT09by5jc3MoXCJkaXJlY3Rpb25cIikpLHdyb25nUlRMOlwiLXdlYmtpdC1ib3hcIj09PWMuY3NzKFwiZGlzcGxheVwiKSxhY3RpdmVJbmRleDowLHJlYWxJbmRleDowLGlzQmVnaW5uaW5nOiEwLGlzRW5kOiExLHRyYW5zbGF0ZTowLHByZXZpb3VzVHJhbnNsYXRlOjAscHJvZ3Jlc3M6MCx2ZWxvY2l0eTowLGFuaW1hdGluZzohMSxhbGxvd1NsaWRlTmV4dDpyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxhbGxvd1NsaWRlUHJldjpyLnBhcmFtcy5hbGxvd1NsaWRlUHJldix0b3VjaEV2ZW50czooZD1bXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaG1vdmVcIixcInRvdWNoZW5kXCJdLHA9W1wibW91c2Vkb3duXCIsXCJtb3VzZW1vdmVcIixcIm1vdXNldXBcIl0sWS5wb2ludGVyRXZlbnRzP3A9W1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVydXBcIl06WS5wcmVmaXhlZFBvaW50ZXJFdmVudHMmJihwPVtcIk1TUG9pbnRlckRvd25cIixcIk1TUG9pbnRlck1vdmVcIixcIk1TUG9pbnRlclVwXCJdKSxyLnRvdWNoRXZlbnRzVG91Y2g9e3N0YXJ0OmRbMF0sbW92ZTpkWzFdLGVuZDpkWzJdfSxyLnRvdWNoRXZlbnRzRGVza3RvcD17c3RhcnQ6cFswXSxtb3ZlOnBbMV0sZW5kOnBbMl19LFkudG91Y2h8fCFyLnBhcmFtcy5zaW11bGF0ZVRvdWNoP3IudG91Y2hFdmVudHNUb3VjaDpyLnRvdWNoRXZlbnRzRGVza3RvcCksdG91Y2hFdmVudHNEYXRhOntpc1RvdWNoZWQ6dm9pZCAwLGlzTW92ZWQ6dm9pZCAwLGFsbG93VG91Y2hDYWxsYmFja3M6dm9pZCAwLHRvdWNoU3RhcnRUaW1lOnZvaWQgMCxpc1Njcm9sbGluZzp2b2lkIDAsY3VycmVudFRyYW5zbGF0ZTp2b2lkIDAsc3RhcnRUcmFuc2xhdGU6dm9pZCAwLGFsbG93VGhyZXNob2xkTW92ZTp2b2lkIDAsZm9ybUVsZW1lbnRzOlwiaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlb1wiLGxhc3RDbGlja1RpbWU6WC5ub3coKSxjbGlja1RpbWVvdXQ6dm9pZCAwLHZlbG9jaXRpZXM6W10sYWxsb3dNb21lbnR1bUJvdW5jZTp2b2lkIDAsaXNUb3VjaEV2ZW50OnZvaWQgMCxzdGFydE1vdmluZzp2b2lkIDB9LGFsbG93Q2xpY2s6ITAsYWxsb3dUb3VjaE1vdmU6ci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsdG91Y2hlczp7c3RhcnRYOjAsc3RhcnRZOjAsY3VycmVudFg6MCxjdXJyZW50WTowLGRpZmY6MH0saW1hZ2VzVG9Mb2FkOltdLGltYWdlc0xvYWRlZDowfSksci51c2VNb2R1bGVzKCksci5wYXJhbXMuaW5pdCYmci5pbml0KCkscn19dSYmKGguX19wcm90b19fPXUpO3ZhciBlPXtleHRlbmRlZERlZmF1bHRzOntjb25maWd1cmFibGU6ITB9LGRlZmF1bHRzOntjb25maWd1cmFibGU6ITB9LENsYXNzOntjb25maWd1cmFibGU6ITB9LCQ6e2NvbmZpZ3VyYWJsZTohMH19O3JldHVybigoaC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh1JiZ1LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWgpLnByb3RvdHlwZS5zbGlkZXNQZXJWaWV3RHluYW1pYz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLnBhcmFtcyxhPWUuc2xpZGVzLGk9ZS5zbGlkZXNHcmlkLHM9ZS5zaXplLHI9ZS5hY3RpdmVJbmRleCxuPTE7aWYodC5jZW50ZXJlZFNsaWRlcyl7Zm9yKHZhciBvLGw9YVtyXS5zd2lwZXJTbGlkZVNpemUsZD1yKzE7ZDxhLmxlbmd0aDtkKz0xKWFbZF0mJiFvJiYobis9MSxzPChsKz1hW2RdLnN3aXBlclNsaWRlU2l6ZSkmJihvPSEwKSk7Zm9yKHZhciBwPXItMTswPD1wO3AtPTEpYVtwXSYmIW8mJihuKz0xLHM8KGwrPWFbcF0uc3dpcGVyU2xpZGVTaXplKSYmKG89ITApKX1lbHNlIGZvcih2YXIgYz1yKzE7YzxhLmxlbmd0aDtjKz0xKWlbY10taVtyXTxzJiYobis9MSk7cmV0dXJuIG59LGgucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7aWYoYSYmIWEuZGVzdHJveWVkKXt2YXIgZT1hLnNuYXBHcmlkLHQ9YS5wYXJhbXM7dC5icmVha3BvaW50cyYmYS5zZXRCcmVha3BvaW50KCksYS51cGRhdGVTaXplKCksYS51cGRhdGVTbGlkZXMoKSxhLnVwZGF0ZVByb2dyZXNzKCksYS51cGRhdGVTbGlkZXNDbGFzc2VzKCksYS5wYXJhbXMuZnJlZU1vZGU/KGkoKSxhLnBhcmFtcy5hdXRvSGVpZ2h0JiZhLnVwZGF0ZUF1dG9IZWlnaHQoKSk6KChcImF1dG9cIj09PWEucGFyYW1zLnNsaWRlc1BlclZpZXd8fDE8YS5wYXJhbXMuc2xpZGVzUGVyVmlldykmJmEuaXNFbmQmJiFhLnBhcmFtcy5jZW50ZXJlZFNsaWRlcz9hLnNsaWRlVG8oYS5zbGlkZXMubGVuZ3RoLTEsMCwhMSwhMCk6YS5zbGlkZVRvKGEuYWN0aXZlSW5kZXgsMCwhMSwhMCkpfHxpKCksdC53YXRjaE92ZXJmbG93JiZlIT09YS5zbmFwR3JpZCYmYS5jaGVja092ZXJmbG93KCksYS5lbWl0KFwidXBkYXRlXCIpfWZ1bmN0aW9uIGkoKXt2YXIgZT1hLnJ0bFRyYW5zbGF0ZT8tMSphLnRyYW5zbGF0ZTphLnRyYW5zbGF0ZSx0PU1hdGgubWluKE1hdGgubWF4KGUsYS5tYXhUcmFuc2xhdGUoKSksYS5taW5UcmFuc2xhdGUoKSk7YS5zZXRUcmFuc2xhdGUodCksYS51cGRhdGVBY3RpdmVJbmRleCgpLGEudXBkYXRlU2xpZGVzQ2xhc3NlcygpfX0saC5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5pbml0aWFsaXplZHx8KGUuZW1pdChcImJlZm9yZUluaXRcIiksZS5wYXJhbXMuYnJlYWtwb2ludHMmJmUuc2V0QnJlYWtwb2ludCgpLGUuYWRkQ2xhc3NlcygpLGUucGFyYW1zLmxvb3AmJmUubG9vcENyZWF0ZSgpLGUudXBkYXRlU2l6ZSgpLGUudXBkYXRlU2xpZGVzKCksZS5wYXJhbXMud2F0Y2hPdmVyZmxvdyYmZS5jaGVja092ZXJmbG93KCksZS5wYXJhbXMuZ3JhYkN1cnNvciYmZS5zZXRHcmFiQ3Vyc29yKCksZS5wYXJhbXMucHJlbG9hZEltYWdlcyYmZS5wcmVsb2FkSW1hZ2VzKCksZS5wYXJhbXMubG9vcD9lLnNsaWRlVG8oZS5wYXJhbXMuaW5pdGlhbFNsaWRlK2UubG9vcGVkU2xpZGVzLDAsZS5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTplLnNsaWRlVG8oZS5wYXJhbXMuaW5pdGlhbFNsaWRlLDAsZS5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSxlLmF0dGFjaEV2ZW50cygpLGUuaW5pdGlhbGl6ZWQ9ITAsZS5lbWl0KFwiaW5pdFwiKSl9LGgucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT1lJiYoZT0hMCksdm9pZCAwPT09dCYmKHQ9ITApO3ZhciBhPXRoaXMsaT1hLnBhcmFtcyxzPWEuJGVsLHI9YS4kd3JhcHBlckVsLG49YS5zbGlkZXM7cmV0dXJuIHZvaWQgMD09PWEucGFyYW1zfHxhLmRlc3Ryb3llZHx8KGEuZW1pdChcImJlZm9yZURlc3Ryb3lcIiksYS5pbml0aWFsaXplZD0hMSxhLmRldGFjaEV2ZW50cygpLGkubG9vcCYmYS5sb29wRGVzdHJveSgpLHQmJihhLnJlbW92ZUNsYXNzZXMoKSxzLnJlbW92ZUF0dHIoXCJzdHlsZVwiKSxyLnJlbW92ZUF0dHIoXCJzdHlsZVwiKSxuJiZuLmxlbmd0aCYmbi5yZW1vdmVDbGFzcyhbaS5zbGlkZVZpc2libGVDbGFzcyxpLnNsaWRlQWN0aXZlQ2xhc3MsaS5zbGlkZU5leHRDbGFzcyxpLnNsaWRlUHJldkNsYXNzXS5qb2luKFwiIFwiKSkucmVtb3ZlQXR0cihcInN0eWxlXCIpLnJlbW92ZUF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKS5yZW1vdmVBdHRyKFwiZGF0YS1zd2lwZXItY29sdW1uXCIpLnJlbW92ZUF0dHIoXCJkYXRhLXN3aXBlci1yb3dcIikpLGEuZW1pdChcImRlc3Ryb3lcIiksT2JqZWN0LmtleXMoYS5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZnVuY3Rpb24oZSl7YS5vZmYoZSl9KSwhMSE9PWUmJihhLiRlbFswXS5zd2lwZXI9bnVsbCxhLiRlbC5kYXRhKFwic3dpcGVyXCIsbnVsbCksWC5kZWxldGVQcm9wcyhhKSksYS5kZXN0cm95ZWQ9ITApLG51bGx9LGguZXh0ZW5kRGVmYXVsdHM9ZnVuY3Rpb24oZSl7WC5leHRlbmQoVCxlKX0sZS5leHRlbmRlZERlZmF1bHRzLmdldD1mdW5jdGlvbigpe3JldHVybiBUfSxlLmRlZmF1bHRzLmdldD1mdW5jdGlvbigpe3JldHVybiB4fSxlLkNsYXNzLmdldD1mdW5jdGlvbigpe3JldHVybiB1fSxlLiQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIEx9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGgsZSksaH0ocyksQz17bmFtZTpcImRldmljZVwiLHByb3RvOntkZXZpY2U6bX0sc3RhdGljOntkZXZpY2U6bX19LE09e25hbWU6XCJzdXBwb3J0XCIscHJvdG86e3N1cHBvcnQ6WX0sc3RhdGljOntzdXBwb3J0Oll9fSx6PXtuYW1lOlwiYnJvd3NlclwiLHByb3RvOnticm93c2VyOkl9LHN0YXRpYzp7YnJvd3NlcjpJfX0saz17bmFtZTpcInJlc2l6ZVwiLGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7WC5leHRlbmQoZSx7cmVzaXplOntyZXNpemVIYW5kbGVyOmZ1bmN0aW9uKCl7ZSYmIWUuZGVzdHJveWVkJiZlLmluaXRpYWxpemVkJiYoZS5lbWl0KFwiYmVmb3JlUmVzaXplXCIpLGUuZW1pdChcInJlc2l6ZVwiKSl9LG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcjpmdW5jdGlvbigpe2UmJiFlLmRlc3Ryb3llZCYmZS5pbml0aWFsaXplZCYmZS5lbWl0KFwib3JpZW50YXRpb25jaGFuZ2VcIil9fX0pfSxvbjp7aW5pdDpmdW5jdGlvbigpe0IuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMucmVzaXplLnJlc2l6ZUhhbmRsZXIpLEIuYWRkRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIsdGhpcy5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKX0sZGVzdHJveTpmdW5jdGlvbigpe0IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMucmVzaXplLnJlc2l6ZUhhbmRsZXIpLEIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIsdGhpcy5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKX19fSxQPXtmdW5jOkIuTXV0YXRpb25PYnNlcnZlcnx8Qi5XZWJraXRNdXRhdGlvbk9ic2VydmVyLGF0dGFjaDpmdW5jdGlvbihlLHQpe3ZvaWQgMD09PXQmJih0PXt9KTt2YXIgYT10aGlzLGk9bmV3IFAuZnVuYyhmdW5jdGlvbihlKXtpZigxIT09ZS5sZW5ndGgpe3ZhciB0PWZ1bmN0aW9uKCl7YS5lbWl0KFwib2JzZXJ2ZXJVcGRhdGVcIixlWzBdKX07Qi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU/Qi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodCk6Qi5zZXRUaW1lb3V0KHQsMCl9ZWxzZSBhLmVtaXQoXCJvYnNlcnZlclVwZGF0ZVwiLGVbMF0pfSk7aS5vYnNlcnZlKGUse2F0dHJpYnV0ZXM6dm9pZCAwPT09dC5hdHRyaWJ1dGVzfHx0LmF0dHJpYnV0ZXMsY2hpbGRMaXN0OnZvaWQgMD09PXQuY2hpbGRMaXN0fHx0LmNoaWxkTGlzdCxjaGFyYWN0ZXJEYXRhOnZvaWQgMD09PXQuY2hhcmFjdGVyRGF0YXx8dC5jaGFyYWN0ZXJEYXRhfSksYS5vYnNlcnZlci5vYnNlcnZlcnMucHVzaChpKX0saW5pdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoWS5vYnNlcnZlciYmZS5wYXJhbXMub2JzZXJ2ZXIpe2lmKGUucGFyYW1zLm9ic2VydmVQYXJlbnRzKWZvcih2YXIgdD1lLiRlbC5wYXJlbnRzKCksYT0wO2E8dC5sZW5ndGg7YSs9MSllLm9ic2VydmVyLmF0dGFjaCh0W2FdKTtlLm9ic2VydmVyLmF0dGFjaChlLiRlbFswXSx7Y2hpbGRMaXN0OiExfSksZS5vYnNlcnZlci5hdHRhY2goZS4kd3JhcHBlckVsWzBdLHthdHRyaWJ1dGVzOiExfSl9fSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5vYnNlcnZlci5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbihlKXtlLmRpc2Nvbm5lY3QoKX0pLHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZXJzPVtdfX0sJD17bmFtZTpcIm9ic2VydmVyXCIscGFyYW1zOntvYnNlcnZlcjohMSxvYnNlcnZlUGFyZW50czohMX0sY3JlYXRlOmZ1bmN0aW9uKCl7WC5leHRlbmQodGhpcyx7b2JzZXJ2ZXI6e2luaXQ6UC5pbml0LmJpbmQodGhpcyksYXR0YWNoOlAuYXR0YWNoLmJpbmQodGhpcyksZGVzdHJveTpQLmRlc3Ryb3kuYmluZCh0aGlzKSxvYnNlcnZlcnM6W119fSl9LG9uOntpbml0OmZ1bmN0aW9uKCl7dGhpcy5vYnNlcnZlci5pbml0KCl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLm9ic2VydmVyLmRlc3Ryb3koKX19fSxEPXt1cGRhdGU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxhPXQucGFyYW1zLGk9YS5zbGlkZXNQZXJWaWV3LHM9YS5zbGlkZXNQZXJHcm91cCxyPWEuY2VudGVyZWRTbGlkZXMsbj10LnZpcnR1YWwsbz1uLmZyb20sbD1uLnRvLGQ9bi5zbGlkZXMscD1uLnNsaWRlc0dyaWQsYz1uLnJlbmRlclNsaWRlLHU9bi5vZmZzZXQ7dC51cGRhdGVBY3RpdmVJbmRleCgpO3ZhciBoLHYsZixtPXQuYWN0aXZlSW5kZXh8fDA7aD10LnJ0bFRyYW5zbGF0ZT9cInJpZ2h0XCI6dC5pc0hvcml6b250YWwoKT9cImxlZnRcIjpcInRvcFwiLHI/KHY9TWF0aC5mbG9vcihpLzIpK3MsZj1NYXRoLmZsb29yKGkvMikrcyk6KHY9aSsocy0xKSxmPXMpO3ZhciBnPU1hdGgubWF4KChtfHwwKS1mLDApLGI9TWF0aC5taW4oKG18fDApK3YsZC5sZW5ndGgtMSksdz0odC5zbGlkZXNHcmlkW2ddfHwwKS0odC5zbGlkZXNHcmlkWzBdfHwwKTtmdW5jdGlvbiB5KCl7dC51cGRhdGVTbGlkZXMoKSx0LnVwZGF0ZVByb2dyZXNzKCksdC51cGRhdGVTbGlkZXNDbGFzc2VzKCksdC5sYXp5JiZ0LnBhcmFtcy5sYXp5LmVuYWJsZWQmJnQubGF6eS5sb2FkKCl9aWYoWC5leHRlbmQodC52aXJ0dWFsLHtmcm9tOmcsdG86YixvZmZzZXQ6dyxzbGlkZXNHcmlkOnQuc2xpZGVzR3JpZH0pLG89PT1nJiZsPT09YiYmIWUpcmV0dXJuIHQuc2xpZGVzR3JpZCE9PXAmJnchPT11JiZ0LnNsaWRlcy5jc3MoaCx3K1wicHhcIiksdm9pZCB0LnVwZGF0ZVByb2dyZXNzKCk7aWYodC5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbClyZXR1cm4gdC5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbC5jYWxsKHQse29mZnNldDp3LGZyb206Zyx0bzpiLHNsaWRlczpmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PWc7dDw9Yjt0Kz0xKWUucHVzaChkW3RdKTtyZXR1cm4gZX0oKX0pLHZvaWQgeSgpO3ZhciB4PVtdLEU9W107aWYoZSl0LiR3cmFwcGVyRWwuZmluZChcIi5cIit0LnBhcmFtcy5zbGlkZUNsYXNzKS5yZW1vdmUoKTtlbHNlIGZvcih2YXIgVD1vO1Q8PWw7VCs9MSkoVDxnfHxiPFQpJiZ0LiR3cmFwcGVyRWwuZmluZChcIi5cIit0LnBhcmFtcy5zbGlkZUNsYXNzKydbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInK1QrJ1wiXScpLnJlbW92ZSgpO2Zvcih2YXIgUz0wO1M8ZC5sZW5ndGg7Uys9MSlnPD1TJiZTPD1iJiYodm9pZCAwPT09bHx8ZT9FLnB1c2goUyk6KGw8UyYmRS5wdXNoKFMpLFM8byYmeC5wdXNoKFMpKSk7RS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuJHdyYXBwZXJFbC5hcHBlbmQoYyhkW2VdLGUpKX0pLHguc29ydChmdW5jdGlvbihlLHQpe3JldHVybiBlPHR9KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuJHdyYXBwZXJFbC5wcmVwZW5kKGMoZFtlXSxlKSl9KSx0LiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuc3dpcGVyLXNsaWRlXCIpLmNzcyhoLHcrXCJweFwiKSx5KCl9LHJlbmRlclNsaWRlOmZ1bmN0aW9uKGUsdCl7dmFyIGE9dGhpcyxpPWEucGFyYW1zLnZpcnR1YWw7aWYoaS5jYWNoZSYmYS52aXJ0dWFsLmNhY2hlW3RdKXJldHVybiBhLnZpcnR1YWwuY2FjaGVbdF07dmFyIHM9aS5yZW5kZXJTbGlkZT9MKGkucmVuZGVyU2xpZGUuY2FsbChhLGUsdCkpOkwoJzxkaXYgY2xhc3M9XCInK2EucGFyYW1zLnNsaWRlQ2xhc3MrJ1wiIGRhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyt0KydcIj4nK2UrXCI8L2Rpdj5cIik7cmV0dXJuIHMuYXR0cihcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpfHxzLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiLHQpLGkuY2FjaGUmJihhLnZpcnR1YWwuY2FjaGVbdF09cyksc30sYXBwZW5kU2xpZGU6ZnVuY3Rpb24oZSl7dGhpcy52aXJ0dWFsLnNsaWRlcy5wdXNoKGUpLHRoaXMudmlydHVhbC51cGRhdGUoITApfSxwcmVwZW5kU2xpZGU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0LnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoZSksdC5wYXJhbXMudmlydHVhbC5jYWNoZSl7dmFyIGE9dC52aXJ0dWFsLmNhY2hlLGk9e307T2JqZWN0LmtleXMoYSkuZm9yRWFjaChmdW5jdGlvbihlKXtpW2UrMV09YVtlXX0pLHQudmlydHVhbC5jYWNoZT1pfXQudmlydHVhbC51cGRhdGUoITApLHQuc2xpZGVOZXh0KDApfX0sTz17bmFtZTpcInZpcnR1YWxcIixwYXJhbXM6e3ZpcnR1YWw6e2VuYWJsZWQ6ITEsc2xpZGVzOltdLGNhY2hlOiEwLHJlbmRlclNsaWRlOm51bGwscmVuZGVyRXh0ZXJuYWw6bnVsbH19LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7WC5leHRlbmQoZSx7dmlydHVhbDp7dXBkYXRlOkQudXBkYXRlLmJpbmQoZSksYXBwZW5kU2xpZGU6RC5hcHBlbmRTbGlkZS5iaW5kKGUpLHByZXBlbmRTbGlkZTpELnByZXBlbmRTbGlkZS5iaW5kKGUpLHJlbmRlclNsaWRlOkQucmVuZGVyU2xpZGUuYmluZChlKSxzbGlkZXM6ZS5wYXJhbXMudmlydHVhbC5zbGlkZXMsY2FjaGU6e319fSl9LG9uOntiZWZvcmVJbml0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihlLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpe2UuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MrXCJ2aXJ0dWFsXCIpO3ZhciB0PXt3YXRjaFNsaWRlc1Byb2dyZXNzOiEwfTtYLmV4dGVuZChlLnBhcmFtcyx0KSxYLmV4dGVuZChlLm9yaWdpbmFsUGFyYW1zLHQpLGUudmlydHVhbC51cGRhdGUoKX19LHNldFRyYW5zbGF0ZTpmdW5jdGlvbigpe3RoaXMucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCYmdGhpcy52aXJ0dWFsLnVwZGF0ZSgpfX19LEE9e2hhbmRsZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLGE9dC5ydGxUcmFuc2xhdGUsaT1lO2kub3JpZ2luYWxFdmVudCYmKGk9aS5vcmlnaW5hbEV2ZW50KTt2YXIgcz1pLmtleUNvZGV8fGkuY2hhckNvZGU7aWYoIXQuYWxsb3dTbGlkZU5leHQmJih0LmlzSG9yaXpvbnRhbCgpJiYzOT09PXN8fHQuaXNWZXJ0aWNhbCgpJiY0MD09PXMpKXJldHVybiExO2lmKCF0LmFsbG93U2xpZGVQcmV2JiYodC5pc0hvcml6b250YWwoKSYmMzc9PT1zfHx0LmlzVmVydGljYWwoKSYmMzg9PT1zKSlyZXR1cm4hMTtpZighKGkuc2hpZnRLZXl8fGkuYWx0S2V5fHxpLmN0cmxLZXl8fGkubWV0YUtleXx8Zi5hY3RpdmVFbGVtZW50JiZmLmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUmJihcImlucHV0XCI9PT1mLmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKXx8XCJ0ZXh0YXJlYVwiPT09Zi5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpKSl7aWYodC5wYXJhbXMua2V5Ym9hcmQub25seUluVmlld3BvcnQmJigzNz09PXN8fDM5PT09c3x8Mzg9PT1zfHw0MD09PXMpKXt2YXIgcj0hMTtpZigwPHQuJGVsLnBhcmVudHMoXCIuXCIrdC5wYXJhbXMuc2xpZGVDbGFzcykubGVuZ3RoJiYwPT09dC4kZWwucGFyZW50cyhcIi5cIit0LnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKS5sZW5ndGgpcmV0dXJuO3ZhciBuPUIuaW5uZXJXaWR0aCxvPUIuaW5uZXJIZWlnaHQsbD10LiRlbC5vZmZzZXQoKTthJiYobC5sZWZ0LT10LiRlbFswXS5zY3JvbGxMZWZ0KTtmb3IodmFyIGQ9W1tsLmxlZnQsbC50b3BdLFtsLmxlZnQrdC53aWR0aCxsLnRvcF0sW2wubGVmdCxsLnRvcCt0LmhlaWdodF0sW2wubGVmdCt0LndpZHRoLGwudG9wK3QuaGVpZ2h0XV0scD0wO3A8ZC5sZW5ndGg7cCs9MSl7dmFyIGM9ZFtwXTswPD1jWzBdJiZjWzBdPD1uJiYwPD1jWzFdJiZjWzFdPD1vJiYocj0hMCl9aWYoIXIpcmV0dXJufXQuaXNIb3Jpem9udGFsKCk/KDM3IT09cyYmMzkhPT1zfHwoaS5wcmV2ZW50RGVmYXVsdD9pLnByZXZlbnREZWZhdWx0KCk6aS5yZXR1cm5WYWx1ZT0hMSksKDM5PT09cyYmIWF8fDM3PT09cyYmYSkmJnQuc2xpZGVOZXh0KCksKDM3PT09cyYmIWF8fDM5PT09cyYmYSkmJnQuc2xpZGVQcmV2KCkpOigzOCE9PXMmJjQwIT09c3x8KGkucHJldmVudERlZmF1bHQ/aS5wcmV2ZW50RGVmYXVsdCgpOmkucmV0dXJuVmFsdWU9ITEpLDQwPT09cyYmdC5zbGlkZU5leHQoKSwzOD09PXMmJnQuc2xpZGVQcmV2KCkpLHQuZW1pdChcImtleVByZXNzXCIscyl9fSxlbmFibGU6ZnVuY3Rpb24oKXt0aGlzLmtleWJvYXJkLmVuYWJsZWR8fChMKGYpLm9uKFwia2V5ZG93blwiLHRoaXMua2V5Ym9hcmQuaGFuZGxlKSx0aGlzLmtleWJvYXJkLmVuYWJsZWQ9ITApfSxkaXNhYmxlOmZ1bmN0aW9uKCl7dGhpcy5rZXlib2FyZC5lbmFibGVkJiYoTChmKS5vZmYoXCJrZXlkb3duXCIsdGhpcy5rZXlib2FyZC5oYW5kbGUpLHRoaXMua2V5Ym9hcmQuZW5hYmxlZD0hMSl9fSxIPXtuYW1lOlwia2V5Ym9hcmRcIixwYXJhbXM6e2tleWJvYXJkOntlbmFibGVkOiExLG9ubHlJblZpZXdwb3J0OiEwfX0sY3JlYXRlOmZ1bmN0aW9uKCl7WC5leHRlbmQodGhpcyx7a2V5Ym9hcmQ6e2VuYWJsZWQ6ITEsZW5hYmxlOkEuZW5hYmxlLmJpbmQodGhpcyksZGlzYWJsZTpBLmRpc2FibGUuYmluZCh0aGlzKSxoYW5kbGU6QS5oYW5kbGUuYmluZCh0aGlzKX19KX0sb246e2luaXQ6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5rZXlib2FyZC5lbmFibGVkJiZ0aGlzLmtleWJvYXJkLmVuYWJsZSgpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5rZXlib2FyZC5lbmFibGVkJiZ0aGlzLmtleWJvYXJkLmRpc2FibGUoKX19fTt2YXIgRz17bGFzdFNjcm9sbFRpbWU6WC5ub3coKSxldmVudDotMTxCLm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcImZpcmVmb3hcIik/XCJET01Nb3VzZVNjcm9sbFwiOmZ1bmN0aW9uKCl7dmFyIGU9XCJvbndoZWVsXCIsdD1lIGluIGY7aWYoIXQpe3ZhciBhPWYuY3JlYXRlRWxlbWVudChcImRpdlwiKTthLnNldEF0dHJpYnV0ZShlLFwicmV0dXJuO1wiKSx0PVwiZnVuY3Rpb25cIj09dHlwZW9mIGFbZV19cmV0dXJuIXQmJmYuaW1wbGVtZW50YXRpb24mJmYuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSYmITAhPT1mLmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJcIixcIlwiKSYmKHQ9Zi5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFwiRXZlbnRzLndoZWVsXCIsXCIzLjBcIikpLHR9KCk/XCJ3aGVlbFwiOlwibW91c2V3aGVlbFwiLG5vcm1hbGl6ZTpmdW5jdGlvbihlKXt2YXIgdD0wLGE9MCxpPTAscz0wO3JldHVyblwiZGV0YWlsXCJpbiBlJiYoYT1lLmRldGFpbCksXCJ3aGVlbERlbHRhXCJpbiBlJiYoYT0tZS53aGVlbERlbHRhLzEyMCksXCJ3aGVlbERlbHRhWVwiaW4gZSYmKGE9LWUud2hlZWxEZWx0YVkvMTIwKSxcIndoZWVsRGVsdGFYXCJpbiBlJiYodD0tZS53aGVlbERlbHRhWC8xMjApLFwiYXhpc1wiaW4gZSYmZS5heGlzPT09ZS5IT1JJWk9OVEFMX0FYSVMmJih0PWEsYT0wKSxpPTEwKnQscz0xMCphLFwiZGVsdGFZXCJpbiBlJiYocz1lLmRlbHRhWSksXCJkZWx0YVhcImluIGUmJihpPWUuZGVsdGFYKSwoaXx8cykmJmUuZGVsdGFNb2RlJiYoMT09PWUuZGVsdGFNb2RlPyhpKj00MCxzKj00MCk6KGkqPTgwMCxzKj04MDApKSxpJiYhdCYmKHQ9aTwxPy0xOjEpLHMmJiFhJiYoYT1zPDE/LTE6MSkse3NwaW5YOnQsc3Bpblk6YSxwaXhlbFg6aSxwaXhlbFk6c319LGhhbmRsZU1vdXNlRW50ZXI6ZnVuY3Rpb24oKXt0aGlzLm1vdXNlRW50ZXJlZD0hMH0saGFuZGxlTW91c2VMZWF2ZTpmdW5jdGlvbigpe3RoaXMubW91c2VFbnRlcmVkPSExfSxoYW5kbGU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZSxhPXRoaXMsaT1hLnBhcmFtcy5tb3VzZXdoZWVsO2lmKCFhLm1vdXNlRW50ZXJlZCYmIWkucmVsZWFzZU9uRWRnZXMpcmV0dXJuITA7dC5vcmlnaW5hbEV2ZW50JiYodD10Lm9yaWdpbmFsRXZlbnQpO3ZhciBzPTAscj1hLnJ0bFRyYW5zbGF0ZT8tMToxLG49Ry5ub3JtYWxpemUodCk7aWYoaS5mb3JjZVRvQXhpcylpZihhLmlzSG9yaXpvbnRhbCgpKXtpZighKE1hdGguYWJzKG4ucGl4ZWxYKT5NYXRoLmFicyhuLnBpeGVsWSkpKXJldHVybiEwO3M9bi5waXhlbFgqcn1lbHNle2lmKCEoTWF0aC5hYnMobi5waXhlbFkpPk1hdGguYWJzKG4ucGl4ZWxYKSkpcmV0dXJuITA7cz1uLnBpeGVsWX1lbHNlIHM9TWF0aC5hYnMobi5waXhlbFgpPk1hdGguYWJzKG4ucGl4ZWxZKT8tbi5waXhlbFgqcjotbi5waXhlbFk7aWYoMD09PXMpcmV0dXJuITA7aWYoaS5pbnZlcnQmJihzPS1zKSxhLnBhcmFtcy5mcmVlTW9kZSl7YS5wYXJhbXMubG9vcCYmYS5sb29wRml4KCk7dmFyIG89YS5nZXRUcmFuc2xhdGUoKStzKmkuc2Vuc2l0aXZpdHksbD1hLmlzQmVnaW5uaW5nLGQ9YS5pc0VuZDtpZihvPj1hLm1pblRyYW5zbGF0ZSgpJiYobz1hLm1pblRyYW5zbGF0ZSgpKSxvPD1hLm1heFRyYW5zbGF0ZSgpJiYobz1hLm1heFRyYW5zbGF0ZSgpKSxhLnNldFRyYW5zaXRpb24oMCksYS5zZXRUcmFuc2xhdGUobyksYS51cGRhdGVQcm9ncmVzcygpLGEudXBkYXRlQWN0aXZlSW5kZXgoKSxhLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwoIWwmJmEuaXNCZWdpbm5pbmd8fCFkJiZhLmlzRW5kKSYmYS51cGRhdGVTbGlkZXNDbGFzc2VzKCksYS5wYXJhbXMuZnJlZU1vZGVTdGlja3kmJihjbGVhclRpbWVvdXQoYS5tb3VzZXdoZWVsLnRpbWVvdXQpLGEubW91c2V3aGVlbC50aW1lb3V0PVgubmV4dFRpY2soZnVuY3Rpb24oKXthLnNsaWRlVG9DbG9zZXN0KCl9LDMwMCkpLGEuZW1pdChcInNjcm9sbFwiLHQpLGEucGFyYW1zLmF1dG9wbGF5JiZhLnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uJiZhLmF1dG9wbGF5LnN0b3AoKSxvPT09YS5taW5UcmFuc2xhdGUoKXx8bz09PWEubWF4VHJhbnNsYXRlKCkpcmV0dXJuITB9ZWxzZXtpZig2MDxYLm5vdygpLWEubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSlpZihzPDApaWYoYS5pc0VuZCYmIWEucGFyYW1zLmxvb3B8fGEuYW5pbWF0aW5nKXtpZihpLnJlbGVhc2VPbkVkZ2VzKXJldHVybiEwfWVsc2UgYS5zbGlkZU5leHQoKSxhLmVtaXQoXCJzY3JvbGxcIix0KTtlbHNlIGlmKGEuaXNCZWdpbm5pbmcmJiFhLnBhcmFtcy5sb29wfHxhLmFuaW1hdGluZyl7aWYoaS5yZWxlYXNlT25FZGdlcylyZXR1cm4hMH1lbHNlIGEuc2xpZGVQcmV2KCksYS5lbWl0KFwic2Nyb2xsXCIsdCk7YS5tb3VzZXdoZWVsLmxhc3RTY3JvbGxUaW1lPShuZXcgQi5EYXRlKS5nZXRUaW1lKCl9cmV0dXJuIHQucHJldmVudERlZmF1bHQ/dC5wcmV2ZW50RGVmYXVsdCgpOnQucmV0dXJuVmFsdWU9ITEsITF9LGVuYWJsZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoIUcuZXZlbnQpcmV0dXJuITE7aWYoZS5tb3VzZXdoZWVsLmVuYWJsZWQpcmV0dXJuITE7dmFyIHQ9ZS4kZWw7cmV0dXJuXCJjb250YWluZXJcIiE9PWUucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkJiYodD1MKGUucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkKSksdC5vbihcIm1vdXNlZW50ZXJcIixlLm1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlciksdC5vbihcIm1vdXNlbGVhdmVcIixlLm1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSksdC5vbihHLmV2ZW50LGUubW91c2V3aGVlbC5oYW5kbGUpLGUubW91c2V3aGVlbC5lbmFibGVkPSEwfSxkaXNhYmxlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighRy5ldmVudClyZXR1cm4hMTtpZighZS5tb3VzZXdoZWVsLmVuYWJsZWQpcmV0dXJuITE7dmFyIHQ9ZS4kZWw7cmV0dXJuXCJjb250YWluZXJcIiE9PWUucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkJiYodD1MKGUucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkKSksdC5vZmYoRy5ldmVudCxlLm1vdXNld2hlZWwuaGFuZGxlKSwhKGUubW91c2V3aGVlbC5lbmFibGVkPSExKX19LE49e3VwZGF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLnBhcmFtcy5uYXZpZ2F0aW9uO2lmKCFlLnBhcmFtcy5sb29wKXt2YXIgYT1lLm5hdmlnYXRpb24saT1hLiRuZXh0RWwscz1hLiRwcmV2RWw7cyYmMDxzLmxlbmd0aCYmKGUuaXNCZWdpbm5pbmc/cy5hZGRDbGFzcyh0LmRpc2FibGVkQ2xhc3MpOnMucmVtb3ZlQ2xhc3ModC5kaXNhYmxlZENsYXNzKSxzW2UucGFyYW1zLndhdGNoT3ZlcmZsb3cmJmUuaXNMb2NrZWQ/XCJhZGRDbGFzc1wiOlwicmVtb3ZlQ2xhc3NcIl0odC5sb2NrQ2xhc3MpKSxpJiYwPGkubGVuZ3RoJiYoZS5pc0VuZD9pLmFkZENsYXNzKHQuZGlzYWJsZWRDbGFzcyk6aS5yZW1vdmVDbGFzcyh0LmRpc2FibGVkQ2xhc3MpLGlbZS5wYXJhbXMud2F0Y2hPdmVyZmxvdyYmZS5pc0xvY2tlZD9cImFkZENsYXNzXCI6XCJyZW1vdmVDbGFzc1wiXSh0LmxvY2tDbGFzcykpfX0saW5pdDpmdW5jdGlvbigpe3ZhciBlLHQsYT10aGlzLGk9YS5wYXJhbXMubmF2aWdhdGlvbjsoaS5uZXh0RWx8fGkucHJldkVsKSYmKGkubmV4dEVsJiYoZT1MKGkubmV4dEVsKSxhLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyYmXCJzdHJpbmdcIj09dHlwZW9mIGkubmV4dEVsJiYxPGUubGVuZ3RoJiYxPT09YS4kZWwuZmluZChpLm5leHRFbCkubGVuZ3RoJiYoZT1hLiRlbC5maW5kKGkubmV4dEVsKSkpLGkucHJldkVsJiYodD1MKGkucHJldkVsKSxhLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyYmXCJzdHJpbmdcIj09dHlwZW9mIGkucHJldkVsJiYxPHQubGVuZ3RoJiYxPT09YS4kZWwuZmluZChpLnByZXZFbCkubGVuZ3RoJiYodD1hLiRlbC5maW5kKGkucHJldkVsKSkpLGUmJjA8ZS5sZW5ndGgmJmUub24oXCJjbGlja1wiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxhLmlzRW5kJiYhYS5wYXJhbXMubG9vcHx8YS5zbGlkZU5leHQoKX0pLHQmJjA8dC5sZW5ndGgmJnQub24oXCJjbGlja1wiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxhLmlzQmVnaW5uaW5nJiYhYS5wYXJhbXMubG9vcHx8YS5zbGlkZVByZXYoKX0pLFguZXh0ZW5kKGEubmF2aWdhdGlvbix7JG5leHRFbDplLG5leHRFbDplJiZlWzBdLCRwcmV2RWw6dCxwcmV2RWw6dCYmdFswXX0pKX0sZGVzdHJveTpmdW5jdGlvbigpe3ZhciBlPXRoaXMubmF2aWdhdGlvbix0PWUuJG5leHRFbCxhPWUuJHByZXZFbDt0JiZ0Lmxlbmd0aCYmKHQub2ZmKFwiY2xpY2tcIiksdC5yZW1vdmVDbGFzcyh0aGlzLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpKSxhJiZhLmxlbmd0aCYmKGEub2ZmKFwiY2xpY2tcIiksYS5yZW1vdmVDbGFzcyh0aGlzLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpKX19LFY9e3VwZGF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLnJ0bCxzPWUucGFyYW1zLnBhZ2luYXRpb247aWYocy5lbCYmZS5wYWdpbmF0aW9uLmVsJiZlLnBhZ2luYXRpb24uJGVsJiYwIT09ZS5wYWdpbmF0aW9uLiRlbC5sZW5ndGgpe3ZhciByLGE9ZS52aXJ0dWFsJiZlLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ/ZS52aXJ0dWFsLnNsaWRlcy5sZW5ndGg6ZS5zbGlkZXMubGVuZ3RoLGk9ZS5wYWdpbmF0aW9uLiRlbCxuPWUucGFyYW1zLmxvb3A/TWF0aC5jZWlsKChhLTIqZS5sb29wZWRTbGlkZXMpL2UucGFyYW1zLnNsaWRlc1Blckdyb3VwKTplLnNuYXBHcmlkLmxlbmd0aDtpZihlLnBhcmFtcy5sb29wPygocj1NYXRoLmNlaWwoKGUuYWN0aXZlSW5kZXgtZS5sb29wZWRTbGlkZXMpL2UucGFyYW1zLnNsaWRlc1Blckdyb3VwKSk+YS0xLTIqZS5sb29wZWRTbGlkZXMmJihyLT1hLTIqZS5sb29wZWRTbGlkZXMpLG4tMTxyJiYoci09bikscjwwJiZcImJ1bGxldHNcIiE9PWUucGFyYW1zLnBhZ2luYXRpb25UeXBlJiYocj1uK3IpKTpyPXZvaWQgMCE9PWUuc25hcEluZGV4P2Uuc25hcEluZGV4OmUuYWN0aXZlSW5kZXh8fDAsXCJidWxsZXRzXCI9PT1zLnR5cGUmJmUucGFnaW5hdGlvbi5idWxsZXRzJiYwPGUucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCl7dmFyIG8sbCxkLHA9ZS5wYWdpbmF0aW9uLmJ1bGxldHM7aWYocy5keW5hbWljQnVsbGV0cyYmKGUucGFnaW5hdGlvbi5idWxsZXRTaXplPXAuZXEoMClbZS5pc0hvcml6b250YWwoKT9cIm91dGVyV2lkdGhcIjpcIm91dGVySGVpZ2h0XCJdKCEwKSxpLmNzcyhlLmlzSG9yaXpvbnRhbCgpP1wid2lkdGhcIjpcImhlaWdodFwiLGUucGFnaW5hdGlvbi5idWxsZXRTaXplKihzLmR5bmFtaWNNYWluQnVsbGV0cys0KStcInB4XCIpLDE8cy5keW5hbWljTWFpbkJ1bGxldHMmJnZvaWQgMCE9PWUucHJldmlvdXNJbmRleCYmKGUucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXgrPXItZS5wcmV2aW91c0luZGV4LGUucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXg+cy5keW5hbWljTWFpbkJ1bGxldHMtMT9lLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4PXMuZHluYW1pY01haW5CdWxsZXRzLTE6ZS5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleDwwJiYoZS5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleD0wKSksbz1yLWUucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXgsZD0oKGw9bysoTWF0aC5taW4ocC5sZW5ndGgscy5keW5hbWljTWFpbkJ1bGxldHMpLTEpKStvKS8yKSxwLnJlbW92ZUNsYXNzKHMuYnVsbGV0QWN0aXZlQ2xhc3MrXCIgXCIrcy5idWxsZXRBY3RpdmVDbGFzcytcIi1uZXh0IFwiK3MuYnVsbGV0QWN0aXZlQ2xhc3MrXCItbmV4dC1uZXh0IFwiK3MuYnVsbGV0QWN0aXZlQ2xhc3MrXCItcHJldiBcIitzLmJ1bGxldEFjdGl2ZUNsYXNzK1wiLXByZXYtcHJldiBcIitzLmJ1bGxldEFjdGl2ZUNsYXNzK1wiLW1haW5cIiksMTxpLmxlbmd0aClwLmVhY2goZnVuY3Rpb24oZSx0KXt2YXIgYT1MKHQpLGk9YS5pbmRleCgpO2k9PT1yJiZhLmFkZENsYXNzKHMuYnVsbGV0QWN0aXZlQ2xhc3MpLHMuZHluYW1pY0J1bGxldHMmJihvPD1pJiZpPD1sJiZhLmFkZENsYXNzKHMuYnVsbGV0QWN0aXZlQ2xhc3MrXCItbWFpblwiKSxpPT09byYmYS5wcmV2KCkuYWRkQ2xhc3Mocy5idWxsZXRBY3RpdmVDbGFzcytcIi1wcmV2XCIpLnByZXYoKS5hZGRDbGFzcyhzLmJ1bGxldEFjdGl2ZUNsYXNzK1wiLXByZXYtcHJldlwiKSxpPT09bCYmYS5uZXh0KCkuYWRkQ2xhc3Mocy5idWxsZXRBY3RpdmVDbGFzcytcIi1uZXh0XCIpLm5leHQoKS5hZGRDbGFzcyhzLmJ1bGxldEFjdGl2ZUNsYXNzK1wiLW5leHQtbmV4dFwiKSl9KTtlbHNlIGlmKHAuZXEocikuYWRkQ2xhc3Mocy5idWxsZXRBY3RpdmVDbGFzcykscy5keW5hbWljQnVsbGV0cyl7Zm9yKHZhciBjPXAuZXEobyksdT1wLmVxKGwpLGg9bztoPD1sO2grPTEpcC5lcShoKS5hZGRDbGFzcyhzLmJ1bGxldEFjdGl2ZUNsYXNzK1wiLW1haW5cIik7Yy5wcmV2KCkuYWRkQ2xhc3Mocy5idWxsZXRBY3RpdmVDbGFzcytcIi1wcmV2XCIpLnByZXYoKS5hZGRDbGFzcyhzLmJ1bGxldEFjdGl2ZUNsYXNzK1wiLXByZXYtcHJldlwiKSx1Lm5leHQoKS5hZGRDbGFzcyhzLmJ1bGxldEFjdGl2ZUNsYXNzK1wiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHMuYnVsbGV0QWN0aXZlQ2xhc3MrXCItbmV4dC1uZXh0XCIpfWlmKHMuZHluYW1pY0J1bGxldHMpe3ZhciB2PU1hdGgubWluKHAubGVuZ3RoLHMuZHluYW1pY01haW5CdWxsZXRzKzQpLGY9KGUucGFnaW5hdGlvbi5idWxsZXRTaXplKnYtZS5wYWdpbmF0aW9uLmJ1bGxldFNpemUpLzItZCplLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSxtPXQ/XCJyaWdodFwiOlwibGVmdFwiO3AuY3NzKGUuaXNIb3Jpem9udGFsKCk/bTpcInRvcFwiLGYrXCJweFwiKX19aWYoXCJmcmFjdGlvblwiPT09cy50eXBlJiYoaS5maW5kKFwiLlwiK3MuY3VycmVudENsYXNzKS50ZXh0KHMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KHIrMSkpLGkuZmluZChcIi5cIitzLnRvdGFsQ2xhc3MpLnRleHQocy5mb3JtYXRGcmFjdGlvblRvdGFsKG4pKSksXCJwcm9ncmVzc2JhclwiPT09cy50eXBlKXt2YXIgZztnPXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZT9lLmlzSG9yaXpvbnRhbCgpP1widmVydGljYWxcIjpcImhvcml6b250YWxcIjplLmlzSG9yaXpvbnRhbCgpP1wiaG9yaXpvbnRhbFwiOlwidmVydGljYWxcIjt2YXIgYj0ocisxKS9uLHc9MSx5PTE7XCJob3Jpem9udGFsXCI9PT1nP3c9Yjp5PWIsaS5maW5kKFwiLlwiK3MucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoXCIrdytcIikgc2NhbGVZKFwiK3krXCIpXCIpLnRyYW5zaXRpb24oZS5wYXJhbXMuc3BlZWQpfVwiY3VzdG9tXCI9PT1zLnR5cGUmJnMucmVuZGVyQ3VzdG9tPyhpLmh0bWwocy5yZW5kZXJDdXN0b20oZSxyKzEsbikpLGUuZW1pdChcInBhZ2luYXRpb25SZW5kZXJcIixlLGlbMF0pKTplLmVtaXQoXCJwYWdpbmF0aW9uVXBkYXRlXCIsZSxpWzBdKSxpW2UucGFyYW1zLndhdGNoT3ZlcmZsb3cmJmUuaXNMb2NrZWQ/XCJhZGRDbGFzc1wiOlwicmVtb3ZlQ2xhc3NcIl0ocy5sb2NrQ2xhc3MpfX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUucGFyYW1zLnBhZ2luYXRpb247aWYodC5lbCYmZS5wYWdpbmF0aW9uLmVsJiZlLnBhZ2luYXRpb24uJGVsJiYwIT09ZS5wYWdpbmF0aW9uLiRlbC5sZW5ndGgpe3ZhciBhPWUudmlydHVhbCYmZS5wYXJhbXMudmlydHVhbC5lbmFibGVkP2UudmlydHVhbC5zbGlkZXMubGVuZ3RoOmUuc2xpZGVzLmxlbmd0aCxpPWUucGFnaW5hdGlvbi4kZWwscz1cIlwiO2lmKFwiYnVsbGV0c1wiPT09dC50eXBlKXtmb3IodmFyIHI9ZS5wYXJhbXMubG9vcD9NYXRoLmNlaWwoKGEtMiplLmxvb3BlZFNsaWRlcykvZS5wYXJhbXMuc2xpZGVzUGVyR3JvdXApOmUuc25hcEdyaWQubGVuZ3RoLG49MDtuPHI7bis9MSl0LnJlbmRlckJ1bGxldD9zKz10LnJlbmRlckJ1bGxldC5jYWxsKGUsbix0LmJ1bGxldENsYXNzKTpzKz1cIjxcIit0LmJ1bGxldEVsZW1lbnQrJyBjbGFzcz1cIicrdC5idWxsZXRDbGFzcysnXCI+PC8nK3QuYnVsbGV0RWxlbWVudCtcIj5cIjtpLmh0bWwocyksZS5wYWdpbmF0aW9uLmJ1bGxldHM9aS5maW5kKFwiLlwiK3QuYnVsbGV0Q2xhc3MpfVwiZnJhY3Rpb25cIj09PXQudHlwZSYmKHM9dC5yZW5kZXJGcmFjdGlvbj90LnJlbmRlckZyYWN0aW9uLmNhbGwoZSx0LmN1cnJlbnRDbGFzcyx0LnRvdGFsQ2xhc3MpOic8c3BhbiBjbGFzcz1cIicrdC5jdXJyZW50Q2xhc3MrJ1wiPjwvc3Bhbj4gLyA8c3BhbiBjbGFzcz1cIicrdC50b3RhbENsYXNzKydcIj48L3NwYW4+JyxpLmh0bWwocykpLFwicHJvZ3Jlc3NiYXJcIj09PXQudHlwZSYmKHM9dC5yZW5kZXJQcm9ncmVzc2Jhcj90LnJlbmRlclByb2dyZXNzYmFyLmNhbGwoZSx0LnByb2dyZXNzYmFyRmlsbENsYXNzKTonPHNwYW4gY2xhc3M9XCInK3QucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MrJ1wiPjwvc3Bhbj4nLGkuaHRtbChzKSksXCJjdXN0b21cIiE9PXQudHlwZSYmZS5lbWl0KFwicGFnaW5hdGlvblJlbmRlclwiLGUucGFnaW5hdGlvbi4kZWxbMF0pfX0saW5pdDpmdW5jdGlvbigpe3ZhciBhPXRoaXMsZT1hLnBhcmFtcy5wYWdpbmF0aW9uO2lmKGUuZWwpe3ZhciB0PUwoZS5lbCk7MCE9PXQubGVuZ3RoJiYoYS5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMmJlwic3RyaW5nXCI9PXR5cGVvZiBlLmVsJiYxPHQubGVuZ3RoJiYxPT09YS4kZWwuZmluZChlLmVsKS5sZW5ndGgmJih0PWEuJGVsLmZpbmQoZS5lbCkpLFwiYnVsbGV0c1wiPT09ZS50eXBlJiZlLmNsaWNrYWJsZSYmdC5hZGRDbGFzcyhlLmNsaWNrYWJsZUNsYXNzKSx0LmFkZENsYXNzKGUubW9kaWZpZXJDbGFzcytlLnR5cGUpLFwiYnVsbGV0c1wiPT09ZS50eXBlJiZlLmR5bmFtaWNCdWxsZXRzJiYodC5hZGRDbGFzcyhcIlwiK2UubW9kaWZpZXJDbGFzcytlLnR5cGUrXCItZHluYW1pY1wiKSxhLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4PTAsZS5keW5hbWljTWFpbkJ1bGxldHM8MSYmKGUuZHluYW1pY01haW5CdWxsZXRzPTEpKSxcInByb2dyZXNzYmFyXCI9PT1lLnR5cGUmJmUucHJvZ3Jlc3NiYXJPcHBvc2l0ZSYmdC5hZGRDbGFzcyhlLnByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyksZS5jbGlja2FibGUmJnQub24oXCJjbGlja1wiLFwiLlwiK2UuYnVsbGV0Q2xhc3MsZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpO3ZhciB0PUwodGhpcykuaW5kZXgoKSphLnBhcmFtcy5zbGlkZXNQZXJHcm91cDthLnBhcmFtcy5sb29wJiYodCs9YS5sb29wZWRTbGlkZXMpLGEuc2xpZGVUbyh0KX0pLFguZXh0ZW5kKGEucGFnaW5hdGlvbix7JGVsOnQsZWw6dFswXX0pKX19LGRlc3Ryb3k6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS5wYXJhbXMucGFnaW5hdGlvbjtpZih0LmVsJiZlLnBhZ2luYXRpb24uZWwmJmUucGFnaW5hdGlvbi4kZWwmJjAhPT1lLnBhZ2luYXRpb24uJGVsLmxlbmd0aCl7dmFyIGE9ZS5wYWdpbmF0aW9uLiRlbDthLnJlbW92ZUNsYXNzKHQuaGlkZGVuQ2xhc3MpLGEucmVtb3ZlQ2xhc3ModC5tb2RpZmllckNsYXNzK3QudHlwZSksZS5wYWdpbmF0aW9uLmJ1bGxldHMmJmUucGFnaW5hdGlvbi5idWxsZXRzLnJlbW92ZUNsYXNzKHQuYnVsbGV0QWN0aXZlQ2xhc3MpLHQuY2xpY2thYmxlJiZhLm9mZihcImNsaWNrXCIsXCIuXCIrdC5idWxsZXRDbGFzcyl9fX0sUj17c2V0VHJhbnNsYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihlLnBhcmFtcy5zY3JvbGxiYXIuZWwmJmUuc2Nyb2xsYmFyLmVsKXt2YXIgdD1lLnNjcm9sbGJhcixhPWUucnRsVHJhbnNsYXRlLGk9ZS5wcm9ncmVzcyxzPXQuZHJhZ1NpemUscj10LnRyYWNrU2l6ZSxuPXQuJGRyYWdFbCxvPXQuJGVsLGw9ZS5wYXJhbXMuc2Nyb2xsYmFyLGQ9cyxwPShyLXMpKmk7YT8wPChwPS1wKT8oZD1zLXAscD0wKTpyPC1wK3MmJihkPXIrcCk6cDwwPyhkPXMrcCxwPTApOnI8cCtzJiYoZD1yLXApLGUuaXNIb3Jpem9udGFsKCk/KFkudHJhbnNmb3JtczNkP24udHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIrcCtcInB4LCAwLCAwKVwiKTpuLnRyYW5zZm9ybShcInRyYW5zbGF0ZVgoXCIrcCtcInB4KVwiKSxuWzBdLnN0eWxlLndpZHRoPWQrXCJweFwiKTooWS50cmFuc2Zvcm1zM2Q/bi50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwcHgsIFwiK3ArXCJweCwgMClcIik6bi50cmFuc2Zvcm0oXCJ0cmFuc2xhdGVZKFwiK3ArXCJweClcIiksblswXS5zdHlsZS5oZWlnaHQ9ZCtcInB4XCIpLGwuaGlkZSYmKGNsZWFyVGltZW91dChlLnNjcm9sbGJhci50aW1lb3V0KSxvWzBdLnN0eWxlLm9wYWNpdHk9MSxlLnNjcm9sbGJhci50aW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtvWzBdLnN0eWxlLm9wYWNpdHk9MCxvLnRyYW5zaXRpb24oNDAwKX0sMWUzKSl9fSxzZXRUcmFuc2l0aW9uOmZ1bmN0aW9uKGUpe3RoaXMucGFyYW1zLnNjcm9sbGJhci5lbCYmdGhpcy5zY3JvbGxiYXIuZWwmJnRoaXMuc2Nyb2xsYmFyLiRkcmFnRWwudHJhbnNpdGlvbihlKX0sdXBkYXRlU2l6ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoZS5wYXJhbXMuc2Nyb2xsYmFyLmVsJiZlLnNjcm9sbGJhci5lbCl7dmFyIHQ9ZS5zY3JvbGxiYXIsYT10LiRkcmFnRWwsaT10LiRlbDthWzBdLnN0eWxlLndpZHRoPVwiXCIsYVswXS5zdHlsZS5oZWlnaHQ9XCJcIjt2YXIgcyxyPWUuaXNIb3Jpem9udGFsKCk/aVswXS5vZmZzZXRXaWR0aDppWzBdLm9mZnNldEhlaWdodCxuPWUuc2l6ZS9lLnZpcnR1YWxTaXplLG89biooci9lLnNpemUpO3M9XCJhdXRvXCI9PT1lLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemU/cipuOnBhcnNlSW50KGUucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSwxMCksZS5pc0hvcml6b250YWwoKT9hWzBdLnN0eWxlLndpZHRoPXMrXCJweFwiOmFbMF0uc3R5bGUuaGVpZ2h0PXMrXCJweFwiLGlbMF0uc3R5bGUuZGlzcGxheT0xPD1uP1wibm9uZVwiOlwiXCIsZS5wYXJhbXMuc2Nyb2xsYmFySGlkZSYmKGlbMF0uc3R5bGUub3BhY2l0eT0wKSxYLmV4dGVuZCh0LHt0cmFja1NpemU6cixkaXZpZGVyOm4sbW92ZURpdmlkZXI6byxkcmFnU2l6ZTpzfSksdC4kZWxbZS5wYXJhbXMud2F0Y2hPdmVyZmxvdyYmZS5pc0xvY2tlZD9cImFkZENsYXNzXCI6XCJyZW1vdmVDbGFzc1wiXShlLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKX19LHNldERyYWdQb3NpdGlvbjpmdW5jdGlvbihlKXt2YXIgdCxhPXRoaXMsaT1hLnNjcm9sbGJhcixzPWEucnRsVHJhbnNsYXRlLHI9aS4kZWwsbj1pLmRyYWdTaXplLG89aS50cmFja1NpemU7dD0oKGEuaXNIb3Jpem9udGFsKCk/XCJ0b3VjaHN0YXJ0XCI9PT1lLnR5cGV8fFwidG91Y2htb3ZlXCI9PT1lLnR5cGU/ZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYOmUucGFnZVh8fGUuY2xpZW50WDpcInRvdWNoc3RhcnRcIj09PWUudHlwZXx8XCJ0b3VjaG1vdmVcIj09PWUudHlwZT9lLnRhcmdldFRvdWNoZXNbMF0ucGFnZVk6ZS5wYWdlWXx8ZS5jbGllbnRZKS1yLm9mZnNldCgpW2EuaXNIb3Jpem9udGFsKCk/XCJsZWZ0XCI6XCJ0b3BcIl0tbi8yKS8oby1uKSx0PU1hdGgubWF4KE1hdGgubWluKHQsMSksMCkscyYmKHQ9MS10KTt2YXIgbD1hLm1pblRyYW5zbGF0ZSgpKyhhLm1heFRyYW5zbGF0ZSgpLWEubWluVHJhbnNsYXRlKCkpKnQ7YS51cGRhdGVQcm9ncmVzcyhsKSxhLnNldFRyYW5zbGF0ZShsKSxhLnVwZGF0ZUFjdGl2ZUluZGV4KCksYS51cGRhdGVTbGlkZXNDbGFzc2VzKCl9LG9uRHJhZ1N0YXJ0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsYT10LnBhcmFtcy5zY3JvbGxiYXIsaT10LnNjcm9sbGJhcixzPXQuJHdyYXBwZXJFbCxyPWkuJGVsLG49aS4kZHJhZ0VsO3Quc2Nyb2xsYmFyLmlzVG91Y2hlZD0hMCxlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSxzLnRyYW5zaXRpb24oMTAwKSxuLnRyYW5zaXRpb24oMTAwKSxpLnNldERyYWdQb3NpdGlvbihlKSxjbGVhclRpbWVvdXQodC5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpLHIudHJhbnNpdGlvbigwKSxhLmhpZGUmJnIuY3NzKFwib3BhY2l0eVwiLDEpLHQuZW1pdChcInNjcm9sbGJhckRyYWdTdGFydFwiLGUpfSxvbkRyYWdNb3ZlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuc2Nyb2xsYmFyLGE9dGhpcy4kd3JhcHBlckVsLGk9dC4kZWwscz10LiRkcmFnRWw7dGhpcy5zY3JvbGxiYXIuaXNUb3VjaGVkJiYoZS5wcmV2ZW50RGVmYXVsdD9lLnByZXZlbnREZWZhdWx0KCk6ZS5yZXR1cm5WYWx1ZT0hMSx0LnNldERyYWdQb3NpdGlvbihlKSxhLnRyYW5zaXRpb24oMCksaS50cmFuc2l0aW9uKDApLHMudHJhbnNpdGlvbigwKSx0aGlzLmVtaXQoXCJzY3JvbGxiYXJEcmFnTW92ZVwiLGUpKX0sb25EcmFnRW5kOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsYT10LnBhcmFtcy5zY3JvbGxiYXIsaT10LnNjcm9sbGJhci4kZWw7dC5zY3JvbGxiYXIuaXNUb3VjaGVkJiYodC5zY3JvbGxiYXIuaXNUb3VjaGVkPSExLGEuaGlkZSYmKGNsZWFyVGltZW91dCh0LnNjcm9sbGJhci5kcmFnVGltZW91dCksdC5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQ9WC5uZXh0VGljayhmdW5jdGlvbigpe2kuY3NzKFwib3BhY2l0eVwiLDApLGkudHJhbnNpdGlvbig0MDApfSwxZTMpKSx0LmVtaXQoXCJzY3JvbGxiYXJEcmFnRW5kXCIsZSksYS5zbmFwT25SZWxlYXNlJiZ0LnNsaWRlVG9DbG9zZXN0KCkpfSxlbmFibGVEcmFnZ2FibGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKGUucGFyYW1zLnNjcm9sbGJhci5lbCl7dmFyIHQ9ZS5zY3JvbGxiYXIsYT1lLnRvdWNoRXZlbnRzLGk9ZS50b3VjaEV2ZW50c0Rlc2t0b3Ascz1lLnBhcmFtcyxyPXQuJGVsWzBdLG49ISghWS5wYXNzaXZlTGlzdGVuZXJ8fCFzLnBhc3NpdmVMaXN0ZW5lcnMpJiZ7cGFzc2l2ZTohMSxjYXB0dXJlOiExfSxvPSEoIVkucGFzc2l2ZUxpc3RlbmVyfHwhcy5wYXNzaXZlTGlzdGVuZXJzKSYme3Bhc3NpdmU6ITAsY2FwdHVyZTohMX07WS50b3VjaHx8IVkucG9pbnRlckV2ZW50cyYmIVkucHJlZml4ZWRQb2ludGVyRXZlbnRzPyhZLnRvdWNoJiYoci5hZGRFdmVudExpc3RlbmVyKGEuc3RhcnQsZS5zY3JvbGxiYXIub25EcmFnU3RhcnQsbiksci5hZGRFdmVudExpc3RlbmVyKGEubW92ZSxlLnNjcm9sbGJhci5vbkRyYWdNb3ZlLG4pLHIuYWRkRXZlbnRMaXN0ZW5lcihhLmVuZCxlLnNjcm9sbGJhci5vbkRyYWdFbmQsbykpLChzLnNpbXVsYXRlVG91Y2gmJiFtLmlvcyYmIW0uYW5kcm9pZHx8cy5zaW11bGF0ZVRvdWNoJiYhWS50b3VjaCYmbS5pb3MpJiYoci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsZS5zY3JvbGxiYXIub25EcmFnU3RhcnQsbiksZi5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsZS5zY3JvbGxiYXIub25EcmFnTW92ZSxuKSxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsZS5zY3JvbGxiYXIub25EcmFnRW5kLG8pKSk6KHIuYWRkRXZlbnRMaXN0ZW5lcihpLnN0YXJ0LGUuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LG4pLGYuYWRkRXZlbnRMaXN0ZW5lcihpLm1vdmUsZS5zY3JvbGxiYXIub25EcmFnTW92ZSxuKSxmLmFkZEV2ZW50TGlzdGVuZXIoaS5lbmQsZS5zY3JvbGxiYXIub25EcmFnRW5kLG8pKX19LGRpc2FibGVEcmFnZ2FibGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKGUucGFyYW1zLnNjcm9sbGJhci5lbCl7dmFyIHQ9ZS5zY3JvbGxiYXIsYT1lLnRvdWNoRXZlbnRzLGk9ZS50b3VjaEV2ZW50c0Rlc2t0b3Ascz1lLnBhcmFtcyxyPXQuJGVsWzBdLG49ISghWS5wYXNzaXZlTGlzdGVuZXJ8fCFzLnBhc3NpdmVMaXN0ZW5lcnMpJiZ7cGFzc2l2ZTohMSxjYXB0dXJlOiExfSxvPSEoIVkucGFzc2l2ZUxpc3RlbmVyfHwhcy5wYXNzaXZlTGlzdGVuZXJzKSYme3Bhc3NpdmU6ITAsY2FwdHVyZTohMX07WS50b3VjaHx8IVkucG9pbnRlckV2ZW50cyYmIVkucHJlZml4ZWRQb2ludGVyRXZlbnRzPyhZLnRvdWNoJiYoci5yZW1vdmVFdmVudExpc3RlbmVyKGEuc3RhcnQsZS5zY3JvbGxiYXIub25EcmFnU3RhcnQsbiksci5yZW1vdmVFdmVudExpc3RlbmVyKGEubW92ZSxlLnNjcm9sbGJhci5vbkRyYWdNb3ZlLG4pLHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLmVuZCxlLnNjcm9sbGJhci5vbkRyYWdFbmQsbykpLChzLnNpbXVsYXRlVG91Y2gmJiFtLmlvcyYmIW0uYW5kcm9pZHx8cy5zaW11bGF0ZVRvdWNoJiYhWS50b3VjaCYmbS5pb3MpJiYoci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsZS5zY3JvbGxiYXIub25EcmFnU3RhcnQsbiksZi5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsZS5zY3JvbGxiYXIub25EcmFnTW92ZSxuKSxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsZS5zY3JvbGxiYXIub25EcmFnRW5kLG8pKSk6KHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihpLnN0YXJ0LGUuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LG4pLGYucmVtb3ZlRXZlbnRMaXN0ZW5lcihpLm1vdmUsZS5zY3JvbGxiYXIub25EcmFnTW92ZSxuKSxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoaS5lbmQsZS5zY3JvbGxiYXIub25EcmFnRW5kLG8pKX19LGluaXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKGUucGFyYW1zLnNjcm9sbGJhci5lbCl7dmFyIHQ9ZS5zY3JvbGxiYXIsYT1lLiRlbCxpPWUucGFyYW1zLnNjcm9sbGJhcixzPUwoaS5lbCk7ZS5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMmJlwic3RyaW5nXCI9PXR5cGVvZiBpLmVsJiYxPHMubGVuZ3RoJiYxPT09YS5maW5kKGkuZWwpLmxlbmd0aCYmKHM9YS5maW5kKGkuZWwpKTt2YXIgcj1zLmZpbmQoXCIuXCIrZS5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcyk7MD09PXIubGVuZ3RoJiYocj1MKCc8ZGl2IGNsYXNzPVwiJytlLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzKydcIj48L2Rpdj4nKSxzLmFwcGVuZChyKSksWC5leHRlbmQodCx7JGVsOnMsZWw6c1swXSwkZHJhZ0VsOnIsZHJhZ0VsOnJbMF19KSxpLmRyYWdnYWJsZSYmdC5lbmFibGVEcmFnZ2FibGUoKX19LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnNjcm9sbGJhci5kaXNhYmxlRHJhZ2dhYmxlKCl9fSxGPXtzZXRUcmFuc2Zvcm06ZnVuY3Rpb24oZSx0KXt2YXIgYT10aGlzLnJ0bCxpPUwoZSkscz1hPy0xOjEscj1pLmF0dHIoXCJkYXRhLXN3aXBlci1wYXJhbGxheFwiKXx8XCIwXCIsbj1pLmF0dHIoXCJkYXRhLXN3aXBlci1wYXJhbGxheC14XCIpLG89aS5hdHRyKFwiZGF0YS1zd2lwZXItcGFyYWxsYXgteVwiKSxsPWkuYXR0cihcImRhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXCIpLGQ9aS5hdHRyKFwiZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eVwiKTtpZihufHxvPyhuPW58fFwiMFwiLG89b3x8XCIwXCIpOnRoaXMuaXNIb3Jpem9udGFsKCk/KG49cixvPVwiMFwiKToobz1yLG49XCIwXCIpLG49MDw9bi5pbmRleE9mKFwiJVwiKT9wYXJzZUludChuLDEwKSp0KnMrXCIlXCI6bip0KnMrXCJweFwiLG89MDw9by5pbmRleE9mKFwiJVwiKT9wYXJzZUludChvLDEwKSp0K1wiJVwiOm8qdCtcInB4XCIsbnVsbCE9ZCl7dmFyIHA9ZC0oZC0xKSooMS1NYXRoLmFicyh0KSk7aVswXS5zdHlsZS5vcGFjaXR5PXB9aWYobnVsbD09bClpLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiK24rXCIsIFwiK28rXCIsIDBweClcIik7ZWxzZXt2YXIgYz1sLShsLTEpKigxLU1hdGguYWJzKHQpKTtpLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiK24rXCIsIFwiK28rXCIsIDBweCkgc2NhbGUoXCIrYytcIilcIil9fSxzZXRUcmFuc2xhdGU6ZnVuY3Rpb24oKXt2YXIgaT10aGlzLGU9aS4kZWwsdD1pLnNsaWRlcyxzPWkucHJvZ3Jlc3Mscj1pLnNuYXBHcmlkO2UuY2hpbGRyZW4oXCJbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XVwiKS5lYWNoKGZ1bmN0aW9uKGUsdCl7aS5wYXJhbGxheC5zZXRUcmFuc2Zvcm0odCxzKX0pLHQuZWFjaChmdW5jdGlvbihlLHQpe3ZhciBhPXQucHJvZ3Jlc3M7MTxpLnBhcmFtcy5zbGlkZXNQZXJHcm91cCYmXCJhdXRvXCIhPT1pLnBhcmFtcy5zbGlkZXNQZXJWaWV3JiYoYSs9TWF0aC5jZWlsKGUvMiktcyooci5sZW5ndGgtMSkpLGE9TWF0aC5taW4oTWF0aC5tYXgoYSwtMSksMSksTCh0KS5maW5kKFwiW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV1cIikuZWFjaChmdW5jdGlvbihlLHQpe2kucGFyYWxsYXguc2V0VHJhbnNmb3JtKHQsYSl9KX0pfSxzZXRUcmFuc2l0aW9uOmZ1bmN0aW9uKHMpe3ZvaWQgMD09PXMmJihzPXRoaXMucGFyYW1zLnNwZWVkKTt0aGlzLiRlbC5maW5kKFwiW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV1cIikuZWFjaChmdW5jdGlvbihlLHQpe3ZhciBhPUwodCksaT1wYXJzZUludChhLmF0dHIoXCJkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvblwiKSwxMCl8fHM7MD09PXMmJihpPTApLGEudHJhbnNpdGlvbihpKX0pfX0sVz17Z2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlczpmdW5jdGlvbihlKXtpZihlLnRhcmdldFRvdWNoZXMubGVuZ3RoPDIpcmV0dXJuIDE7dmFyIHQ9ZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYLGE9ZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZLGk9ZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VYLHM9ZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VZO3JldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coaS10LDIpK01hdGgucG93KHMtYSwyKSl9LG9uR2VzdHVyZVN0YXJ0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsYT10LnBhcmFtcy56b29tLGk9dC56b29tLHM9aS5nZXN0dXJlO2lmKGkuZmFrZUdlc3R1cmVUb3VjaGVkPSExLGkuZmFrZUdlc3R1cmVNb3ZlZD0hMSwhWS5nZXN0dXJlcyl7aWYoXCJ0b3VjaHN0YXJ0XCIhPT1lLnR5cGV8fFwidG91Y2hzdGFydFwiPT09ZS50eXBlJiZlLnRhcmdldFRvdWNoZXMubGVuZ3RoPDIpcmV0dXJuO2kuZmFrZUdlc3R1cmVUb3VjaGVkPSEwLHMuc2NhbGVTdGFydD1XLmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSl9cy4kc2xpZGVFbCYmcy4kc2xpZGVFbC5sZW5ndGh8fChzLiRzbGlkZUVsPUwoZS50YXJnZXQpLmNsb3Nlc3QoXCIuc3dpcGVyLXNsaWRlXCIpLDA9PT1zLiRzbGlkZUVsLmxlbmd0aCYmKHMuJHNsaWRlRWw9dC5zbGlkZXMuZXEodC5hY3RpdmVJbmRleCkpLHMuJGltYWdlRWw9cy4kc2xpZGVFbC5maW5kKFwiaW1nLCBzdmcsIGNhbnZhc1wiKSxzLiRpbWFnZVdyYXBFbD1zLiRpbWFnZUVsLnBhcmVudChcIi5cIithLmNvbnRhaW5lckNsYXNzKSxzLm1heFJhdGlvPXMuJGltYWdlV3JhcEVsLmF0dHIoXCJkYXRhLXN3aXBlci16b29tXCIpfHxhLm1heFJhdGlvLDAhPT1zLiRpbWFnZVdyYXBFbC5sZW5ndGgpPyhzLiRpbWFnZUVsLnRyYW5zaXRpb24oMCksdC56b29tLmlzU2NhbGluZz0hMCk6cy4kaW1hZ2VFbD12b2lkIDB9LG9uR2VzdHVyZUNoYW5nZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLnBhcmFtcy56b29tLGE9dGhpcy56b29tLGk9YS5nZXN0dXJlO2lmKCFZLmdlc3R1cmVzKXtpZihcInRvdWNobW92ZVwiIT09ZS50eXBlfHxcInRvdWNobW92ZVwiPT09ZS50eXBlJiZlLnRhcmdldFRvdWNoZXMubGVuZ3RoPDIpcmV0dXJuO2EuZmFrZUdlc3R1cmVNb3ZlZD0hMCxpLnNjYWxlTW92ZT1XLmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSl9aS4kaW1hZ2VFbCYmMCE9PWkuJGltYWdlRWwubGVuZ3RoJiYoWS5nZXN0dXJlcz90aGlzLnpvb20uc2NhbGU9ZS5zY2FsZSphLmN1cnJlbnRTY2FsZTphLnNjYWxlPWkuc2NhbGVNb3ZlL2kuc2NhbGVTdGFydCphLmN1cnJlbnRTY2FsZSxhLnNjYWxlPmkubWF4UmF0aW8mJihhLnNjYWxlPWkubWF4UmF0aW8tMStNYXRoLnBvdyhhLnNjYWxlLWkubWF4UmF0aW8rMSwuNSkpLGEuc2NhbGU8dC5taW5SYXRpbyYmKGEuc2NhbGU9dC5taW5SYXRpbysxLU1hdGgucG93KHQubWluUmF0aW8tYS5zY2FsZSsxLC41KSksaS4kaW1hZ2VFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIrYS5zY2FsZStcIilcIikpfSxvbkdlc3R1cmVFbmQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wYXJhbXMuem9vbSxhPXRoaXMuem9vbSxpPWEuZ2VzdHVyZTtpZighWS5nZXN0dXJlcyl7aWYoIWEuZmFrZUdlc3R1cmVUb3VjaGVkfHwhYS5mYWtlR2VzdHVyZU1vdmVkKXJldHVybjtpZihcInRvdWNoZW5kXCIhPT1lLnR5cGV8fFwidG91Y2hlbmRcIj09PWUudHlwZSYmZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg8MiYmIW0uYW5kcm9pZClyZXR1cm47YS5mYWtlR2VzdHVyZVRvdWNoZWQ9ITEsYS5mYWtlR2VzdHVyZU1vdmVkPSExfWkuJGltYWdlRWwmJjAhPT1pLiRpbWFnZUVsLmxlbmd0aCYmKGEuc2NhbGU9TWF0aC5tYXgoTWF0aC5taW4oYS5zY2FsZSxpLm1heFJhdGlvKSx0Lm1pblJhdGlvKSxpLiRpbWFnZUVsLnRyYW5zaXRpb24odGhpcy5wYXJhbXMuc3BlZWQpLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZShcIithLnNjYWxlK1wiKVwiKSxhLmN1cnJlbnRTY2FsZT1hLnNjYWxlLGEuaXNTY2FsaW5nPSExLDE9PT1hLnNjYWxlJiYoaS4kc2xpZGVFbD12b2lkIDApKX0sb25Ub3VjaFN0YXJ0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuem9vbSxhPXQuZ2VzdHVyZSxpPXQuaW1hZ2U7YS4kaW1hZ2VFbCYmMCE9PWEuJGltYWdlRWwubGVuZ3RoJiYoaS5pc1RvdWNoZWR8fChtLmFuZHJvaWQmJmUucHJldmVudERlZmF1bHQoKSxpLmlzVG91Y2hlZD0hMCxpLnRvdWNoZXNTdGFydC54PVwidG91Y2hzdGFydFwiPT09ZS50eXBlP2UudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDplLnBhZ2VYLGkudG91Y2hlc1N0YXJ0Lnk9XCJ0b3VjaHN0YXJ0XCI9PT1lLnR5cGU/ZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZOmUucGFnZVkpKX0sb25Ub3VjaE1vdmU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxhPXQuem9vbSxpPWEuZ2VzdHVyZSxzPWEuaW1hZ2Uscj1hLnZlbG9jaXR5O2lmKGkuJGltYWdlRWwmJjAhPT1pLiRpbWFnZUVsLmxlbmd0aCYmKHQuYWxsb3dDbGljaz0hMSxzLmlzVG91Y2hlZCYmaS4kc2xpZGVFbCkpe3MuaXNNb3ZlZHx8KHMud2lkdGg9aS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aCxzLmhlaWdodD1pLiRpbWFnZUVsWzBdLm9mZnNldEhlaWdodCxzLnN0YXJ0WD1YLmdldFRyYW5zbGF0ZShpLiRpbWFnZVdyYXBFbFswXSxcInhcIil8fDAscy5zdGFydFk9WC5nZXRUcmFuc2xhdGUoaS4kaW1hZ2VXcmFwRWxbMF0sXCJ5XCIpfHwwLGkuc2xpZGVXaWR0aD1pLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoLGkuc2xpZGVIZWlnaHQ9aS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQsaS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigwKSx0LnJ0bCYmKHMuc3RhcnRYPS1zLnN0YXJ0WCxzLnN0YXJ0WT0tcy5zdGFydFkpKTt2YXIgbj1zLndpZHRoKmEuc2NhbGUsbz1zLmhlaWdodCphLnNjYWxlO2lmKCEobjxpLnNsaWRlV2lkdGgmJm88aS5zbGlkZUhlaWdodCkpe2lmKHMubWluWD1NYXRoLm1pbihpLnNsaWRlV2lkdGgvMi1uLzIsMCkscy5tYXhYPS1zLm1pblgscy5taW5ZPU1hdGgubWluKGkuc2xpZGVIZWlnaHQvMi1vLzIsMCkscy5tYXhZPS1zLm1pblkscy50b3VjaGVzQ3VycmVudC54PVwidG91Y2htb3ZlXCI9PT1lLnR5cGU/ZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYOmUucGFnZVgscy50b3VjaGVzQ3VycmVudC55PVwidG91Y2htb3ZlXCI9PT1lLnR5cGU/ZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZOmUucGFnZVksIXMuaXNNb3ZlZCYmIWEuaXNTY2FsaW5nKXtpZih0LmlzSG9yaXpvbnRhbCgpJiYoTWF0aC5mbG9vcihzLm1pblgpPT09TWF0aC5mbG9vcihzLnN0YXJ0WCkmJnMudG91Y2hlc0N1cnJlbnQueDxzLnRvdWNoZXNTdGFydC54fHxNYXRoLmZsb29yKHMubWF4WCk9PT1NYXRoLmZsb29yKHMuc3RhcnRYKSYmcy50b3VjaGVzQ3VycmVudC54PnMudG91Y2hlc1N0YXJ0LngpKXJldHVybiB2b2lkKHMuaXNUb3VjaGVkPSExKTtpZighdC5pc0hvcml6b250YWwoKSYmKE1hdGguZmxvb3Iocy5taW5ZKT09PU1hdGguZmxvb3Iocy5zdGFydFkpJiZzLnRvdWNoZXNDdXJyZW50Lnk8cy50b3VjaGVzU3RhcnQueXx8TWF0aC5mbG9vcihzLm1heFkpPT09TWF0aC5mbG9vcihzLnN0YXJ0WSkmJnMudG91Y2hlc0N1cnJlbnQueT5zLnRvdWNoZXNTdGFydC55KSlyZXR1cm4gdm9pZChzLmlzVG91Y2hlZD0hMSl9ZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCkscy5pc01vdmVkPSEwLHMuY3VycmVudFg9cy50b3VjaGVzQ3VycmVudC54LXMudG91Y2hlc1N0YXJ0Lngrcy5zdGFydFgscy5jdXJyZW50WT1zLnRvdWNoZXNDdXJyZW50Lnktcy50b3VjaGVzU3RhcnQueStzLnN0YXJ0WSxzLmN1cnJlbnRYPHMubWluWCYmKHMuY3VycmVudFg9cy5taW5YKzEtTWF0aC5wb3cocy5taW5YLXMuY3VycmVudFgrMSwuOCkpLHMuY3VycmVudFg+cy5tYXhYJiYocy5jdXJyZW50WD1zLm1heFgtMStNYXRoLnBvdyhzLmN1cnJlbnRYLXMubWF4WCsxLC44KSkscy5jdXJyZW50WTxzLm1pblkmJihzLmN1cnJlbnRZPXMubWluWSsxLU1hdGgucG93KHMubWluWS1zLmN1cnJlbnRZKzEsLjgpKSxzLmN1cnJlbnRZPnMubWF4WSYmKHMuY3VycmVudFk9cy5tYXhZLTErTWF0aC5wb3cocy5jdXJyZW50WS1zLm1heFkrMSwuOCkpLHIucHJldlBvc2l0aW9uWHx8KHIucHJldlBvc2l0aW9uWD1zLnRvdWNoZXNDdXJyZW50LngpLHIucHJldlBvc2l0aW9uWXx8KHIucHJldlBvc2l0aW9uWT1zLnRvdWNoZXNDdXJyZW50LnkpLHIucHJldlRpbWV8fChyLnByZXZUaW1lPURhdGUubm93KCkpLHIueD0ocy50b3VjaGVzQ3VycmVudC54LXIucHJldlBvc2l0aW9uWCkvKERhdGUubm93KCktci5wcmV2VGltZSkvMixyLnk9KHMudG91Y2hlc0N1cnJlbnQueS1yLnByZXZQb3NpdGlvblkpLyhEYXRlLm5vdygpLXIucHJldlRpbWUpLzIsTWF0aC5hYnMocy50b3VjaGVzQ3VycmVudC54LXIucHJldlBvc2l0aW9uWCk8MiYmKHIueD0wKSxNYXRoLmFicyhzLnRvdWNoZXNDdXJyZW50Lnktci5wcmV2UG9zaXRpb25ZKTwyJiYoci55PTApLHIucHJldlBvc2l0aW9uWD1zLnRvdWNoZXNDdXJyZW50Lngsci5wcmV2UG9zaXRpb25ZPXMudG91Y2hlc0N1cnJlbnQueSxyLnByZXZUaW1lPURhdGUubm93KCksaS4kaW1hZ2VXcmFwRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIrcy5jdXJyZW50WCtcInB4LCBcIitzLmN1cnJlbnRZK1wicHgsMClcIil9fX0sb25Ub3VjaEVuZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuem9vbSx0PWUuZ2VzdHVyZSxhPWUuaW1hZ2UsaT1lLnZlbG9jaXR5O2lmKHQuJGltYWdlRWwmJjAhPT10LiRpbWFnZUVsLmxlbmd0aCl7aWYoIWEuaXNUb3VjaGVkfHwhYS5pc01vdmVkKXJldHVybiBhLmlzVG91Y2hlZD0hMSx2b2lkKGEuaXNNb3ZlZD0hMSk7YS5pc1RvdWNoZWQ9ITEsYS5pc01vdmVkPSExO3ZhciBzPTMwMCxyPTMwMCxuPWkueCpzLG89YS5jdXJyZW50WCtuLGw9aS55KnIsZD1hLmN1cnJlbnRZK2w7MCE9PWkueCYmKHM9TWF0aC5hYnMoKG8tYS5jdXJyZW50WCkvaS54KSksMCE9PWkueSYmKHI9TWF0aC5hYnMoKGQtYS5jdXJyZW50WSkvaS55KSk7dmFyIHA9TWF0aC5tYXgocyxyKTthLmN1cnJlbnRYPW8sYS5jdXJyZW50WT1kO3ZhciBjPWEud2lkdGgqZS5zY2FsZSx1PWEuaGVpZ2h0KmUuc2NhbGU7YS5taW5YPU1hdGgubWluKHQuc2xpZGVXaWR0aC8yLWMvMiwwKSxhLm1heFg9LWEubWluWCxhLm1pblk9TWF0aC5taW4odC5zbGlkZUhlaWdodC8yLXUvMiwwKSxhLm1heFk9LWEubWluWSxhLmN1cnJlbnRYPU1hdGgubWF4KE1hdGgubWluKGEuY3VycmVudFgsYS5tYXhYKSxhLm1pblgpLGEuY3VycmVudFk9TWF0aC5tYXgoTWF0aC5taW4oYS5jdXJyZW50WSxhLm1heFkpLGEubWluWSksdC4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbihwKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIithLmN1cnJlbnRYK1wicHgsIFwiK2EuY3VycmVudFkrXCJweCwwKVwiKX19LG9uVHJhbnNpdGlvbkVuZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuem9vbSx0PWUuZ2VzdHVyZTt0LiRzbGlkZUVsJiZ0aGlzLnByZXZpb3VzSW5kZXghPT10aGlzLmFjdGl2ZUluZGV4JiYodC4kaW1hZ2VFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSlcIiksdC4kaW1hZ2VXcmFwRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApXCIpLHQuJHNsaWRlRWw9dm9pZCAwLHQuJGltYWdlRWw9dm9pZCAwLHQuJGltYWdlV3JhcEVsPXZvaWQgMCxlLnNjYWxlPTEsZS5jdXJyZW50U2NhbGU9MSl9LHRvZ2dsZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLnpvb207dC5zY2FsZSYmMSE9PXQuc2NhbGU/dC5vdXQoKTp0LmluKGUpfSxpbjpmdW5jdGlvbihlKXt2YXIgdCxhLGkscyxyLG4sbyxsLGQscCxjLHUsaCx2LGYsbSxnPXRoaXMsYj1nLnpvb20sdz1nLnBhcmFtcy56b29tLHk9Yi5nZXN0dXJlLHg9Yi5pbWFnZTsoeS4kc2xpZGVFbHx8KHkuJHNsaWRlRWw9Zy5jbGlja2VkU2xpZGU/TChnLmNsaWNrZWRTbGlkZSk6Zy5zbGlkZXMuZXEoZy5hY3RpdmVJbmRleCkseS4kaW1hZ2VFbD15LiRzbGlkZUVsLmZpbmQoXCJpbWcsIHN2ZywgY2FudmFzXCIpLHkuJGltYWdlV3JhcEVsPXkuJGltYWdlRWwucGFyZW50KFwiLlwiK3cuY29udGFpbmVyQ2xhc3MpKSx5LiRpbWFnZUVsJiYwIT09eS4kaW1hZ2VFbC5sZW5ndGgpJiYoeS4kc2xpZGVFbC5hZGRDbGFzcyhcIlwiK3cuem9vbWVkU2xpZGVDbGFzcyksdm9pZCAwPT09eC50b3VjaGVzU3RhcnQueCYmZT8odD1cInRvdWNoZW5kXCI9PT1lLnR5cGU/ZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWDplLnBhZ2VYLGE9XCJ0b3VjaGVuZFwiPT09ZS50eXBlP2UuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVk6ZS5wYWdlWSk6KHQ9eC50b3VjaGVzU3RhcnQueCxhPXgudG91Y2hlc1N0YXJ0LnkpLGIuc2NhbGU9eS4kaW1hZ2VXcmFwRWwuYXR0cihcImRhdGEtc3dpcGVyLXpvb21cIil8fHcubWF4UmF0aW8sYi5jdXJyZW50U2NhbGU9eS4kaW1hZ2VXcmFwRWwuYXR0cihcImRhdGEtc3dpcGVyLXpvb21cIil8fHcubWF4UmF0aW8sZT8oZj15LiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoLG09eS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQsaT15LiRzbGlkZUVsLm9mZnNldCgpLmxlZnQrZi8yLXQscz15LiRzbGlkZUVsLm9mZnNldCgpLnRvcCttLzItYSxvPXkuJGltYWdlRWxbMF0ub2Zmc2V0V2lkdGgsbD15LiRpbWFnZUVsWzBdLm9mZnNldEhlaWdodCxkPW8qYi5zY2FsZSxwPWwqYi5zY2FsZSxoPS0oYz1NYXRoLm1pbihmLzItZC8yLDApKSx2PS0odT1NYXRoLm1pbihtLzItcC8yLDApKSwocj1pKmIuc2NhbGUpPGMmJihyPWMpLGg8ciYmKHI9aCksKG49cypiLnNjYWxlKTx1JiYobj11KSx2PG4mJihuPXYpKTpuPXI9MCx5LiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIrcitcInB4LCBcIituK1wicHgsMClcIikseS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiK2Iuc2NhbGUrXCIpXCIpKX0sb3V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuem9vbSxhPWUucGFyYW1zLnpvb20saT10Lmdlc3R1cmU7aS4kc2xpZGVFbHx8KGkuJHNsaWRlRWw9ZS5jbGlja2VkU2xpZGU/TChlLmNsaWNrZWRTbGlkZSk6ZS5zbGlkZXMuZXEoZS5hY3RpdmVJbmRleCksaS4kaW1hZ2VFbD1pLiRzbGlkZUVsLmZpbmQoXCJpbWcsIHN2ZywgY2FudmFzXCIpLGkuJGltYWdlV3JhcEVsPWkuJGltYWdlRWwucGFyZW50KFwiLlwiK2EuY29udGFpbmVyQ2xhc3MpKSxpLiRpbWFnZUVsJiYwIT09aS4kaW1hZ2VFbC5sZW5ndGgmJih0LnNjYWxlPTEsdC5jdXJyZW50U2NhbGU9MSxpLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApXCIpLGkuJGltYWdlRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKVwiKSxpLiRzbGlkZUVsLnJlbW92ZUNsYXNzKFwiXCIrYS56b29tZWRTbGlkZUNsYXNzKSxpLiRzbGlkZUVsPXZvaWQgMCl9LGVuYWJsZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLnpvb207aWYoIXQuZW5hYmxlZCl7dC5lbmFibGVkPSEwO3ZhciBhPSEoXCJ0b3VjaHN0YXJ0XCIhPT1lLnRvdWNoRXZlbnRzLnN0YXJ0fHwhWS5wYXNzaXZlTGlzdGVuZXJ8fCFlLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzKSYme3Bhc3NpdmU6ITAsY2FwdHVyZTohMX07WS5nZXN0dXJlcz8oZS4kd3JhcHBlckVsLm9uKFwiZ2VzdHVyZXN0YXJ0XCIsXCIuc3dpcGVyLXNsaWRlXCIsdC5vbkdlc3R1cmVTdGFydCxhKSxlLiR3cmFwcGVyRWwub24oXCJnZXN0dXJlY2hhbmdlXCIsXCIuc3dpcGVyLXNsaWRlXCIsdC5vbkdlc3R1cmVDaGFuZ2UsYSksZS4kd3JhcHBlckVsLm9uKFwiZ2VzdHVyZWVuZFwiLFwiLnN3aXBlci1zbGlkZVwiLHQub25HZXN0dXJlRW5kLGEpKTpcInRvdWNoc3RhcnRcIj09PWUudG91Y2hFdmVudHMuc3RhcnQmJihlLiR3cmFwcGVyRWwub24oZS50b3VjaEV2ZW50cy5zdGFydCxcIi5zd2lwZXItc2xpZGVcIix0Lm9uR2VzdHVyZVN0YXJ0LGEpLGUuJHdyYXBwZXJFbC5vbihlLnRvdWNoRXZlbnRzLm1vdmUsXCIuc3dpcGVyLXNsaWRlXCIsdC5vbkdlc3R1cmVDaGFuZ2UsYSksZS4kd3JhcHBlckVsLm9uKGUudG91Y2hFdmVudHMuZW5kLFwiLnN3aXBlci1zbGlkZVwiLHQub25HZXN0dXJlRW5kLGEpKSxlLiR3cmFwcGVyRWwub24oZS50b3VjaEV2ZW50cy5tb3ZlLFwiLlwiK2UucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3MsdC5vblRvdWNoTW92ZSl9fSxkaXNhYmxlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuem9vbTtpZih0LmVuYWJsZWQpe2Uuem9vbS5lbmFibGVkPSExO3ZhciBhPSEoXCJ0b3VjaHN0YXJ0XCIhPT1lLnRvdWNoRXZlbnRzLnN0YXJ0fHwhWS5wYXNzaXZlTGlzdGVuZXJ8fCFlLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzKSYme3Bhc3NpdmU6ITAsY2FwdHVyZTohMX07WS5nZXN0dXJlcz8oZS4kd3JhcHBlckVsLm9mZihcImdlc3R1cmVzdGFydFwiLFwiLnN3aXBlci1zbGlkZVwiLHQub25HZXN0dXJlU3RhcnQsYSksZS4kd3JhcHBlckVsLm9mZihcImdlc3R1cmVjaGFuZ2VcIixcIi5zd2lwZXItc2xpZGVcIix0Lm9uR2VzdHVyZUNoYW5nZSxhKSxlLiR3cmFwcGVyRWwub2ZmKFwiZ2VzdHVyZWVuZFwiLFwiLnN3aXBlci1zbGlkZVwiLHQub25HZXN0dXJlRW5kLGEpKTpcInRvdWNoc3RhcnRcIj09PWUudG91Y2hFdmVudHMuc3RhcnQmJihlLiR3cmFwcGVyRWwub2ZmKGUudG91Y2hFdmVudHMuc3RhcnQsXCIuc3dpcGVyLXNsaWRlXCIsdC5vbkdlc3R1cmVTdGFydCxhKSxlLiR3cmFwcGVyRWwub2ZmKGUudG91Y2hFdmVudHMubW92ZSxcIi5zd2lwZXItc2xpZGVcIix0Lm9uR2VzdHVyZUNoYW5nZSxhKSxlLiR3cmFwcGVyRWwub2ZmKGUudG91Y2hFdmVudHMuZW5kLFwiLnN3aXBlci1zbGlkZVwiLHQub25HZXN0dXJlRW5kLGEpKSxlLiR3cmFwcGVyRWwub2ZmKGUudG91Y2hFdmVudHMubW92ZSxcIi5cIitlLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzLHQub25Ub3VjaE1vdmUpfX19LHE9e2xvYWRJblNsaWRlOmZ1bmN0aW9uKGUsbCl7dm9pZCAwPT09bCYmKGw9ITApO3ZhciBkPXRoaXMscD1kLnBhcmFtcy5sYXp5O2lmKHZvaWQgMCE9PWUmJjAhPT1kLnNsaWRlcy5sZW5ndGgpe3ZhciBjPWQudmlydHVhbCYmZC5wYXJhbXMudmlydHVhbC5lbmFibGVkP2QuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIitkLnBhcmFtcy5zbGlkZUNsYXNzKydbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInK2UrJ1wiXScpOmQuc2xpZGVzLmVxKGUpLHQ9Yy5maW5kKFwiLlwiK3AuZWxlbWVudENsYXNzK1wiOm5vdCguXCIrcC5sb2FkZWRDbGFzcytcIik6bm90KC5cIitwLmxvYWRpbmdDbGFzcytcIilcIik7IWMuaGFzQ2xhc3MocC5lbGVtZW50Q2xhc3MpfHxjLmhhc0NsYXNzKHAubG9hZGVkQ2xhc3MpfHxjLmhhc0NsYXNzKHAubG9hZGluZ0NsYXNzKXx8KHQ9dC5hZGQoY1swXSkpLDAhPT10Lmxlbmd0aCYmdC5lYWNoKGZ1bmN0aW9uKGUsdCl7dmFyIGk9TCh0KTtpLmFkZENsYXNzKHAubG9hZGluZ0NsYXNzKTt2YXIgcz1pLmF0dHIoXCJkYXRhLWJhY2tncm91bmRcIikscj1pLmF0dHIoXCJkYXRhLXNyY1wiKSxuPWkuYXR0cihcImRhdGEtc3Jjc2V0XCIpLG89aS5hdHRyKFwiZGF0YS1zaXplc1wiKTtkLmxvYWRJbWFnZShpWzBdLHJ8fHMsbixvLCExLGZ1bmN0aW9uKCl7aWYobnVsbCE9ZCYmZCYmKCFkfHxkLnBhcmFtcykmJiFkLmRlc3Ryb3llZCl7aWYocz8oaS5jc3MoXCJiYWNrZ3JvdW5kLWltYWdlXCIsJ3VybChcIicrcysnXCIpJyksaS5yZW1vdmVBdHRyKFwiZGF0YS1iYWNrZ3JvdW5kXCIpKToobiYmKGkuYXR0cihcInNyY3NldFwiLG4pLGkucmVtb3ZlQXR0cihcImRhdGEtc3Jjc2V0XCIpKSxvJiYoaS5hdHRyKFwic2l6ZXNcIixvKSxpLnJlbW92ZUF0dHIoXCJkYXRhLXNpemVzXCIpKSxyJiYoaS5hdHRyKFwic3JjXCIsciksaS5yZW1vdmVBdHRyKFwiZGF0YS1zcmNcIikpKSxpLmFkZENsYXNzKHAubG9hZGVkQ2xhc3MpLnJlbW92ZUNsYXNzKHAubG9hZGluZ0NsYXNzKSxjLmZpbmQoXCIuXCIrcC5wcmVsb2FkZXJDbGFzcykucmVtb3ZlKCksZC5wYXJhbXMubG9vcCYmbCl7dmFyIGU9Yy5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIik7aWYoYy5oYXNDbGFzcyhkLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSl7dmFyIHQ9ZC4kd3JhcHBlckVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInK2UrJ1wiXTpub3QoLicrZC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcytcIilcIik7ZC5sYXp5LmxvYWRJblNsaWRlKHQuaW5kZXgoKSwhMSl9ZWxzZXt2YXIgYT1kLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIrZC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcysnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJytlKydcIl0nKTtkLmxhenkubG9hZEluU2xpZGUoYS5pbmRleCgpLCExKX19ZC5lbWl0KFwibGF6eUltYWdlUmVhZHlcIixjWzBdLGlbMF0pfX0pLGQuZW1pdChcImxhenlJbWFnZUxvYWRcIixjWzBdLGlbMF0pfSl9fSxsb2FkOmZ1bmN0aW9uKCl7dmFyIGk9dGhpcyx0PWkuJHdyYXBwZXJFbCxhPWkucGFyYW1zLHM9aS5zbGlkZXMsZT1pLmFjdGl2ZUluZGV4LHI9aS52aXJ0dWFsJiZhLnZpcnR1YWwuZW5hYmxlZCxuPWEubGF6eSxvPWEuc2xpZGVzUGVyVmlldztmdW5jdGlvbiBsKGUpe2lmKHIpe2lmKHQuY2hpbGRyZW4oXCIuXCIrYS5zbGlkZUNsYXNzKydbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInK2UrJ1wiXScpLmxlbmd0aClyZXR1cm4hMH1lbHNlIGlmKHNbZV0pcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZChlKXtyZXR1cm4gcj9MKGUpLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKTpMKGUpLmluZGV4KCl9aWYoXCJhdXRvXCI9PT1vJiYobz0wKSxpLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkfHwoaS5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZD0hMCksaS5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KXQuY2hpbGRyZW4oXCIuXCIrYS5zbGlkZVZpc2libGVDbGFzcykuZWFjaChmdW5jdGlvbihlLHQpe3ZhciBhPXI/TCh0KS5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIik6TCh0KS5pbmRleCgpO2kubGF6eS5sb2FkSW5TbGlkZShhKX0pO2Vsc2UgaWYoMTxvKWZvcih2YXIgcD1lO3A8ZStvO3ArPTEpbChwKSYmaS5sYXp5LmxvYWRJblNsaWRlKHApO2Vsc2UgaS5sYXp5LmxvYWRJblNsaWRlKGUpO2lmKG4ubG9hZFByZXZOZXh0KWlmKDE8b3x8bi5sb2FkUHJldk5leHRBbW91bnQmJjE8bi5sb2FkUHJldk5leHRBbW91bnQpe2Zvcih2YXIgYz1uLmxvYWRQcmV2TmV4dEFtb3VudCx1PW8saD1NYXRoLm1pbihlK3UrTWF0aC5tYXgoYyx1KSxzLmxlbmd0aCksdj1NYXRoLm1heChlLU1hdGgubWF4KHUsYyksMCksZj1lK287ZjxoO2YrPTEpbChmKSYmaS5sYXp5LmxvYWRJblNsaWRlKGYpO2Zvcih2YXIgbT12O208ZTttKz0xKWwobSkmJmkubGF6eS5sb2FkSW5TbGlkZShtKX1lbHNle3ZhciBnPXQuY2hpbGRyZW4oXCIuXCIrYS5zbGlkZU5leHRDbGFzcyk7MDxnLmxlbmd0aCYmaS5sYXp5LmxvYWRJblNsaWRlKGQoZykpO3ZhciBiPXQuY2hpbGRyZW4oXCIuXCIrYS5zbGlkZVByZXZDbGFzcyk7MDxiLmxlbmd0aCYmaS5sYXp5LmxvYWRJblNsaWRlKGQoYikpfX19LGo9e0xpbmVhclNwbGluZTpmdW5jdGlvbihlLHQpe3ZhciBhLGkscyxyLG4sbz1mdW5jdGlvbihlLHQpe2ZvcihpPS0xLGE9ZS5sZW5ndGg7MTxhLWk7KWVbcz1hK2k+PjFdPD10P2k9czphPXM7cmV0dXJuIGF9O3JldHVybiB0aGlzLng9ZSx0aGlzLnk9dCx0aGlzLmxhc3RJbmRleD1lLmxlbmd0aC0xLHRoaXMuaW50ZXJwb2xhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU/KG49byh0aGlzLngsZSkscj1uLTEsKGUtdGhpcy54W3JdKSoodGhpcy55W25dLXRoaXMueVtyXSkvKHRoaXMueFtuXS10aGlzLnhbcl0pK3RoaXMueVtyXSk6MH0sdGhpc30sZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbjpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuY29udHJvbGxlci5zcGxpbmV8fCh0LmNvbnRyb2xsZXIuc3BsaW5lPXQucGFyYW1zLmxvb3A/bmV3IGouTGluZWFyU3BsaW5lKHQuc2xpZGVzR3JpZCxlLnNsaWRlc0dyaWQpOm5ldyBqLkxpbmVhclNwbGluZSh0LnNuYXBHcmlkLGUuc25hcEdyaWQpKX0sc2V0VHJhbnNsYXRlOmZ1bmN0aW9uKGUsdCl7dmFyIGEsaSxzPXRoaXMscj1zLmNvbnRyb2xsZXIuY29udHJvbDtmdW5jdGlvbiBuKGUpe3ZhciB0PXMucnRsVHJhbnNsYXRlPy1zLnRyYW5zbGF0ZTpzLnRyYW5zbGF0ZTtcInNsaWRlXCI9PT1zLnBhcmFtcy5jb250cm9sbGVyLmJ5JiYocy5jb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24oZSksaT0tcy5jb250cm9sbGVyLnNwbGluZS5pbnRlcnBvbGF0ZSgtdCkpLGkmJlwiY29udGFpbmVyXCIhPT1zLnBhcmFtcy5jb250cm9sbGVyLmJ5fHwoYT0oZS5tYXhUcmFuc2xhdGUoKS1lLm1pblRyYW5zbGF0ZSgpKS8ocy5tYXhUcmFuc2xhdGUoKS1zLm1pblRyYW5zbGF0ZSgpKSxpPSh0LXMubWluVHJhbnNsYXRlKCkpKmErZS5taW5UcmFuc2xhdGUoKSkscy5wYXJhbXMuY29udHJvbGxlci5pbnZlcnNlJiYoaT1lLm1heFRyYW5zbGF0ZSgpLWkpLGUudXBkYXRlUHJvZ3Jlc3MoaSksZS5zZXRUcmFuc2xhdGUoaSxzKSxlLnVwZGF0ZUFjdGl2ZUluZGV4KCksZS51cGRhdGVTbGlkZXNDbGFzc2VzKCl9aWYoQXJyYXkuaXNBcnJheShyKSlmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rPTEpcltvXSE9PXQmJnJbb11pbnN0YW5jZW9mIFMmJm4ocltvXSk7ZWxzZSByIGluc3RhbmNlb2YgUyYmdCE9PXImJm4ocil9LHNldFRyYW5zaXRpb246ZnVuY3Rpb24odCxlKXt2YXIgYSxpPXRoaXMscz1pLmNvbnRyb2xsZXIuY29udHJvbDtmdW5jdGlvbiByKGUpe2Uuc2V0VHJhbnNpdGlvbih0LGkpLDAhPT10JiYoZS50cmFuc2l0aW9uU3RhcnQoKSxlLnBhcmFtcy5hdXRvSGVpZ2h0JiZYLm5leHRUaWNrKGZ1bmN0aW9uKCl7ZS51cGRhdGVBdXRvSGVpZ2h0KCl9KSxlLiR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbigpe3MmJihlLnBhcmFtcy5sb29wJiZcInNsaWRlXCI9PT1pLnBhcmFtcy5jb250cm9sbGVyLmJ5JiZlLmxvb3BGaXgoKSxlLnRyYW5zaXRpb25FbmQoKSl9KSl9aWYoQXJyYXkuaXNBcnJheShzKSlmb3IoYT0wO2E8cy5sZW5ndGg7YSs9MSlzW2FdIT09ZSYmc1thXWluc3RhbmNlb2YgUyYmcihzW2FdKTtlbHNlIHMgaW5zdGFuY2VvZiBTJiZlIT09cyYmcihzKX19LEs9e21ha2VFbEZvY3VzYWJsZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5hdHRyKFwidGFiSW5kZXhcIixcIjBcIiksZX0sYWRkRWxSb2xlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuYXR0cihcInJvbGVcIix0KSxlfSxhZGRFbExhYmVsOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuYXR0cihcImFyaWEtbGFiZWxcIix0KSxlfSxkaXNhYmxlRWw6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuYXR0cihcImFyaWEtZGlzYWJsZWRcIiwhMCksZX0sZW5hYmxlRWw6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuYXR0cihcImFyaWEtZGlzYWJsZWRcIiwhMSksZX0sb25FbnRlcktleTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLGE9dC5wYXJhbXMuYTExeTtpZigxMz09PWUua2V5Q29kZSl7dmFyIGk9TChlLnRhcmdldCk7dC5uYXZpZ2F0aW9uJiZ0Lm5hdmlnYXRpb24uJG5leHRFbCYmaS5pcyh0Lm5hdmlnYXRpb24uJG5leHRFbCkmJih0LmlzRW5kJiYhdC5wYXJhbXMubG9vcHx8dC5zbGlkZU5leHQoKSx0LmlzRW5kP3QuYTExeS5ub3RpZnkoYS5sYXN0U2xpZGVNZXNzYWdlKTp0LmExMXkubm90aWZ5KGEubmV4dFNsaWRlTWVzc2FnZSkpLHQubmF2aWdhdGlvbiYmdC5uYXZpZ2F0aW9uLiRwcmV2RWwmJmkuaXModC5uYXZpZ2F0aW9uLiRwcmV2RWwpJiYodC5pc0JlZ2lubmluZyYmIXQucGFyYW1zLmxvb3B8fHQuc2xpZGVQcmV2KCksdC5pc0JlZ2lubmluZz90LmExMXkubm90aWZ5KGEuZmlyc3RTbGlkZU1lc3NhZ2UpOnQuYTExeS5ub3RpZnkoYS5wcmV2U2xpZGVNZXNzYWdlKSksdC5wYWdpbmF0aW9uJiZpLmlzKFwiLlwiK3QucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpJiZpWzBdLmNsaWNrKCl9fSxub3RpZnk6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5hMTF5LmxpdmVSZWdpb247MCE9PXQubGVuZ3RoJiYodC5odG1sKFwiXCIpLHQuaHRtbChlKSl9LHVwZGF0ZU5hdmlnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKCFlLnBhcmFtcy5sb29wKXt2YXIgdD1lLm5hdmlnYXRpb24sYT10LiRuZXh0RWwsaT10LiRwcmV2RWw7aSYmMDxpLmxlbmd0aCYmKGUuaXNCZWdpbm5pbmc/ZS5hMTF5LmRpc2FibGVFbChpKTplLmExMXkuZW5hYmxlRWwoaSkpLGEmJjA8YS5sZW5ndGgmJihlLmlzRW5kP2UuYTExeS5kaXNhYmxlRWwoYSk6ZS5hMTF5LmVuYWJsZUVsKGEpKX19LHVwZGF0ZVBhZ2luYXRpb246ZnVuY3Rpb24oKXt2YXIgaT10aGlzLHM9aS5wYXJhbXMuYTExeTtpLnBhZ2luYXRpb24mJmkucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlJiZpLnBhZ2luYXRpb24uYnVsbGV0cyYmaS5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoJiZpLnBhZ2luYXRpb24uYnVsbGV0cy5lYWNoKGZ1bmN0aW9uKGUsdCl7dmFyIGE9TCh0KTtpLmExMXkubWFrZUVsRm9jdXNhYmxlKGEpLGkuYTExeS5hZGRFbFJvbGUoYSxcImJ1dHRvblwiKSxpLmExMXkuYWRkRWxMYWJlbChhLHMucGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UucmVwbGFjZSgve3tpbmRleH19LyxhLmluZGV4KCkrMSkpfSl9LGluaXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJGVsLmFwcGVuZChlLmExMXkubGl2ZVJlZ2lvbik7dmFyIHQsYSxpPWUucGFyYW1zLmExMXk7ZS5uYXZpZ2F0aW9uJiZlLm5hdmlnYXRpb24uJG5leHRFbCYmKHQ9ZS5uYXZpZ2F0aW9uLiRuZXh0RWwpLGUubmF2aWdhdGlvbiYmZS5uYXZpZ2F0aW9uLiRwcmV2RWwmJihhPWUubmF2aWdhdGlvbi4kcHJldkVsKSx0JiYoZS5hMTF5Lm1ha2VFbEZvY3VzYWJsZSh0KSxlLmExMXkuYWRkRWxSb2xlKHQsXCJidXR0b25cIiksZS5hMTF5LmFkZEVsTGFiZWwodCxpLm5leHRTbGlkZU1lc3NhZ2UpLHQub24oXCJrZXlkb3duXCIsZS5hMTF5Lm9uRW50ZXJLZXkpKSxhJiYoZS5hMTF5Lm1ha2VFbEZvY3VzYWJsZShhKSxlLmExMXkuYWRkRWxSb2xlKGEsXCJidXR0b25cIiksZS5hMTF5LmFkZEVsTGFiZWwoYSxpLnByZXZTbGlkZU1lc3NhZ2UpLGEub24oXCJrZXlkb3duXCIsZS5hMTF5Lm9uRW50ZXJLZXkpKSxlLnBhZ2luYXRpb24mJmUucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlJiZlLnBhZ2luYXRpb24uYnVsbGV0cyYmZS5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoJiZlLnBhZ2luYXRpb24uJGVsLm9uKFwia2V5ZG93blwiLFwiLlwiK2UucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MsZS5hMTF5Lm9uRW50ZXJLZXkpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dmFyIGUsdCxhPXRoaXM7YS5hMTF5LmxpdmVSZWdpb24mJjA8YS5hMTF5LmxpdmVSZWdpb24ubGVuZ3RoJiZhLmExMXkubGl2ZVJlZ2lvbi5yZW1vdmUoKSxhLm5hdmlnYXRpb24mJmEubmF2aWdhdGlvbi4kbmV4dEVsJiYoZT1hLm5hdmlnYXRpb24uJG5leHRFbCksYS5uYXZpZ2F0aW9uJiZhLm5hdmlnYXRpb24uJHByZXZFbCYmKHQ9YS5uYXZpZ2F0aW9uLiRwcmV2RWwpLGUmJmUub2ZmKFwia2V5ZG93blwiLGEuYTExeS5vbkVudGVyS2V5KSx0JiZ0Lm9mZihcImtleWRvd25cIixhLmExMXkub25FbnRlcktleSksYS5wYWdpbmF0aW9uJiZhLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSYmYS5wYWdpbmF0aW9uLmJ1bGxldHMmJmEucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCYmYS5wYWdpbmF0aW9uLiRlbC5vZmYoXCJrZXlkb3duXCIsXCIuXCIrYS5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcyxhLmExMXkub25FbnRlcktleSl9fSxVPXtpbml0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihlLnBhcmFtcy5oaXN0b3J5KXtpZighQi5oaXN0b3J5fHwhQi5oaXN0b3J5LnB1c2hTdGF0ZSlyZXR1cm4gZS5wYXJhbXMuaGlzdG9yeS5lbmFibGVkPSExLHZvaWQoZS5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZD0hMCk7dmFyIHQ9ZS5oaXN0b3J5O3QuaW5pdGlhbGl6ZWQ9ITAsdC5wYXRocz1VLmdldFBhdGhWYWx1ZXMoKSwodC5wYXRocy5rZXl8fHQucGF0aHMudmFsdWUpJiYodC5zY3JvbGxUb1NsaWRlKDAsdC5wYXRocy52YWx1ZSxlLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpLGUucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlfHxCLmFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLGUuaGlzdG9yeS5zZXRIaXN0b3J5UG9wU3RhdGUpKX19LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZXx8Qi5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIix0aGlzLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKX0sc2V0SGlzdG9yeVBvcFN0YXRlOmZ1bmN0aW9uKCl7dGhpcy5oaXN0b3J5LnBhdGhzPVUuZ2V0UGF0aFZhbHVlcygpLHRoaXMuaGlzdG9yeS5zY3JvbGxUb1NsaWRlKHRoaXMucGFyYW1zLnNwZWVkLHRoaXMuaGlzdG9yeS5wYXRocy52YWx1ZSwhMSl9LGdldFBhdGhWYWx1ZXM6ZnVuY3Rpb24oKXt2YXIgZT1CLmxvY2F0aW9uLnBhdGhuYW1lLnNsaWNlKDEpLnNwbGl0KFwiL1wiKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIiE9PWV9KSx0PWUubGVuZ3RoO3JldHVybntrZXk6ZVt0LTJdLHZhbHVlOmVbdC0xXX19LHNldEhpc3Rvcnk6ZnVuY3Rpb24oZSx0KXtpZih0aGlzLmhpc3RvcnkuaW5pdGlhbGl6ZWQmJnRoaXMucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCl7dmFyIGE9dGhpcy5zbGlkZXMuZXEodCksaT1VLnNsdWdpZnkoYS5hdHRyKFwiZGF0YS1oaXN0b3J5XCIpKTtCLmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKGUpfHwoaT1lK1wiL1wiK2kpO3ZhciBzPUIuaGlzdG9yeS5zdGF0ZTtzJiZzLnZhbHVlPT09aXx8KHRoaXMucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlP0IuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe3ZhbHVlOml9LG51bGwsaSk6Qi5oaXN0b3J5LnB1c2hTdGF0ZSh7dmFsdWU6aX0sbnVsbCxpKSl9fSxzbHVnaWZ5OmZ1bmN0aW9uKGUpe3JldHVybiBlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csXCItXCIpLnJlcGxhY2UoL1teXFx3LV0rL2csXCJcIikucmVwbGFjZSgvLS0rL2csXCItXCIpLnJlcGxhY2UoL14tKy8sXCJcIikucmVwbGFjZSgvLSskLyxcIlwiKX0sc2Nyb2xsVG9TbGlkZTpmdW5jdGlvbihlLHQsYSl7dmFyIGk9dGhpcztpZih0KWZvcih2YXIgcz0wLHI9aS5zbGlkZXMubGVuZ3RoO3M8cjtzKz0xKXt2YXIgbj1pLnNsaWRlcy5lcShzKTtpZihVLnNsdWdpZnkobi5hdHRyKFwiZGF0YS1oaXN0b3J5XCIpKT09PXQmJiFuLmhhc0NsYXNzKGkucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKXt2YXIgbz1uLmluZGV4KCk7aS5zbGlkZVRvKG8sZSxhKX19ZWxzZSBpLnNsaWRlVG8oMCxlLGEpfX0sXz17b25IYXNoQ2FuZ2U6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9Zi5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoXCIjXCIsXCJcIik7dCE9PWUuc2xpZGVzLmVxKGUuYWN0aXZlSW5kZXgpLmF0dHIoXCJkYXRhLWhhc2hcIikmJmUuc2xpZGVUbyhlLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIrZS5wYXJhbXMuc2xpZGVDbGFzcysnW2RhdGEtaGFzaD1cIicrdCsnXCJdJykuaW5kZXgoKSl9LHNldEhhc2g6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKGUuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQmJmUucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpaWYoZS5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlJiZCLmhpc3RvcnkmJkIuaGlzdG9yeS5yZXBsYWNlU3RhdGUpQi5oaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLG51bGwsXCIjXCIrZS5zbGlkZXMuZXEoZS5hY3RpdmVJbmRleCkuYXR0cihcImRhdGEtaGFzaFwiKXx8XCJcIik7ZWxzZXt2YXIgdD1lLnNsaWRlcy5lcShlLmFjdGl2ZUluZGV4KSxhPXQuYXR0cihcImRhdGEtaGFzaFwiKXx8dC5hdHRyKFwiZGF0YS1oaXN0b3J5XCIpO2YubG9jYXRpb24uaGFzaD1hfHxcIlwifX0saW5pdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoISghZS5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZHx8ZS5wYXJhbXMuaGlzdG9yeSYmZS5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSl7ZS5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZD0hMDt2YXIgdD1mLmxvY2F0aW9uLmhhc2gucmVwbGFjZShcIiNcIixcIlwiKTtpZih0KWZvcih2YXIgYT0wLGk9ZS5zbGlkZXMubGVuZ3RoO2E8aTthKz0xKXt2YXIgcz1lLnNsaWRlcy5lcShhKTtpZigocy5hdHRyKFwiZGF0YS1oYXNoXCIpfHxzLmF0dHIoXCJkYXRhLWhpc3RvcnlcIikpPT09dCYmIXMuaGFzQ2xhc3MoZS5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpe3ZhciByPXMuaW5kZXgoKTtlLnNsaWRlVG8ociwwLGUucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwhMCl9fWUucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUmJkwoQikub24oXCJoYXNoY2hhbmdlXCIsZS5oYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZSl9fSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSYmTChCKS5vZmYoXCJoYXNoY2hhbmdlXCIsdGhpcy5oYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZSl9fSxaPXtydW46ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS5zbGlkZXMuZXEoZS5hY3RpdmVJbmRleCksYT1lLnBhcmFtcy5hdXRvcGxheS5kZWxheTt0LmF0dHIoXCJkYXRhLXN3aXBlci1hdXRvcGxheVwiKSYmKGE9dC5hdHRyKFwiZGF0YS1zd2lwZXItYXV0b3BsYXlcIil8fGUucGFyYW1zLmF1dG9wbGF5LmRlbGF5KSxlLmF1dG9wbGF5LnRpbWVvdXQ9WC5uZXh0VGljayhmdW5jdGlvbigpe2UucGFyYW1zLmF1dG9wbGF5LnJldmVyc2VEaXJlY3Rpb24/ZS5wYXJhbXMubG9vcD8oZS5sb29wRml4KCksZS5zbGlkZVByZXYoZS5wYXJhbXMuc3BlZWQsITAsITApLGUuZW1pdChcImF1dG9wbGF5XCIpKTplLmlzQmVnaW5uaW5nP2UucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZT9lLmF1dG9wbGF5LnN0b3AoKTooZS5zbGlkZVRvKGUuc2xpZGVzLmxlbmd0aC0xLGUucGFyYW1zLnNwZWVkLCEwLCEwKSxlLmVtaXQoXCJhdXRvcGxheVwiKSk6KGUuc2xpZGVQcmV2KGUucGFyYW1zLnNwZWVkLCEwLCEwKSxlLmVtaXQoXCJhdXRvcGxheVwiKSk6ZS5wYXJhbXMubG9vcD8oZS5sb29wRml4KCksZS5zbGlkZU5leHQoZS5wYXJhbXMuc3BlZWQsITAsITApLGUuZW1pdChcImF1dG9wbGF5XCIpKTplLmlzRW5kP2UucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZT9lLmF1dG9wbGF5LnN0b3AoKTooZS5zbGlkZVRvKDAsZS5wYXJhbXMuc3BlZWQsITAsITApLGUuZW1pdChcImF1dG9wbGF5XCIpKTooZS5zbGlkZU5leHQoZS5wYXJhbXMuc3BlZWQsITAsITApLGUuZW1pdChcImF1dG9wbGF5XCIpKX0sYSl9LHN0YXJ0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gdm9pZCAwPT09ZS5hdXRvcGxheS50aW1lb3V0JiYoIWUuYXV0b3BsYXkucnVubmluZyYmKGUuYXV0b3BsYXkucnVubmluZz0hMCxlLmVtaXQoXCJhdXRvcGxheVN0YXJ0XCIpLGUuYXV0b3BsYXkucnVuKCksITApKX0sc3RvcDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuISFlLmF1dG9wbGF5LnJ1bm5pbmcmJih2b2lkIDAhPT1lLmF1dG9wbGF5LnRpbWVvdXQmJihlLmF1dG9wbGF5LnRpbWVvdXQmJihjbGVhclRpbWVvdXQoZS5hdXRvcGxheS50aW1lb3V0KSxlLmF1dG9wbGF5LnRpbWVvdXQ9dm9pZCAwKSxlLmF1dG9wbGF5LnJ1bm5pbmc9ITEsZS5lbWl0KFwiYXV0b3BsYXlTdG9wXCIpLCEwKSl9LHBhdXNlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC5hdXRvcGxheS5ydW5uaW5nJiYodC5hdXRvcGxheS5wYXVzZWR8fCh0LmF1dG9wbGF5LnRpbWVvdXQmJmNsZWFyVGltZW91dCh0LmF1dG9wbGF5LnRpbWVvdXQpLHQuYXV0b3BsYXkucGF1c2VkPSEwLDAhPT1lJiZ0LnBhcmFtcy5hdXRvcGxheS53YWl0Rm9yVHJhbnNpdGlvbj8odC4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsdC5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpLHQuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0VHJhbnNpdGlvbkVuZFwiLHQuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKSk6KHQuYXV0b3BsYXkucGF1c2VkPSExLHQuYXV0b3BsYXkucnVuKCkpKSl9fSxRPXtzZXRUcmFuc2xhdGU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcyx0PWUuc2xpZGVzLGE9MDthPHQubGVuZ3RoO2ErPTEpe3ZhciBpPWUuc2xpZGVzLmVxKGEpLHM9LWlbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7ZS5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZXx8KHMtPWUudHJhbnNsYXRlKTt2YXIgcj0wO2UuaXNIb3Jpem9udGFsKCl8fChyPXMscz0wKTt2YXIgbj1lLnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZT9NYXRoLm1heCgxLU1hdGguYWJzKGlbMF0ucHJvZ3Jlc3MpLDApOjErTWF0aC5taW4oTWF0aC5tYXgoaVswXS5wcm9ncmVzcywtMSksMCk7aS5jc3Moe29wYWNpdHk6bn0pLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiK3MrXCJweCwgXCIrcitcInB4LCAwcHgpXCIpfX0sc2V0VHJhbnNpdGlvbjpmdW5jdGlvbihlKXt2YXIgYT10aGlzLHQ9YS5zbGlkZXMsaT1hLiR3cmFwcGVyRWw7aWYodC50cmFuc2l0aW9uKGUpLGEucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUmJjAhPT1lKXt2YXIgcz0hMTt0LnRyYW5zaXRpb25FbmQoZnVuY3Rpb24oKXtpZighcyYmYSYmIWEuZGVzdHJveWVkKXtzPSEwLGEuYW5pbWF0aW5nPSExO2Zvcih2YXIgZT1bXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsXCJ0cmFuc2l0aW9uZW5kXCJdLHQ9MDt0PGUubGVuZ3RoO3QrPTEpaS50cmlnZ2VyKGVbdF0pfX0pfX19LEo9e3NldFRyYW5zbGF0ZTpmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcyxhPXQuJGVsLGk9dC4kd3JhcHBlckVsLHM9dC5zbGlkZXMscj10LndpZHRoLG49dC5oZWlnaHQsbz10LnJ0bFRyYW5zbGF0ZSxsPXQuc2l6ZSxkPXQucGFyYW1zLmN1YmVFZmZlY3QscD10LmlzSG9yaXpvbnRhbCgpLGM9dC52aXJ0dWFsJiZ0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQsdT0wO2Quc2hhZG93JiYocD8oMD09PShlPWkuZmluZChcIi5zd2lwZXItY3ViZS1zaGFkb3dcIikpLmxlbmd0aCYmKGU9TCgnPGRpdiBjbGFzcz1cInN3aXBlci1jdWJlLXNoYWRvd1wiPjwvZGl2PicpLGkuYXBwZW5kKGUpKSxlLmNzcyh7aGVpZ2h0OnIrXCJweFwifSkpOjA9PT0oZT1hLmZpbmQoXCIuc3dpcGVyLWN1YmUtc2hhZG93XCIpKS5sZW5ndGgmJihlPUwoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKSxhLmFwcGVuZChlKSkpO2Zvcih2YXIgaD0wO2g8cy5sZW5ndGg7aCs9MSl7dmFyIHY9cy5lcShoKSxmPWg7YyYmKGY9cGFyc2VJbnQodi5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIiksMTApKTt2YXIgbT05MCpmLGc9TWF0aC5mbG9vcihtLzM2MCk7byYmKG09LW0sZz1NYXRoLmZsb29yKC1tLzM2MCkpO3ZhciBiPU1hdGgubWF4KE1hdGgubWluKHZbMF0ucHJvZ3Jlc3MsMSksLTEpLHc9MCx5PTAseD0wO2YlND09MD8odz00Ki1nKmwseD0wKTooZi0xKSU0PT0wPyh3PTAseD00Ki1nKmwpOihmLTIpJTQ9PTA/KHc9bCs0KmcqbCx4PWwpOihmLTMpJTQ9PTAmJih3PS1sLHg9MypsKzQqbCpnKSxvJiYodz0tdykscHx8KHk9dyx3PTApO3ZhciBFPVwicm90YXRlWChcIisocD8wOi1tKStcImRlZykgcm90YXRlWShcIisocD9tOjApK1wiZGVnKSB0cmFuc2xhdGUzZChcIit3K1wicHgsIFwiK3krXCJweCwgXCIreCtcInB4KVwiO2lmKGI8PTEmJi0xPGImJih1PTkwKmYrOTAqYixvJiYodT05MCotZi05MCpiKSksdi50cmFuc2Zvcm0oRSksZC5zbGlkZVNoYWRvd3Mpe3ZhciBUPXA/di5maW5kKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKTp2LmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3BcIiksUz1wP3YuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0XCIpOnYuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbVwiKTswPT09VC5sZW5ndGgmJihUPUwoJzxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LScrKHA/XCJsZWZ0XCI6XCJ0b3BcIikrJ1wiPjwvZGl2PicpLHYuYXBwZW5kKFQpKSwwPT09Uy5sZW5ndGgmJihTPUwoJzxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LScrKHA/XCJyaWdodFwiOlwiYm90dG9tXCIpKydcIj48L2Rpdj4nKSx2LmFwcGVuZChTKSksVC5sZW5ndGgmJihUWzBdLnN0eWxlLm9wYWNpdHk9TWF0aC5tYXgoLWIsMCkpLFMubGVuZ3RoJiYoU1swXS5zdHlsZS5vcGFjaXR5PU1hdGgubWF4KGIsMCkpfX1pZihpLmNzcyh7XCItd2Via2l0LXRyYW5zZm9ybS1vcmlnaW5cIjpcIjUwJSA1MCUgLVwiK2wvMitcInB4XCIsXCItbW96LXRyYW5zZm9ybS1vcmlnaW5cIjpcIjUwJSA1MCUgLVwiK2wvMitcInB4XCIsXCItbXMtdHJhbnNmb3JtLW9yaWdpblwiOlwiNTAlIDUwJSAtXCIrbC8yK1wicHhcIixcInRyYW5zZm9ybS1vcmlnaW5cIjpcIjUwJSA1MCUgLVwiK2wvMitcInB4XCJ9KSxkLnNoYWRvdylpZihwKWUudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMHB4LCBcIisoci8yK2Quc2hhZG93T2Zmc2V0KStcInB4LCBcIistci8yK1wicHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoXCIrZC5zaGFkb3dTY2FsZStcIilcIik7ZWxzZXt2YXIgQz1NYXRoLmFicyh1KS05MCpNYXRoLmZsb29yKE1hdGguYWJzKHUpLzkwKSxNPTEuNS0oTWF0aC5zaW4oMipDKk1hdGguUEkvMzYwKS8yK01hdGguY29zKDIqQypNYXRoLlBJLzM2MCkvMiksej1kLnNoYWRvd1NjYWxlLGs9ZC5zaGFkb3dTY2FsZS9NLFA9ZC5zaGFkb3dPZmZzZXQ7ZS50cmFuc2Zvcm0oXCJzY2FsZTNkKFwiK3orXCIsIDEsIFwiK2srXCIpIHRyYW5zbGF0ZTNkKDBweCwgXCIrKG4vMitQKStcInB4LCBcIistbi8yL2srXCJweCkgcm90YXRlWCgtOTBkZWcpXCIpfXZhciAkPUkuaXNTYWZhcml8fEkuaXNVaVdlYlZpZXc/LWwvMjowO2kudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMHB4LDAsXCIrJCtcInB4KSByb3RhdGVYKFwiKyh0LmlzSG9yaXpvbnRhbCgpPzA6dSkrXCJkZWcpIHJvdGF0ZVkoXCIrKHQuaXNIb3Jpem9udGFsKCk/LXU6MCkrXCJkZWcpXCIpfSxzZXRUcmFuc2l0aW9uOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuJGVsO3RoaXMuc2xpZGVzLnRyYW5zaXRpb24oZSkuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKS50cmFuc2l0aW9uKGUpLHRoaXMucGFyYW1zLmN1YmVFZmZlY3Quc2hhZG93JiYhdGhpcy5pc0hvcml6b250YWwoKSYmdC5maW5kKFwiLnN3aXBlci1jdWJlLXNoYWRvd1wiKS50cmFuc2l0aW9uKGUpfX0sZWU9e3NldFRyYW5zbGF0ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLHQ9ZS5zbGlkZXMsYT1lLnJ0bFRyYW5zbGF0ZSxpPTA7aTx0Lmxlbmd0aDtpKz0xKXt2YXIgcz10LmVxKGkpLHI9c1swXS5wcm9ncmVzcztlLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24mJihyPU1hdGgubWF4KE1hdGgubWluKHNbMF0ucHJvZ3Jlc3MsMSksLTEpKTt2YXIgbj0tMTgwKnIsbz0wLGw9LXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQsZD0wO2lmKGUuaXNIb3Jpem9udGFsKCk/YSYmKG49LW4pOihkPWwsbz0tbixuPWw9MCksc1swXS5zdHlsZS56SW5kZXg9LU1hdGguYWJzKE1hdGgucm91bmQocikpK3QubGVuZ3RoLGUucGFyYW1zLmZsaXBFZmZlY3Quc2xpZGVTaGFkb3dzKXt2YXIgcD1lLmlzSG9yaXpvbnRhbCgpP3MuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcIik6cy5maW5kKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wXCIpLGM9ZS5pc0hvcml6b250YWwoKT9zLmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodFwiKTpzLmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b21cIik7MD09PXAubGVuZ3RoJiYocD1MKCc8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0nKyhlLmlzSG9yaXpvbnRhbCgpP1wibGVmdFwiOlwidG9wXCIpKydcIj48L2Rpdj4nKSxzLmFwcGVuZChwKSksMD09PWMubGVuZ3RoJiYoYz1MKCc8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0nKyhlLmlzSG9yaXpvbnRhbCgpP1wicmlnaHRcIjpcImJvdHRvbVwiKSsnXCI+PC9kaXY+Jykscy5hcHBlbmQoYykpLHAubGVuZ3RoJiYocFswXS5zdHlsZS5vcGFjaXR5PU1hdGgubWF4KC1yLDApKSxjLmxlbmd0aCYmKGNbMF0uc3R5bGUub3BhY2l0eT1NYXRoLm1heChyLDApKX1zLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiK2wrXCJweCwgXCIrZCtcInB4LCAwcHgpIHJvdGF0ZVgoXCIrbytcImRlZykgcm90YXRlWShcIituK1wiZGVnKVwiKX19LHNldFRyYW5zaXRpb246ZnVuY3Rpb24oZSl7dmFyIGE9dGhpcyx0PWEuc2xpZGVzLGk9YS5hY3RpdmVJbmRleCxzPWEuJHdyYXBwZXJFbDtpZih0LnRyYW5zaXRpb24oZSkuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKS50cmFuc2l0aW9uKGUpLGEucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUmJjAhPT1lKXt2YXIgcj0hMTt0LmVxKGkpLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24oKXtpZighciYmYSYmIWEuZGVzdHJveWVkKXtyPSEwLGEuYW5pbWF0aW5nPSExO2Zvcih2YXIgZT1bXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsXCJ0cmFuc2l0aW9uZW5kXCJdLHQ9MDt0PGUubGVuZ3RoO3QrPTEpcy50cmlnZ2VyKGVbdF0pfX0pfX19LHRlPXtzZXRUcmFuc2xhdGU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcyx0PWUud2lkdGgsYT1lLmhlaWdodCxpPWUuc2xpZGVzLHM9ZS4kd3JhcHBlckVsLHI9ZS5zbGlkZXNTaXplc0dyaWQsbj1lLnBhcmFtcy5jb3ZlcmZsb3dFZmZlY3Qsbz1lLmlzSG9yaXpvbnRhbCgpLGw9ZS50cmFuc2xhdGUsZD1vP3QvMi1sOmEvMi1sLHA9bz9uLnJvdGF0ZTotbi5yb3RhdGUsYz1uLmRlcHRoLHU9MCxoPWkubGVuZ3RoO3U8aDt1Kz0xKXt2YXIgdj1pLmVxKHUpLGY9clt1XSxtPShkLXZbMF0uc3dpcGVyU2xpZGVPZmZzZXQtZi8yKS9mKm4ubW9kaWZpZXIsZz1vP3AqbTowLGI9bz8wOnAqbSx3PS1jKk1hdGguYWJzKG0pLHk9bz8wOm4uc3RyZXRjaCptLHg9bz9uLnN0cmV0Y2gqbTowO01hdGguYWJzKHgpPC4wMDEmJih4PTApLE1hdGguYWJzKHkpPC4wMDEmJih5PTApLE1hdGguYWJzKHcpPC4wMDEmJih3PTApLE1hdGguYWJzKGcpPC4wMDEmJihnPTApLE1hdGguYWJzKGIpPC4wMDEmJihiPTApO3ZhciBFPVwidHJhbnNsYXRlM2QoXCIreCtcInB4LFwiK3krXCJweCxcIit3K1wicHgpICByb3RhdGVYKFwiK2IrXCJkZWcpIHJvdGF0ZVkoXCIrZytcImRlZylcIjtpZih2LnRyYW5zZm9ybShFKSx2WzBdLnN0eWxlLnpJbmRleD0xLU1hdGguYWJzKE1hdGgucm91bmQobSkpLG4uc2xpZGVTaGFkb3dzKXt2YXIgVD1vP3YuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcIik6di5maW5kKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wXCIpLFM9bz92LmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodFwiKTp2LmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b21cIik7MD09PVQubGVuZ3RoJiYoVD1MKCc8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0nKyhvP1wibGVmdFwiOlwidG9wXCIpKydcIj48L2Rpdj4nKSx2LmFwcGVuZChUKSksMD09PVMubGVuZ3RoJiYoUz1MKCc8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0nKyhvP1wicmlnaHRcIjpcImJvdHRvbVwiKSsnXCI+PC9kaXY+Jyksdi5hcHBlbmQoUykpLFQubGVuZ3RoJiYoVFswXS5zdHlsZS5vcGFjaXR5PTA8bT9tOjApLFMubGVuZ3RoJiYoU1swXS5zdHlsZS5vcGFjaXR5PTA8LW0/LW06MCl9fShZLnBvaW50ZXJFdmVudHN8fFkucHJlZml4ZWRQb2ludGVyRXZlbnRzKSYmKHNbMF0uc3R5bGUucGVyc3BlY3RpdmVPcmlnaW49ZCtcInB4IDUwJVwiKX0sc2V0VHJhbnNpdGlvbjpmdW5jdGlvbihlKXt0aGlzLnNsaWRlcy50cmFuc2l0aW9uKGUpLmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcIikudHJhbnNpdGlvbihlKX19LGFlPVtDLE0seixrLCQsTyxILHtuYW1lOlwibW91c2V3aGVlbFwiLHBhcmFtczp7bW91c2V3aGVlbDp7ZW5hYmxlZDohMSxyZWxlYXNlT25FZGdlczohMSxpbnZlcnQ6ITEsZm9yY2VUb0F4aXM6ITEsc2Vuc2l0aXZpdHk6MSxldmVudHNUYXJnZWQ6XCJjb250YWluZXJcIn19LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7WC5leHRlbmQoZSx7bW91c2V3aGVlbDp7ZW5hYmxlZDohMSxlbmFibGU6Ry5lbmFibGUuYmluZChlKSxkaXNhYmxlOkcuZGlzYWJsZS5iaW5kKGUpLGhhbmRsZTpHLmhhbmRsZS5iaW5kKGUpLGhhbmRsZU1vdXNlRW50ZXI6Ry5oYW5kbGVNb3VzZUVudGVyLmJpbmQoZSksaGFuZGxlTW91c2VMZWF2ZTpHLmhhbmRsZU1vdXNlTGVhdmUuYmluZChlKSxsYXN0U2Nyb2xsVGltZTpYLm5vdygpfX0pfSxvbjp7aW5pdDpmdW5jdGlvbigpe3RoaXMucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCYmdGhpcy5tb3VzZXdoZWVsLmVuYWJsZSgpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5tb3VzZXdoZWVsLmVuYWJsZWQmJnRoaXMubW91c2V3aGVlbC5kaXNhYmxlKCl9fX0se25hbWU6XCJuYXZpZ2F0aW9uXCIscGFyYW1zOntuYXZpZ2F0aW9uOntuZXh0RWw6bnVsbCxwcmV2RWw6bnVsbCxoaWRlT25DbGljazohMSxkaXNhYmxlZENsYXNzOlwic3dpcGVyLWJ1dHRvbi1kaXNhYmxlZFwiLGhpZGRlbkNsYXNzOlwic3dpcGVyLWJ1dHRvbi1oaWRkZW5cIixsb2NrQ2xhc3M6XCJzd2lwZXItYnV0dG9uLWxvY2tcIn19LGNyZWF0ZTpmdW5jdGlvbigpe1guZXh0ZW5kKHRoaXMse25hdmlnYXRpb246e2luaXQ6Ti5pbml0LmJpbmQodGhpcyksdXBkYXRlOk4udXBkYXRlLmJpbmQodGhpcyksZGVzdHJveTpOLmRlc3Ryb3kuYmluZCh0aGlzKX19KX0sb246e2luaXQ6ZnVuY3Rpb24oKXt0aGlzLm5hdmlnYXRpb24uaW5pdCgpLHRoaXMubmF2aWdhdGlvbi51cGRhdGUoKX0sdG9FZGdlOmZ1bmN0aW9uKCl7dGhpcy5uYXZpZ2F0aW9uLnVwZGF0ZSgpfSxmcm9tRWRnZTpmdW5jdGlvbigpe3RoaXMubmF2aWdhdGlvbi51cGRhdGUoKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMubmF2aWdhdGlvbi5kZXN0cm95KCl9LGNsaWNrOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubmF2aWdhdGlvbixhPXQuJG5leHRFbCxpPXQuJHByZXZFbDshdGhpcy5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGlja3x8TChlLnRhcmdldCkuaXMoaSl8fEwoZS50YXJnZXQpLmlzKGEpfHwoYSYmYS50b2dnbGVDbGFzcyh0aGlzLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKSxpJiZpLnRvZ2dsZUNsYXNzKHRoaXMucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpKX19fSx7bmFtZTpcInBhZ2luYXRpb25cIixwYXJhbXM6e3BhZ2luYXRpb246e2VsOm51bGwsYnVsbGV0RWxlbWVudDpcInNwYW5cIixjbGlja2FibGU6ITEsaGlkZU9uQ2xpY2s6ITEscmVuZGVyQnVsbGV0Om51bGwscmVuZGVyUHJvZ3Jlc3NiYXI6bnVsbCxyZW5kZXJGcmFjdGlvbjpudWxsLHJlbmRlckN1c3RvbTpudWxsLHByb2dyZXNzYmFyT3Bwb3NpdGU6ITEsdHlwZTpcImJ1bGxldHNcIixkeW5hbWljQnVsbGV0czohMSxkeW5hbWljTWFpbkJ1bGxldHM6MSxmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGZvcm1hdEZyYWN0aW9uVG90YWw6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGJ1bGxldENsYXNzOlwic3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0XCIsYnVsbGV0QWN0aXZlQ2xhc3M6XCJzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlXCIsbW9kaWZpZXJDbGFzczpcInN3aXBlci1wYWdpbmF0aW9uLVwiLGN1cnJlbnRDbGFzczpcInN3aXBlci1wYWdpbmF0aW9uLWN1cnJlbnRcIix0b3RhbENsYXNzOlwic3dpcGVyLXBhZ2luYXRpb24tdG90YWxcIixoaWRkZW5DbGFzczpcInN3aXBlci1wYWdpbmF0aW9uLWhpZGRlblwiLHByb2dyZXNzYmFyRmlsbENsYXNzOlwic3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbFwiLHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczpcInN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLW9wcG9zaXRlXCIsY2xpY2thYmxlQ2xhc3M6XCJzd2lwZXItcGFnaW5hdGlvbi1jbGlja2FibGVcIixsb2NrQ2xhc3M6XCJzd2lwZXItcGFnaW5hdGlvbi1sb2NrXCJ9fSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO1guZXh0ZW5kKGUse3BhZ2luYXRpb246e2luaXQ6Vi5pbml0LmJpbmQoZSkscmVuZGVyOlYucmVuZGVyLmJpbmQoZSksdXBkYXRlOlYudXBkYXRlLmJpbmQoZSksZGVzdHJveTpWLmRlc3Ryb3kuYmluZChlKSxkeW5hbWljQnVsbGV0SW5kZXg6MH19KX0sb246e2luaXQ6ZnVuY3Rpb24oKXt0aGlzLnBhZ2luYXRpb24uaW5pdCgpLHRoaXMucGFnaW5hdGlvbi5yZW5kZXIoKSx0aGlzLnBhZ2luYXRpb24udXBkYXRlKCl9LGFjdGl2ZUluZGV4Q2hhbmdlOmZ1bmN0aW9uKCl7dGhpcy5wYXJhbXMubG9vcD90aGlzLnBhZ2luYXRpb24udXBkYXRlKCk6dm9pZCAwPT09dGhpcy5zbmFwSW5kZXgmJnRoaXMucGFnaW5hdGlvbi51cGRhdGUoKX0sc25hcEluZGV4Q2hhbmdlOmZ1bmN0aW9uKCl7dGhpcy5wYXJhbXMubG9vcHx8dGhpcy5wYWdpbmF0aW9uLnVwZGF0ZSgpfSxzbGlkZXNMZW5ndGhDaGFuZ2U6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5sb29wJiYodGhpcy5wYWdpbmF0aW9uLnJlbmRlcigpLHRoaXMucGFnaW5hdGlvbi51cGRhdGUoKSl9LHNuYXBHcmlkTGVuZ3RoQ2hhbmdlOmZ1bmN0aW9uKCl7dGhpcy5wYXJhbXMubG9vcHx8KHRoaXMucGFnaW5hdGlvbi5yZW5kZXIoKSx0aGlzLnBhZ2luYXRpb24udXBkYXRlKCkpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5wYWdpbmF0aW9uLmRlc3Ryb3koKX0sY2xpY2s6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0LnBhcmFtcy5wYWdpbmF0aW9uLmVsJiZ0LnBhcmFtcy5wYWdpbmF0aW9uLmhpZGVPbkNsaWNrJiYwPHQucGFnaW5hdGlvbi4kZWwubGVuZ3RoJiYhTChlLnRhcmdldCkuaGFzQ2xhc3ModC5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykmJnQucGFnaW5hdGlvbi4kZWwudG9nZ2xlQ2xhc3ModC5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyl9fX0se25hbWU6XCJzY3JvbGxiYXJcIixwYXJhbXM6e3Njcm9sbGJhcjp7ZWw6bnVsbCxkcmFnU2l6ZTpcImF1dG9cIixoaWRlOiExLGRyYWdnYWJsZTohMSxzbmFwT25SZWxlYXNlOiEwLGxvY2tDbGFzczpcInN3aXBlci1zY3JvbGxiYXItbG9ja1wiLGRyYWdDbGFzczpcInN3aXBlci1zY3JvbGxiYXItZHJhZ1wifX0sY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztYLmV4dGVuZChlLHtzY3JvbGxiYXI6e2luaXQ6Ui5pbml0LmJpbmQoZSksZGVzdHJveTpSLmRlc3Ryb3kuYmluZChlKSx1cGRhdGVTaXplOlIudXBkYXRlU2l6ZS5iaW5kKGUpLHNldFRyYW5zbGF0ZTpSLnNldFRyYW5zbGF0ZS5iaW5kKGUpLHNldFRyYW5zaXRpb246Ui5zZXRUcmFuc2l0aW9uLmJpbmQoZSksZW5hYmxlRHJhZ2dhYmxlOlIuZW5hYmxlRHJhZ2dhYmxlLmJpbmQoZSksZGlzYWJsZURyYWdnYWJsZTpSLmRpc2FibGVEcmFnZ2FibGUuYmluZChlKSxzZXREcmFnUG9zaXRpb246Ui5zZXREcmFnUG9zaXRpb24uYmluZChlKSxvbkRyYWdTdGFydDpSLm9uRHJhZ1N0YXJ0LmJpbmQoZSksb25EcmFnTW92ZTpSLm9uRHJhZ01vdmUuYmluZChlKSxvbkRyYWdFbmQ6Ui5vbkRyYWdFbmQuYmluZChlKSxpc1RvdWNoZWQ6ITEsdGltZW91dDpudWxsLGRyYWdUaW1lb3V0Om51bGx9fSl9LG9uOntpbml0OmZ1bmN0aW9uKCl7dGhpcy5zY3JvbGxiYXIuaW5pdCgpLHRoaXMuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKSx0aGlzLnNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKX0sdXBkYXRlOmZ1bmN0aW9uKCl7dGhpcy5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpfSxyZXNpemU6ZnVuY3Rpb24oKXt0aGlzLnNjcm9sbGJhci51cGRhdGVTaXplKCl9LG9ic2VydmVyVXBkYXRlOmZ1bmN0aW9uKCl7dGhpcy5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpfSxzZXRUcmFuc2xhdGU6ZnVuY3Rpb24oKXt0aGlzLnNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKX0sc2V0VHJhbnNpdGlvbjpmdW5jdGlvbihlKXt0aGlzLnNjcm9sbGJhci5zZXRUcmFuc2l0aW9uKGUpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5zY3JvbGxiYXIuZGVzdHJveSgpfX19LHtuYW1lOlwicGFyYWxsYXhcIixwYXJhbXM6e3BhcmFsbGF4OntlbmFibGVkOiExfX0sY3JlYXRlOmZ1bmN0aW9uKCl7WC5leHRlbmQodGhpcyx7cGFyYWxsYXg6e3NldFRyYW5zZm9ybTpGLnNldFRyYW5zZm9ybS5iaW5kKHRoaXMpLHNldFRyYW5zbGF0ZTpGLnNldFRyYW5zbGF0ZS5iaW5kKHRoaXMpLHNldFRyYW5zaXRpb246Ri5zZXRUcmFuc2l0aW9uLmJpbmQodGhpcyl9fSl9LG9uOntiZWZvcmVJbml0OmZ1bmN0aW9uKCl7dGhpcy5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCYmKHRoaXMucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3M9ITApfSxpbml0OmZ1bmN0aW9uKCl7dGhpcy5wYXJhbXMucGFyYWxsYXgmJnRoaXMucGFyYWxsYXguc2V0VHJhbnNsYXRlKCl9LHNldFRyYW5zbGF0ZTpmdW5jdGlvbigpe3RoaXMucGFyYW1zLnBhcmFsbGF4JiZ0aGlzLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpfSxzZXRUcmFuc2l0aW9uOmZ1bmN0aW9uKGUpe3RoaXMucGFyYW1zLnBhcmFsbGF4JiZ0aGlzLnBhcmFsbGF4LnNldFRyYW5zaXRpb24oZSl9fX0se25hbWU6XCJ6b29tXCIscGFyYW1zOnt6b29tOntlbmFibGVkOiExLG1heFJhdGlvOjMsbWluUmF0aW86MSx0b2dnbGU6ITAsY29udGFpbmVyQ2xhc3M6XCJzd2lwZXItem9vbS1jb250YWluZXJcIix6b29tZWRTbGlkZUNsYXNzOlwic3dpcGVyLXNsaWRlLXpvb21lZFwifX0sY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxhPXtlbmFibGVkOiExLHNjYWxlOjEsY3VycmVudFNjYWxlOjEsaXNTY2FsaW5nOiExLGdlc3R1cmU6eyRzbGlkZUVsOnZvaWQgMCxzbGlkZVdpZHRoOnZvaWQgMCxzbGlkZUhlaWdodDp2b2lkIDAsJGltYWdlRWw6dm9pZCAwLCRpbWFnZVdyYXBFbDp2b2lkIDAsbWF4UmF0aW86M30saW1hZ2U6e2lzVG91Y2hlZDp2b2lkIDAsaXNNb3ZlZDp2b2lkIDAsY3VycmVudFg6dm9pZCAwLGN1cnJlbnRZOnZvaWQgMCxtaW5YOnZvaWQgMCxtaW5ZOnZvaWQgMCxtYXhYOnZvaWQgMCxtYXhZOnZvaWQgMCx3aWR0aDp2b2lkIDAsaGVpZ2h0OnZvaWQgMCxzdGFydFg6dm9pZCAwLHN0YXJ0WTp2b2lkIDAsdG91Y2hlc1N0YXJ0Ont9LHRvdWNoZXNDdXJyZW50Ont9fSx2ZWxvY2l0eTp7eDp2b2lkIDAseTp2b2lkIDAscHJldlBvc2l0aW9uWDp2b2lkIDAscHJldlBvc2l0aW9uWTp2b2lkIDAscHJldlRpbWU6dm9pZCAwfX07XCJvbkdlc3R1cmVTdGFydCBvbkdlc3R1cmVDaGFuZ2Ugb25HZXN0dXJlRW5kIG9uVG91Y2hTdGFydCBvblRvdWNoTW92ZSBvblRvdWNoRW5kIG9uVHJhbnNpdGlvbkVuZCB0b2dnbGUgZW5hYmxlIGRpc2FibGUgaW4gb3V0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7YVtlXT1XW2VdLmJpbmQodCl9KSxYLmV4dGVuZCh0LHt6b29tOmF9KX0sb246e2luaXQ6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy56b29tLmVuYWJsZWQmJnRoaXMuem9vbS5lbmFibGUoKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuem9vbS5kaXNhYmxlKCl9LHRvdWNoU3RhcnQ6ZnVuY3Rpb24oZSl7dGhpcy56b29tLmVuYWJsZWQmJnRoaXMuem9vbS5vblRvdWNoU3RhcnQoZSl9LHRvdWNoRW5kOmZ1bmN0aW9uKGUpe3RoaXMuem9vbS5lbmFibGVkJiZ0aGlzLnpvb20ub25Ub3VjaEVuZChlKX0sZG91YmxlVGFwOmZ1bmN0aW9uKGUpe3RoaXMucGFyYW1zLnpvb20uZW5hYmxlZCYmdGhpcy56b29tLmVuYWJsZWQmJnRoaXMucGFyYW1zLnpvb20udG9nZ2xlJiZ0aGlzLnpvb20udG9nZ2xlKGUpfSx0cmFuc2l0aW9uRW5kOmZ1bmN0aW9uKCl7dGhpcy56b29tLmVuYWJsZWQmJnRoaXMucGFyYW1zLnpvb20uZW5hYmxlZCYmdGhpcy56b29tLm9uVHJhbnNpdGlvbkVuZCgpfX19LHtuYW1lOlwibGF6eVwiLHBhcmFtczp7bGF6eTp7ZW5hYmxlZDohMSxsb2FkUHJldk5leHQ6ITEsbG9hZFByZXZOZXh0QW1vdW50OjEsbG9hZE9uVHJhbnNpdGlvblN0YXJ0OiExLGVsZW1lbnRDbGFzczpcInN3aXBlci1sYXp5XCIsbG9hZGluZ0NsYXNzOlwic3dpcGVyLWxhenktbG9hZGluZ1wiLGxvYWRlZENsYXNzOlwic3dpcGVyLWxhenktbG9hZGVkXCIscHJlbG9hZGVyQ2xhc3M6XCJzd2lwZXItbGF6eS1wcmVsb2FkZXJcIn19LGNyZWF0ZTpmdW5jdGlvbigpe1guZXh0ZW5kKHRoaXMse2xhenk6e2luaXRpYWxJbWFnZUxvYWRlZDohMSxsb2FkOnEubG9hZC5iaW5kKHRoaXMpLGxvYWRJblNsaWRlOnEubG9hZEluU2xpZGUuYmluZCh0aGlzKX19KX0sb246e2JlZm9yZUluaXQ6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5sYXp5LmVuYWJsZWQmJnRoaXMucGFyYW1zLnByZWxvYWRJbWFnZXMmJih0aGlzLnBhcmFtcy5wcmVsb2FkSW1hZ2VzPSExKX0saW5pdDpmdW5jdGlvbigpe3RoaXMucGFyYW1zLmxhenkuZW5hYmxlZCYmIXRoaXMucGFyYW1zLmxvb3AmJjA9PT10aGlzLnBhcmFtcy5pbml0aWFsU2xpZGUmJnRoaXMubGF6eS5sb2FkKCl9LHNjcm9sbDpmdW5jdGlvbigpe3RoaXMucGFyYW1zLmZyZWVNb2RlJiYhdGhpcy5wYXJhbXMuZnJlZU1vZGVTdGlja3kmJnRoaXMubGF6eS5sb2FkKCl9LHJlc2l6ZTpmdW5jdGlvbigpe3RoaXMucGFyYW1zLmxhenkuZW5hYmxlZCYmdGhpcy5sYXp5LmxvYWQoKX0sc2Nyb2xsYmFyRHJhZ01vdmU6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5sYXp5LmVuYWJsZWQmJnRoaXMubGF6eS5sb2FkKCl9LHRyYW5zaXRpb25TdGFydDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5wYXJhbXMubGF6eS5lbmFibGVkJiYoZS5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnR8fCFlLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCYmIWUubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQpJiZlLmxhenkubG9hZCgpfSx0cmFuc2l0aW9uRW5kOmZ1bmN0aW9uKCl7dGhpcy5wYXJhbXMubGF6eS5lbmFibGVkJiYhdGhpcy5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQmJnRoaXMubGF6eS5sb2FkKCl9fX0se25hbWU6XCJjb250cm9sbGVyXCIscGFyYW1zOntjb250cm9sbGVyOntjb250cm9sOnZvaWQgMCxpbnZlcnNlOiExLGJ5Olwic2xpZGVcIn19LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7WC5leHRlbmQoZSx7Y29udHJvbGxlcjp7Y29udHJvbDplLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2wsZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbjpqLmdldEludGVycG9sYXRlRnVuY3Rpb24uYmluZChlKSxzZXRUcmFuc2xhdGU6ai5zZXRUcmFuc2xhdGUuYmluZChlKSxzZXRUcmFuc2l0aW9uOmouc2V0VHJhbnNpdGlvbi5iaW5kKGUpfX0pfSxvbjp7dXBkYXRlOmZ1bmN0aW9uKCl7dGhpcy5jb250cm9sbGVyLmNvbnRyb2wmJnRoaXMuY29udHJvbGxlci5zcGxpbmUmJih0aGlzLmNvbnRyb2xsZXIuc3BsaW5lPXZvaWQgMCxkZWxldGUgdGhpcy5jb250cm9sbGVyLnNwbGluZSl9LHJlc2l6ZTpmdW5jdGlvbigpe3RoaXMuY29udHJvbGxlci5jb250cm9sJiZ0aGlzLmNvbnRyb2xsZXIuc3BsaW5lJiYodGhpcy5jb250cm9sbGVyLnNwbGluZT12b2lkIDAsZGVsZXRlIHRoaXMuY29udHJvbGxlci5zcGxpbmUpfSxvYnNlcnZlclVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuY29udHJvbGxlci5jb250cm9sJiZ0aGlzLmNvbnRyb2xsZXIuc3BsaW5lJiYodGhpcy5jb250cm9sbGVyLnNwbGluZT12b2lkIDAsZGVsZXRlIHRoaXMuY29udHJvbGxlci5zcGxpbmUpfSxzZXRUcmFuc2xhdGU6ZnVuY3Rpb24oZSx0KXt0aGlzLmNvbnRyb2xsZXIuY29udHJvbCYmdGhpcy5jb250cm9sbGVyLnNldFRyYW5zbGF0ZShlLHQpfSxzZXRUcmFuc2l0aW9uOmZ1bmN0aW9uKGUsdCl7dGhpcy5jb250cm9sbGVyLmNvbnRyb2wmJnRoaXMuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKGUsdCl9fX0se25hbWU6XCJhMTF5XCIscGFyYW1zOnthMTF5OntlbmFibGVkOiEwLG5vdGlmaWNhdGlvbkNsYXNzOlwic3dpcGVyLW5vdGlmaWNhdGlvblwiLHByZXZTbGlkZU1lc3NhZ2U6XCJQcmV2aW91cyBzbGlkZVwiLG5leHRTbGlkZU1lc3NhZ2U6XCJOZXh0IHNsaWRlXCIsZmlyc3RTbGlkZU1lc3NhZ2U6XCJUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZVwiLGxhc3RTbGlkZU1lc3NhZ2U6XCJUaGlzIGlzIHRoZSBsYXN0IHNsaWRlXCIscGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6XCJHbyB0byBzbGlkZSB7e2luZGV4fX1cIn19LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7WC5leHRlbmQodCx7YTExeTp7bGl2ZVJlZ2lvbjpMKCc8c3BhbiBjbGFzcz1cIicrdC5wYXJhbXMuYTExeS5ub3RpZmljYXRpb25DbGFzcysnXCIgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCIgYXJpYS1hdG9taWM9XCJ0cnVlXCI+PC9zcGFuPicpfX0pLE9iamVjdC5rZXlzKEspLmZvckVhY2goZnVuY3Rpb24oZSl7dC5hMTF5W2VdPUtbZV0uYmluZCh0KX0pfSxvbjp7aW5pdDpmdW5jdGlvbigpe3RoaXMucGFyYW1zLmExMXkuZW5hYmxlZCYmKHRoaXMuYTExeS5pbml0KCksdGhpcy5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKSl9LHRvRWRnZTpmdW5jdGlvbigpe3RoaXMucGFyYW1zLmExMXkuZW5hYmxlZCYmdGhpcy5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKX0sZnJvbUVkZ2U6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5hMTF5LmVuYWJsZWQmJnRoaXMuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCl9LHBhZ2luYXRpb25VcGRhdGU6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5hMTF5LmVuYWJsZWQmJnRoaXMuYTExeS51cGRhdGVQYWdpbmF0aW9uKCl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5hMTF5LmVuYWJsZWQmJnRoaXMuYTExeS5kZXN0cm95KCl9fX0se25hbWU6XCJoaXN0b3J5XCIscGFyYW1zOntoaXN0b3J5OntlbmFibGVkOiExLHJlcGxhY2VTdGF0ZTohMSxrZXk6XCJzbGlkZXNcIn19LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7WC5leHRlbmQoZSx7aGlzdG9yeTp7aW5pdDpVLmluaXQuYmluZChlKSxzZXRIaXN0b3J5OlUuc2V0SGlzdG9yeS5iaW5kKGUpLHNldEhpc3RvcnlQb3BTdGF0ZTpVLnNldEhpc3RvcnlQb3BTdGF0ZS5iaW5kKGUpLHNjcm9sbFRvU2xpZGU6VS5zY3JvbGxUb1NsaWRlLmJpbmQoZSksZGVzdHJveTpVLmRlc3Ryb3kuYmluZChlKX19KX0sb246e2luaXQ6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQmJnRoaXMuaGlzdG9yeS5pbml0KCl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQmJnRoaXMuaGlzdG9yeS5kZXN0cm95KCl9LHRyYW5zaXRpb25FbmQ6ZnVuY3Rpb24oKXt0aGlzLmhpc3RvcnkuaW5pdGlhbGl6ZWQmJnRoaXMuaGlzdG9yeS5zZXRIaXN0b3J5KHRoaXMucGFyYW1zLmhpc3Rvcnkua2V5LHRoaXMuYWN0aXZlSW5kZXgpfX19LHtuYW1lOlwiaGFzaC1uYXZpZ2F0aW9uXCIscGFyYW1zOntoYXNoTmF2aWdhdGlvbjp7ZW5hYmxlZDohMSxyZXBsYWNlU3RhdGU6ITEsd2F0Y2hTdGF0ZTohMX19LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7WC5leHRlbmQoZSx7aGFzaE5hdmlnYXRpb246e2luaXRpYWxpemVkOiExLGluaXQ6Xy5pbml0LmJpbmQoZSksZGVzdHJveTpfLmRlc3Ryb3kuYmluZChlKSxzZXRIYXNoOl8uc2V0SGFzaC5iaW5kKGUpLG9uSGFzaENhbmdlOl8ub25IYXNoQ2FuZ2UuYmluZChlKX19KX0sb246e2luaXQ6ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkJiZ0aGlzLmhhc2hOYXZpZ2F0aW9uLmluaXQoKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQmJnRoaXMuaGFzaE5hdmlnYXRpb24uZGVzdHJveSgpfSx0cmFuc2l0aW9uRW5kOmZ1bmN0aW9uKCl7dGhpcy5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCYmdGhpcy5oYXNoTmF2aWdhdGlvbi5zZXRIYXNoKCl9fX0se25hbWU6XCJhdXRvcGxheVwiLHBhcmFtczp7YXV0b3BsYXk6e2VuYWJsZWQ6ITEsZGVsYXk6M2UzLHdhaXRGb3JUcmFuc2l0aW9uOiEwLGRpc2FibGVPbkludGVyYWN0aW9uOiEwLHN0b3BPbkxhc3RTbGlkZTohMSxyZXZlcnNlRGlyZWN0aW9uOiExfX0sY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztYLmV4dGVuZCh0LHthdXRvcGxheTp7cnVubmluZzohMSxwYXVzZWQ6ITEscnVuOloucnVuLmJpbmQodCksc3RhcnQ6Wi5zdGFydC5iaW5kKHQpLHN0b3A6Wi5zdG9wLmJpbmQodCkscGF1c2U6Wi5wYXVzZS5iaW5kKHQpLG9uVHJhbnNpdGlvbkVuZDpmdW5jdGlvbihlKXt0JiYhdC5kZXN0cm95ZWQmJnQuJHdyYXBwZXJFbCYmZS50YXJnZXQ9PT10aGlzJiYodC4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsdC5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpLHQuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKFwid2Via2l0VHJhbnNpdGlvbkVuZFwiLHQuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKSx0LmF1dG9wbGF5LnBhdXNlZD0hMSx0LmF1dG9wbGF5LnJ1bm5pbmc/dC5hdXRvcGxheS5ydW4oKTp0LmF1dG9wbGF5LnN0b3AoKSl9fX0pfSxvbjp7aW5pdDpmdW5jdGlvbigpe3RoaXMucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQmJnRoaXMuYXV0b3BsYXkuc3RhcnQoKX0sYmVmb3JlVHJhbnNpdGlvblN0YXJ0OmZ1bmN0aW9uKGUsdCl7dGhpcy5hdXRvcGxheS5ydW5uaW5nJiYodHx8IXRoaXMucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uP3RoaXMuYXV0b3BsYXkucGF1c2UoZSk6dGhpcy5hdXRvcGxheS5zdG9wKCkpfSxzbGlkZXJGaXJzdE1vdmU6ZnVuY3Rpb24oKXt0aGlzLmF1dG9wbGF5LnJ1bm5pbmcmJih0aGlzLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbj90aGlzLmF1dG9wbGF5LnN0b3AoKTp0aGlzLmF1dG9wbGF5LnBhdXNlKCkpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5hdXRvcGxheS5ydW5uaW5nJiZ0aGlzLmF1dG9wbGF5LnN0b3AoKX19fSx7bmFtZTpcImVmZmVjdC1mYWRlXCIscGFyYW1zOntmYWRlRWZmZWN0Ontjcm9zc0ZhZGU6ITF9fSxjcmVhdGU6ZnVuY3Rpb24oKXtYLmV4dGVuZCh0aGlzLHtmYWRlRWZmZWN0OntzZXRUcmFuc2xhdGU6US5zZXRUcmFuc2xhdGUuYmluZCh0aGlzKSxzZXRUcmFuc2l0aW9uOlEuc2V0VHJhbnNpdGlvbi5iaW5kKHRoaXMpfX0pfSxvbjp7YmVmb3JlSW5pdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoXCJmYWRlXCI9PT1lLnBhcmFtcy5lZmZlY3Qpe2UuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MrXCJmYWRlXCIpO3ZhciB0PXtzbGlkZXNQZXJWaWV3OjEsc2xpZGVzUGVyQ29sdW1uOjEsc2xpZGVzUGVyR3JvdXA6MSx3YXRjaFNsaWRlc1Byb2dyZXNzOiEwLHNwYWNlQmV0d2VlbjowLHZpcnR1YWxUcmFuc2xhdGU6ITB9O1guZXh0ZW5kKGUucGFyYW1zLHQpLFguZXh0ZW5kKGUub3JpZ2luYWxQYXJhbXMsdCl9fSxzZXRUcmFuc2xhdGU6ZnVuY3Rpb24oKXtcImZhZGVcIj09PXRoaXMucGFyYW1zLmVmZmVjdCYmdGhpcy5mYWRlRWZmZWN0LnNldFRyYW5zbGF0ZSgpfSxzZXRUcmFuc2l0aW9uOmZ1bmN0aW9uKGUpe1wiZmFkZVwiPT09dGhpcy5wYXJhbXMuZWZmZWN0JiZ0aGlzLmZhZGVFZmZlY3Quc2V0VHJhbnNpdGlvbihlKX19fSx7bmFtZTpcImVmZmVjdC1jdWJlXCIscGFyYW1zOntjdWJlRWZmZWN0OntzbGlkZVNoYWRvd3M6ITAsc2hhZG93OiEwLHNoYWRvd09mZnNldDoyMCxzaGFkb3dTY2FsZTouOTR9fSxjcmVhdGU6ZnVuY3Rpb24oKXtYLmV4dGVuZCh0aGlzLHtjdWJlRWZmZWN0OntzZXRUcmFuc2xhdGU6Si5zZXRUcmFuc2xhdGUuYmluZCh0aGlzKSxzZXRUcmFuc2l0aW9uOkouc2V0VHJhbnNpdGlvbi5iaW5kKHRoaXMpfX0pfSxvbjp7YmVmb3JlSW5pdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoXCJjdWJlXCI9PT1lLnBhcmFtcy5lZmZlY3Qpe2UuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MrXCJjdWJlXCIpLGUuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MrXCIzZFwiKTt2YXIgdD17c2xpZGVzUGVyVmlldzoxLHNsaWRlc1BlckNvbHVtbjoxLHNsaWRlc1Blckdyb3VwOjEsd2F0Y2hTbGlkZXNQcm9ncmVzczohMCxyZXNpc3RhbmNlUmF0aW86MCxzcGFjZUJldHdlZW46MCxjZW50ZXJlZFNsaWRlczohMSx2aXJ0dWFsVHJhbnNsYXRlOiEwfTtYLmV4dGVuZChlLnBhcmFtcyx0KSxYLmV4dGVuZChlLm9yaWdpbmFsUGFyYW1zLHQpfX0sc2V0VHJhbnNsYXRlOmZ1bmN0aW9uKCl7XCJjdWJlXCI9PT10aGlzLnBhcmFtcy5lZmZlY3QmJnRoaXMuY3ViZUVmZmVjdC5zZXRUcmFuc2xhdGUoKX0sc2V0VHJhbnNpdGlvbjpmdW5jdGlvbihlKXtcImN1YmVcIj09PXRoaXMucGFyYW1zLmVmZmVjdCYmdGhpcy5jdWJlRWZmZWN0LnNldFRyYW5zaXRpb24oZSl9fX0se25hbWU6XCJlZmZlY3QtZmxpcFwiLHBhcmFtczp7ZmxpcEVmZmVjdDp7c2xpZGVTaGFkb3dzOiEwLGxpbWl0Um90YXRpb246ITB9fSxjcmVhdGU6ZnVuY3Rpb24oKXtYLmV4dGVuZCh0aGlzLHtmbGlwRWZmZWN0OntzZXRUcmFuc2xhdGU6ZWUuc2V0VHJhbnNsYXRlLmJpbmQodGhpcyksc2V0VHJhbnNpdGlvbjplZS5zZXRUcmFuc2l0aW9uLmJpbmQodGhpcyl9fSl9LG9uOntiZWZvcmVJbml0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihcImZsaXBcIj09PWUucGFyYW1zLmVmZmVjdCl7ZS5jbGFzc05hbWVzLnB1c2goZS5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcytcImZsaXBcIiksZS5jbGFzc05hbWVzLnB1c2goZS5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcytcIjNkXCIpO3ZhciB0PXtzbGlkZXNQZXJWaWV3OjEsc2xpZGVzUGVyQ29sdW1uOjEsc2xpZGVzUGVyR3JvdXA6MSx3YXRjaFNsaWRlc1Byb2dyZXNzOiEwLHNwYWNlQmV0d2VlbjowLHZpcnR1YWxUcmFuc2xhdGU6ITB9O1guZXh0ZW5kKGUucGFyYW1zLHQpLFguZXh0ZW5kKGUub3JpZ2luYWxQYXJhbXMsdCl9fSxzZXRUcmFuc2xhdGU6ZnVuY3Rpb24oKXtcImZsaXBcIj09PXRoaXMucGFyYW1zLmVmZmVjdCYmdGhpcy5mbGlwRWZmZWN0LnNldFRyYW5zbGF0ZSgpfSxzZXRUcmFuc2l0aW9uOmZ1bmN0aW9uKGUpe1wiZmxpcFwiPT09dGhpcy5wYXJhbXMuZWZmZWN0JiZ0aGlzLmZsaXBFZmZlY3Quc2V0VHJhbnNpdGlvbihlKX19fSx7bmFtZTpcImVmZmVjdC1jb3ZlcmZsb3dcIixwYXJhbXM6e2NvdmVyZmxvd0VmZmVjdDp7cm90YXRlOjUwLHN0cmV0Y2g6MCxkZXB0aDoxMDAsbW9kaWZpZXI6MSxzbGlkZVNoYWRvd3M6ITB9fSxjcmVhdGU6ZnVuY3Rpb24oKXtYLmV4dGVuZCh0aGlzLHtjb3ZlcmZsb3dFZmZlY3Q6e3NldFRyYW5zbGF0ZTp0ZS5zZXRUcmFuc2xhdGUuYmluZCh0aGlzKSxzZXRUcmFuc2l0aW9uOnRlLnNldFRyYW5zaXRpb24uYmluZCh0aGlzKX19KX0sb246e2JlZm9yZUluaXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO1wiY292ZXJmbG93XCI9PT1lLnBhcmFtcy5lZmZlY3QmJihlLmNsYXNzTmFtZXMucHVzaChlLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzK1wiY292ZXJmbG93XCIpLGUuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MrXCIzZFwiKSxlLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzPSEwLGUub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcz0hMCl9LHNldFRyYW5zbGF0ZTpmdW5jdGlvbigpe1wiY292ZXJmbG93XCI9PT10aGlzLnBhcmFtcy5lZmZlY3QmJnRoaXMuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zbGF0ZSgpfSxzZXRUcmFuc2l0aW9uOmZ1bmN0aW9uKGUpe1wiY292ZXJmbG93XCI9PT10aGlzLnBhcmFtcy5lZmZlY3QmJnRoaXMuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zaXRpb24oZSl9fX1dO3JldHVybiB2b2lkIDA9PT1TLnVzZSYmKFMudXNlPVMuQ2xhc3MudXNlLFMuaW5zdGFsbE1vZHVsZT1TLkNsYXNzLmluc3RhbGxNb2R1bGUpLFMudXNlKGFlKSxTfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2lwZXIubWluLmpzLm1hcFxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIGZhbmN5Qm94IHYzLjEuMjBcbi8vXG4vLyBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXG4vLyBvciBmYW5jeUJveCBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXG4vL1xuLy8gaHR0cDovL2ZhbmN5YXBwcy5jb20vZmFuY3lib3gvXG4vLyBDb3B5cmlnaHQgMjAxNyBmYW5jeUFwcHNcbi8vXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIWZ1bmN0aW9uKHQsZSxuLG8pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7dmFyIGU9dC5jdXJyZW50VGFyZ2V0LG89dC5kYXRhP3QuZGF0YS5vcHRpb25zOnt9LGk9dC5kYXRhP3QuZGF0YS5pdGVtczpbXSxhPW4oZSkuYXR0cihcImRhdGEtZmFuY3lib3hcIil8fFwiXCIscz0wO3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLGE/KGk9aS5sZW5ndGg/aS5maWx0ZXIoJ1tkYXRhLWZhbmN5Ym94PVwiJythKydcIl0nKTpuKCdbZGF0YS1mYW5jeWJveD1cIicrYSsnXCJdJykscz1pLmluZGV4KGUpLHM8MCYmKHM9MCkpOmk9W2VdLG4uZmFuY3lib3gub3BlbihpLG8scyl9aWYobil7aWYobi5mbi5mYW5jeWJveClyZXR1cm4gdm9pZCBuLmVycm9yKFwiZmFuY3lCb3ggYWxyZWFkeSBpbml0aWFsaXplZFwiKTt2YXIgYT17bG9vcDohMSxtYXJnaW46WzQ0LDBdLGd1dHRlcjo1MCxrZXlib2FyZDohMCxhcnJvd3M6ITAsaW5mb2JhcjohMSx0b29sYmFyOiEwLGJ1dHRvbnM6W1wic2xpZGVTaG93XCIsXCJmdWxsU2NyZWVuXCIsXCJ0aHVtYnNcIixcImNsb3NlXCJdLGlkbGVUaW1lOjQsc21hbGxCdG46XCJhdXRvXCIscHJvdGVjdDohMSxtb2RhbDohMSxpbWFnZTp7cHJlbG9hZDpcImF1dG9cIn0sYWpheDp7c2V0dGluZ3M6e2RhdGE6e2ZhbmN5Ym94OiEwfX19LGlmcmFtZTp7dHBsOic8aWZyYW1lIGlkPVwiZmFuY3lib3gtZnJhbWV7cm5kfVwiIG5hbWU9XCJmYW5jeWJveC1mcmFtZXtybmR9XCIgY2xhc3M9XCJmYW5jeWJveC1pZnJhbWVcIiBmcmFtZWJvcmRlcj1cIjBcIiB2c3BhY2U9XCIwXCIgaHNwYWNlPVwiMFwiIHdlYmtpdEFsbG93RnVsbFNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gYWxsb3dGdWxsU2NyZWVuIGFsbG93dHJhbnNwYXJlbmN5PVwidHJ1ZVwiIHNyYz1cIlwiPjwvaWZyYW1lPicscHJlbG9hZDohMCxjc3M6e30sYXR0cjp7c2Nyb2xsaW5nOlwiYXV0b1wifX0sYW5pbWF0aW9uRWZmZWN0Olwiem9vbVwiLGFuaW1hdGlvbkR1cmF0aW9uOjM2Nix6b29tT3BhY2l0eTpcImF1dG9cIix0cmFuc2l0aW9uRWZmZWN0OlwiZmFkZVwiLHRyYW5zaXRpb25EdXJhdGlvbjozNjYsc2xpZGVDbGFzczpcIlwiLGJhc2VDbGFzczpcIlwiLGJhc2VUcGw6JzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jb250YWluZXJcIiByb2xlPVwiZGlhbG9nXCIgdGFiaW5kZXg9XCItMVwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1iZ1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbm5lclwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbmZvYmFyXCI+PGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXByZXYgdGl0bGU9XCJ7e1BSRVZ9fVwiIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tbGVmdFwiPjwvYnV0dG9uPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbmZvYmFyX19ib2R5XCI+PHNwYW4gZGF0YS1mYW5jeWJveC1pbmRleD48L3NwYW4+Jm5ic3A7LyZuYnNwOzxzcGFuIGRhdGEtZmFuY3lib3gtY291bnQ+PC9zcGFuPjwvZGl2PjxidXR0b24gZGF0YS1mYW5jeWJveC1uZXh0IHRpdGxlPVwie3tORVhUfX1cIiBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXJpZ2h0XCI+PC9idXR0b24+PC9kaXY+PGRpdiBjbGFzcz1cImZhbmN5Ym94LXRvb2xiYXJcIj57e0JVVFRPTlN9fTwvZGl2PjxkaXYgY2xhc3M9XCJmYW5jeWJveC1uYXZpZ2F0aW9uXCI+PGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXByZXYgdGl0bGU9XCJ7e1BSRVZ9fVwiIGNsYXNzPVwiZmFuY3lib3gtYXJyb3cgZmFuY3lib3gtYXJyb3ctLWxlZnRcIiAvPjxidXR0b24gZGF0YS1mYW5jeWJveC1uZXh0IHRpdGxlPVwie3tORVhUfX1cIiBjbGFzcz1cImZhbmN5Ym94LWFycm93IGZhbmN5Ym94LWFycm93LS1yaWdodFwiIC8+PC9kaXY+PGRpdiBjbGFzcz1cImZhbmN5Ym94LXN0YWdlXCI+PC9kaXY+PGRpdiBjbGFzcz1cImZhbmN5Ym94LWNhcHRpb24td3JhcFwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1jYXB0aW9uXCI+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+JyxzcGlubmVyVHBsOic8ZGl2IGNsYXNzPVwiZmFuY3lib3gtbG9hZGluZ1wiPjwvZGl2PicsZXJyb3JUcGw6JzxkaXYgY2xhc3M9XCJmYW5jeWJveC1lcnJvclwiPjxwPnt7RVJST1J9fTxwPjwvZGl2PicsYnRuVHBsOntzbGlkZVNob3c6JzxidXR0b24gZGF0YS1mYW5jeWJveC1wbGF5IGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tcGxheVwiIHRpdGxlPVwie3tQTEFZX1NUQVJUfX1cIj48L2J1dHRvbj4nLGZ1bGxTY3JlZW46JzxidXR0b24gZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tZnVsbHNjcmVlblwiIHRpdGxlPVwie3tGVUxMX1NDUkVFTn19XCI+PC9idXR0b24+Jyx0aHVtYnM6JzxidXR0b24gZGF0YS1mYW5jeWJveC10aHVtYnMgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS10aHVtYnNcIiB0aXRsZT1cInt7VEhVTUJTfX1cIj48L2J1dHRvbj4nLGNsb3NlOic8YnV0dG9uIGRhdGEtZmFuY3lib3gtY2xvc2UgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1jbG9zZVwiIHRpdGxlPVwie3tDTE9TRX19XCI+PC9idXR0b24+JyxzbWFsbEJ0bjonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LWNsb3NlIGNsYXNzPVwiZmFuY3lib3gtY2xvc2Utc21hbGxcIiB0aXRsZT1cInt7Q0xPU0V9fVwiPjwvYnV0dG9uPid9LHBhcmVudEVsOlwiYm9keVwiLGF1dG9Gb2N1czohMCxiYWNrRm9jdXM6ITAsdHJhcEZvY3VzOiEwLGZ1bGxTY3JlZW46e2F1dG9TdGFydDohMX0sdG91Y2g6e3ZlcnRpY2FsOiEwLG1vbWVudHVtOiEwfSxoYXNoOm51bGwsbWVkaWE6e30sc2xpZGVTaG93OnthdXRvU3RhcnQ6ITEsc3BlZWQ6NGUzfSx0aHVtYnM6e2F1dG9TdGFydDohMSxoaWRlT25DbG9zZTohMH0sb25Jbml0Om4ubm9vcCxiZWZvcmVMb2FkOm4ubm9vcCxhZnRlckxvYWQ6bi5ub29wLGJlZm9yZVNob3c6bi5ub29wLGFmdGVyU2hvdzpuLm5vb3AsYmVmb3JlQ2xvc2U6bi5ub29wLGFmdGVyQ2xvc2U6bi5ub29wLG9uQWN0aXZhdGU6bi5ub29wLG9uRGVhY3RpdmF0ZTpuLm5vb3AsY2xpY2tDb250ZW50OmZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJpbWFnZVwiPT09dC50eXBlJiZcInpvb21cIn0sY2xpY2tTbGlkZTpcImNsb3NlXCIsY2xpY2tPdXRzaWRlOlwiY2xvc2VcIixkYmxjbGlja0NvbnRlbnQ6ITEsZGJsY2xpY2tTbGlkZTohMSxkYmxjbGlja091dHNpZGU6ITEsbW9iaWxlOntjbGlja0NvbnRlbnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm5cImltYWdlXCI9PT10LnR5cGUmJlwidG9nZ2xlQ29udHJvbHNcIn0sY2xpY2tTbGlkZTpmdW5jdGlvbih0LGUpe3JldHVyblwiaW1hZ2VcIj09PXQudHlwZT9cInRvZ2dsZUNvbnRyb2xzXCI6XCJjbG9zZVwifSxkYmxjbGlja0NvbnRlbnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm5cImltYWdlXCI9PT10LnR5cGUmJlwiem9vbVwifSxkYmxjbGlja1NsaWRlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJpbWFnZVwiPT09dC50eXBlJiZcInpvb21cIn19LGxhbmc6XCJlblwiLGkxOG46e2VuOntDTE9TRTpcIkNsb3NlXCIsTkVYVDpcIk5leHRcIixQUkVWOlwiUHJldmlvdXNcIixFUlJPUjpcIlRoZSByZXF1ZXN0ZWQgY29udGVudCBjYW5ub3QgYmUgbG9hZGVkLiA8YnIvPiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLlwiLFBMQVlfU1RBUlQ6XCJTdGFydCBzbGlkZXNob3dcIixQTEFZX1NUT1A6XCJQYXVzZSBzbGlkZXNob3dcIixGVUxMX1NDUkVFTjpcIkZ1bGwgc2NyZWVuXCIsVEhVTUJTOlwiVGh1bWJuYWlsc1wifSxkZTp7Q0xPU0U6XCJTY2hsaWVzc2VuXCIsTkVYVDpcIldlaXRlclwiLFBSRVY6XCJadXLDvGNrXCIsRVJST1I6XCJEaWUgYW5nZWZvcmRlcnRlbiBEYXRlbiBrb25udGVuIG5pY2h0IGdlbGFkZW4gd2VyZGVuLiA8YnIvPiBCaXR0ZSB2ZXJzdWNoZW4gU2llIGVzIHNww6R0ZXIgbm9jaG1hbC5cIixQTEFZX1NUQVJUOlwiRGlhc2NoYXUgc3RhcnRlblwiLFBMQVlfU1RPUDpcIkRpYXNjaGF1IGJlZW5kZW5cIixGVUxMX1NDUkVFTjpcIlZvbGxiaWxkXCIsVEhVTUJTOlwiVm9yc2NoYXViaWxkZXJcIn19fSxzPW4odCkscj1uKGUpLGM9MCxsPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Lmhhc093blByb3BlcnR5JiZ0IGluc3RhbmNlb2Ygbn0sdT1mdW5jdGlvbigpe3JldHVybiB0LnJlcXVlc3RBbmltYXRpb25GcmFtZXx8dC53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx0Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKGUpe3JldHVybiB0LnNldFRpbWVvdXQoZSwxZTMvNjApfX0oKSxkPWZ1bmN0aW9uKCl7dmFyIHQsbj1lLmNyZWF0ZUVsZW1lbnQoXCJmYWtlZWxlbWVudFwiKSxpPXt0cmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwiLE9UcmFuc2l0aW9uOlwib1RyYW5zaXRpb25FbmRcIixNb3pUcmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwiLFdlYmtpdFRyYW5zaXRpb246XCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCJ9O2Zvcih0IGluIGkpaWYobi5zdHlsZVt0XSE9PW8pcmV0dXJuIGlbdF19KCksZj1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5sZW5ndGgmJnRbMF0ub2Zmc2V0SGVpZ2h0fSxoPWZ1bmN0aW9uKHQsbyxpKXt2YXIgcz10aGlzO3Mub3B0cz1uLmV4dGVuZCghMCx7aW5kZXg6aX0sYSxvfHx7fSksbyYmbi5pc0FycmF5KG8uYnV0dG9ucykmJihzLm9wdHMuYnV0dG9ucz1vLmJ1dHRvbnMpLHMuaWQ9cy5vcHRzLmlkfHwrK2Mscy5ncm91cD1bXSxzLmN1cnJJbmRleD1wYXJzZUludChzLm9wdHMuaW5kZXgsMTApfHwwLHMucHJldkluZGV4PW51bGwscy5wcmV2UG9zPW51bGwscy5jdXJyUG9zPTAscy5maXJzdFJ1bj1udWxsLHMuY3JlYXRlR3JvdXAodCkscy5ncm91cC5sZW5ndGgmJihzLiRsYXN0Rm9jdXM9bihlLmFjdGl2ZUVsZW1lbnQpLmJsdXIoKSxzLnNsaWRlcz17fSxzLmluaXQodCkpfTtuLmV4dGVuZChoLnByb3RvdHlwZSx7aW5pdDpmdW5jdGlvbigpe3ZhciB0LGUsbyxpPXRoaXMsYT1pLmdyb3VwW2kuY3VyckluZGV4XS5vcHRzO2kuc2Nyb2xsVG9wPXIuc2Nyb2xsVG9wKCksaS5zY3JvbGxMZWZ0PXIuc2Nyb2xsTGVmdCgpLG4uZmFuY3lib3guZ2V0SW5zdGFuY2UoKXx8bi5mYW5jeWJveC5pc01vYmlsZXx8XCJoaWRkZW5cIj09PW4oXCJib2R5XCIpLmNzcyhcIm92ZXJmbG93XCIpfHwodD1uKFwiYm9keVwiKS53aWR0aCgpLG4oXCJodG1sXCIpLmFkZENsYXNzKFwiZmFuY3lib3gtZW5hYmxlZFwiKSx0PW4oXCJib2R5XCIpLndpZHRoKCktdCx0PjEmJm4oXCJoZWFkXCIpLmFwcGVuZCgnPHN0eWxlIGlkPVwiZmFuY3lib3gtc3R5bGUtbm9zY3JvbGxcIiB0eXBlPVwidGV4dC9jc3NcIj4uY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFyLCAuZmFuY3lib3gtZW5hYmxlZCBib2R5IHsgbWFyZ2luLXJpZ2h0OiAnK3QrXCJweDsgfTwvc3R5bGU+XCIpKSxvPVwiXCIsbi5lYWNoKGEuYnV0dG9ucyxmdW5jdGlvbih0LGUpe28rPWEuYnRuVHBsW2VdfHxcIlwifSksZT1uKGkudHJhbnNsYXRlKGksYS5iYXNlVHBsLnJlcGxhY2UoXCJ7e0JVVFRPTlN9fVwiLG8pKSkuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIikuYXR0cihcImlkXCIsXCJmYW5jeWJveC1jb250YWluZXItXCIraS5pZCkuYWRkQ2xhc3MoYS5iYXNlQ2xhc3MpLmRhdGEoXCJGYW5jeUJveFwiLGkpLnByZXBlbmRUbyhhLnBhcmVudEVsKSxpLiRyZWZzPXtjb250YWluZXI6ZX0sW1wiYmdcIixcImlubmVyXCIsXCJpbmZvYmFyXCIsXCJ0b29sYmFyXCIsXCJzdGFnZVwiLFwiY2FwdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2kuJHJlZnNbdF09ZS5maW5kKFwiLmZhbmN5Ym94LVwiK3QpfSksKCFhLmFycm93c3x8aS5ncm91cC5sZW5ndGg8MikmJmUuZmluZChcIi5mYW5jeWJveC1uYXZpZ2F0aW9uXCIpLnJlbW92ZSgpLGEuaW5mb2Jhcnx8aS4kcmVmcy5pbmZvYmFyLnJlbW92ZSgpLGEudG9vbGJhcnx8aS4kcmVmcy50b29sYmFyLnJlbW92ZSgpLGkudHJpZ2dlcihcIm9uSW5pdFwiKSxpLmFjdGl2YXRlKCksaS5qdW1wVG8oaS5jdXJySW5kZXgpfSx0cmFuc2xhdGU6ZnVuY3Rpb24odCxlKXt2YXIgbj10Lm9wdHMuaTE4blt0Lm9wdHMubGFuZ107cmV0dXJuIGUucmVwbGFjZSgvXFx7XFx7KFxcdyspXFx9XFx9L2csZnVuY3Rpb24odCxlKXt2YXIgaT1uW2VdO3JldHVybiBpPT09bz90Oml9KX0sY3JlYXRlR3JvdXA6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxpPW4ubWFrZUFycmF5KHQpO24uZWFjaChpLGZ1bmN0aW9uKHQsaSl7dmFyIGEscyxyLGMsbD17fSx1PXt9LGQ9W107bi5pc1BsYWluT2JqZWN0KGkpPyhsPWksdT1pLm9wdHN8fGkpOlwib2JqZWN0XCI9PT1uLnR5cGUoaSkmJm4oaSkubGVuZ3RoPyhhPW4oaSksZD1hLmRhdGEoKSx1PVwib3B0aW9uc1wiaW4gZD9kLm9wdGlvbnM6e30sdT1cIm9iamVjdFwiPT09bi50eXBlKHUpP3U6e30sbC5zcmM9XCJzcmNcImluIGQ/ZC5zcmM6dS5zcmN8fGEuYXR0cihcImhyZWZcIiksW1wid2lkdGhcIixcImhlaWdodFwiLFwidGh1bWJcIixcInR5cGVcIixcImZpbHRlclwiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QgaW4gZCYmKHVbdF09ZFt0XSl9KSxcInNyY3NldFwiaW4gZCYmKHUuaW1hZ2U9e3NyY3NldDpkLnNyY3NldH0pLHUuJG9yaWc9YSxsLnR5cGV8fGwuc3JjfHwobC50eXBlPVwiaW5saW5lXCIsbC5zcmM9aSkpOmw9e3R5cGU6XCJodG1sXCIsc3JjOmkrXCJcIn0sbC5vcHRzPW4uZXh0ZW5kKCEwLHt9LGUub3B0cyx1KSxuLmZhbmN5Ym94LmlzTW9iaWxlJiYobC5vcHRzPW4uZXh0ZW5kKCEwLHt9LGwub3B0cyxsLm9wdHMubW9iaWxlKSkscz1sLnR5cGV8fGwub3B0cy50eXBlLHI9bC5zcmN8fFwiXCIsIXMmJnImJihyLm1hdGNoKC8oXmRhdGE6aW1hZ2VcXC9bYS16MC05K1xcLz1dKiwpfChcXC4oanAoZXxnfGVnKXxnaWZ8cG5nfGJtcHx3ZWJwfHN2Z3xpY28pKChcXD98IykuKik/JCkvaSk/cz1cImltYWdlXCI6ci5tYXRjaCgvXFwuKHBkZikoKFxcP3wjKS4qKT8kL2kpP3M9XCJwZGZcIjpcIiNcIj09PXIuY2hhckF0KDApJiYocz1cImlubGluZVwiKSksbC50eXBlPXMsbC5pbmRleD1lLmdyb3VwLmxlbmd0aCxsLm9wdHMuJG9yaWcmJiFsLm9wdHMuJG9yaWcubGVuZ3RoJiZkZWxldGUgbC5vcHRzLiRvcmlnLCFsLm9wdHMuJHRodW1iJiZsLm9wdHMuJG9yaWcmJihsLm9wdHMuJHRodW1iPWwub3B0cy4kb3JpZy5maW5kKFwiaW1nOmZpcnN0XCIpKSxsLm9wdHMuJHRodW1iJiYhbC5vcHRzLiR0aHVtYi5sZW5ndGgmJmRlbGV0ZSBsLm9wdHMuJHRodW1iLFwiZnVuY3Rpb25cIj09PW4udHlwZShsLm9wdHMuY2FwdGlvbik/bC5vcHRzLmNhcHRpb249bC5vcHRzLmNhcHRpb24uYXBwbHkoaSxbZSxsXSk6XCJjYXB0aW9uXCJpbiBkJiYobC5vcHRzLmNhcHRpb249ZC5jYXB0aW9uKSxsLm9wdHMuY2FwdGlvbj1sLm9wdHMuY2FwdGlvbj09PW8/XCJcIjpsLm9wdHMuY2FwdGlvbitcIlwiLFwiYWpheFwiPT09cyYmKGM9ci5zcGxpdCgvXFxzKy8sMiksYy5sZW5ndGg+MSYmKGwuc3JjPWMuc2hpZnQoKSxsLm9wdHMuZmlsdGVyPWMuc2hpZnQoKSkpLFwiYXV0b1wiPT1sLm9wdHMuc21hbGxCdG4mJihuLmluQXJyYXkocyxbXCJodG1sXCIsXCJpbmxpbmVcIixcImFqYXhcIl0pPi0xPyhsLm9wdHMudG9vbGJhcj0hMSxsLm9wdHMuc21hbGxCdG49ITApOmwub3B0cy5zbWFsbEJ0bj0hMSksXCJwZGZcIj09PXMmJihsLnR5cGU9XCJpZnJhbWVcIixsLm9wdHMuaWZyYW1lLnByZWxvYWQ9ITEpLGwub3B0cy5tb2RhbCYmKGwub3B0cz1uLmV4dGVuZCghMCxsLm9wdHMse2luZm9iYXI6MCx0b29sYmFyOjAsc21hbGxCdG46MCxrZXlib2FyZDowLHNsaWRlU2hvdzowLGZ1bGxTY3JlZW46MCx0aHVtYnM6MCx0b3VjaDowLGNsaWNrQ29udGVudDohMSxjbGlja1NsaWRlOiExLGNsaWNrT3V0c2lkZTohMSxkYmxjbGlja0NvbnRlbnQ6ITEsZGJsY2xpY2tTbGlkZTohMSxkYmxjbGlja091dHNpZGU6ITF9KSksZS5ncm91cC5wdXNoKGwpfSl9LGFkZEV2ZW50czpmdW5jdGlvbigpe3ZhciBvPXRoaXM7by5yZW1vdmVFdmVudHMoKSxvLiRyZWZzLmNvbnRhaW5lci5vbihcImNsaWNrLmZiLWNsb3NlXCIsXCJbZGF0YS1mYW5jeWJveC1jbG9zZV1cIixmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSxvLmNsb3NlKHQpfSkub24oXCJjbGljay5mYi1wcmV2IHRvdWNoZW5kLmZiLXByZXZcIixcIltkYXRhLWZhbmN5Ym94LXByZXZdXCIsZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCksby5wcmV2aW91cygpfSkub24oXCJjbGljay5mYi1uZXh0IHRvdWNoZW5kLmZiLW5leHRcIixcIltkYXRhLWZhbmN5Ym94LW5leHRdXCIsZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCksby5uZXh0KCl9KSxzLm9uKFwib3JpZW50YXRpb25jaGFuZ2UuZmIgcmVzaXplLmZiXCIsZnVuY3Rpb24odCl7dCYmdC5vcmlnaW5hbEV2ZW50JiZcInJlc2l6ZVwiPT09dC5vcmlnaW5hbEV2ZW50LnR5cGU/dShmdW5jdGlvbigpe28udXBkYXRlKCl9KTooby4kcmVmcy5zdGFnZS5oaWRlKCksc2V0VGltZW91dChmdW5jdGlvbigpe28uJHJlZnMuc3RhZ2Uuc2hvdygpLG8udXBkYXRlKCl9LDUwMCkpfSksci5vbihcImZvY3VzaW4uZmJcIixmdW5jdGlvbih0KXt2YXIgaT1uLmZhbmN5Ym94P24uZmFuY3lib3guZ2V0SW5zdGFuY2UoKTpudWxsO2kuaXNDbG9zaW5nfHwhaS5jdXJyZW50fHwhaS5jdXJyZW50Lm9wdHMudHJhcEZvY3VzfHxuKHQudGFyZ2V0KS5oYXNDbGFzcyhcImZhbmN5Ym94LWNvbnRhaW5lclwiKXx8bih0LnRhcmdldCkuaXMoZSl8fGkmJlwiZml4ZWRcIiE9PW4odC50YXJnZXQpLmNzcyhcInBvc2l0aW9uXCIpJiYhaS4kcmVmcy5jb250YWluZXIuaGFzKHQudGFyZ2V0KS5sZW5ndGgmJih0LnN0b3BQcm9wYWdhdGlvbigpLGkuZm9jdXMoKSxzLnNjcm9sbFRvcChvLnNjcm9sbFRvcCkuc2Nyb2xsTGVmdChvLnNjcm9sbExlZnQpKX0pLHIub24oXCJrZXlkb3duLmZiXCIsZnVuY3Rpb24odCl7dmFyIGU9by5jdXJyZW50LGk9dC5rZXlDb2RlfHx0LndoaWNoO2lmKGUmJmUub3B0cy5rZXlib2FyZCYmIW4odC50YXJnZXQpLmlzKFwiaW5wdXRcIikmJiFuKHQudGFyZ2V0KS5pcyhcInRleHRhcmVhXCIpKXJldHVybiA4PT09aXx8Mjc9PT1pPyh0LnByZXZlbnREZWZhdWx0KCksdm9pZCBvLmNsb3NlKHQpKTozNz09PWl8fDM4PT09aT8odC5wcmV2ZW50RGVmYXVsdCgpLHZvaWQgby5wcmV2aW91cygpKTozOT09PWl8fDQwPT09aT8odC5wcmV2ZW50RGVmYXVsdCgpLHZvaWQgby5uZXh0KCkpOnZvaWQgby50cmlnZ2VyKFwiYWZ0ZXJLZXlkb3duXCIsdCxpKX0pLG8uZ3JvdXBbby5jdXJySW5kZXhdLm9wdHMuaWRsZVRpbWUmJihvLmlkbGVTZWNvbmRzQ291bnRlcj0wLHIub24oXCJtb3VzZW1vdmUuZmItaWRsZSBtb3VzZWVudGVyLmZiLWlkbGUgbW91c2VsZWF2ZS5mYi1pZGxlIG1vdXNlZG93bi5mYi1pZGxlIHRvdWNoc3RhcnQuZmItaWRsZSB0b3VjaG1vdmUuZmItaWRsZSBzY3JvbGwuZmItaWRsZSBrZXlkb3duLmZiLWlkbGVcIixmdW5jdGlvbigpe28uaWRsZVNlY29uZHNDb3VudGVyPTAsby5pc0lkbGUmJm8uc2hvd0NvbnRyb2xzKCksby5pc0lkbGU9ITF9KSxvLmlkbGVJbnRlcnZhbD10LnNldEludGVydmFsKGZ1bmN0aW9uKCl7by5pZGxlU2Vjb25kc0NvdW50ZXIrKyxvLmlkbGVTZWNvbmRzQ291bnRlcj49by5ncm91cFtvLmN1cnJJbmRleF0ub3B0cy5pZGxlVGltZSYmKG8uaXNJZGxlPSEwLG8uaWRsZVNlY29uZHNDb3VudGVyPTAsby5oaWRlQ29udHJvbHMoKSl9LDFlMykpfSxyZW1vdmVFdmVudHM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3Mub2ZmKFwib3JpZW50YXRpb25jaGFuZ2UuZmIgcmVzaXplLmZiXCIpLHIub2ZmKFwiZm9jdXNpbi5mYiBrZXlkb3duLmZiIC5mYi1pZGxlXCIpLHRoaXMuJHJlZnMuY29udGFpbmVyLm9mZihcIi5mYi1jbG9zZSAuZmItcHJldiAuZmItbmV4dFwiKSxlLmlkbGVJbnRlcnZhbCYmKHQuY2xlYXJJbnRlcnZhbChlLmlkbGVJbnRlcnZhbCksZS5pZGxlSW50ZXJ2YWw9bnVsbCl9LHByZXZpb3VzOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmp1bXBUbyh0aGlzLmN1cnJQb3MtMSx0KX0sbmV4dDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5qdW1wVG8odGhpcy5jdXJyUG9zKzEsdCl9LGp1bXBUbzpmdW5jdGlvbih0LGUsaSl7dmFyIGEscyxyLGMsbCx1LGQsaD10aGlzLHA9aC5ncm91cC5sZW5ndGg7aWYoIShoLmlzU2xpZGluZ3x8aC5pc0Nsb3Npbmd8fGguaXNBbmltYXRpbmcmJmguZmlyc3RSdW4pKXtpZih0PXBhcnNlSW50KHQsMTApLHM9aC5jdXJyZW50P2guY3VycmVudC5vcHRzLmxvb3A6aC5vcHRzLmxvb3AsIXMmJih0PDB8fHQ+PXApKXJldHVybiExO2lmKGE9aC5maXJzdFJ1bj1udWxsPT09aC5maXJzdFJ1biwhKHA8MiYmIWEmJmguaXNTbGlkaW5nKSl7aWYoYz1oLmN1cnJlbnQsaC5wcmV2SW5kZXg9aC5jdXJySW5kZXgsaC5wcmV2UG9zPWguY3VyclBvcyxyPWguY3JlYXRlU2xpZGUodCkscD4xJiYoKHN8fHIuaW5kZXg+MCkmJmguY3JlYXRlU2xpZGUodC0xKSwoc3x8ci5pbmRleDxwLTEpJiZoLmNyZWF0ZVNsaWRlKHQrMSkpLGguY3VycmVudD1yLGguY3VyckluZGV4PXIuaW5kZXgsaC5jdXJyUG9zPXIucG9zLGgudHJpZ2dlcihcImJlZm9yZVNob3dcIixhKSxoLnVwZGF0ZUNvbnRyb2xzKCksdT1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShyLiRzbGlkZSksci5pc01vdmVkPSgwIT09dS5sZWZ0fHwwIT09dS50b3ApJiYhci4kc2xpZGUuaGFzQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKSxyLmZvcmNlZER1cmF0aW9uPW8sbi5pc051bWVyaWMoZSk/ci5mb3JjZWREdXJhdGlvbj1lOmU9ci5vcHRzW2E/XCJhbmltYXRpb25EdXJhdGlvblwiOlwidHJhbnNpdGlvbkR1cmF0aW9uXCJdLGU9cGFyc2VJbnQoZSwxMCksYSlyZXR1cm4gci5vcHRzLmFuaW1hdGlvbkVmZmVjdCYmZSYmaC4kcmVmcy5jb250YWluZXIuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLGUrXCJtc1wiKSxoLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLWhpZGRlblwiKSxmKGguJHJlZnMuY29udGFpbmVyKSxoLiRyZWZzLmNvbnRhaW5lci5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLW9wZW5cIiksci4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY3VycmVudFwiKSxoLmxvYWRTbGlkZShyKSx2b2lkIGgucHJlbG9hZCgpO24uZWFjaChoLnNsaWRlcyxmdW5jdGlvbih0LGUpe24uZmFuY3lib3guc3RvcChlLiRzbGlkZSl9KSxyLiRzbGlkZS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91c1wiKS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIpLHIuaXNNb3ZlZD8obD1NYXRoLnJvdW5kKHIuJHNsaWRlLndpZHRoKCkpLG4uZWFjaChoLnNsaWRlcyxmdW5jdGlvbih0LG8pe3ZhciBpPW8ucG9zLXIucG9zO24uZmFuY3lib3guYW5pbWF0ZShvLiRzbGlkZSx7dG9wOjAsbGVmdDppKmwraSpvLm9wdHMuZ3V0dGVyfSxlLGZ1bmN0aW9uKCl7by4kc2xpZGUucmVtb3ZlQXR0cihcInN0eWxlXCIpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpLG8ucG9zPT09aC5jdXJyUG9zJiYoci5pc01vdmVkPSExLGguY29tcGxldGUoKSl9KX0pKTpoLiRyZWZzLnN0YWdlLmNoaWxkcmVuKCkucmVtb3ZlQXR0cihcInN0eWxlXCIpLHIuaXNMb2FkZWQ/aC5yZXZlYWxDb250ZW50KHIpOmgubG9hZFNsaWRlKHIpLGgucHJlbG9hZCgpLGMucG9zIT09ci5wb3MmJihkPVwiZmFuY3lib3gtc2xpZGUtLVwiKyhjLnBvcz5yLnBvcz9cIm5leHRcIjpcInByZXZpb3VzXCIpLGMuJHNsaWRlLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlIGZhbmN5Ym94LXNsaWRlLS1jdXJyZW50IGZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91c1wiKSxjLmlzQ29tcGxldGU9ITEsZSYmKHIuaXNNb3ZlZHx8ci5vcHRzLnRyYW5zaXRpb25FZmZlY3QpJiYoci5pc01vdmVkP2MuJHNsaWRlLmFkZENsYXNzKGQpOihkPVwiZmFuY3lib3gtYW5pbWF0ZWQgXCIrZCtcIiBmYW5jeWJveC1meC1cIityLm9wdHMudHJhbnNpdGlvbkVmZmVjdCxuLmZhbmN5Ym94LmFuaW1hdGUoYy4kc2xpZGUsZCxlLGZ1bmN0aW9uKCl7Yy4kc2xpZGUucmVtb3ZlQ2xhc3MoZCkucmVtb3ZlQXR0cihcInN0eWxlXCIpfSkpKSl9fX0sY3JlYXRlU2xpZGU6ZnVuY3Rpb24odCl7dmFyIGUsbyxpPXRoaXM7cmV0dXJuIG89dCVpLmdyb3VwLmxlbmd0aCxvPW88MD9pLmdyb3VwLmxlbmd0aCtvOm8sIWkuc2xpZGVzW3RdJiZpLmdyb3VwW29dJiYoZT1uKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc2xpZGVcIj48L2Rpdj4nKS5hcHBlbmRUbyhpLiRyZWZzLnN0YWdlKSxpLnNsaWRlc1t0XT1uLmV4dGVuZCghMCx7fSxpLmdyb3VwW29dLHtwb3M6dCwkc2xpZGU6ZSxpc0xvYWRlZDohMX0pLGkudXBkYXRlU2xpZGUoaS5zbGlkZXNbdF0pKSxpLnNsaWRlc1t0XX0sc2NhbGVUb0FjdHVhbDpmdW5jdGlvbih0LGUsaSl7dmFyIGEscyxyLGMsbCx1PXRoaXMsZD11LmN1cnJlbnQsZj1kLiRjb250ZW50LGg9cGFyc2VJbnQoZC4kc2xpZGUud2lkdGgoKSwxMCkscD1wYXJzZUludChkLiRzbGlkZS5oZWlnaHQoKSwxMCksZz1kLndpZHRoLGI9ZC5oZWlnaHQ7XCJpbWFnZVwiIT1kLnR5cGV8fGQuaGFzRXJyb3J8fCFmfHx1LmlzQW5pbWF0aW5nfHwobi5mYW5jeWJveC5zdG9wKGYpLHUuaXNBbmltYXRpbmc9ITAsdD10PT09bz8uNSpoOnQsZT1lPT09bz8uNSpwOmUsYT1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShmKSxjPWcvYS53aWR0aCxsPWIvYS5oZWlnaHQscz0uNSpoLS41Kmcscj0uNSpwLS41KmIsZz5oJiYocz1hLmxlZnQqYy0odCpjLXQpLHM+MCYmKHM9MCksczxoLWcmJihzPWgtZykpLGI+cCYmKHI9YS50b3AqbC0oZSpsLWUpLHI+MCYmKHI9MCkscjxwLWImJihyPXAtYikpLHUudXBkYXRlQ3Vyc29yKGcsYiksbi5mYW5jeWJveC5hbmltYXRlKGYse3RvcDpyLGxlZnQ6cyxzY2FsZVg6YyxzY2FsZVk6bH0saXx8MzMwLGZ1bmN0aW9uKCl7dS5pc0FuaW1hdGluZz0hMX0pLHUuU2xpZGVTaG93JiZ1LlNsaWRlU2hvdy5pc0FjdGl2ZSYmdS5TbGlkZVNob3cuc3RvcCgpKX0sc2NhbGVUb0ZpdDpmdW5jdGlvbih0KXt2YXIgZSxvPXRoaXMsaT1vLmN1cnJlbnQsYT1pLiRjb250ZW50O1wiaW1hZ2VcIiE9aS50eXBlfHxpLmhhc0Vycm9yfHwhYXx8by5pc0FuaW1hdGluZ3x8KG4uZmFuY3lib3guc3RvcChhKSxvLmlzQW5pbWF0aW5nPSEwLGU9by5nZXRGaXRQb3MoaSksby51cGRhdGVDdXJzb3IoZS53aWR0aCxlLmhlaWdodCksbi5mYW5jeWJveC5hbmltYXRlKGEse3RvcDplLnRvcCxsZWZ0OmUubGVmdCxzY2FsZVg6ZS53aWR0aC9hLndpZHRoKCksc2NhbGVZOmUuaGVpZ2h0L2EuaGVpZ2h0KCl9LHR8fDMzMCxmdW5jdGlvbigpe28uaXNBbmltYXRpbmc9ITF9KSl9LGdldEZpdFBvczpmdW5jdGlvbih0KXt2YXIgZSxvLGksYSxyLGM9dGhpcyxsPXQuJGNvbnRlbnQsdT10LndpZHRoLGQ9dC5oZWlnaHQsZj10Lm9wdHMubWFyZ2luO3JldHVybiEoIWx8fCFsLmxlbmd0aHx8IXUmJiFkKSYmKFwibnVtYmVyXCI9PT1uLnR5cGUoZikmJihmPVtmLGZdKSwyPT1mLmxlbmd0aCYmKGY9W2ZbMF0sZlsxXSxmWzBdLGZbMV1dKSxzLndpZHRoKCk8ODAwJiYoZj1bMCwwLDAsMF0pLGU9cGFyc2VJbnQoYy4kcmVmcy5zdGFnZS53aWR0aCgpLDEwKS0oZlsxXStmWzNdKSxvPXBhcnNlSW50KGMuJHJlZnMuc3RhZ2UuaGVpZ2h0KCksMTApLShmWzBdK2ZbMl0pLGk9TWF0aC5taW4oMSxlL3Usby9kKSxhPU1hdGguZmxvb3IoaSp1KSxyPU1hdGguZmxvb3IoaSpkKSx7dG9wOk1hdGguZmxvb3IoLjUqKG8tcikpK2ZbMF0sbGVmdDpNYXRoLmZsb29yKC41KihlLWEpKStmWzNdLHdpZHRoOmEsaGVpZ2h0OnJ9KX0sdXBkYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztuLmVhY2godC5zbGlkZXMsZnVuY3Rpb24oZSxuKXt0LnVwZGF0ZVNsaWRlKG4pfSl9LHVwZGF0ZVNsaWRlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbz10LiRjb250ZW50O28mJih0LndpZHRofHx0LmhlaWdodCkmJihuLmZhbmN5Ym94LnN0b3Aobyksbi5mYW5jeWJveC5zZXRUcmFuc2xhdGUobyxlLmdldEZpdFBvcyh0KSksdC5wb3M9PT1lLmN1cnJQb3MmJmUudXBkYXRlQ3Vyc29yKCkpLHQuJHNsaWRlLnRyaWdnZXIoXCJyZWZyZXNoXCIpLGUudHJpZ2dlcihcIm9uVXBkYXRlXCIsdCl9LHVwZGF0ZUN1cnNvcjpmdW5jdGlvbih0LGUpe3ZhciBuLGk9dGhpcyxhPWkuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtem9vbWFibGUgZmFuY3lib3gtY2FuLXpvb21JbiBmYW5jeWJveC1jYW4tZHJhZyBmYW5jeWJveC1jYW4tem9vbU91dFwiKTtpLmN1cnJlbnQmJiFpLmlzQ2xvc2luZyYmKGkuaXNab29tYWJsZSgpPyhhLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtem9vbWFibGVcIiksbj10IT09byYmZSE9PW8/dDxpLmN1cnJlbnQud2lkdGgmJmU8aS5jdXJyZW50LmhlaWdodDppLmlzU2NhbGVkRG93bigpLG4/YS5hZGRDbGFzcyhcImZhbmN5Ym94LWNhbi16b29tSW5cIik6aS5jdXJyZW50Lm9wdHMudG91Y2g/YS5hZGRDbGFzcyhcImZhbmN5Ym94LWNhbi1kcmFnXCIpOmEuYWRkQ2xhc3MoXCJmYW5jeWJveC1jYW4tem9vbU91dFwiKSk6aS5jdXJyZW50Lm9wdHMudG91Y2gmJmEuYWRkQ2xhc3MoXCJmYW5jeWJveC1jYW4tZHJhZ1wiKSl9LGlzWm9vbWFibGU6ZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMsbz1lLmN1cnJlbnQ7aWYobyYmIWUuaXNDbG9zaW5nKXJldHVybiEhKFwiaW1hZ2VcIj09PW8udHlwZSYmby5pc0xvYWRlZCYmIW8uaGFzRXJyb3ImJihcInpvb21cIj09PW8ub3B0cy5jbGlja0NvbnRlbnR8fG4uaXNGdW5jdGlvbihvLm9wdHMuY2xpY2tDb250ZW50KSYmXCJ6b29tXCI9PT1vLm9wdHMuY2xpY2tDb250ZW50KG8pKSYmKHQ9ZS5nZXRGaXRQb3Mobyksby53aWR0aD50LndpZHRofHxvLmhlaWdodD50LmhlaWdodCkpfSxpc1NjYWxlZERvd246ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC5jdXJyZW50LG89ZS4kY29udGVudCxpPSExO3JldHVybiBvJiYoaT1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShvKSxpPWkud2lkdGg8ZS53aWR0aHx8aS5oZWlnaHQ8ZS5oZWlnaHQpLGl9LGNhblBhbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LmN1cnJlbnQsbj1lLiRjb250ZW50LG89ITE7cmV0dXJuIG4mJihvPXQuZ2V0Rml0UG9zKGUpLG89TWF0aC5hYnMobi53aWR0aCgpLW8ud2lkdGgpPjF8fE1hdGguYWJzKG4uaGVpZ2h0KCktby5oZWlnaHQpPjEpLG99LGxvYWRTbGlkZTpmdW5jdGlvbih0KXt2YXIgZSxvLGksYT10aGlzO2lmKCF0LmlzTG9hZGluZyYmIXQuaXNMb2FkZWQpe3N3aXRjaCh0LmlzTG9hZGluZz0hMCxhLnRyaWdnZXIoXCJiZWZvcmVMb2FkXCIsdCksZT10LnR5cGUsbz10LiRzbGlkZSxvLm9mZihcInJlZnJlc2hcIikudHJpZ2dlcihcIm9uUmVzZXRcIikuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tXCIrKGV8fFwidW5rbm93blwiKSkuYWRkQ2xhc3ModC5vcHRzLnNsaWRlQ2xhc3MpLGUpe2Nhc2VcImltYWdlXCI6YS5zZXRJbWFnZSh0KTticmVhaztjYXNlXCJpZnJhbWVcIjphLnNldElmcmFtZSh0KTticmVhaztjYXNlXCJodG1sXCI6YS5zZXRDb250ZW50KHQsdC5zcmN8fHQuY29udGVudCk7YnJlYWs7Y2FzZVwiaW5saW5lXCI6bih0LnNyYykubGVuZ3RoP2Euc2V0Q29udGVudCh0LG4odC5zcmMpKTphLnNldEVycm9yKHQpO2JyZWFrO2Nhc2VcImFqYXhcIjphLnNob3dMb2FkaW5nKHQpLGk9bi5hamF4KG4uZXh0ZW5kKHt9LHQub3B0cy5hamF4LnNldHRpbmdzLHt1cmw6dC5zcmMsc3VjY2VzczpmdW5jdGlvbihlLG4pe1wic3VjY2Vzc1wiPT09biYmYS5zZXRDb250ZW50KHQsZSl9LGVycm9yOmZ1bmN0aW9uKGUsbil7ZSYmXCJhYm9ydFwiIT09biYmYS5zZXRFcnJvcih0KX19KSksby5vbmUoXCJvblJlc2V0XCIsZnVuY3Rpb24oKXtpLmFib3J0KCl9KTticmVhaztkZWZhdWx0OmEuc2V0RXJyb3IodCl9cmV0dXJuITB9fSxzZXRJbWFnZTpmdW5jdGlvbihlKXt2YXIgbyxpLGEscyxyPXRoaXMsYz1lLm9wdHMuaW1hZ2Uuc3Jjc2V0O2lmKGMpe2E9dC5kZXZpY2VQaXhlbFJhdGlvfHwxLHM9dC5pbm5lcldpZHRoKmEsaT1jLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIHQudHJpbSgpLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbih0LG4pe3ZhciBvPXBhcnNlSW50KHQuc3Vic3RyaW5nKDAsdC5sZW5ndGgtMSksMTApO3JldHVybiAwPT09bj9lLnVybD10OnZvaWQobyYmKGUudmFsdWU9byxlLnBvc3RmaXg9dFt0Lmxlbmd0aC0xXSkpfSksZX0pLGkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0LnZhbHVlLWUudmFsdWV9KTtmb3IodmFyIGw9MDtsPGkubGVuZ3RoO2wrKyl7dmFyIHU9aVtsXTtpZihcIndcIj09PXUucG9zdGZpeCYmdS52YWx1ZT49c3x8XCJ4XCI9PT11LnBvc3RmaXgmJnUudmFsdWU+PWEpe289dTticmVha319IW8mJmkubGVuZ3RoJiYobz1pW2kubGVuZ3RoLTFdKSxvJiYoZS5zcmM9by51cmwsZS53aWR0aCYmZS5oZWlnaHQmJlwid1wiPT1vLnBvc3RmaXgmJihlLmhlaWdodD1lLndpZHRoL2UuaGVpZ2h0Km8udmFsdWUsZS53aWR0aD1vLnZhbHVlKSl9ZS4kY29udGVudD1uKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtaW1hZ2Utd3JhcFwiPjwvZGl2PicpLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpLmFwcGVuZFRvKGUuJHNsaWRlKSxlLm9wdHMucHJlbG9hZCE9PSExJiZlLm9wdHMud2lkdGgmJmUub3B0cy5oZWlnaHQmJihlLm9wdHMudGh1bWJ8fGUub3B0cy4kdGh1bWIpPyhlLndpZHRoPWUub3B0cy53aWR0aCxlLmhlaWdodD1lLm9wdHMuaGVpZ2h0LGUuJGdob3N0PW4oXCI8aW1nIC8+XCIpLm9uZShcImVycm9yXCIsZnVuY3Rpb24oKXtuKHRoaXMpLnJlbW92ZSgpLGUuJGdob3N0PW51bGwsci5zZXRCaWdJbWFnZShlKX0pLm9uZShcImxvYWRcIixmdW5jdGlvbigpe3IuYWZ0ZXJMb2FkKGUpLHIuc2V0QmlnSW1hZ2UoZSl9KS5hZGRDbGFzcyhcImZhbmN5Ym94LWltYWdlXCIpLmFwcGVuZFRvKGUuJGNvbnRlbnQpLmF0dHIoXCJzcmNcIixlLm9wdHMudGh1bWJ8fGUub3B0cy4kdGh1bWIuYXR0cihcInNyY1wiKSkpOnIuc2V0QmlnSW1hZ2UoZSl9LHNldEJpZ0ltYWdlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbz1uKFwiPGltZyAvPlwiKTt0LiRpbWFnZT1vLm9uZShcImVycm9yXCIsZnVuY3Rpb24oKXtlLnNldEVycm9yKHQpfSkub25lKFwibG9hZFwiLGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHQudGltb3V0cyksdC50aW1vdXRzPW51bGwsZS5pc0Nsb3Npbmd8fCh0LndpZHRoPXRoaXMubmF0dXJhbFdpZHRoLHQuaGVpZ2h0PXRoaXMubmF0dXJhbEhlaWdodCx0Lm9wdHMuaW1hZ2Uuc3Jjc2V0JiZvLmF0dHIoXCJzaXplc1wiLFwiMTAwdndcIikuYXR0cihcInNyY3NldFwiLHQub3B0cy5pbWFnZS5zcmNzZXQpLGUuaGlkZUxvYWRpbmcodCksdC4kZ2hvc3Q/dC50aW1vdXRzPXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LnRpbW91dHM9bnVsbCx0LiRnaG9zdC5oaWRlKCl9LE1hdGgubWluKDMwMCxNYXRoLm1heCgxZTMsdC5oZWlnaHQvMTYwMCkpKTplLmFmdGVyTG9hZCh0KSl9KS5hZGRDbGFzcyhcImZhbmN5Ym94LWltYWdlXCIpLmF0dHIoXCJzcmNcIix0LnNyYykuYXBwZW5kVG8odC4kY29udGVudCksb1swXS5jb21wbGV0ZT9vLnRyaWdnZXIoXCJsb2FkXCIpOm9bMF0uZXJyb3I/by50cmlnZ2VyKFwiZXJyb3JcIik6dC50aW1vdXRzPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtvWzBdLmNvbXBsZXRlfHx0Lmhhc0Vycm9yfHxlLnNob3dMb2FkaW5nKHQpfSwxMDApfSxzZXRJZnJhbWU6ZnVuY3Rpb24odCl7dmFyIGUsaT10aGlzLGE9dC5vcHRzLmlmcmFtZSxzPXQuJHNsaWRlO3QuJGNvbnRlbnQ9bignPGRpdiBjbGFzcz1cImZhbmN5Ym94LWNvbnRlbnQnKyhhLnByZWxvYWQ/XCIgZmFuY3lib3gtaXMtaGlkZGVuXCI6XCJcIikrJ1wiPjwvZGl2PicpLmNzcyhhLmNzcykuYXBwZW5kVG8ocyksZT1uKGEudHBsLnJlcGxhY2UoL1xce3JuZFxcfS9nLChuZXcgRGF0ZSkuZ2V0VGltZSgpKSkuYXR0cihhLmF0dHIpLmFwcGVuZFRvKHQuJGNvbnRlbnQpLGEucHJlbG9hZD8oaS5zaG93TG9hZGluZyh0KSxlLm9uKFwibG9hZC5mYiBlcnJvci5mYlwiLGZ1bmN0aW9uKGUpe3RoaXMuaXNSZWFkeT0xLHQuJHNsaWRlLnRyaWdnZXIoXCJyZWZyZXNoXCIpLGkuYWZ0ZXJMb2FkKHQpfSkscy5vbihcInJlZnJlc2guZmJcIixmdW5jdGlvbigpe3ZhciBuLGkscyxyLGMsbD10LiRjb250ZW50O2lmKDE9PT1lWzBdLmlzUmVhZHkpe3RyeXtuPWUuY29udGVudHMoKSxpPW4uZmluZChcImJvZHlcIil9Y2F0Y2godCl7fWkmJmkubGVuZ3RoJiYoYS5jc3Mud2lkdGg9PT1vfHxhLmNzcy5oZWlnaHQ9PT1vKSYmKHM9ZVswXS5jb250ZW50V2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCxyPU1hdGguY2VpbChpLm91dGVyV2lkdGgoITApKyhsLndpZHRoKCktcykpLGM9TWF0aC5jZWlsKGkub3V0ZXJIZWlnaHQoITApKSxsLmNzcyh7d2lkdGg6YS5jc3Mud2lkdGg9PT1vP3IrKGwub3V0ZXJXaWR0aCgpLWwuaW5uZXJXaWR0aCgpKTphLmNzcy53aWR0aCxoZWlnaHQ6YS5jc3MuaGVpZ2h0PT09bz9jKyhsLm91dGVySGVpZ2h0KCktbC5pbm5lckhlaWdodCgpKTphLmNzcy5oZWlnaHR9KSksbC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLWhpZGRlblwiKX19KSk6dGhpcy5hZnRlckxvYWQodCksZS5hdHRyKFwic3JjXCIsdC5zcmMpLHQub3B0cy5zbWFsbEJ0bj09PSEwJiZ0LiRjb250ZW50LnByZXBlbmQoaS50cmFuc2xhdGUodCx0Lm9wdHMuYnRuVHBsLnNtYWxsQnRuKSkscy5vbmUoXCJvblJlc2V0XCIsZnVuY3Rpb24oKXt0cnl7bih0aGlzKS5maW5kKFwiaWZyYW1lXCIpLmhpZGUoKS5hdHRyKFwic3JjXCIsXCIvL2Fib3V0OmJsYW5rXCIpfWNhdGNoKHQpe31uKHRoaXMpLmVtcHR5KCksdC5pc0xvYWRlZD0hMX0pfSxzZXRDb250ZW50OmZ1bmN0aW9uKHQsZSl7dmFyIG89dGhpcztvLmlzQ2xvc2luZ3x8KG8uaGlkZUxvYWRpbmcodCksdC4kc2xpZGUuZW1wdHkoKSxsKGUpJiZlLnBhcmVudCgpLmxlbmd0aD8oZS5wYXJlbnQoXCIuZmFuY3lib3gtc2xpZGUtLWlubGluZVwiKS50cmlnZ2VyKFwib25SZXNldFwiKSx0LiRwbGFjZWhvbGRlcj1uKFwiPGRpdj48L2Rpdj5cIikuaGlkZSgpLmluc2VydEFmdGVyKGUpLGUuY3NzKFwiZGlzcGxheVwiLFwiaW5saW5lLWJsb2NrXCIpKTp0Lmhhc0Vycm9yfHwoXCJzdHJpbmdcIj09PW4udHlwZShlKSYmKGU9bihcIjxkaXY+XCIpLmFwcGVuZChuLnRyaW0oZSkpLmNvbnRlbnRzKCksMz09PWVbMF0ubm9kZVR5cGUmJihlPW4oXCI8ZGl2PlwiKS5odG1sKGUpKSksdC5vcHRzLmZpbHRlciYmKGU9bihcIjxkaXY+XCIpLmh0bWwoZSkuZmluZCh0Lm9wdHMuZmlsdGVyKSkpLHQuJHNsaWRlLm9uZShcIm9uUmVzZXRcIixmdW5jdGlvbigpe3QuJHBsYWNlaG9sZGVyJiYodC4kcGxhY2Vob2xkZXIuYWZ0ZXIoZS5oaWRlKCkpLnJlbW92ZSgpLHQuJHBsYWNlaG9sZGVyPW51bGwpLHQuJHNtYWxsQnRuJiYodC4kc21hbGxCdG4ucmVtb3ZlKCksdC4kc21hbGxCdG49bnVsbCksdC5oYXNFcnJvcnx8KG4odGhpcykuZW1wdHkoKSx0LmlzTG9hZGVkPSExKX0pLHQuJGNvbnRlbnQ9bihlKS5hcHBlbmRUbyh0LiRzbGlkZSksdC5vcHRzLnNtYWxsQnRuJiYhdC4kc21hbGxCdG4mJih0LiRzbWFsbEJ0bj1uKG8udHJhbnNsYXRlKHQsdC5vcHRzLmJ0blRwbC5zbWFsbEJ0bikpLmFwcGVuZFRvKHQuJGNvbnRlbnQpKSx0aGlzLmFmdGVyTG9hZCh0KSl9LHNldEVycm9yOmZ1bmN0aW9uKHQpe3QuaGFzRXJyb3I9ITAsdC4kc2xpZGUucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tXCIrdC50eXBlKSx0aGlzLnNldENvbnRlbnQodCx0aGlzLnRyYW5zbGF0ZSh0LHQub3B0cy5lcnJvclRwbCkpfSxzaG93TG9hZGluZzpmdW5jdGlvbih0KXt2YXIgZT10aGlzO3Q9dHx8ZS5jdXJyZW50LHQmJiF0LiRzcGlubmVyJiYodC4kc3Bpbm5lcj1uKGUub3B0cy5zcGlubmVyVHBsKS5hcHBlbmRUbyh0LiRzbGlkZSkpfSxoaWRlTG9hZGluZzpmdW5jdGlvbih0KXt2YXIgZT10aGlzO3Q9dHx8ZS5jdXJyZW50LHQmJnQuJHNwaW5uZXImJih0LiRzcGlubmVyLnJlbW92ZSgpLGRlbGV0ZSB0LiRzcGlubmVyKX0sYWZ0ZXJMb2FkOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7ZS5pc0Nsb3Npbmd8fCh0LmlzTG9hZGluZz0hMSx0LmlzTG9hZGVkPSEwLGUudHJpZ2dlcihcImFmdGVyTG9hZFwiLHQpLGUuaGlkZUxvYWRpbmcodCksdC5vcHRzLnByb3RlY3QmJnQuJGNvbnRlbnQmJiF0Lmhhc0Vycm9yJiYodC4kY29udGVudC5vbihcImNvbnRleHRtZW51LmZiXCIsZnVuY3Rpb24odCl7cmV0dXJuIDI9PXQuYnV0dG9uJiZ0LnByZXZlbnREZWZhdWx0KCksITB9KSxcImltYWdlXCI9PT10LnR5cGUmJm4oJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1zcGFjZWJhbGxcIj48L2Rpdj4nKS5hcHBlbmRUbyh0LiRjb250ZW50KSksZS5yZXZlYWxDb250ZW50KHQpKX0scmV2ZWFsQ29udGVudDpmdW5jdGlvbih0KXt2YXIgZSxpLGEscyxyLGM9dGhpcyxsPXQuJHNsaWRlLHU9ITE7cmV0dXJuIGU9dC5vcHRzW2MuZmlyc3RSdW4/XCJhbmltYXRpb25FZmZlY3RcIjpcInRyYW5zaXRpb25FZmZlY3RcIl0sYT10Lm9wdHNbYy5maXJzdFJ1bj9cImFuaW1hdGlvbkR1cmF0aW9uXCI6XCJ0cmFuc2l0aW9uRHVyYXRpb25cIl0sYT1wYXJzZUludCh0LmZvcmNlZER1cmF0aW9uPT09bz9hOnQuZm9yY2VkRHVyYXRpb24sMTApLCF0LmlzTW92ZWQmJnQucG9zPT09Yy5jdXJyUG9zJiZhfHwoZT0hMSksXCJ6b29tXCIhPT1lfHx0LnBvcz09PWMuY3VyclBvcyYmYSYmXCJpbWFnZVwiPT09dC50eXBlJiYhdC5oYXNFcnJvciYmKHU9Yy5nZXRUaHVtYlBvcyh0KSl8fChlPVwiZmFkZVwiKSxcInpvb21cIj09PWU/KHI9Yy5nZXRGaXRQb3ModCksci5zY2FsZVg9TWF0aC5yb3VuZChyLndpZHRoL3Uud2lkdGgqMTAwKS8xMDAsci5zY2FsZVk9TWF0aC5yb3VuZChyLmhlaWdodC91LmhlaWdodCoxMDApLzEwMCxkZWxldGUgci53aWR0aCxkZWxldGUgci5oZWlnaHQscz10Lm9wdHMuem9vbU9wYWNpdHksXCJhdXRvXCI9PXMmJihzPU1hdGguYWJzKHQud2lkdGgvdC5oZWlnaHQtdS53aWR0aC91LmhlaWdodCk+LjEpLHMmJih1Lm9wYWNpdHk9LjEsci5vcGFjaXR5PTEpLG4uZmFuY3lib3guc2V0VHJhbnNsYXRlKHQuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIiksdSksZih0LiRjb250ZW50KSx2b2lkIG4uZmFuY3lib3guYW5pbWF0ZSh0LiRjb250ZW50LHIsYSxmdW5jdGlvbigpe2MuY29tcGxldGUoKX0pKTooYy51cGRhdGVTbGlkZSh0KSxlPyhuLmZhbmN5Ym94LnN0b3AobCksaT1cImZhbmN5Ym94LWFuaW1hdGVkIGZhbmN5Ym94LXNsaWRlLS1cIisodC5wb3M+Yy5wcmV2UG9zP1wibmV4dFwiOlwicHJldmlvdXNcIikrXCIgZmFuY3lib3gtZngtXCIrZSxsLnJlbW92ZUF0dHIoXCJzdHlsZVwiKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50IGZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91c1wiKS5hZGRDbGFzcyhpKSx0LiRjb250ZW50LnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpLGYobCksdm9pZCBuLmZhbmN5Ym94LmFuaW1hdGUobCxcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIsYSxmdW5jdGlvbihlKXtsLnJlbW92ZUNsYXNzKGkpLnJlbW92ZUF0dHIoXCJzdHlsZVwiKSx0LnBvcz09PWMuY3VyclBvcyYmYy5jb21wbGV0ZSgpfSwhMCkpOihmKGwpLHQuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIiksdm9pZCh0LnBvcz09PWMuY3VyclBvcyYmYy5jb21wbGV0ZSgpKSkpfSxnZXRUaHVtYlBvczpmdW5jdGlvbihvKXt2YXIgaSxhPXRoaXMscz0hMSxyPWZ1bmN0aW9uKGUpe2Zvcih2YXIgbyxpPWVbMF0sYT1pLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHM9W107bnVsbCE9PWkucGFyZW50RWxlbWVudDspXCJoaWRkZW5cIiE9PW4oaS5wYXJlbnRFbGVtZW50KS5jc3MoXCJvdmVyZmxvd1wiKSYmXCJhdXRvXCIhPT1uKGkucGFyZW50RWxlbWVudCkuY3NzKFwib3ZlcmZsb3dcIil8fHMucHVzaChpLnBhcmVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLGk9aS5wYXJlbnRFbGVtZW50O3JldHVybiBvPXMuZXZlcnkoZnVuY3Rpb24odCl7dmFyIGU9TWF0aC5taW4oYS5yaWdodCx0LnJpZ2h0KS1NYXRoLm1heChhLmxlZnQsdC5sZWZ0KSxuPU1hdGgubWluKGEuYm90dG9tLHQuYm90dG9tKS1NYXRoLm1heChhLnRvcCx0LnRvcCk7cmV0dXJuIGU+MCYmbj4wfSksbyYmYS5ib3R0b20+MCYmYS5yaWdodD4wJiZhLmxlZnQ8bih0KS53aWR0aCgpJiZhLnRvcDxuKHQpLmhlaWdodCgpfSxjPW8ub3B0cy4kdGh1bWIsbD1jP2Mub2Zmc2V0KCk6MDtyZXR1cm4gbCYmY1swXS5vd25lckRvY3VtZW50PT09ZSYmcihjKSYmKGk9YS4kcmVmcy5zdGFnZS5vZmZzZXQoKSxzPXt0b3A6bC50b3AtaS50b3ArcGFyc2VGbG9hdChjLmNzcyhcImJvcmRlci10b3Atd2lkdGhcIil8fDApLGxlZnQ6bC5sZWZ0LWkubGVmdCtwYXJzZUZsb2F0KGMuY3NzKFwiYm9yZGVyLWxlZnQtd2lkdGhcIil8fDApLHdpZHRoOmMud2lkdGgoKSxoZWlnaHQ6Yy5oZWlnaHQoKSxzY2FsZVg6MSxzY2FsZVk6MX0pLHN9LGNvbXBsZXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxvPXQuY3VycmVudCxpPXt9O28uaXNNb3ZlZHx8IW8uaXNMb2FkZWR8fG8uaXNDb21wbGV0ZXx8KG8uaXNDb21wbGV0ZT0hMCxvLiRzbGlkZS5zaWJsaW5ncygpLnRyaWdnZXIoXCJvblJlc2V0XCIpLGYoby4kc2xpZGUpLG8uJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlXCIpLG4uZWFjaCh0LnNsaWRlcyxmdW5jdGlvbihlLG8pe28ucG9zPj10LmN1cnJQb3MtMSYmby5wb3M8PXQuY3VyclBvcysxP2lbby5wb3NdPW86byYmKG4uZmFuY3lib3guc3RvcChvLiRzbGlkZSksby4kc2xpZGUudW5iaW5kKCkucmVtb3ZlKCkpfSksdC5zbGlkZXM9aSx0LnVwZGF0ZUN1cnNvcigpLHQudHJpZ2dlcihcImFmdGVyU2hvd1wiKSwobihlLmFjdGl2ZUVsZW1lbnQpLmlzKFwiW2Rpc2FibGVkXVwiKXx8by5vcHRzLmF1dG9Gb2N1cyYmXCJpbWFnZVwiIT1vLnR5cGUmJlwiaWZyYW1lXCIhPT1vLnR5cGUpJiZ0LmZvY3VzKCkpfSxwcmVsb2FkOmZ1bmN0aW9uKCl7dmFyIHQsZSxuPXRoaXM7bi5ncm91cC5sZW5ndGg8Mnx8KHQ9bi5zbGlkZXNbbi5jdXJyUG9zKzFdLGU9bi5zbGlkZXNbbi5jdXJyUG9zLTFdLHQmJlwiaW1hZ2VcIj09PXQudHlwZSYmbi5sb2FkU2xpZGUodCksZSYmXCJpbWFnZVwiPT09ZS50eXBlJiZuLmxvYWRTbGlkZShlKSl9LGZvY3VzOmZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLmN1cnJlbnQ7dGhpcy5pc0Nsb3Npbmd8fCh0PWUmJmUuaXNDb21wbGV0ZT9lLiRzbGlkZS5maW5kKFwiYnV0dG9uLDppbnB1dCxbdGFiaW5kZXhdLGFcIikuZmlsdGVyKFwiOm5vdChbZGlzYWJsZWRdKTp2aXNpYmxlOmZpcnN0XCIpOm51bGwsdD10JiZ0Lmxlbmd0aD90OnRoaXMuJHJlZnMuY29udGFpbmVyLHQuZm9jdXMoKSl9LGFjdGl2YXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztuKFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9bih0aGlzKS5kYXRhKFwiRmFuY3lCb3hcIik7ZSYmZS51aWQhPT10LnVpZCYmIWUuaXNDbG9zaW5nJiZlLnRyaWdnZXIoXCJvbkRlYWN0aXZhdGVcIil9KSx0LmN1cnJlbnQmJih0LiRyZWZzLmNvbnRhaW5lci5pbmRleCgpPjAmJnQuJHJlZnMuY29udGFpbmVyLnByZXBlbmRUbyhlLmJvZHkpLHQudXBkYXRlQ29udHJvbHMoKSksdC50cmlnZ2VyKFwib25BY3RpdmF0ZVwiKSx0LmFkZEV2ZW50cygpfSxjbG9zZTpmdW5jdGlvbih0LGUpe3ZhciBvLGksYSxzLHIsYyxsPXRoaXMsZj1sLmN1cnJlbnQsaD1mdW5jdGlvbigpe2wuY2xlYW5VcCh0KX07cmV0dXJuIWwuaXNDbG9zaW5nJiYobC5pc0Nsb3Npbmc9ITAsbC50cmlnZ2VyKFwiYmVmb3JlQ2xvc2VcIix0KT09PSExPyhsLmlzQ2xvc2luZz0hMSx1KGZ1bmN0aW9uKCl7bC51cGRhdGUoKX0pLCExKToobC5yZW1vdmVFdmVudHMoKSxmLnRpbW91dHMmJmNsZWFyVGltZW91dChmLnRpbW91dHMpLGE9Zi4kY29udGVudCxvPWYub3B0cy5hbmltYXRpb25FZmZlY3QsaT1uLmlzTnVtZXJpYyhlKT9lOm8/Zi5vcHRzLmFuaW1hdGlvbkR1cmF0aW9uOjAsZi4kc2xpZGUub2ZmKGQpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlIGZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cyBmYW5jeWJveC1hbmltYXRlZFwiKSxmLiRzbGlkZS5zaWJsaW5ncygpLnRyaWdnZXIoXCJvblJlc2V0XCIpLnJlbW92ZSgpLGkmJmwuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtb3BlblwiKS5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLWNsb3NpbmdcIiksbC5oaWRlTG9hZGluZyhmKSxsLmhpZGVDb250cm9scygpLGwudXBkYXRlQ3Vyc29yKCksXCJ6b29tXCIhPT1vfHx0IT09ITAmJmEmJmkmJlwiaW1hZ2VcIj09PWYudHlwZSYmIWYuaGFzRXJyb3ImJihjPWwuZ2V0VGh1bWJQb3MoZikpfHwobz1cImZhZGVcIiksXCJ6b29tXCI9PT1vPyhuLmZhbmN5Ym94LnN0b3AoYSkscj1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShhKSxyLndpZHRoPXIud2lkdGgqci5zY2FsZVgsci5oZWlnaHQ9ci5oZWlnaHQqci5zY2FsZVkscz1mLm9wdHMuem9vbU9wYWNpdHksXCJhdXRvXCI9PXMmJihzPU1hdGguYWJzKGYud2lkdGgvZi5oZWlnaHQtYy53aWR0aC9jLmhlaWdodCk+LjEpLHMmJihjLm9wYWNpdHk9MCksci5zY2FsZVg9ci53aWR0aC9jLndpZHRoLHIuc2NhbGVZPXIuaGVpZ2h0L2MuaGVpZ2h0LHIud2lkdGg9Yy53aWR0aCxyLmhlaWdodD1jLmhlaWdodCxuLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShmLiRjb250ZW50LHIpLG4uZmFuY3lib3guYW5pbWF0ZShmLiRjb250ZW50LGMsaSxoKSwhMCk6KG8mJmk/dD09PSEwP3NldFRpbWVvdXQoaCxpKTpuLmZhbmN5Ym94LmFuaW1hdGUoZi4kc2xpZGUucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY3VycmVudFwiKSxcImZhbmN5Ym94LWFuaW1hdGVkIGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cyBmYW5jeWJveC1meC1cIitvLGksaCk6aCgpLCEwKSkpfSxjbGVhblVwOmZ1bmN0aW9uKHQpe3ZhciBlLG89dGhpcztvLmN1cnJlbnQuJHNsaWRlLnRyaWdnZXIoXCJvblJlc2V0XCIpLG8uJHJlZnMuY29udGFpbmVyLmVtcHR5KCkucmVtb3ZlKCksby50cmlnZ2VyKFwiYWZ0ZXJDbG9zZVwiLHQpLG8uJGxhc3RGb2N1cyYmIW8uY3VycmVudC5mb2N1c0JhY2smJm8uJGxhc3RGb2N1cy5mb2N1cygpLG8uY3VycmVudD1udWxsLGU9bi5mYW5jeWJveC5nZXRJbnN0YW5jZSgpLGU/ZS5hY3RpdmF0ZSgpOihzLnNjcm9sbFRvcChvLnNjcm9sbFRvcCkuc2Nyb2xsTGVmdChvLnNjcm9sbExlZnQpLG4oXCJodG1sXCIpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtZW5hYmxlZFwiKSxuKFwiI2ZhbmN5Ym94LXN0eWxlLW5vc2Nyb2xsXCIpLnJlbW92ZSgpKX0sdHJpZ2dlcjpmdW5jdGlvbih0LGUpe3ZhciBvLGk9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGE9dGhpcyxzPWUmJmUub3B0cz9lOmEuY3VycmVudDtyZXR1cm4gcz9pLnVuc2hpZnQocyk6cz1hLGkudW5zaGlmdChhKSxuLmlzRnVuY3Rpb24ocy5vcHRzW3RdKSYmKG89cy5vcHRzW3RdLmFwcGx5KHMsaSkpLG89PT0hMT9vOnZvaWQoXCJhZnRlckNsb3NlXCI9PT10P3IudHJpZ2dlcih0K1wiLmZiXCIsaSk6YS4kcmVmcy5jb250YWluZXIudHJpZ2dlcih0K1wiLmZiXCIsaSkpfSx1cGRhdGVDb250cm9sczpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG89ZS5jdXJyZW50LGk9by5pbmRleCxhPW8ub3B0cyxzPWEuY2FwdGlvbixyPWUuJHJlZnMuY2FwdGlvbjtvLiRzbGlkZS50cmlnZ2VyKFwicmVmcmVzaFwiKSxlLiRjYXB0aW9uPXMmJnMubGVuZ3RoP3IuaHRtbChzKTpudWxsLGUuaXNIaWRkZW5Db250cm9sc3x8ZS5zaG93Q29udHJvbHMoKSxuKFwiW2RhdGEtZmFuY3lib3gtY291bnRdXCIpLmh0bWwoZS5ncm91cC5sZW5ndGgpLG4oXCJbZGF0YS1mYW5jeWJveC1pbmRleF1cIikuaHRtbChpKzEpLG4oXCJbZGF0YS1mYW5jeWJveC1wcmV2XVwiKS5wcm9wKFwiZGlzYWJsZWRcIiwhYS5sb29wJiZpPD0wKSxuKFwiW2RhdGEtZmFuY3lib3gtbmV4dF1cIikucHJvcChcImRpc2FibGVkXCIsIWEubG9vcCYmaT49ZS5ncm91cC5sZW5ndGgtMSl9LGhpZGVDb250cm9sczpmdW5jdGlvbigpe3RoaXMuaXNIaWRkZW5Db250cm9scz0hMCx0aGlzLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNob3ctaW5mb2JhciBmYW5jeWJveC1zaG93LXRvb2xiYXIgZmFuY3lib3gtc2hvdy1jYXB0aW9uIGZhbmN5Ym94LXNob3ctbmF2XCIpfSxzaG93Q29udHJvbHM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC5jdXJyZW50P3QuY3VycmVudC5vcHRzOnQub3B0cyxuPXQuJHJlZnMuY29udGFpbmVyO3QuaXNIaWRkZW5Db250cm9scz0hMSx0LmlkbGVTZWNvbmRzQ291bnRlcj0wLG4udG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1zaG93LXRvb2xiYXJcIiwhKCFlLnRvb2xiYXJ8fCFlLmJ1dHRvbnMpKS50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctaW5mb2JhclwiLCEhKGUuaW5mb2JhciYmdC5ncm91cC5sZW5ndGg+MSkpLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtc2hvdy1uYXZcIiwhIShlLmFycm93cyYmdC5ncm91cC5sZW5ndGg+MSkpLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtaXMtbW9kYWxcIiwhIWUubW9kYWwpLHQuJGNhcHRpb24/bi5hZGRDbGFzcyhcImZhbmN5Ym94LXNob3ctY2FwdGlvbiBcIik6bi5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNob3ctY2FwdGlvblwiKX0sdG9nZ2xlQ29udHJvbHM6ZnVuY3Rpb24oKXt0aGlzLmlzSGlkZGVuQ29udHJvbHM/dGhpcy5zaG93Q29udHJvbHMoKTp0aGlzLmhpZGVDb250cm9scygpfX0pLG4uZmFuY3lib3g9e3ZlcnNpb246XCIzLjEuMjBcIixkZWZhdWx0czphLGdldEluc3RhbmNlOmZ1bmN0aW9uKHQpe3ZhciBlPW4oJy5mYW5jeWJveC1jb250YWluZXI6bm90KFwiLmZhbmN5Ym94LWlzLWNsb3NpbmdcIik6Zmlyc3QnKS5kYXRhKFwiRmFuY3lCb3hcIiksbz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIGUgaW5zdGFuY2VvZiBoJiYoXCJzdHJpbmdcIj09PW4udHlwZSh0KT9lW3RdLmFwcGx5KGUsbyk6XCJmdW5jdGlvblwiPT09bi50eXBlKHQpJiZ0LmFwcGx5KGUsbyksZSl9LG9wZW46ZnVuY3Rpb24odCxlLG4pe3JldHVybiBuZXcgaCh0LGUsbil9LGNsb3NlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SW5zdGFuY2UoKTtlJiYoZS5jbG9zZSgpLHQ9PT0hMCYmdGhpcy5jbG9zZSgpKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuY2xvc2UoITApLHIub2ZmKFwiY2xpY2suZmItc3RhcnRcIil9LGlzTW9iaWxlOmUuY3JlYXRlVG91Y2ghPT1vJiYvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLHVzZTNkOmZ1bmN0aW9uKCl7dmFyIG49ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiB0LmdldENvbXB1dGVkU3R5bGUmJnQuZ2V0Q29tcHV0ZWRTdHlsZShuKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpJiYhKGUuZG9jdW1lbnRNb2RlJiZlLmRvY3VtZW50TW9kZTwxMSl9KCksZ2V0VHJhbnNsYXRlOmZ1bmN0aW9uKHQpe3ZhciBlO2lmKCF0fHwhdC5sZW5ndGgpcmV0dXJuITE7aWYoZT10LmVxKDApLmNzcyhcInRyYW5zZm9ybVwiKSxlJiZlLmluZGV4T2YoXCJtYXRyaXhcIikhPT0tMT8oZT1lLnNwbGl0KFwiKFwiKVsxXSxlPWUuc3BsaXQoXCIpXCIpWzBdLGU9ZS5zcGxpdChcIixcIikpOmU9W10sZS5sZW5ndGgpZT1lLmxlbmd0aD4xMD9bZVsxM10sZVsxMl0sZVswXSxlWzVdXTpbZVs1XSxlWzRdLGVbMF0sZVszXV0sZT1lLm1hcChwYXJzZUZsb2F0KTtlbHNle2U9WzAsMCwxLDFdO3ZhciBuPS9cXC4qdHJhbnNsYXRlXFwoKC4qKXB4LCguKilweFxcKS9pLG89bi5leGVjKHQuZXEoMCkuYXR0cihcInN0eWxlXCIpKTtvJiYoZVswXT1wYXJzZUZsb2F0KG9bMl0pLGVbMV09cGFyc2VGbG9hdChvWzFdKSl9cmV0dXJue3RvcDplWzBdLGxlZnQ6ZVsxXSxzY2FsZVg6ZVsyXSxzY2FsZVk6ZVszXSxvcGFjaXR5OnBhcnNlRmxvYXQodC5jc3MoXCJvcGFjaXR5XCIpKSx3aWR0aDp0LndpZHRoKCksaGVpZ2h0OnQuaGVpZ2h0KCl9fSxzZXRUcmFuc2xhdGU6ZnVuY3Rpb24odCxlKXt2YXIgbj1cIlwiLGk9e307aWYodCYmZSlyZXR1cm4gZS5sZWZ0PT09byYmZS50b3A9PT1vfHwobj0oZS5sZWZ0PT09bz90LnBvc2l0aW9uKCkubGVmdDplLmxlZnQpK1wicHgsIFwiKyhlLnRvcD09PW8/dC5wb3NpdGlvbigpLnRvcDplLnRvcCkrXCJweFwiLG49dGhpcy51c2UzZD9cInRyYW5zbGF0ZTNkKFwiK24rXCIsIDBweClcIjpcInRyYW5zbGF0ZShcIituK1wiKVwiKSxlLnNjYWxlWCE9PW8mJmUuc2NhbGVZIT09byYmKG49KG4ubGVuZ3RoP24rXCIgXCI6XCJcIikrXCJzY2FsZShcIitlLnNjYWxlWCtcIiwgXCIrZS5zY2FsZVkrXCIpXCIpLG4ubGVuZ3RoJiYoaS50cmFuc2Zvcm09biksZS5vcGFjaXR5IT09byYmKGkub3BhY2l0eT1lLm9wYWNpdHkpLGUud2lkdGghPT1vJiYoaS53aWR0aD1lLndpZHRoKSxlLmhlaWdodCE9PW8mJihpLmhlaWdodD1lLmhlaWdodCksdC5jc3MoaSl9LGFuaW1hdGU6ZnVuY3Rpb24odCxlLGksYSxzKXt2YXIgcj1kfHxcInRyYW5zaXRpb25lbmRcIjtuLmlzRnVuY3Rpb24oaSkmJihhPWksaT1udWxsKSxuLmlzUGxhaW5PYmplY3QoZSl8fHQucmVtb3ZlQXR0cihcInN0eWxlXCIpLHQub24ocixmdW5jdGlvbihpKXsoIWl8fCFpLm9yaWdpbmFsRXZlbnR8fHQuaXMoaS5vcmlnaW5hbEV2ZW50LnRhcmdldCkmJlwiei1pbmRleFwiIT1pLm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lKSYmKHQub2ZmKHIpLG4uaXNQbGFpbk9iamVjdChlKT9lLnNjYWxlWCE9PW8mJmUuc2NhbGVZIT09byYmKHQuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLFwiMG1zXCIpLGUud2lkdGg9dC53aWR0aCgpKmUuc2NhbGVYLGUuaGVpZ2h0PXQuaGVpZ2h0KCkqZS5zY2FsZVksZS5zY2FsZVg9MSxlLnNjYWxlWT0xLG4uZmFuY3lib3guc2V0VHJhbnNsYXRlKHQsZSkpOnMhPT0hMCYmdC5yZW1vdmVDbGFzcyhlKSxuLmlzRnVuY3Rpb24oYSkmJmEoaSkpfSksbi5pc051bWVyaWMoaSkmJnQuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLGkrXCJtc1wiKSxuLmlzUGxhaW5PYmplY3QoZSk/bi5mYW5jeWJveC5zZXRUcmFuc2xhdGUodCxlKTp0LmFkZENsYXNzKGUpLHQuZGF0YShcInRpbWVyXCIsc2V0VGltZW91dChmdW5jdGlvbigpe3QudHJpZ2dlcihcInRyYW5zaXRpb25lbmRcIil9LGkrMTYpKX0sc3RvcDpmdW5jdGlvbih0KXtjbGVhclRpbWVvdXQodC5kYXRhKFwidGltZXJcIikpLHQub2ZmKGQpfX0sbi5mbi5mYW5jeWJveD1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gdD10fHx7fSxlPXQuc2VsZWN0b3J8fCExLGU/bihcImJvZHlcIikub2ZmKFwiY2xpY2suZmItc3RhcnRcIixlKS5vbihcImNsaWNrLmZiLXN0YXJ0XCIsZSx7aXRlbXM6bihlKSxvcHRpb25zOnR9LGkpOnRoaXMub2ZmKFwiY2xpY2suZmItc3RhcnRcIikub24oXCJjbGljay5mYi1zdGFydFwiLHtpdGVtczp0aGlzLG9wdGlvbnM6dH0saSksdGhpc30sci5vbihcImNsaWNrLmZiLXN0YXJ0XCIsXCJbZGF0YS1mYW5jeWJveF1cIixpKX19KHdpbmRvdyxkb2N1bWVudCx3aW5kb3cualF1ZXJ5KSxmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgZT1mdW5jdGlvbihlLG4sbyl7aWYoZSlyZXR1cm4gbz1vfHxcIlwiLFwib2JqZWN0XCI9PT10LnR5cGUobykmJihvPXQucGFyYW0obywhMCkpLHQuZWFjaChuLGZ1bmN0aW9uKHQsbil7ZT1lLnJlcGxhY2UoXCIkXCIrdCxufHxcIlwiKX0pLG8ubGVuZ3RoJiYoZSs9KGUuaW5kZXhPZihcIj9cIik+MD9cIiZcIjpcIj9cIikrbyksZX0sbj17eW91dHViZTp7bWF0Y2hlcjovKHlvdXR1YmVcXC5jb218eW91dHVcXC5iZXx5b3V0dWJlXFwtbm9jb29raWVcXC5jb20pXFwvKHdhdGNoXFw/KC4qJik/dj18dlxcL3x1XFwvfGVtYmVkXFwvPyk/KHZpZGVvc2VyaWVzXFw/bGlzdD0oLiopfFtcXHctXXsxMX18XFw/bGlzdFR5cGU9KC4qKSZsaXN0PSguKikpKC4qKS9pLHBhcmFtczp7YXV0b3BsYXk6MSxhdXRvaGlkZToxLGZzOjEscmVsOjAsaGQ6MSx3bW9kZTpcInRyYW5zcGFyZW50XCIsZW5hYmxlanNhcGk6MSxodG1sNToxfSxwYXJhbVBsYWNlOjgsdHlwZTpcImlmcmFtZVwiLHVybDpcIi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyQ0XCIsdGh1bWI6XCIvL2ltZy55b3V0dWJlLmNvbS92aS8kNC9ocWRlZmF1bHQuanBnXCJ9LHZpbWVvOnttYXRjaGVyOi9eLit2aW1lby5jb21cXC8oLipcXC8pPyhbXFxkXSspKC4qKT8vLHBhcmFtczp7YXV0b3BsYXk6MSxoZDoxLHNob3dfdGl0bGU6MSxzaG93X2J5bGluZToxLHNob3dfcG9ydHJhaXQ6MCxmdWxsc2NyZWVuOjEsYXBpOjF9LHBhcmFtUGxhY2U6Myx0eXBlOlwiaWZyYW1lXCIsdXJsOlwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyQyXCJ9LG1ldGFjYWZlOnttYXRjaGVyOi9tZXRhY2FmZS5jb21cXC93YXRjaFxcLyhcXGQrKVxcLyguKik/Lyx0eXBlOlwiaWZyYW1lXCIsdXJsOlwiLy93d3cubWV0YWNhZmUuY29tL2VtYmVkLyQxLz9hcD0xXCJ9LGRhaWx5bW90aW9uOnttYXRjaGVyOi9kYWlseW1vdGlvbi5jb21cXC92aWRlb1xcLyguKilcXC8/KC4qKS8scGFyYW1zOnthZGRpdGlvbmFsSW5mb3M6MCxhdXRvU3RhcnQ6MX0sdHlwZTpcImlmcmFtZVwiLHVybDpcIi8vd3d3LmRhaWx5bW90aW9uLmNvbS9lbWJlZC92aWRlby8kMVwifSx2aW5lOnttYXRjaGVyOi92aW5lLmNvXFwvdlxcLyhbYS16QS1aMC05XFw/XFw9XFwtXSspLyx0eXBlOlwiaWZyYW1lXCIsdXJsOlwiLy92aW5lLmNvL3YvJDEvZW1iZWQvc2ltcGxlXCJ9LGluc3RhZ3JhbTp7bWF0Y2hlcjovKGluc3RhZ3JcXC5hbXxpbnN0YWdyYW1cXC5jb20pXFwvcFxcLyhbYS16QS1aMC05X1xcLV0rKVxcLz8vaSx0eXBlOlwiaW1hZ2VcIix1cmw6XCIvLyQxL3AvJDIvbWVkaWEvP3NpemU9bFwifSxnb29nbGVfbWFwczp7bWF0Y2hlcjovKG1hcHNcXC4pP2dvb2dsZVxcLihbYS16XXsyLDN9KFxcLlthLXpdezJ9KT8pXFwvKCgobWFwc1xcLyhwbGFjZVxcLyguKilcXC8pP1xcQCguKiksKFxcZCsuP1xcZCs/KXopKXwoXFw/bGw9KSkoLiopPy9pLHR5cGU6XCJpZnJhbWVcIix1cmw6ZnVuY3Rpb24odCl7cmV0dXJuXCIvL21hcHMuZ29vZ2xlLlwiK3RbMl0rXCIvP2xsPVwiKyh0WzldP3RbOV0rXCImej1cIitNYXRoLmZsb29yKHRbMTBdKSsodFsxMl0/dFsxMl0ucmVwbGFjZSgvXlxcLy8sXCImXCIpOlwiXCIpOnRbMTJdKStcIiZvdXRwdXQ9XCIrKHRbMTJdJiZ0WzEyXS5pbmRleE9mKFwibGF5ZXI9Y1wiKT4wP1wic3ZlbWJlZFwiOlwiZW1iZWRcIil9fX07dChkb2N1bWVudCkub24oXCJvbkluaXQuZmJcIixmdW5jdGlvbihvLGkpe3QuZWFjaChpLmdyb3VwLGZ1bmN0aW9uKG8saSl7dmFyIGEscyxyLGMsbCx1LGQsZj1pLnNyY3x8XCJcIixoPSExO2kudHlwZXx8KGE9dC5leHRlbmQoITAse30sbixpLm9wdHMubWVkaWEpLHQuZWFjaChhLGZ1bmN0aW9uKG4sbyl7aWYocj1mLm1hdGNoKG8ubWF0Y2hlciksdT17fSxkPW4scil7aWYoaD1vLnR5cGUsby5wYXJhbVBsYWNlJiZyW28ucGFyYW1QbGFjZV0pe2w9cltvLnBhcmFtUGxhY2VdLFwiP1wiPT1sWzBdJiYobD1sLnN1YnN0cmluZygxKSksbD1sLnNwbGl0KFwiJlwiKTtmb3IodmFyIGE9MDthPGwubGVuZ3RoOysrYSl7dmFyIHA9bFthXS5zcGxpdChcIj1cIiwyKTsyPT1wLmxlbmd0aCYmKHVbcFswXV09ZGVjb2RlVVJJQ29tcG9uZW50KHBbMV0ucmVwbGFjZSgvXFwrL2csXCIgXCIpKSl9fXJldHVybiBjPXQuZXh0ZW5kKCEwLHt9LG8ucGFyYW1zLGkub3B0c1tuXSx1KSxmPVwiZnVuY3Rpb25cIj09PXQudHlwZShvLnVybCk/by51cmwuY2FsbCh0aGlzLHIsYyxpKTplKG8udXJsLHIsYykscz1cImZ1bmN0aW9uXCI9PT10LnR5cGUoby50aHVtYik/by50aHVtYi5jYWxsKHRoaXMscixjLGkpOmUoby50aHVtYixyKSxcInZpbWVvXCI9PT1kJiYoZj1mLnJlcGxhY2UoXCImJTIzXCIsXCIjXCIpKSwhMX19KSxoPyhpLnNyYz1mLGkudHlwZT1oLGkub3B0cy50aHVtYnx8aS5vcHRzLiR0aHVtYiYmaS5vcHRzLiR0aHVtYi5sZW5ndGh8fChpLm9wdHMudGh1bWI9cyksXCJpZnJhbWVcIj09PWgmJih0LmV4dGVuZCghMCxpLm9wdHMse2lmcmFtZTp7cHJlbG9hZDohMSxhdHRyOntzY3JvbGxpbmc6XCJub1wifX19KSxpLmNvbnRlbnRQcm92aWRlcj1kLGkub3B0cy5zbGlkZUNsYXNzKz1cIiBmYW5jeWJveC1zbGlkZS0tXCIrKFwiZ29vZ2xlX21hcHNcIj09ZD9cIm1hcFwiOlwidmlkZW9cIikpKTppLnR5cGU9XCJpbWFnZVwiKX0pfSl9KHdpbmRvdy5qUXVlcnkpLGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1mdW5jdGlvbigpe3JldHVybiB0LnJlcXVlc3RBbmltYXRpb25GcmFtZXx8dC53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx0Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKGUpe1xucmV0dXJuIHQuc2V0VGltZW91dChlLDFlMy82MCl9fSgpLGk9ZnVuY3Rpb24oKXtyZXR1cm4gdC5jYW5jZWxBbmltYXRpb25GcmFtZXx8dC53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZXx8dC5tb3pDYW5jZWxBbmltYXRpb25GcmFtZXx8dC5vQ2FuY2VsQW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKGUpe3QuY2xlYXJUaW1lb3V0KGUpfX0oKSxhPWZ1bmN0aW9uKGUpe3ZhciBuPVtdO2U9ZS5vcmlnaW5hbEV2ZW50fHxlfHx0LmUsZT1lLnRvdWNoZXMmJmUudG91Y2hlcy5sZW5ndGg/ZS50b3VjaGVzOmUuY2hhbmdlZFRvdWNoZXMmJmUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoP2UuY2hhbmdlZFRvdWNoZXM6W2VdO2Zvcih2YXIgbyBpbiBlKWVbb10ucGFnZVg/bi5wdXNoKHt4OmVbb10ucGFnZVgseTplW29dLnBhZ2VZfSk6ZVtvXS5jbGllbnRYJiZuLnB1c2goe3g6ZVtvXS5jbGllbnRYLHk6ZVtvXS5jbGllbnRZfSk7cmV0dXJuIG59LHM9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBlJiZ0P1wieFwiPT09bj90LngtZS54OlwieVwiPT09bj90LnktZS55Ok1hdGguc3FydChNYXRoLnBvdyh0LngtZS54LDIpK01hdGgucG93KHQueS1lLnksMikpOjB9LHI9ZnVuY3Rpb24odCl7aWYodC5pcyhcImEsYnV0dG9uLGlucHV0LHNlbGVjdCx0ZXh0YXJlYVwiKXx8bi5pc0Z1bmN0aW9uKHQuZ2V0KDApLm9uY2xpY2spKXJldHVybiEwO2Zvcih2YXIgZT0wLG89dFswXS5hdHRyaWJ1dGVzLGk9by5sZW5ndGg7ZTxpO2UrKylpZihcImRhdGEtZmFuY3lib3gtXCI9PT1vW2VdLm5vZGVOYW1lLnN1YnN0cigwLDE0KSlyZXR1cm4hMDtyZXR1cm4hMX0sYz1mdW5jdGlvbihlKXt2YXIgbj10LmdldENvbXB1dGVkU3R5bGUoZSlbXCJvdmVyZmxvdy15XCJdLG89dC5nZXRDb21wdXRlZFN0eWxlKGUpW1wib3ZlcmZsb3cteFwiXSxpPShcInNjcm9sbFwiPT09bnx8XCJhdXRvXCI9PT1uKSYmZS5zY3JvbGxIZWlnaHQ+ZS5jbGllbnRIZWlnaHQsYT0oXCJzY3JvbGxcIj09PW98fFwiYXV0b1wiPT09bykmJmUuc2Nyb2xsV2lkdGg+ZS5jbGllbnRXaWR0aDtyZXR1cm4gaXx8YX0sbD1mdW5jdGlvbih0KXtmb3IodmFyIGU9ITE7Oyl7aWYoZT1jKHQuZ2V0KDApKSlicmVhaztpZih0PXQucGFyZW50KCksIXQubGVuZ3RofHx0Lmhhc0NsYXNzKFwiZmFuY3lib3gtc3RhZ2VcIil8fHQuaXMoXCJib2R5XCIpKWJyZWFrfXJldHVybiBlfSx1PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7ZS5pbnN0YW5jZT10LGUuJGJnPXQuJHJlZnMuYmcsZS4kc3RhZ2U9dC4kcmVmcy5zdGFnZSxlLiRjb250YWluZXI9dC4kcmVmcy5jb250YWluZXIsZS5kZXN0cm95KCksZS4kY29udGFpbmVyLm9uKFwidG91Y2hzdGFydC5mYi50b3VjaCBtb3VzZWRvd24uZmIudG91Y2hcIixuLnByb3h5KGUsXCJvbnRvdWNoc3RhcnRcIikpfTt1LnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy4kY29udGFpbmVyLm9mZihcIi5mYi50b3VjaFwiKX0sdS5wcm90b3R5cGUub250b3VjaHN0YXJ0PWZ1bmN0aW9uKG8pe3ZhciBpPXRoaXMsYz1uKG8udGFyZ2V0KSx1PWkuaW5zdGFuY2UsZD11LmN1cnJlbnQsZj1kLiRjb250ZW50LGg9XCJ0b3VjaHN0YXJ0XCI9PW8udHlwZTtpZihoJiZpLiRjb250YWluZXIub2ZmKFwibW91c2Vkb3duLmZiLnRvdWNoXCIpLCFkfHxpLmluc3RhbmNlLmlzQW5pbWF0aW5nfHxpLmluc3RhbmNlLmlzQ2xvc2luZylyZXR1cm4gby5zdG9wUHJvcGFnYXRpb24oKSx2b2lkIG8ucHJldmVudERlZmF1bHQoKTtpZigoIW8ub3JpZ2luYWxFdmVudHx8MiE9by5vcmlnaW5hbEV2ZW50LmJ1dHRvbikmJmMubGVuZ3RoJiYhcihjKSYmIXIoYy5wYXJlbnQoKSkmJiEoby5vcmlnaW5hbEV2ZW50LmNsaWVudFg+Y1swXS5jbGllbnRXaWR0aCtjLm9mZnNldCgpLmxlZnQpJiYoaS5zdGFydFBvaW50cz1hKG8pLGkuc3RhcnRQb2ludHMmJiEoaS5zdGFydFBvaW50cy5sZW5ndGg+MSYmdS5pc1NsaWRpbmcpKSl7aWYoaS4kdGFyZ2V0PWMsaS4kY29udGVudD1mLGkuY2FuVGFwPSEwLG4oZSkub2ZmKFwiLmZiLnRvdWNoXCIpLG4oZSkub24oaD9cInRvdWNoZW5kLmZiLnRvdWNoIHRvdWNoY2FuY2VsLmZiLnRvdWNoXCI6XCJtb3VzZXVwLmZiLnRvdWNoIG1vdXNlbGVhdmUuZmIudG91Y2hcIixuLnByb3h5KGksXCJvbnRvdWNoZW5kXCIpKSxuKGUpLm9uKGg/XCJ0b3VjaG1vdmUuZmIudG91Y2hcIjpcIm1vdXNlbW92ZS5mYi50b3VjaFwiLG4ucHJveHkoaSxcIm9udG91Y2htb3ZlXCIpKSxvLnN0b3BQcm9wYWdhdGlvbigpLCF1LmN1cnJlbnQub3B0cy50b3VjaCYmIXUuY2FuUGFuKCl8fCFjLmlzKGkuJHN0YWdlKSYmIWkuJHN0YWdlLmZpbmQoYykubGVuZ3RoKXJldHVybiB2b2lkKGMuaXMoXCJpbWdcIikmJm8ucHJldmVudERlZmF1bHQoKSk7bi5mYW5jeWJveC5pc01vYmlsZSYmKGwoaS4kdGFyZ2V0KXx8bChpLiR0YXJnZXQucGFyZW50KCkpKXx8by5wcmV2ZW50RGVmYXVsdCgpLGkuY2FudmFzV2lkdGg9TWF0aC5yb3VuZChkLiRzbGlkZVswXS5jbGllbnRXaWR0aCksaS5jYW52YXNIZWlnaHQ9TWF0aC5yb3VuZChkLiRzbGlkZVswXS5jbGllbnRIZWlnaHQpLGkuc3RhcnRUaW1lPShuZXcgRGF0ZSkuZ2V0VGltZSgpLGkuZGlzdGFuY2VYPWkuZGlzdGFuY2VZPWkuZGlzdGFuY2U9MCxpLmlzUGFubmluZz0hMSxpLmlzU3dpcGluZz0hMSxpLmlzWm9vbWluZz0hMSxpLnNsaWRlclN0YXJ0UG9zPWkuc2xpZGVyTGFzdFBvc3x8e3RvcDowLGxlZnQ6MH0saS5jb250ZW50U3RhcnRQb3M9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoaS4kY29udGVudCksaS5jb250ZW50TGFzdFBvcz1udWxsLDEhPT1pLnN0YXJ0UG9pbnRzLmxlbmd0aHx8aS5pc1pvb21pbmd8fChpLmNhblRhcD0hdS5pc1NsaWRpbmcsXCJpbWFnZVwiPT09ZC50eXBlJiYoaS5jb250ZW50U3RhcnRQb3Mud2lkdGg+aS5jYW52YXNXaWR0aCsxfHxpLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQ+aS5jYW52YXNIZWlnaHQrMSk/KG4uZmFuY3lib3guc3RvcChpLiRjb250ZW50KSxpLiRjb250ZW50LmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIixcIjBtc1wiKSxpLmlzUGFubmluZz0hMCk6aS5pc1N3aXBpbmc9ITAsaS4kY29udGFpbmVyLmFkZENsYXNzKFwiZmFuY3lib3gtY29udHJvbHMtLWlzR3JhYmJpbmdcIikpLDIhPT1pLnN0YXJ0UG9pbnRzLmxlbmd0aHx8dS5pc0FuaW1hdGluZ3x8ZC5oYXNFcnJvcnx8XCJpbWFnZVwiIT09ZC50eXBlfHwhZC5pc0xvYWRlZCYmIWQuJGdob3N0fHwoaS5pc1pvb21pbmc9ITAsaS5pc1N3aXBpbmc9ITEsaS5pc1Bhbm5pbmc9ITEsbi5mYW5jeWJveC5zdG9wKGkuJGNvbnRlbnQpLGkuJGNvbnRlbnQuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLFwiMG1zXCIpLGkuY2VudGVyUG9pbnRTdGFydFg9LjUqKGkuc3RhcnRQb2ludHNbMF0ueCtpLnN0YXJ0UG9pbnRzWzFdLngpLW4odCkuc2Nyb2xsTGVmdCgpLGkuY2VudGVyUG9pbnRTdGFydFk9LjUqKGkuc3RhcnRQb2ludHNbMF0ueStpLnN0YXJ0UG9pbnRzWzFdLnkpLW4odCkuc2Nyb2xsVG9wKCksaS5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFg9KGkuY2VudGVyUG9pbnRTdGFydFgtaS5jb250ZW50U3RhcnRQb3MubGVmdCkvaS5jb250ZW50U3RhcnRQb3Mud2lkdGgsaS5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFk9KGkuY2VudGVyUG9pbnRTdGFydFktaS5jb250ZW50U3RhcnRQb3MudG9wKS9pLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQsaS5zdGFydERpc3RhbmNlQmV0d2VlbkZpbmdlcnM9cyhpLnN0YXJ0UG9pbnRzWzBdLGkuc3RhcnRQb2ludHNbMV0pKX19LHUucHJvdG90eXBlLm9udG91Y2htb3ZlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYoZS5uZXdQb2ludHM9YSh0KSxuLmZhbmN5Ym94LmlzTW9iaWxlJiYobChlLiR0YXJnZXQpfHxsKGUuJHRhcmdldC5wYXJlbnQoKSkpKXJldHVybiB0LnN0b3BQcm9wYWdhdGlvbigpLHZvaWQoZS5jYW5UYXA9ITEpO2lmKChlLmluc3RhbmNlLmN1cnJlbnQub3B0cy50b3VjaHx8ZS5pbnN0YW5jZS5jYW5QYW4oKSkmJmUubmV3UG9pbnRzJiZlLm5ld1BvaW50cy5sZW5ndGgmJihlLmRpc3RhbmNlWD1zKGUubmV3UG9pbnRzWzBdLGUuc3RhcnRQb2ludHNbMF0sXCJ4XCIpLGUuZGlzdGFuY2VZPXMoZS5uZXdQb2ludHNbMF0sZS5zdGFydFBvaW50c1swXSxcInlcIiksZS5kaXN0YW5jZT1zKGUubmV3UG9pbnRzWzBdLGUuc3RhcnRQb2ludHNbMF0pLGUuZGlzdGFuY2U+MCkpe2lmKCFlLiR0YXJnZXQuaXMoZS4kc3RhZ2UpJiYhZS4kc3RhZ2UuZmluZChlLiR0YXJnZXQpLmxlbmd0aClyZXR1cm47dC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCksZS5pc1N3aXBpbmc/ZS5vblN3aXBlKCk6ZS5pc1Bhbm5pbmc/ZS5vblBhbigpOmUuaXNab29taW5nJiZlLm9uWm9vbSgpfX0sdS5wcm90b3R5cGUub25Td2lwZT1mdW5jdGlvbigpe3ZhciBlLGE9dGhpcyxzPWEuaXNTd2lwaW5nLHI9YS5zbGlkZXJTdGFydFBvcy5sZWZ0fHwwO3M9PT0hMD9NYXRoLmFicyhhLmRpc3RhbmNlKT4xMCYmKGEuY2FuVGFwPSExLGEuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoPDImJmEuaW5zdGFuY2Uub3B0cy50b3VjaC52ZXJ0aWNhbD9hLmlzU3dpcGluZz1cInlcIjphLmluc3RhbmNlLmlzU2xpZGluZ3x8YS5pbnN0YW5jZS5vcHRzLnRvdWNoLnZlcnRpY2FsPT09ITF8fFwiYXV0b1wiPT09YS5pbnN0YW5jZS5vcHRzLnRvdWNoLnZlcnRpY2FsJiZuKHQpLndpZHRoKCk+ODAwP2EuaXNTd2lwaW5nPVwieFwiOihlPU1hdGguYWJzKDE4MCpNYXRoLmF0YW4yKGEuZGlzdGFuY2VZLGEuZGlzdGFuY2VYKS9NYXRoLlBJKSxhLmlzU3dpcGluZz1lPjQ1JiZlPDEzNT9cInlcIjpcInhcIiksYS5pbnN0YW5jZS5pc1NsaWRpbmc9YS5pc1N3aXBpbmcsYS5zdGFydFBvaW50cz1hLm5ld1BvaW50cyxuLmVhY2goYS5pbnN0YW5jZS5zbGlkZXMsZnVuY3Rpb24odCxlKXtuLmZhbmN5Ym94LnN0b3AoZS4kc2xpZGUpLGUuJHNsaWRlLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIixcIjBtc1wiKSxlLmluVHJhbnNpdGlvbj0hMSxlLnBvcz09PWEuaW5zdGFuY2UuY3VycmVudC5wb3MmJihhLnNsaWRlclN0YXJ0UG9zLmxlZnQ9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoZS4kc2xpZGUpLmxlZnQpfSksYS5pbnN0YW5jZS5TbGlkZVNob3cmJmEuaW5zdGFuY2UuU2xpZGVTaG93LmlzQWN0aXZlJiZhLmluc3RhbmNlLlNsaWRlU2hvdy5zdG9wKCkpOihcInhcIj09cyYmKGEuZGlzdGFuY2VYPjAmJihhLmluc3RhbmNlLmdyb3VwLmxlbmd0aDwyfHwwPT09YS5pbnN0YW5jZS5jdXJyZW50LmluZGV4JiYhYS5pbnN0YW5jZS5jdXJyZW50Lm9wdHMubG9vcCk/cis9TWF0aC5wb3coYS5kaXN0YW5jZVgsLjgpOmEuZGlzdGFuY2VYPDAmJihhLmluc3RhbmNlLmdyb3VwLmxlbmd0aDwyfHxhLmluc3RhbmNlLmN1cnJlbnQuaW5kZXg9PT1hLmluc3RhbmNlLmdyb3VwLmxlbmd0aC0xJiYhYS5pbnN0YW5jZS5jdXJyZW50Lm9wdHMubG9vcCk/ci09TWF0aC5wb3coLWEuZGlzdGFuY2VYLC44KTpyKz1hLmRpc3RhbmNlWCksYS5zbGlkZXJMYXN0UG9zPXt0b3A6XCJ4XCI9PXM/MDphLnNsaWRlclN0YXJ0UG9zLnRvcCthLmRpc3RhbmNlWSxsZWZ0OnJ9LGEucmVxdWVzdElkJiYoaShhLnJlcXVlc3RJZCksYS5yZXF1ZXN0SWQ9bnVsbCksYS5yZXF1ZXN0SWQ9byhmdW5jdGlvbigpe2Euc2xpZGVyTGFzdFBvcyYmKG4uZWFjaChhLmluc3RhbmNlLnNsaWRlcyxmdW5jdGlvbih0LGUpe3ZhciBvPWUucG9zLWEuaW5zdGFuY2UuY3VyclBvcztuLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShlLiRzbGlkZSx7dG9wOmEuc2xpZGVyTGFzdFBvcy50b3AsbGVmdDphLnNsaWRlckxhc3RQb3MubGVmdCtvKmEuY2FudmFzV2lkdGgrbyplLm9wdHMuZ3V0dGVyfSl9KSxhLiRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1zbGlkaW5nXCIpKX0pKX0sdS5wcm90b3R5cGUub25QYW49ZnVuY3Rpb24oKXt2YXIgdCxlLGEscz10aGlzO3MuY2FuVGFwPSExLHQ9cy5jb250ZW50U3RhcnRQb3Mud2lkdGg+cy5jYW52YXNXaWR0aD9zLmNvbnRlbnRTdGFydFBvcy5sZWZ0K3MuZGlzdGFuY2VYOnMuY29udGVudFN0YXJ0UG9zLmxlZnQsZT1zLmNvbnRlbnRTdGFydFBvcy50b3Arcy5kaXN0YW5jZVksYT1zLmxpbWl0TW92ZW1lbnQodCxlLHMuY29udGVudFN0YXJ0UG9zLndpZHRoLHMuY29udGVudFN0YXJ0UG9zLmhlaWdodCksYS5zY2FsZVg9cy5jb250ZW50U3RhcnRQb3Muc2NhbGVYLGEuc2NhbGVZPXMuY29udGVudFN0YXJ0UG9zLnNjYWxlWSxzLmNvbnRlbnRMYXN0UG9zPWEscy5yZXF1ZXN0SWQmJihpKHMucmVxdWVzdElkKSxzLnJlcXVlc3RJZD1udWxsKSxzLnJlcXVlc3RJZD1vKGZ1bmN0aW9uKCl7bi5mYW5jeWJveC5zZXRUcmFuc2xhdGUocy4kY29udGVudCxzLmNvbnRlbnRMYXN0UG9zKX0pfSx1LnByb3RvdHlwZS5saW1pdE1vdmVtZW50PWZ1bmN0aW9uKHQsZSxuLG8pe3ZhciBpLGEscyxyLGM9dGhpcyxsPWMuY2FudmFzV2lkdGgsdT1jLmNhbnZhc0hlaWdodCxkPWMuY29udGVudFN0YXJ0UG9zLmxlZnQsZj1jLmNvbnRlbnRTdGFydFBvcy50b3AsaD1jLmRpc3RhbmNlWCxwPWMuZGlzdGFuY2VZO3JldHVybiBpPU1hdGgubWF4KDAsLjUqbC0uNSpuKSxhPU1hdGgubWF4KDAsLjUqdS0uNSpvKSxzPU1hdGgubWluKGwtbiwuNSpsLS41Km4pLHI9TWF0aC5taW4odS1vLC41KnUtLjUqbyksbj5sJiYoaD4wJiZ0PmkmJih0PWktMStNYXRoLnBvdygtaStkK2gsLjgpfHwwKSxoPDAmJnQ8cyYmKHQ9cysxLU1hdGgucG93KHMtZC1oLC44KXx8MCkpLG8+dSYmKHA+MCYmZT5hJiYoZT1hLTErTWF0aC5wb3coLWErZitwLC44KXx8MCkscDwwJiZlPHImJihlPXIrMS1NYXRoLnBvdyhyLWYtcCwuOCl8fDApKSx7dG9wOmUsbGVmdDp0fX0sdS5wcm90b3R5cGUubGltaXRQb3NpdGlvbj1mdW5jdGlvbih0LGUsbixvKXt2YXIgaT10aGlzLGE9aS5jYW52YXNXaWR0aCxzPWkuY2FudmFzSGVpZ2h0O3JldHVybiBuPmE/KHQ9dD4wPzA6dCx0PXQ8YS1uP2Etbjp0KTp0PU1hdGgubWF4KDAsYS8yLW4vMiksbz5zPyhlPWU+MD8wOmUsZT1lPHMtbz9zLW86ZSk6ZT1NYXRoLm1heCgwLHMvMi1vLzIpLHt0b3A6ZSxsZWZ0OnR9fSx1LnByb3RvdHlwZS5vblpvb209ZnVuY3Rpb24oKXt2YXIgZT10aGlzLGE9ZS5jb250ZW50U3RhcnRQb3Mud2lkdGgscj1lLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQsYz1lLmNvbnRlbnRTdGFydFBvcy5sZWZ0LGw9ZS5jb250ZW50U3RhcnRQb3MudG9wLHU9cyhlLm5ld1BvaW50c1swXSxlLm5ld1BvaW50c1sxXSksZD11L2Uuc3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzLGY9TWF0aC5mbG9vcihhKmQpLGg9TWF0aC5mbG9vcihyKmQpLHA9KGEtZikqZS5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFgsZz0oci1oKSplLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WSxiPShlLm5ld1BvaW50c1swXS54K2UubmV3UG9pbnRzWzFdLngpLzItbih0KS5zY3JvbGxMZWZ0KCksbT0oZS5uZXdQb2ludHNbMF0ueStlLm5ld1BvaW50c1sxXS55KS8yLW4odCkuc2Nyb2xsVG9wKCkseT1iLWUuY2VudGVyUG9pbnRTdGFydFgsdj1tLWUuY2VudGVyUG9pbnRTdGFydFkseD1jKyhwK3kpLHc9bCsoZyt2KSwkPXt0b3A6dyxsZWZ0Ongsc2NhbGVYOmUuY29udGVudFN0YXJ0UG9zLnNjYWxlWCpkLHNjYWxlWTplLmNvbnRlbnRTdGFydFBvcy5zY2FsZVkqZH07ZS5jYW5UYXA9ITEsZS5uZXdXaWR0aD1mLGUubmV3SGVpZ2h0PWgsZS5jb250ZW50TGFzdFBvcz0kLGUucmVxdWVzdElkJiYoaShlLnJlcXVlc3RJZCksZS5yZXF1ZXN0SWQ9bnVsbCksZS5yZXF1ZXN0SWQ9byhmdW5jdGlvbigpe24uZmFuY3lib3guc2V0VHJhbnNsYXRlKGUuJGNvbnRlbnQsZS5jb250ZW50TGFzdFBvcyl9KX0sdS5wcm90b3R5cGUub250b3VjaGVuZD1mdW5jdGlvbih0KXt2YXIgbz10aGlzLHM9TWF0aC5tYXgoKG5ldyBEYXRlKS5nZXRUaW1lKCktby5zdGFydFRpbWUsMSkscj1vLmlzU3dpcGluZyxjPW8uaXNQYW5uaW5nLGw9by5pc1pvb21pbmc7cmV0dXJuIG8uZW5kUG9pbnRzPWEodCksby4kY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtY29udHJvbHMtLWlzR3JhYmJpbmdcIiksbihlKS5vZmYoXCIuZmIudG91Y2hcIiksby5yZXF1ZXN0SWQmJihpKG8ucmVxdWVzdElkKSxvLnJlcXVlc3RJZD1udWxsKSxvLmlzU3dpcGluZz0hMSxvLmlzUGFubmluZz0hMSxvLmlzWm9vbWluZz0hMSxvLmNhblRhcD9vLm9uVGFwKHQpOihvLnNwZWVkPTM2NixvLnZlbG9jaXR5WD1vLmRpc3RhbmNlWC9zKi41LG8udmVsb2NpdHlZPW8uZGlzdGFuY2VZL3MqLjUsby5zcGVlZFg9TWF0aC5tYXgoLjUqby5zcGVlZCxNYXRoLm1pbigxLjUqby5zcGVlZCwxL01hdGguYWJzKG8udmVsb2NpdHlYKSpvLnNwZWVkKSksdm9pZChjP28uZW5kUGFubmluZygpOmw/by5lbmRab29taW5nKCk6by5lbmRTd2lwaW5nKHIpKSl9LHUucHJvdG90eXBlLmVuZFN3aXBpbmc9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxvPSExO2UuaW5zdGFuY2UuaXNTbGlkaW5nPSExLGUuc2xpZGVyTGFzdFBvcz1udWxsLFwieVwiPT10JiZNYXRoLmFicyhlLmRpc3RhbmNlWSk+NTA/KG4uZmFuY3lib3guYW5pbWF0ZShlLmluc3RhbmNlLmN1cnJlbnQuJHNsaWRlLHt0b3A6ZS5zbGlkZXJTdGFydFBvcy50b3ArZS5kaXN0YW5jZVkrMTUwKmUudmVsb2NpdHlZLG9wYWNpdHk6MH0sMTUwKSxvPWUuaW5zdGFuY2UuY2xvc2UoITAsMzAwKSk6XCJ4XCI9PXQmJmUuZGlzdGFuY2VYPjUwJiZlLmluc3RhbmNlLmdyb3VwLmxlbmd0aD4xP289ZS5pbnN0YW5jZS5wcmV2aW91cyhlLnNwZWVkWCk6XCJ4XCI9PXQmJmUuZGlzdGFuY2VYPC01MCYmZS5pbnN0YW5jZS5ncm91cC5sZW5ndGg+MSYmKG89ZS5pbnN0YW5jZS5uZXh0KGUuc3BlZWRYKSksbyE9PSExfHxcInhcIiE9dCYmXCJ5XCIhPXR8fGUuaW5zdGFuY2UuanVtcFRvKGUuaW5zdGFuY2UuY3VycmVudC5pbmRleCwxNTApLGUuJGNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLXNsaWRpbmdcIil9LHUucHJvdG90eXBlLmVuZFBhbm5pbmc9ZnVuY3Rpb24oKXt2YXIgdCxlLG8saT10aGlzO2kuY29udGVudExhc3RQb3MmJihpLmluc3RhbmNlLmN1cnJlbnQub3B0cy50b3VjaC5tb21lbnR1bT09PSExPyh0PWkuY29udGVudExhc3RQb3MubGVmdCxlPWkuY29udGVudExhc3RQb3MudG9wKToodD1pLmNvbnRlbnRMYXN0UG9zLmxlZnQraS52ZWxvY2l0eVgqaS5zcGVlZCxlPWkuY29udGVudExhc3RQb3MudG9wK2kudmVsb2NpdHlZKmkuc3BlZWQpLG89aS5saW1pdFBvc2l0aW9uKHQsZSxpLmNvbnRlbnRTdGFydFBvcy53aWR0aCxpLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQpLG8ud2lkdGg9aS5jb250ZW50U3RhcnRQb3Mud2lkdGgsby5oZWlnaHQ9aS5jb250ZW50U3RhcnRQb3MuaGVpZ2h0LG4uZmFuY3lib3guYW5pbWF0ZShpLiRjb250ZW50LG8sMzMwKSl9LHUucHJvdG90eXBlLmVuZFpvb21pbmc9ZnVuY3Rpb24oKXt2YXIgdCxlLG8saSxhPXRoaXMscz1hLmluc3RhbmNlLmN1cnJlbnQscj1hLm5ld1dpZHRoLGM9YS5uZXdIZWlnaHQ7YS5jb250ZW50TGFzdFBvcyYmKHQ9YS5jb250ZW50TGFzdFBvcy5sZWZ0LGU9YS5jb250ZW50TGFzdFBvcy50b3AsaT17dG9wOmUsbGVmdDp0LHdpZHRoOnIsaGVpZ2h0OmMsc2NhbGVYOjEsc2NhbGVZOjF9LG4uZmFuY3lib3guc2V0VHJhbnNsYXRlKGEuJGNvbnRlbnQsaSkscjxhLmNhbnZhc1dpZHRoJiZjPGEuY2FudmFzSGVpZ2h0P2EuaW5zdGFuY2Uuc2NhbGVUb0ZpdCgxNTApOnI+cy53aWR0aHx8Yz5zLmhlaWdodD9hLmluc3RhbmNlLnNjYWxlVG9BY3R1YWwoYS5jZW50ZXJQb2ludFN0YXJ0WCxhLmNlbnRlclBvaW50U3RhcnRZLDE1MCk6KG89YS5saW1pdFBvc2l0aW9uKHQsZSxyLGMpLG4uZmFuY3lib3guc2V0VHJhbnNsYXRlKGEuY29udGVudCxuLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShhLiRjb250ZW50KSksbi5mYW5jeWJveC5hbmltYXRlKGEuJGNvbnRlbnQsbywxNTApKSl9LHUucHJvdG90eXBlLm9uVGFwPWZ1bmN0aW9uKHQpe3ZhciBlLG89dGhpcyxpPW4odC50YXJnZXQpLHM9by5pbnN0YW5jZSxyPXMuY3VycmVudCxjPXQmJmEodCl8fG8uc3RhcnRQb2ludHMsbD1jWzBdP2NbMF0ueC1vLiRzdGFnZS5vZmZzZXQoKS5sZWZ0OjAsdT1jWzBdP2NbMF0ueS1vLiRzdGFnZS5vZmZzZXQoKS50b3A6MCxkPWZ1bmN0aW9uKGUpe3ZhciBpPXIub3B0c1tlXTtpZihuLmlzRnVuY3Rpb24oaSkmJihpPWkuYXBwbHkocyxbcix0XSkpLGkpc3dpdGNoKGkpe2Nhc2VcImNsb3NlXCI6cy5jbG9zZShvLnN0YXJ0RXZlbnQpO2JyZWFrO2Nhc2VcInRvZ2dsZUNvbnRyb2xzXCI6cy50b2dnbGVDb250cm9scyghMCk7YnJlYWs7Y2FzZVwibmV4dFwiOnMubmV4dCgpO2JyZWFrO2Nhc2VcIm5leHRPckNsb3NlXCI6cy5ncm91cC5sZW5ndGg+MT9zLm5leHQoKTpzLmNsb3NlKG8uc3RhcnRFdmVudCk7YnJlYWs7Y2FzZVwiem9vbVwiOlwiaW1hZ2VcIj09ci50eXBlJiYoci5pc0xvYWRlZHx8ci4kZ2hvc3QpJiYocy5jYW5QYW4oKT9zLnNjYWxlVG9GaXQoKTpzLmlzU2NhbGVkRG93bigpP3Muc2NhbGVUb0FjdHVhbChsLHUpOnMuZ3JvdXAubGVuZ3RoPDImJnMuY2xvc2Uoby5zdGFydEV2ZW50KSl9fTtpZighKHQub3JpZ2luYWxFdmVudCYmMj09dC5vcmlnaW5hbEV2ZW50LmJ1dHRvbnx8cy5pc1NsaWRpbmd8fGw+aVswXS5jbGllbnRXaWR0aCtpLm9mZnNldCgpLmxlZnQpKXtpZihpLmlzKFwiLmZhbmN5Ym94LWJnLC5mYW5jeWJveC1pbm5lciwuZmFuY3lib3gtb3V0ZXIsLmZhbmN5Ym94LWNvbnRhaW5lclwiKSllPVwiT3V0c2lkZVwiO2Vsc2UgaWYoaS5pcyhcIi5mYW5jeWJveC1zbGlkZVwiKSllPVwiU2xpZGVcIjtlbHNle2lmKCFzLmN1cnJlbnQuJGNvbnRlbnR8fCFzLmN1cnJlbnQuJGNvbnRlbnQuaGFzKHQudGFyZ2V0KS5sZW5ndGgpcmV0dXJuO2U9XCJDb250ZW50XCJ9aWYoby50YXBwZWQpe2lmKGNsZWFyVGltZW91dChvLnRhcHBlZCksby50YXBwZWQ9bnVsbCxNYXRoLmFicyhsLW8udGFwWCk+NTB8fE1hdGguYWJzKHUtby50YXBZKT41MHx8cy5pc1NsaWRpbmcpcmV0dXJuIHRoaXM7ZChcImRibGNsaWNrXCIrZSl9ZWxzZSBvLnRhcFg9bCxvLnRhcFk9dSxyLm9wdHNbXCJkYmxjbGlja1wiK2VdJiZyLm9wdHNbXCJkYmxjbGlja1wiK2VdIT09ci5vcHRzW1wiY2xpY2tcIitlXT9vLnRhcHBlZD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7by50YXBwZWQ9bnVsbCxkKFwiY2xpY2tcIitlKX0sMzAwKTpkKFwiY2xpY2tcIitlKTtyZXR1cm4gdGhpc319LG4oZSkub24oXCJvbkFjdGl2YXRlLmZiXCIsZnVuY3Rpb24odCxlKXtlJiYhZS5HdWVzdHVyZXMmJihlLkd1ZXN0dXJlcz1uZXcgdShlKSl9KSxuKGUpLm9uKFwiYmVmb3JlQ2xvc2UuZmJcIixmdW5jdGlvbih0LGUpe2UmJmUuR3Vlc3R1cmVzJiZlLkd1ZXN0dXJlcy5kZXN0cm95KCl9KX0od2luZG93LGRvY3VtZW50LHdpbmRvdy5qUXVlcnkpLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZnVuY3Rpb24odCl7dGhpcy5pbnN0YW5jZT10LHRoaXMuaW5pdCgpfTtlLmV4dGVuZChuLnByb3RvdHlwZSx7dGltZXI6bnVsbCxpc0FjdGl2ZTohMSwkYnV0dG9uOm51bGwsc3BlZWQ6M2UzLGluaXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3QuJGJ1dHRvbj10Lmluc3RhbmNlLiRyZWZzLnRvb2xiYXIuZmluZChcIltkYXRhLWZhbmN5Ym94LXBsYXldXCIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe3QudG9nZ2xlKCl9KSwodC5pbnN0YW5jZS5ncm91cC5sZW5ndGg8Mnx8IXQuaW5zdGFuY2UuZ3JvdXBbdC5pbnN0YW5jZS5jdXJySW5kZXhdLm9wdHMuc2xpZGVTaG93KSYmdC4kYnV0dG9uLmhpZGUoKX0sc2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0Lmluc3RhbmNlJiZ0Lmluc3RhbmNlLmN1cnJlbnQmJih0Lmluc3RhbmNlLmN1cnJlbnQub3B0cy5sb29wfHx0Lmluc3RhbmNlLmN1cnJJbmRleDx0Lmluc3RhbmNlLmdyb3VwLmxlbmd0aC0xKT90LnRpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0Lmluc3RhbmNlLm5leHQoKX0sdC5pbnN0YW5jZS5jdXJyZW50Lm9wdHMuc2xpZGVTaG93LnNwZWVkfHx0LnNwZWVkKToodC5zdG9wKCksdC5pbnN0YW5jZS5pZGxlU2Vjb25kc0NvdW50ZXI9MCx0Lmluc3RhbmNlLnNob3dDb250cm9scygpKX0sY2xlYXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2NsZWFyVGltZW91dCh0LnRpbWVyKSx0LnRpbWVyPW51bGx9LHN0YXJ0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuaW5zdGFuY2UuY3VycmVudDt0Lmluc3RhbmNlJiZlJiYoZS5vcHRzLmxvb3B8fGUuaW5kZXg8dC5pbnN0YW5jZS5ncm91cC5sZW5ndGgtMSkmJih0LmlzQWN0aXZlPSEwLHQuJGJ1dHRvbi5hdHRyKFwidGl0bGVcIixlLm9wdHMuaTE4bltlLm9wdHMubGFuZ10uUExBWV9TVE9QKS5hZGRDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tcGF1c2VcIiksZS5pc0NvbXBsZXRlJiZ0LnNldCgpKX0sc3RvcDpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10Lmluc3RhbmNlLmN1cnJlbnQ7dC5jbGVhcigpLHQuJGJ1dHRvbi5hdHRyKFwidGl0bGVcIixlLm9wdHMuaTE4bltlLm9wdHMubGFuZ10uUExBWV9TVEFSVCkucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1idXR0b24tLXBhdXNlXCIpLHQuaXNBY3RpdmU9ITF9LHRvZ2dsZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dC5pc0FjdGl2ZT90LnN0b3AoKTp0LnN0YXJ0KCl9fSksZSh0KS5vbih7XCJvbkluaXQuZmJcIjpmdW5jdGlvbih0LGUpe2UmJiFlLlNsaWRlU2hvdyYmKGUuU2xpZGVTaG93PW5ldyBuKGUpKX0sXCJiZWZvcmVTaG93LmZiXCI6ZnVuY3Rpb24odCxlLG4sbyl7dmFyIGk9ZSYmZS5TbGlkZVNob3c7bz9pJiZuLm9wdHMuc2xpZGVTaG93LmF1dG9TdGFydCYmaS5zdGFydCgpOmkmJmkuaXNBY3RpdmUmJmkuY2xlYXIoKX0sXCJhZnRlclNob3cuZmJcIjpmdW5jdGlvbih0LGUsbil7dmFyIG89ZSYmZS5TbGlkZVNob3c7byYmby5pc0FjdGl2ZSYmby5zZXQoKX0sXCJhZnRlcktleWRvd24uZmJcIjpmdW5jdGlvbihuLG8saSxhLHMpe3ZhciByPW8mJm8uU2xpZGVTaG93OyFyfHwhaS5vcHRzLnNsaWRlU2hvd3x8ODAhPT1zJiYzMiE9PXN8fGUodC5hY3RpdmVFbGVtZW50KS5pcyhcImJ1dHRvbixhLGlucHV0XCIpfHwoYS5wcmV2ZW50RGVmYXVsdCgpLHIudG9nZ2xlKCkpfSxcImJlZm9yZUNsb3NlLmZiIG9uRGVhY3RpdmF0ZS5mYlwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZSYmZS5TbGlkZVNob3c7biYmbi5zdG9wKCl9fSksZSh0KS5vbihcInZpc2liaWxpdHljaGFuZ2VcIixmdW5jdGlvbigpe3ZhciBuPWUuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSxvPW4mJm4uU2xpZGVTaG93O28mJm8uaXNBY3RpdmUmJih0LmhpZGRlbj9vLmNsZWFyKCk6by5zZXQoKSl9KX0oZG9jdW1lbnQsd2luZG93LmpRdWVyeSksZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1mdW5jdGlvbigpe3ZhciBlLG4sbyxpPVtbXCJyZXF1ZXN0RnVsbHNjcmVlblwiLFwiZXhpdEZ1bGxzY3JlZW5cIixcImZ1bGxzY3JlZW5FbGVtZW50XCIsXCJmdWxsc2NyZWVuRW5hYmxlZFwiLFwiZnVsbHNjcmVlbmNoYW5nZVwiLFwiZnVsbHNjcmVlbmVycm9yXCJdLFtcIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuXCIsXCJ3ZWJraXRFeGl0RnVsbHNjcmVlblwiLFwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnRcIixcIndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkXCIsXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsXCJ3ZWJraXRmdWxsc2NyZWVuZXJyb3JcIl0sW1wid2Via2l0UmVxdWVzdEZ1bGxTY3JlZW5cIixcIndlYmtpdENhbmNlbEZ1bGxTY3JlZW5cIixcIndlYmtpdEN1cnJlbnRGdWxsU2NyZWVuRWxlbWVudFwiLFwid2Via2l0Q2FuY2VsRnVsbFNjcmVlblwiLFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLFwid2Via2l0ZnVsbHNjcmVlbmVycm9yXCJdLFtcIm1velJlcXVlc3RGdWxsU2NyZWVuXCIsXCJtb3pDYW5jZWxGdWxsU2NyZWVuXCIsXCJtb3pGdWxsU2NyZWVuRWxlbWVudFwiLFwibW96RnVsbFNjcmVlbkVuYWJsZWRcIixcIm1vemZ1bGxzY3JlZW5jaGFuZ2VcIixcIm1vemZ1bGxzY3JlZW5lcnJvclwiXSxbXCJtc1JlcXVlc3RGdWxsc2NyZWVuXCIsXCJtc0V4aXRGdWxsc2NyZWVuXCIsXCJtc0Z1bGxzY3JlZW5FbGVtZW50XCIsXCJtc0Z1bGxzY3JlZW5FbmFibGVkXCIsXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIixcIk1TRnVsbHNjcmVlbkVycm9yXCJdXSxhPXt9O2ZvcihuPTA7bjxpLmxlbmd0aDtuKyspaWYoZT1pW25dLGUmJmVbMV1pbiB0KXtmb3Iobz0wO288ZS5sZW5ndGg7bysrKWFbaVswXVtvXV09ZVtvXTtyZXR1cm4gYX1yZXR1cm4hMX0oKTtpZighbilyZXR1cm4gdm9pZChlLmZhbmN5Ym94LmRlZmF1bHRzLmJ0blRwbC5mdWxsU2NyZWVuPSExKTt2YXIgbz17cmVxdWVzdDpmdW5jdGlvbihlKXtlPWV8fHQuZG9jdW1lbnRFbGVtZW50LGVbbi5yZXF1ZXN0RnVsbHNjcmVlbl0oZS5BTExPV19LRVlCT0FSRF9JTlBVVCl9LGV4aXQ6ZnVuY3Rpb24oKXt0W24uZXhpdEZ1bGxzY3JlZW5dKCl9LHRvZ2dsZTpmdW5jdGlvbihlKXtlPWV8fHQuZG9jdW1lbnRFbGVtZW50LHRoaXMuaXNGdWxsc2NyZWVuKCk/dGhpcy5leGl0KCk6dGhpcy5yZXF1ZXN0KGUpfSxpc0Z1bGxzY3JlZW46ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbih0W24uZnVsbHNjcmVlbkVsZW1lbnRdKX0sZW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKHRbbi5mdWxsc2NyZWVuRW5hYmxlZF0pfX07ZSh0KS5vbih7XCJvbkluaXQuZmJcIjpmdW5jdGlvbih0LGUpe3ZhciBuLGk9ZS4kcmVmcy50b29sYmFyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXVwiKTtlJiYhZS5GdWxsU2NyZWVuJiZlLmdyb3VwW2UuY3VyckluZGV4XS5vcHRzLmZ1bGxTY3JlZW4/KG49ZS4kcmVmcy5jb250YWluZXIsbi5vbihcImNsaWNrLmZiLWZ1bGxzY3JlZW5cIixcIltkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW5dXCIsZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCksby50b2dnbGUoblswXSl9KSxlLm9wdHMuZnVsbFNjcmVlbiYmZS5vcHRzLmZ1bGxTY3JlZW4uYXV0b1N0YXJ0PT09ITAmJm8ucmVxdWVzdChuWzBdKSxlLkZ1bGxTY3JlZW49byk6aS5oaWRlKCl9LFwiYWZ0ZXJLZXlkb3duLmZiXCI6ZnVuY3Rpb24odCxlLG4sbyxpKXtlJiZlLkZ1bGxTY3JlZW4mJjcwPT09aSYmKG8ucHJldmVudERlZmF1bHQoKSxlLkZ1bGxTY3JlZW4udG9nZ2xlKGUuJHJlZnMuY29udGFpbmVyWzBdKSl9LFwiYmVmb3JlQ2xvc2UuZmJcIjpmdW5jdGlvbih0KXt0JiZ0LkZ1bGxTY3JlZW4mJm8uZXhpdCgpfX0pLGUodCkub24obi5mdWxsc2NyZWVuY2hhbmdlLGZ1bmN0aW9uKCl7dmFyIHQ9ZS5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO3QuY3VycmVudCYmXCJpbWFnZVwiPT09dC5jdXJyZW50LnR5cGUmJnQuaXNBbmltYXRpbmcmJih0LmN1cnJlbnQuJGNvbnRlbnQuY3NzKFwidHJhbnNpdGlvblwiLFwibm9uZVwiKSx0LmlzQW5pbWF0aW5nPSExLHQudXBkYXRlKCEwLCEwLDApKX0pfShkb2N1bWVudCx3aW5kb3cualF1ZXJ5KSxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO3ZhciBuPWZ1bmN0aW9uKHQpe3RoaXMuaW5zdGFuY2U9dCx0aGlzLmluaXQoKX07ZS5leHRlbmQobi5wcm90b3R5cGUseyRidXR0b246bnVsbCwkZ3JpZDpudWxsLCRsaXN0Om51bGwsaXNWaXNpYmxlOiExLGluaXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC5pbnN0YW5jZS5ncm91cFswXSxuPXQuaW5zdGFuY2UuZ3JvdXBbMV07dC4kYnV0dG9uPXQuaW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKFwiW2RhdGEtZmFuY3lib3gtdGh1bWJzXVwiKSx0Lmluc3RhbmNlLmdyb3VwLmxlbmd0aD4xJiZ0Lmluc3RhbmNlLmdyb3VwW3QuaW5zdGFuY2UuY3VyckluZGV4XS5vcHRzLnRodW1icyYmKFwiaW1hZ2VcIj09ZS50eXBlfHxlLm9wdHMudGh1bWJ8fGUub3B0cy4kdGh1bWIpJiYoXCJpbWFnZVwiPT1uLnR5cGV8fG4ub3B0cy50aHVtYnx8bi5vcHRzLiR0aHVtYik/KHQuJGJ1dHRvbi5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXt0LnRvZ2dsZSgpfSksdC5pc0FjdGl2ZT0hMCk6KHQuJGJ1dHRvbi5oaWRlKCksdC5pc0FjdGl2ZT0hMSl9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciB0LG4sbz10aGlzLmluc3RhbmNlO3RoaXMuJGdyaWQ9ZSgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXRodW1ic1wiPjwvZGl2PicpLmFwcGVuZFRvKG8uJHJlZnMuY29udGFpbmVyKSx0PVwiPHVsPlwiLGUuZWFjaChvLmdyb3VwLGZ1bmN0aW9uKGUsbyl7bj1vLm9wdHMudGh1bWJ8fChvLm9wdHMuJHRodW1iP28ub3B0cy4kdGh1bWIuYXR0cihcInNyY1wiKTpudWxsKSxufHxcImltYWdlXCIhPT1vLnR5cGV8fChuPW8uc3JjKSxuJiZuLmxlbmd0aCYmKHQrPSc8bGkgZGF0YS1pbmRleD1cIicrZSsnXCIgIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwiZmFuY3lib3gtdGh1bWJzLWxvYWRpbmdcIj48aW1nIGRhdGEtc3JjPVwiJytuKydcIiAvPjwvbGk+Jyl9KSx0Kz1cIjwvdWw+XCIsdGhpcy4kbGlzdD1lKHQpLmFwcGVuZFRvKHRoaXMuJGdyaWQpLm9uKFwiY2xpY2tcIixcImxpXCIsZnVuY3Rpb24oKXtvLmp1bXBUbyhlKHRoaXMpLmRhdGEoXCJpbmRleFwiKSl9KSx0aGlzLiRsaXN0LmZpbmQoXCJpbWdcIikuaGlkZSgpLm9uZShcImxvYWRcIixmdW5jdGlvbigpe3ZhciB0LG4sbyxpLGE9ZSh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXRodW1icy1sb2FkaW5nXCIpLHM9YS5vdXRlcldpZHRoKCkscj1hLm91dGVySGVpZ2h0KCk7dD10aGlzLm5hdHVyYWxXaWR0aHx8dGhpcy53aWR0aCxuPXRoaXMubmF0dXJhbEhlaWdodHx8dGhpcy5oZWlnaHQsbz10L3MsaT1uL3Isbz49MSYmaT49MSYmKG8+aT8odC89aSxuPXIpOih0PXMsbi89bykpLGUodGhpcykuY3NzKHt3aWR0aDpNYXRoLmZsb29yKHQpLGhlaWdodDpNYXRoLmZsb29yKG4pLFwibWFyZ2luLXRvcFwiOk1hdGgubWluKDAsTWF0aC5mbG9vciguMypyLS4zKm4pKSxcIm1hcmdpbi1sZWZ0XCI6TWF0aC5taW4oMCxNYXRoLmZsb29yKC41KnMtLjUqdCkpfSkuc2hvdygpfSkuZWFjaChmdW5jdGlvbigpe3RoaXMuc3JjPWUodGhpcykuZGF0YShcInNyY1wiKX0pfSxmb2N1czpmdW5jdGlvbigpe3RoaXMuaW5zdGFuY2UuY3VycmVudCYmdGhpcy4kbGlzdC5jaGlsZHJlbigpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtdGh1bWJzLWFjdGl2ZVwiKS5maWx0ZXIoJ1tkYXRhLWluZGV4PVwiJyt0aGlzLmluc3RhbmNlLmN1cnJlbnQuaW5kZXgrJ1wiXScpLmFkZENsYXNzKFwiZmFuY3lib3gtdGh1bWJzLWFjdGl2ZVwiKS5mb2N1cygpfSxjbG9zZTpmdW5jdGlvbigpe3RoaXMuJGdyaWQuaGlkZSgpfSx1cGRhdGU6ZnVuY3Rpb24oKXt0aGlzLmluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctdGh1bWJzXCIsdGhpcy5pc1Zpc2libGUpLHRoaXMuaXNWaXNpYmxlPyh0aGlzLiRncmlkfHx0aGlzLmNyZWF0ZSgpLHRoaXMuaW5zdGFuY2UudHJpZ2dlcihcIm9uVGh1bWJzU2hvd1wiKSx0aGlzLmZvY3VzKCkpOnRoaXMuJGdyaWQmJnRoaXMuaW5zdGFuY2UudHJpZ2dlcihcIm9uVGh1bWJzSGlkZVwiKSx0aGlzLmluc3RhbmNlLnVwZGF0ZSgpfSxoaWRlOmZ1bmN0aW9uKCl7dGhpcy5pc1Zpc2libGU9ITEsdGhpcy51cGRhdGUoKX0sc2hvdzpmdW5jdGlvbigpe3RoaXMuaXNWaXNpYmxlPSEwLHRoaXMudXBkYXRlKCl9LHRvZ2dsZTpmdW5jdGlvbigpe3RoaXMuaXNWaXNpYmxlPSF0aGlzLmlzVmlzaWJsZSx0aGlzLnVwZGF0ZSgpfX0pLGUodCkub24oe1wib25Jbml0LmZiXCI6ZnVuY3Rpb24odCxlKXtlJiYhZS5UaHVtYnMmJihlLlRodW1icz1uZXcgbihlKSl9LFwiYmVmb3JlU2hvdy5mYlwiOmZ1bmN0aW9uKHQsZSxuLG8pe3ZhciBpPWUmJmUuVGh1bWJzO2lmKGkmJmkuaXNBY3RpdmUpe2lmKG4ubW9kYWwpcmV0dXJuIGkuJGJ1dHRvbi5oaWRlKCksdm9pZCBpLmhpZGUoKTtvJiZlLm9wdHMudGh1bWJzLmF1dG9TdGFydD09PSEwJiZpLnNob3coKSxpLmlzVmlzaWJsZSYmaS5mb2N1cygpfX0sXCJhZnRlcktleWRvd24uZmJcIjpmdW5jdGlvbih0LGUsbixvLGkpe3ZhciBhPWUmJmUuVGh1bWJzO2EmJmEuaXNBY3RpdmUmJjcxPT09aSYmKG8ucHJldmVudERlZmF1bHQoKSxhLnRvZ2dsZSgpKX0sXCJiZWZvcmVDbG9zZS5mYlwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZSYmZS5UaHVtYnM7biYmbi5pc1Zpc2libGUmJmUub3B0cy50aHVtYnMuaGlkZU9uQ2xvc2UhPT0hMSYmbi5jbG9zZSgpfX0pfShkb2N1bWVudCx3aW5kb3cualF1ZXJ5KSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbygpe3ZhciB0PWUubG9jYXRpb24uaGFzaC5zdWJzdHIoMSksbj10LnNwbGl0KFwiLVwiKSxvPW4ubGVuZ3RoPjEmJi9eXFwrP1xcZCskLy50ZXN0KG5bbi5sZW5ndGgtMV0pP3BhcnNlSW50KG4ucG9wKC0xKSwxMCl8fDE6MSxpPW4uam9pbihcIi1cIik7cmV0dXJuIG88MSYmKG89MSkse2hhc2g6dCxpbmRleDpvLGdhbGxlcnk6aX19ZnVuY3Rpb24gaSh0KXt2YXIgZTtcIlwiIT09dC5nYWxsZXJ5JiYoZT1uKFwiW2RhdGEtZmFuY3lib3g9J1wiK24uZXNjYXBlU2VsZWN0b3IodC5nYWxsZXJ5KStcIiddXCIpLmVxKHQuaW5kZXgtMSksZS5sZW5ndGg/ZS50cmlnZ2VyKFwiY2xpY2tcIik6bihcIiNcIituLmVzY2FwZVNlbGVjdG9yKHQuZ2FsbGVyeSkpLnRyaWdnZXIoXCJjbGlja1wiKSl9ZnVuY3Rpb24gYSh0KXt2YXIgZTtyZXR1cm4hIXQmJihlPXQuY3VycmVudD90LmN1cnJlbnQub3B0czp0Lm9wdHMsZS4kb3JpZz9lLiRvcmlnLmRhdGEoXCJmYW5jeWJveFwiKTplLmhhc2h8fFwiXCIpfW4uZXNjYXBlU2VsZWN0b3J8fChuLmVzY2FwZVNlbGVjdG9yPWZ1bmN0aW9uKHQpe3ZhciBlPS8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxceDgwLVxcdUZGRkZcXHctXS9nLG49ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT9cIlxcMFwiPT09dD9cIu+/vVwiOnQuc2xpY2UoMCwtMSkrXCJcXFxcXCIrdC5jaGFyQ29kZUF0KHQubGVuZ3RoLTEpLnRvU3RyaW5nKDE2KStcIiBcIjpcIlxcXFxcIit0fTtyZXR1cm4odCtcIlwiKS5yZXBsYWNlKGUsbil9KTt2YXIgcz1udWxsLHI9bnVsbDtuKGZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe24uZmFuY3lib3guZGVmYXVsdHMuaGFzaCE9PSExJiYobih0KS5vbih7XCJvbkluaXQuZmJcIjpmdW5jdGlvbih0LGUpe3ZhciBuLGk7ZS5ncm91cFtlLmN1cnJJbmRleF0ub3B0cy5oYXNoIT09ITEmJihuPW8oKSxpPWEoZSksaSYmbi5nYWxsZXJ5JiZpPT1uLmdhbGxlcnkmJihlLmN1cnJJbmRleD1uLmluZGV4LTEpKX0sXCJiZWZvcmVTaG93LmZiXCI6ZnVuY3Rpb24obixvLGksYyl7dmFyIGw7aS5vcHRzLmhhc2ghPT0hMSYmKGw9YShvKSxsJiZcIlwiIT09bCYmKGUubG9jYXRpb24uaGFzaC5pbmRleE9mKGwpPDAmJihvLm9wdHMub3JpZ0hhc2g9ZS5sb2NhdGlvbi5oYXNoKSxzPWwrKG8uZ3JvdXAubGVuZ3RoPjE/XCItXCIrKGkuaW5kZXgrMSk6XCJcIiksXCJyZXBsYWNlU3RhdGVcImluIGUuaGlzdG9yeT8ociYmY2xlYXJUaW1lb3V0KHIpLHI9c2V0VGltZW91dChmdW5jdGlvbigpe2UuaGlzdG9yeVtjP1wicHVzaFN0YXRlXCI6XCJyZXBsYWNlU3RhdGVcIl0oe30sdC50aXRsZSxlLmxvY2F0aW9uLnBhdGhuYW1lK2UubG9jYXRpb24uc2VhcmNoK1wiI1wiK3MpLHI9bnVsbH0sMzAwKSk6ZS5sb2NhdGlvbi5oYXNoPXMpKX0sXCJiZWZvcmVDbG9zZS5mYlwiOmZ1bmN0aW9uKG8saSxjKXt2YXIgbCx1O3ImJmNsZWFyVGltZW91dChyKSxjLm9wdHMuaGFzaCE9PSExJiYobD1hKGkpLHU9aSYmaS5vcHRzLm9yaWdIYXNoP2kub3B0cy5vcmlnSGFzaDpcIlwiLGwmJlwiXCIhPT1sJiYoXCJyZXBsYWNlU3RhdGVcImluIGhpc3Rvcnk/ZS5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSx0LnRpdGxlLGUubG9jYXRpb24ucGF0aG5hbWUrZS5sb2NhdGlvbi5zZWFyY2grdSk6KGUubG9jYXRpb24uaGFzaD11LG4oZSkuc2Nyb2xsVG9wKGkuc2Nyb2xsVG9wKS5zY3JvbGxMZWZ0KGkuc2Nyb2xsTGVmdCkpKSxzPW51bGwpfX0pLG4oZSkub24oXCJoYXNoY2hhbmdlLmZiXCIsZnVuY3Rpb24oKXt2YXIgdD1vKCk7bi5mYW5jeWJveC5nZXRJbnN0YW5jZSgpPyFzfHxzPT09dC5nYWxsZXJ5K1wiLVwiK3QuaW5kZXh8fDE9PT10LmluZGV4JiZzPT10LmdhbGxlcnl8fChzPW51bGwsbi5mYW5jeWJveC5jbG9zZSgpKTpcIlwiIT09dC5nYWxsZXJ5JiZpKHQpfSksbihlKS5vbmUoXCJ1bmxvYWQuZmIgcG9wc3RhdGUuZmJcIixmdW5jdGlvbigpe24uZmFuY3lib3guZ2V0SW5zdGFuY2UoXCJjbG9zZVwiLCEwLDApfSksaShvKCkpKX0sNTApfSl9KGRvY3VtZW50LHdpbmRvdyx3aW5kb3cualF1ZXJ5KTsiLCIvKlxuICAgIGpRdWVyeSBNYXNrZWQgSW5wdXQgUGx1Z2luXG4gICAgQ29weXJpZ2h0IChjKSAyMDA3IC0gMjAxNSBKb3NoIEJ1c2ggKGRpZ2l0YWxidXNoLmNvbSlcbiAgICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly9kaWdpdGFsYnVzaC5jb20vcHJvamVjdHMvbWFza2VkLWlucHV0LXBsdWdpbi8jbGljZW5zZSlcbiAgICBWZXJzaW9uOiAxLjQuMVxuKi9cbiFmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbIFwianF1ZXJ5XCIgXSwgZmFjdG9yeSkgOiBmYWN0b3J5KFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgPyByZXF1aXJlKFwianF1ZXJ5XCIpIDogalF1ZXJ5KTtcbn0oZnVuY3Rpb24oJCkge1xuICAgIHZhciBjYXJldFRpbWVvdXRJZCwgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LCBpUGhvbmUgPSAvaXBob25lL2kudGVzdCh1YSksIGNocm9tZSA9IC9jaHJvbWUvaS50ZXN0KHVhKSwgYW5kcm9pZCA9IC9hbmRyb2lkL2kudGVzdCh1YSk7XG4gICAgJC5tYXNrID0ge1xuICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgXCI5XCI6IFwiWzAtOV1cIixcbiAgICAgICAgICAgIGE6IFwiW0EtWmEtel1cIixcbiAgICAgICAgICAgIFwiKlwiOiBcIltBLVphLXowLTldXCJcbiAgICAgICAgfSxcbiAgICAgICAgYXV0b2NsZWFyOiAhMCxcbiAgICAgICAgZGF0YU5hbWU6IFwicmF3TWFza0ZuXCIsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBcIl9cIlxuICAgIH0sICQuZm4uZXh0ZW5kKHtcbiAgICAgICAgY2FyZXQ6IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcbiAgICAgICAgICAgIHZhciByYW5nZTtcbiAgICAgICAgICAgIGlmICgwICE9PSB0aGlzLmxlbmd0aCAmJiAhdGhpcy5pcyhcIjpoaWRkZW5cIikpIHJldHVybiBcIm51bWJlclwiID09IHR5cGVvZiBiZWdpbiA/IChlbmQgPSBcIm51bWJlclwiID09IHR5cGVvZiBlbmQgPyBlbmQgOiBiZWdpbiwgXG4gICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25SYW5nZSA/IHRoaXMuc2V0U2VsZWN0aW9uUmFuZ2UoYmVnaW4sIGVuZCkgOiB0aGlzLmNyZWF0ZVRleHRSYW5nZSAmJiAocmFuZ2UgPSB0aGlzLmNyZWF0ZVRleHRSYW5nZSgpLCBcbiAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSghMCksIHJhbmdlLm1vdmVFbmQoXCJjaGFyYWN0ZXJcIiwgZW5kKSwgcmFuZ2UubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsIGJlZ2luKSwgXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCkpO1xuICAgICAgICAgICAgfSkpIDogKHRoaXNbMF0uc2V0U2VsZWN0aW9uUmFuZ2UgPyAoYmVnaW4gPSB0aGlzWzBdLnNlbGVjdGlvblN0YXJ0LCBlbmQgPSB0aGlzWzBdLnNlbGVjdGlvbkVuZCkgOiBkb2N1bWVudC5zZWxlY3Rpb24gJiYgZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlICYmIChyYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLCBcbiAgICAgICAgICAgIGJlZ2luID0gMCAtIHJhbmdlLmR1cGxpY2F0ZSgpLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCAtMWU1KSwgZW5kID0gYmVnaW4gKyByYW5nZS50ZXh0Lmxlbmd0aCksIFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJlZ2luOiBiZWdpbixcbiAgICAgICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHVubWFzazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwidW5tYXNrXCIpO1xuICAgICAgICB9LFxuICAgICAgICBtYXNrOiBmdW5jdGlvbihtYXNrLCBzZXR0aW5ncykge1xuICAgICAgICAgICAgdmFyIGlucHV0LCBkZWZzLCB0ZXN0cywgcGFydGlhbFBvc2l0aW9uLCBmaXJzdE5vbk1hc2tQb3MsIGxhc3RSZXF1aXJlZE5vbk1hc2tQb3MsIGxlbiwgb2xkVmFsO1xuICAgICAgICAgICAgaWYgKCFtYXNrICYmIHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gJCh0aGlzWzBdKTtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBpbnB1dC5kYXRhKCQubWFzay5kYXRhTmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuID8gZm4oKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBhdXRvY2xlYXI6ICQubWFzay5hdXRvY2xlYXIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICQubWFzay5wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IG51bGxcbiAgICAgICAgICAgIH0sIHNldHRpbmdzKSwgZGVmcyA9ICQubWFzay5kZWZpbml0aW9ucywgdGVzdHMgPSBbXSwgcGFydGlhbFBvc2l0aW9uID0gbGVuID0gbWFzay5sZW5ndGgsIFxuICAgICAgICAgICAgZmlyc3ROb25NYXNrUG9zID0gbnVsbCwgJC5lYWNoKG1hc2suc3BsaXQoXCJcIiksIGZ1bmN0aW9uKGksIGMpIHtcbiAgICAgICAgICAgICAgICBcIj9cIiA9PSBjID8gKGxlbi0tLCBwYXJ0aWFsUG9zaXRpb24gPSBpKSA6IGRlZnNbY10gPyAodGVzdHMucHVzaChuZXcgUmVnRXhwKGRlZnNbY10pKSwgXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gZmlyc3ROb25NYXNrUG9zICYmIChmaXJzdE5vbk1hc2tQb3MgPSB0ZXN0cy5sZW5ndGggLSAxKSwgcGFydGlhbFBvc2l0aW9uID4gaSAmJiAobGFzdFJlcXVpcmVkTm9uTWFza1BvcyA9IHRlc3RzLmxlbmd0aCAtIDEpKSA6IHRlc3RzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICB9KSwgdGhpcy50cmlnZ2VyKFwidW5tYXNrXCIpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdHJ5RmlyZUNvbXBsZXRlZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZpcnN0Tm9uTWFza1BvczsgbGFzdFJlcXVpcmVkTm9uTWFza1BvcyA+PSBpOyBpKyspIGlmICh0ZXN0c1tpXSAmJiBidWZmZXJbaV0gPT09IGdldFBsYWNlaG9sZGVyKGkpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5jb21wbGV0ZWQuY2FsbChpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGxhY2Vob2xkZXIoaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3MucGxhY2Vob2xkZXIuY2hhckF0KGkgPCBzZXR0aW5ncy5wbGFjZWhvbGRlci5sZW5ndGggPyBpIDogMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNlZWtOZXh0KHBvcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDsrK3BvcyA8IGxlbiAmJiAhdGVzdHNbcG9zXTsgKSA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNlZWtQcmV2KHBvcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDstLXBvcyA+PSAwICYmICF0ZXN0c1twb3NdOyApIDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2hpZnRMKGJlZ2luLCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGksIGo7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKDAgPiBiZWdpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGJlZ2luLCBqID0gc2Vla05leHQoZW5kKTsgbGVuID4gaTsgaSsrKSBpZiAodGVzdHNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShsZW4gPiBqICYmIHRlc3RzW2ldLnRlc3QoYnVmZmVyW2pdKSkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IGJ1ZmZlcltqXSwgYnVmZmVyW2pdID0gZ2V0UGxhY2Vob2xkZXIoaiksIGogPSBzZWVrTmV4dChqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKCksIGlucHV0LmNhcmV0KE1hdGgubWF4KGZpcnN0Tm9uTWFza1BvcywgYmVnaW4pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaGlmdFIocG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpLCBjLCBqLCB0O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBwb3MsIGMgPSBnZXRQbGFjZWhvbGRlcihwb3MpOyBsZW4gPiBpOyBpKyspIGlmICh0ZXN0c1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPSBzZWVrTmV4dChpKSwgdCA9IGJ1ZmZlcltpXSwgYnVmZmVyW2ldID0gYywgIShsZW4gPiBqICYmIHRlc3RzW2pdLnRlc3QodCkpKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSB0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFuZHJvaWRJbnB1dEV2ZW50KCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyVmFsID0gaW5wdXQudmFsKCksIHBvcyA9IGlucHV0LmNhcmV0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRWYWwgJiYgb2xkVmFsLmxlbmd0aCAmJiBvbGRWYWwubGVuZ3RoID4gY3VyVmFsLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjaGVja1ZhbCghMCk7IHBvcy5iZWdpbiA+IDAgJiYgIXRlc3RzW3Bvcy5iZWdpbiAtIDFdOyApIHBvcy5iZWdpbi0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHBvcy5iZWdpbikgZm9yICg7cG9zLmJlZ2luIDwgZmlyc3ROb25NYXNrUG9zICYmICF0ZXN0c1twb3MuYmVnaW5dOyApIHBvcy5iZWdpbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2FyZXQocG9zLmJlZ2luLCBwb3MuYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjaGVja1ZhbCghMCk7IHBvcy5iZWdpbiA8IGxlbiAmJiAhdGVzdHNbcG9zLmJlZ2luXTsgKSBwb3MuYmVnaW4rKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNhcmV0KHBvcy5iZWdpbiwgcG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnlGaXJlQ29tcGxldGVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJsdXJFdmVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWwoKSwgaW5wdXQudmFsKCkgIT0gZm9jdXNUZXh0ICYmIGlucHV0LmNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBrZXlkb3duRXZlbnQoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LnByb3AoXCJyZWFkb25seVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcywgYmVnaW4sIGVuZCwgayA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsID0gaW5wdXQudmFsKCksIDggPT09IGsgfHwgNDYgPT09IGsgfHwgaVBob25lICYmIDEyNyA9PT0gayA/IChwb3MgPSBpbnB1dC5jYXJldCgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luID0gcG9zLmJlZ2luLCBlbmQgPSBwb3MuZW5kLCBlbmQgLSBiZWdpbiA9PT0gMCAmJiAoYmVnaW4gPSA0NiAhPT0gayA/IHNlZWtQcmV2KGJlZ2luKSA6IGVuZCA9IHNlZWtOZXh0KGJlZ2luIC0gMSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gNDYgPT09IGsgPyBzZWVrTmV4dChlbmQpIDogZW5kKSwgY2xlYXJCdWZmZXIoYmVnaW4sIGVuZCksIHNoaWZ0TChiZWdpbiwgZW5kIC0gMSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpKSA6IDEzID09PSBrID8gYmx1ckV2ZW50LmNhbGwodGhpcywgZSkgOiAyNyA9PT0gayAmJiAoaW5wdXQudmFsKGZvY3VzVGV4dCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2FyZXQoMCwgY2hlY2tWYWwoKSksIGUucHJldmVudERlZmF1bHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24ga2V5cHJlc3NFdmVudChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQucHJvcChcInJlYWRvbmx5XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCwgYywgbmV4dCwgayA9IGUud2hpY2ggfHwgZS5rZXlDb2RlLCBwb3MgPSBpbnB1dC5jYXJldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoZS5jdHJsS2V5IHx8IGUuYWx0S2V5IHx8IGUubWV0YUtleSB8fCAzMiA+IGspICYmIGsgJiYgMTMgIT09IGspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zLmVuZCAtIHBvcy5iZWdpbiAhPT0gMCAmJiAoY2xlYXJCdWZmZXIocG9zLmJlZ2luLCBwb3MuZW5kKSwgc2hpZnRMKHBvcy5iZWdpbiwgcG9zLmVuZCAtIDEpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHNlZWtOZXh0KHBvcy5iZWdpbiAtIDEpLCBsZW4gPiBwICYmIChjID0gU3RyaW5nLmZyb21DaGFyQ29kZShrKSwgdGVzdHNbcF0udGVzdChjKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoaWZ0UihwKSwgYnVmZmVyW3BdID0gYywgd3JpdGVCdWZmZXIoKSwgbmV4dCA9IHNlZWtOZXh0KHApLCBhbmRyb2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJveHkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnByb3h5KCQuZm4uY2FyZXQsIGlucHV0LCBuZXh0KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocHJveHksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaW5wdXQuY2FyZXQobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA8PSBsYXN0UmVxdWlyZWROb25NYXNrUG9zICYmIHRyeUZpcmVDb21wbGV0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IHN0YXJ0OyBlbmQgPiBpICYmIGxlbiA+IGk7IGkrKykgdGVzdHNbaV0gJiYgKGJ1ZmZlcltpXSA9IGdldFBsYWNlaG9sZGVyKGkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gd3JpdGVCdWZmZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbChidWZmZXIuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrVmFsKGFsbG93KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpLCBjLCBwb3MsIHRlc3QgPSBpbnB1dC52YWwoKSwgbGFzdE1hdGNoID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIHBvcyA9IDA7IGxlbiA+IGk7IGkrKykgaWYgKHRlc3RzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGJ1ZmZlcltpXSA9IGdldFBsYWNlaG9sZGVyKGkpOyBwb3MrKyA8IHRlc3QubGVuZ3RoOyApIGlmIChjID0gdGVzdC5jaGFyQXQocG9zIC0gMSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdHNbaV0udGVzdChjKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IGMsIGxhc3RNYXRjaCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zID4gdGVzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckJ1ZmZlcihpICsgMSwgbGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGJ1ZmZlcltpXSA9PT0gdGVzdC5jaGFyQXQocG9zKSAmJiBwb3MrKywgcGFydGlhbFBvc2l0aW9uID4gaSAmJiAobGFzdE1hdGNoID0gaSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhbGxvdyA/IHdyaXRlQnVmZmVyKCkgOiBwYXJ0aWFsUG9zaXRpb24gPiBsYXN0TWF0Y2ggKyAxID8gc2V0dGluZ3MuYXV0b2NsZWFyIHx8IGJ1ZmZlci5qb2luKFwiXCIpID09PSBkZWZhdWx0QnVmZmVyID8gKGlucHV0LnZhbCgpICYmIGlucHV0LnZhbChcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyQnVmZmVyKDAsIGxlbikpIDogd3JpdGVCdWZmZXIoKSA6ICh3cml0ZUJ1ZmZlcigpLCBpbnB1dC52YWwoaW5wdXQudmFsKCkuc3Vic3RyaW5nKDAsIGxhc3RNYXRjaCArIDEpKSksIFxuICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsUG9zaXRpb24gPyBpIDogZmlyc3ROb25NYXNrUG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMpLCBidWZmZXIgPSAkLm1hcChtYXNrLnNwbGl0KFwiXCIpLCBmdW5jdGlvbihjLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj9cIiAhPSBjID8gZGVmc1tjXSA/IGdldFBsYWNlaG9sZGVyKGkpIDogYyA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9KSwgZGVmYXVsdEJ1ZmZlciA9IGJ1ZmZlci5qb2luKFwiXCIpLCBmb2N1c1RleHQgPSBpbnB1dC52YWwoKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhKCQubWFzay5kYXRhTmFtZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLm1hcChidWZmZXIsIGZ1bmN0aW9uKGMsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0c1tpXSAmJiBjICE9IGdldFBsYWNlaG9sZGVyKGkpID8gYyA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfSksIGlucHV0Lm9uZShcInVubWFza1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQub2ZmKFwiLm1hc2tcIikucmVtb3ZlRGF0YSgkLm1hc2suZGF0YU5hbWUpO1xuICAgICAgICAgICAgICAgIH0pLm9uKFwiZm9jdXMubWFza1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5wcm9wKFwicmVhZG9ubHlcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChjYXJldFRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNUZXh0ID0gaW5wdXQudmFsKCksIHBvcyA9IGNoZWNrVmFsKCksIGNhcmV0VGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5nZXQoMCkgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKHdyaXRlQnVmZmVyKCksIHBvcyA9PSBtYXNrLnJlcGxhY2UoXCI/XCIsIFwiXCIpLmxlbmd0aCA/IGlucHV0LmNhcmV0KDAsIHBvcykgOiBpbnB1dC5jYXJldChwb3MpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLm9uKFwiYmx1ci5tYXNrXCIsIGJsdXJFdmVudCkub24oXCJrZXlkb3duLm1hc2tcIiwga2V5ZG93bkV2ZW50KS5vbihcImtleXByZXNzLm1hc2tcIiwga2V5cHJlc3NFdmVudCkub24oXCJpbnB1dC5tYXNrIHBhc3RlLm1hc2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnByb3AoXCJyZWFkb25seVwiKSB8fCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGNoZWNrVmFsKCEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNhcmV0KHBvcyksIHRyeUZpcmVDb21wbGV0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfSksIGNocm9tZSAmJiBhbmRyb2lkICYmIGlucHV0Lm9mZihcImlucHV0Lm1hc2tcIikub24oXCJpbnB1dC5tYXNrXCIsIGFuZHJvaWRJbnB1dEV2ZW50KSwgXG4gICAgICAgICAgICAgICAgY2hlY2tWYWwoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsiLCIvKlxuICAgICBfIF8gICAgICBfICAgICAgIF9cbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xuLyBfX3wgfCB8LyBfX3wgfC8gLyAgfCAvIF9ffFxuXFxfXyBcXCB8IHwgKF9ffCAgIDwgXyB8IFxcX18gXFxcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xuICAgICAgICAgICAgICAgICAgIHxfXy9cblxuIFZlcnNpb246IDEuOC4xXG4gIEF1dGhvcjogS2VuIFdoZWVsZXJcbiBXZWJzaXRlOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW9cbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcbiAgICBSZXBvOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrXG4gIElzc3VlczogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGljay9pc3N1ZXNcblxuICovXG4vKiBnbG9iYWwgd2luZG93LCBkb2N1bWVudCwgZGVmaW5lLCBqUXVlcnksIHNldEludGVydmFsLCBjbGVhckludGVydmFsICovXG47KGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxuXG59KGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFNsaWNrID0gd2luZG93LlNsaWNrIHx8IHt9O1xuXG4gICAgU2xpY2sgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGluc3RhbmNlVWlkID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncykge1xuXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsIGRhdGFTZXR0aW5ncztcblxuICAgICAgICAgICAgXy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhcHBlbmRBcnJvd3M6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXBwZW5kRG90czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNOYXZGb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLXByZXZcIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0eXBlPVwiYnV0dG9uXCI+UHJldmlvdXM8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIG5leHRBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0eXBlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzUwcHgnLFxuICAgICAgICAgICAgICAgIGNzc0Vhc2U6ICdlYXNlJyxcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uKHNsaWRlciwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgLz4nKS50ZXh0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRvdHNDbGFzczogJ3NsaWNrLWRvdHMnLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgICAgICAgICAgICAgICBmYWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uQ2hhbmdlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6ICdvbmRlbWFuZCcsXG4gICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiAnd2luZG93JyxcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgcnRsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZTogJycsXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgIHN3aXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdG91Y2hNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoVGhyZXNob2xkOiA1LFxuICAgICAgICAgICAgICAgIHVzZUNTUzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMDAwXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfLmluaXRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9QbGF5VGltZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxLFxuICAgICAgICAgICAgICAgICRkb3RzOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0SGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgICAgIGxvYWRJbmRleDogMCxcbiAgICAgICAgICAgICAgICAkbmV4dEFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgICRwcmV2QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgc2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRlV2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlVHJhY2s6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlczogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldDogMCxcbiAgICAgICAgICAgICAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgJGxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgdG91Y2hPYmplY3Q6IHt9LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXNFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bnNsaWNrZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzKTtcblxuICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzID0gW107XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5ncyA9IFtdO1xuICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5oaWRkZW4gPSAnaGlkZGVuJztcbiAgICAgICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIF8ucG9zaXRpb25Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gbnVsbDtcbiAgICAgICAgICAgIF8ucm93Q291bnQgPSAxO1xuICAgICAgICAgICAgXy5zaG91bGRDbGljayA9IHRydWU7XG4gICAgICAgICAgICBfLiRzbGlkZXIgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9IDA7XG4gICAgICAgICAgICBfLndpbmRvd1RpbWVyID0gbnVsbDtcblxuICAgICAgICAgICAgZGF0YVNldHRpbmdzID0gJChlbGVtZW50KS5kYXRhKCdzbGljaycpIHx8IHt9O1xuXG4gICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5kZWZhdWx0cywgc2V0dGluZ3MsIGRhdGFTZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcblxuICAgICAgICAgICAgXy5vcmlnaW5hbFNldHRpbmdzID0gXy5vcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICdtb3pIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5hdXRvUGxheSA9ICQucHJveHkoXy5hdXRvUGxheSwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5Q2xlYXIgPSAkLnByb3h5KF8uYXV0b1BsYXlDbGVhciwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5SXRlcmF0b3IgPSAkLnByb3h5KF8uYXV0b1BsYXlJdGVyYXRvciwgXyk7XG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlID0gJC5wcm94eShfLmNoYW5nZVNsaWRlLCBfKTtcbiAgICAgICAgICAgIF8uY2xpY2tIYW5kbGVyID0gJC5wcm94eShfLmNsaWNrSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNlbGVjdEhhbmRsZXIgPSAkLnByb3h5KF8uc2VsZWN0SGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNldFBvc2l0aW9uID0gJC5wcm94eShfLnNldFBvc2l0aW9uLCBfKTtcbiAgICAgICAgICAgIF8uc3dpcGVIYW5kbGVyID0gJC5wcm94eShfLnN3aXBlSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmRyYWdIYW5kbGVyID0gJC5wcm94eShfLmRyYWdIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8ua2V5SGFuZGxlciA9ICQucHJveHkoXy5rZXlIYW5kbGVyLCBfKTtcblxuICAgICAgICAgICAgXy5pbnN0YW5jZVVpZCA9IGluc3RhbmNlVWlkKys7XG5cbiAgICAgICAgICAgIC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG4gICAgICAgICAgICAvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAobXVzdCBzdGFydCB3aXRoIDwpXG4gICAgICAgICAgICAvLyBFeHRyYWN0ZWQgZnJvbSBqUXVlcnkgdjEuMTEgc291cmNlXG4gICAgICAgICAgICBfLmh0bWxFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qKSQvO1xuXG5cbiAgICAgICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuICAgICAgICAgICAgXy5pbml0KHRydWUpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gU2xpY2s7XG5cbiAgICB9KCkpO1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFjdGl2YXRlQURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1hY3RpdmUnKS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZSdcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFkZFNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQWRkID0gZnVuY3Rpb24obWFya3VwLCBpbmRleCwgYWRkQmVmb3JlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGFkZEJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCB8fCAoaW5kZXggPj0gXy5zbGlkZUNvdW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBfLiRzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QmVmb3JlKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QWZ0ZXIoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWRkQmVmb3JlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0XG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlU2xpZGUgPSBmdW5jdGlvbih0YXJnZXRMZWZ0LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBhbmltUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAtdGFyZ2V0TGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gLShfLmN1cnJlbnRMZWZ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJCh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogXy5jdXJyZW50TGVmdFxuICAgICAgICAgICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBfLm9wdGlvbnMuc3BlZWQsXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXy5vcHRpb25zLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24obm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBNYXRoLmNlaWwobm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKDBweCwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSBNYXRoLmNlaWwodGFyZ2V0TGVmdCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHRhcmdldExlZnQgKyAncHgsIDBweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKDBweCwnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZUYXJnZXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8ub3B0aW9ucy5hc05hdkZvcjtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICYmIGFzTmF2Rm9yICE9PSBudWxsICkge1xuICAgICAgICAgICAgYXNOYXZGb3IgPSAkKGFzTmF2Rm9yKS5ub3QoXy4kc2xpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc05hdkZvcjtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXNOYXZGb3IgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5nZXROYXZUYXJnZXQoKTtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICE9PSBudWxsICYmIHR5cGVvZiBhc05hdkZvciA9PT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICBhc05hdkZvci5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLnNsaWNrKCdnZXRTbGljaycpO1xuICAgICAgICAgICAgICAgIGlmKCF0YXJnZXQudW5zbGlja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zbGlkZUhhbmRsZXIoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSBfLnRyYW5zZm9ybVR5cGUgKyAnICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICdvcGFjaXR5ICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5VGltZXIgPSBzZXRJbnRlcnZhbCggXy5hdXRvUGxheUl0ZXJhdG9yLCBfLm9wdGlvbnMuYXV0b3BsYXlTcGVlZCApO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uYXV0b1BsYXlUaW1lcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgaWYgKCAhXy5wYXVzZWQgJiYgIV8uaW50ZXJydXB0ZWQgJiYgIV8uZm9jdXNzZWQgKSB7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggXy5kaXJlY3Rpb24gPT09IDEgJiYgKCBfLmN1cnJlbnRTbGlkZSArIDEgKSA9PT0gKCBfLnNsaWRlQ291bnQgLSAxICkpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBfLmN1cnJlbnRTbGlkZSAtIDEgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVUbyApO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyA9ICQoXy5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgPSAkKF8ub3B0aW9ucy5uZXh0QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuXG4gICAgICAgICAgICBpZiggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5wcmVwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGQoIF8uJG5leHRBcnJvdyApXG5cbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kaXNhYmxlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIGRvdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgICAgICBkb3QgPSAkKCc8dWwgLz4nKS5hZGRDbGFzcyhfLm9wdGlvbnMuZG90c0NsYXNzKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8PSBfLmdldERvdENvdW50KCk7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGRvdC5hcHBlbmQoJCgnPGxpIC8+JykuYXBwZW5kKF8ub3B0aW9ucy5jdXN0b21QYWdpbmcuY2FsbCh0aGlzLCBfLCBpKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRkb3RzID0gZG90LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmREb3RzKTtcblxuICAgICAgICAgICAgXy4kZG90cy5maW5kKCdsaScpLmZpcnN0KCkuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRPdXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbiggXy5vcHRpb25zLnNsaWRlICsgJzpub3QoLnNsaWNrLWNsb25lZCknKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleClcbiAgICAgICAgICAgICAgICAuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJywgJChlbGVtZW50KS5hdHRyKCdzdHlsZScpIHx8ICcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1zbGlkZXInKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrID0gKF8uc2xpZGVDb3VudCA9PT0gMCkgP1xuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKF8uJHNsaWRlcikgOlxuICAgICAgICAgICAgXy4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICBfLiRsaXN0ID0gXy4kc2xpZGVUcmFjay53cmFwKFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpO1xuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcygnb3BhY2l0eScsIDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLm5vdCgnW3NyY10nKS5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcblxuICAgICAgICBfLmJ1aWxkRG90cygpO1xuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuXG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3QuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYSwgYiwgYywgbmV3U2xpZGVzLCBudW1PZlNsaWRlcywgb3JpZ2luYWxTbGlkZXMsc2xpZGVzUGVyU2VjdGlvbjtcblxuICAgICAgICBuZXdTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVyLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAwKSB7XG5cbiAgICAgICAgICAgIHNsaWRlc1BlclNlY3Rpb24gPSBfLm9wdGlvbnMuc2xpZGVzUGVyUm93ICogXy5vcHRpb25zLnJvd3M7XG4gICAgICAgICAgICBudW1PZlNsaWRlcyA9IE1hdGguY2VpbChcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5sZW5ndGggLyBzbGlkZXNQZXJTZWN0aW9uXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IoYSA9IDA7IGEgPCBudW1PZlNsaWRlczsgYSsrKXtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBmb3IoYiA9IDA7IGIgPCBfLm9wdGlvbnMucm93czsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGMgPSAwOyBjIDwgXy5vcHRpb25zLnNsaWRlc1BlclJvdzsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gKGEgKiBzbGlkZXNQZXJTZWN0aW9uICsgKChiICogXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyBjKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1NsaWRlcy5hcHBlbmRDaGlsZChzbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChuZXdTbGlkZXMpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6KDEwMCAvIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmUgPSBmdW5jdGlvbihpbml0aWFsLCBmb3JjZVVwZGF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrcG9pbnQsIHRhcmdldEJyZWFrcG9pbnQsIHJlc3BvbmRUb1dpZHRoLCB0cmlnZ2VyQnJlYWtwb2ludCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2xpZGVyV2lkdGggPSBfLiRzbGlkZXIud2lkdGgoKTtcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XG5cbiAgICAgICAgaWYgKF8ucmVzcG9uZFRvID09PSAnd2luZG93Jykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3NsaWRlcicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gc2xpZGVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IE1hdGgubWluKHdpbmRvd1dpZHRoLCBzbGlkZXJXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5yZXNwb25zaXZlICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGggJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKGJyZWFrcG9pbnQgaW4gXy5icmVha3BvaW50cykge1xuICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPCBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPiBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gXy5hY3RpdmVCcmVha3BvaW50IHx8IGZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXG4gICAgICAgICAgICBpZiggIWluaXRpYWwgJiYgdHJpZ2dlckJyZWFrcG9pbnQgIT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdicmVha3BvaW50JywgW18sIHRyaWdnZXJCcmVha3BvaW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hhbmdlU2xpZGUgPSBmdW5jdGlvbihldmVudCwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0O1xuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBhIGxpbmssIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgIGlmKCR0YXJnZXQuaXMoJ2EnKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBub3QgdGhlIDxsaT4gZWxlbWVudCAoaWU6IGEgY2hpbGQpLCBmaW5kIHRoZSA8bGk+LlxuICAgICAgICBpZighJHRhcmdldC5pcygnbGknKSkge1xuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuZXZlbk9mZnNldCA9IChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApO1xuICAgICAgICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoXy5zbGlkZUNvdW50IC0gXy5jdXJyZW50U2xpZGUpICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5tZXNzYWdlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2luZGV4JzpcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5kYXRhLmluZGV4ID09PSAwID8gMCA6XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXggfHwgJHRhcmdldC5pbmRleCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jaGVja05hdmlnYWJsZShpbmRleCksIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgJHRhcmdldC5jaGlsZHJlbigpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBuYXZpZ2FibGVzLCBwcmV2TmF2aWdhYmxlO1xuXG4gICAgICAgIG5hdmlnYWJsZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKTtcbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IDA7XG4gICAgICAgIGlmIChpbmRleCA+IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuIGluIG5hdmlnYWJsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgJiYgXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kZG90cy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfLnZpc2liaWxpdHlDaGFuZ2UsIF8udmlzaWJpbGl0eSk7XG5cbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5yZXNpemUpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub2ZmKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBvcmlnaW5hbFNsaWRlcztcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDApIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQob3JpZ2luYWxTbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLnNob3VsZENsaWNrID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKHJlZnJlc2gpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgIF8uY2xlYW5VcEV2ZW50cygpO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLmRldGFjaCgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMucHJldkFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5uZXh0QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKF8uJHNsaWRlcykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXNsaWNrLWluZGV4JylcbiAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3N0eWxlJywgJCh0aGlzKS5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kbGlzdC5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFwcGVuZChfLiRzbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5jbGVhblVwUm93cygpO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGVyJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICBfLnVuc2xpY2tlZCA9IHRydWU7XG5cbiAgICAgICAgaWYoIXJlZnJlc2gpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdkZXN0cm95JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnJztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlT3V0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0ZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoZmlsdGVyICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmZpbHRlcihmaWx0ZXIpLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZm9jdXNIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpXG4gICAgICAgICAgICAub24oJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snLCAnKicsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyICRzZiA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnBhdXNlT25Gb2N1cyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb2N1c3NlZCA9ICRzZi5pcygnOmZvY3VzJyk7XG4gICAgICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0Q3VycmVudCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgcmV0dXJuIF8uY3VycmVudFNsaWRlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXREb3RDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgYnJlYWtQb2ludCA9IDA7XG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgICAgdmFyIHBhZ2VyUXR5ID0gMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSBpZighXy5vcHRpb25zLmFzTmF2Rm9yKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IDEgKyBNYXRoLmNlaWwoKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhZ2VyUXR5IC0gMTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TGVmdCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgdmVydGljYWxIZWlnaHQsXG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDAsXG4gICAgICAgICAgICB0YXJnZXRTbGlkZSxcbiAgICAgICAgICAgIGNvZWY7XG5cbiAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKF8uc2xpZGVXaWR0aCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogLTE7XG4gICAgICAgICAgICAgICAgY29lZiA9IC0xXG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTEuNTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICh2ZXJ0aWNhbEhlaWdodCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogY29lZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA+IF8uc2xpZGVDb3VudCAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogXy5zbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogdmVydGljYWxIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSAvIDIpIC0gKChfLnNsaWRlV2lkdGggKiBfLnNsaWRlQ291bnQpIC8gMik7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIC0gXy5zbGlkZVdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIF8uc2xpZGVXaWR0aCkgKiAtMSkgKyBfLnNsaWRlT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xKSArIHZlcnRpY2FsT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ICs9IChfLiRsaXN0LndpZHRoKCkgLSB0YXJnZXRTbGlkZS5vdXRlcldpZHRoKCkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRMZWZ0O1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRPcHRpb24gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHZXRPcHRpb24gPSBmdW5jdGlvbihvcHRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIF8ub3B0aW9uc1tvcHRpb25dO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZpZ2FibGVJbmRleGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICAgIG1heDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgY291bnRlciA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50ICogMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgbWF4KSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goYnJlYWtQb2ludCk7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWNrID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWRlQ291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQsIHN3aXBlZFNsaWRlLCBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgPyBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSA6IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLXNsaWRlJykuZWFjaChmdW5jdGlvbihpbmRleCwgc2xpZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGUub2Zmc2V0TGVmdCAtIGNlbnRlck9mZnNldCArICgkKHNsaWRlKS5vdXRlcldpZHRoKCkgLyAyKSA+IChfLnN3aXBlTGVmdCAqIC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCA9IE1hdGguYWJzKCQoc3dpcGVkU2xpZGUpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSAtIF8uY3VycmVudFNsaWRlKSB8fCAxO1xuXG4gICAgICAgICAgICByZXR1cm4gc2xpZGVzVHJhdmVyc2VkO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdvVG8gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHb1RvID0gZnVuY3Rpb24oc2xpZGUsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHBhcnNlSW50KHNsaWRlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkb250QW5pbWF0ZSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbihjcmVhdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoISQoXy4kc2xpZGVyKS5oYXNDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKSkge1xuXG4gICAgICAgICAgICAkKF8uJHNsaWRlcikuYWRkQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG5cbiAgICAgICAgICAgIF8uYnVpbGRSb3dzKCk7XG4gICAgICAgICAgICBfLmJ1aWxkT3V0KCk7XG4gICAgICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgICAgICBfLnN0YXJ0TG9hZCgpO1xuICAgICAgICAgICAgXy5sb2FkU2xpZGVyKCk7XG4gICAgICAgICAgICBfLmluaXRpYWxpemVFdmVudHMoKTtcbiAgICAgICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKHRydWUpO1xuICAgICAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyZWF0aW9uKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignaW5pdCcsIFtfXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICAgICBudW1Eb3RHcm91cHMgPSBNYXRoLmNlaWwoXy5zbGlkZUNvdW50IC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyksXG4gICAgICAgICAgICAgICAgdGFiQ29udHJvbEluZGV4ZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKS5maWx0ZXIoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodmFsID49IDApICYmICh2YWwgPCBfLnNsaWRlQ291bnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5ub3QoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZUNvbnRyb2xJbmRleCA9IHRhYkNvbnRyb2xJbmRleGVzLmluZGV4T2YoaSk7XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICd0YWJwYW5lbCcsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSxcbiAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChzbGlkZUNvbnRyb2xJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICB2YXIgYXJpYUJ1dHRvbkNvbnRyb2wgPSAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgc2xpZGVDb250cm9sSW5kZXhcbiAgICAgICAgICAgICAgICAgICBpZiAoJCgnIycgKyBhcmlhQnV0dG9uQ29udHJvbCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogYXJpYUJ1dHRvbkNvbnRyb2xcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kZG90cy5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKS5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXBwZWRTbGlkZUluZGV4ID0gdGFiQ29udHJvbEluZGV4ZXNbaV07XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2J1dHRvbicpLmZpcnN0KCkuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZS1jb250cm9sJyArIF8uaW5zdGFuY2VVaWQgKyBpLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1jb250cm9scyc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgbWFwcGVkU2xpZGVJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiAoaSArIDEpICsgJyBvZiAnICsgbnVtRG90R3JvdXBzLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSkuZXEoXy5jdXJyZW50U2xpZGUpLmZpbmQoJ2J1dHRvbicpLmF0dHIoe1xuICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICAgICAgfSkuZW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpPV8uY3VycmVudFNsaWRlLCBtYXg9aStfLm9wdGlvbnMuc2xpZGVzVG9TaG93OyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShpKS5hdHRyKHsndGFiaW5kZXgnOiAnMCd9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKGkpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy5hY3RpdmF0ZUFEQSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QXJyb3dFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cykub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCdcbiAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRkb3RzLm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnBhdXNlT25Ib3ZlciApIHtcblxuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdGlhbGl6ZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuXG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnc3RhcnQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ21vdmUnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vbignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oXy52aXNpYmlsaXR5Q2hhbmdlLCAkLnByb3h5KF8udmlzaWJpbGl0eSwgXykpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLm9yaWVudGF0aW9uQ2hhbmdlLCBfKSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5yZXNpemUsIF8pKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9uKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuICAgICAgICAkKF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0VUkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuc2hvdygpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5rZXlIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgICAvL0RvbnQgc2xpZGUgaWYgdGhlIGN1cnNvciBpcyBpbnNpZGUgdGhlIGZvcm0gZmllbGRzIGFuZCBhcnJvdyBrZXlzIGFyZSBwcmVzc2VkXG4gICAgICAgIGlmKCFldmVudC50YXJnZXQudGFnTmFtZS5tYXRjaCgnVEVYVEFSRUF8SU5QVVR8U0VMRUNUJykpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzNyAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ25leHQnIDogICdwcmV2aW91cydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSAzOSAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ3ByZXZpb3VzJyA6ICduZXh0J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBsb2FkUmFuZ2UsIGNsb25lUmFuZ2UsIHJhbmdlU3RhcnQsIHJhbmdlRW5kO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRJbWFnZXMoaW1hZ2VzU2NvcGUpIHtcblxuICAgICAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBpbWFnZXNTY29wZSkuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU291cmNlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxhenknKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTcmNTZXQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc3Jjc2V0JyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU2l6ZXMgID0gJCh0aGlzKS5hdHRyKCdkYXRhLXNpemVzJykgfHwgXy4kc2xpZGVyLmF0dHIoJ2RhdGEtc2l6ZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDAgfSwgMTAwLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNyY1NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyY3NldCcsIGltYWdlU3JjU2V0ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU2l6ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NpemVzJywgaW1hZ2VTaXplcyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGltYWdlU291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDEgfSwgMjAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbXywgaW1hZ2UsIGltYWdlU291cmNlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdzbGljay1sb2FkaW5nJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdzbGljay1sYXp5bG9hZC1lcnJvcicgKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8uY3VycmVudFNsaWRlICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSByYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBNYXRoLm1heCgwLCBfLmN1cnJlbnRTbGlkZSAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IDIgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSArIF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBfLmN1cnJlbnRTbGlkZSA6IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgcmFuZ2VFbmQgPSBNYXRoLmNlaWwocmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlU3RhcnQgPiAwKSByYW5nZVN0YXJ0LS07XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlRW5kIDw9IF8uc2xpZGVDb3VudCkgcmFuZ2VFbmQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKS5zbGljZShyYW5nZVN0YXJ0LCByYW5nZUVuZCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ2FudGljaXBhdGVkJykge1xuICAgICAgICAgICAgdmFyIHByZXZTbGlkZSA9IHJhbmdlU3RhcnQgLSAxLFxuICAgICAgICAgICAgICAgIG5leHRTbGlkZSA9IHJhbmdlRW5kLFxuICAgICAgICAgICAgICAgICRzbGlkZXMgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldlNsaWRlIDwgMCkgcHJldlNsaWRlID0gXy5zbGlkZUNvdW50IC0gMTtcbiAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSBsb2FkUmFuZ2UuYWRkKCRzbGlkZXMuZXEocHJldlNsaWRlKSk7XG4gICAgICAgICAgICAgICAgbG9hZFJhbmdlID0gbG9hZFJhbmdlLmFkZCgkc2xpZGVzLmVxKG5leHRTbGlkZSkpO1xuICAgICAgICAgICAgICAgIHByZXZTbGlkZS0tO1xuICAgICAgICAgICAgICAgIG5leHRTbGlkZSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZEltYWdlcyhsb2FkUmFuZ2UpO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoMCwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZShfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICogLTEpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sb2FkU2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uaW5pdFVJKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ3Byb2dyZXNzaXZlJykge1xuICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubmV4dCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja05leHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBhdXNlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGF1c2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG4gICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGxheSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICBfLm9wdGlvbnMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucG9zdFNsaWRlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FmdGVyQ2hhbmdlJywgW18sIGluZGV4XSk7XG5cbiAgICAgICAgICAgIF8uYW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5pbml0QURBKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRjdXJyZW50U2xpZGUgPSAkKF8uJHNsaWRlcy5nZXQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hdHRyKCd0YWJpbmRleCcsIDApLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1ByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQgPSBmdW5jdGlvbiggdHJ5Q291bnQgKSB7XG5cbiAgICAgICAgdHJ5Q291bnQgPSB0cnlDb3VudCB8fCAxO1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICRpbWdzVG9Mb2FkID0gJCggJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyICksXG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIGltYWdlU291cmNlLFxuICAgICAgICAgICAgaW1hZ2VTcmNTZXQsXG4gICAgICAgICAgICBpbWFnZVNpemVzLFxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQ7XG5cbiAgICAgICAgaWYgKCAkaW1nc1RvTG9hZC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVNyY1NldCA9IGltYWdlLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICBpbWFnZVNpemVzICA9IGltYWdlLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmNzZXQnLCBpbWFnZVNyY1NldCApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgaW1hZ2VTb3VyY2UgKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcbiAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0cnlDb3VudCA8IDMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIHRyeSB0byBsb2FkIHRoZSBpbWFnZSAzIHRpbWVzLFxuICAgICAgICAgICAgICAgICAgICAgKiBsZWF2ZSBhIHNsaWdodCBkZWxheSBzbyB3ZSBkb24ndCBnZXRcbiAgICAgICAgICAgICAgICAgICAgICogc2VydmVycyBibG9ja2luZyB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCB0cnlDb3VudCArIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FsbEltYWdlc0xvYWRlZCcsIFsgXyBdKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiggaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgY3VycmVudFNsaWRlLCBsYXN0VmlzaWJsZUluZGV4O1xuXG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuXG4gICAgICAgIC8vIGluIG5vbi1pbmZpbml0ZSBzbGlkZXJzLCB3ZSBkb24ndCB3YW50IHRvIGdvIHBhc3QgdGhlXG4gICAgICAgIC8vIGxhc3QgdmlzaWJsZSBpbmRleC5cbiAgICAgICAgaWYoICFfLm9wdGlvbnMuaW5maW5pdGUgJiYgKCBfLmN1cnJlbnRTbGlkZSA+IGxhc3RWaXNpYmxlSW5kZXggKSkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBsYXN0VmlzaWJsZUluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbGVzcyBzbGlkZXMgdGhhbiB0byBzaG93LCBnbyB0byBzdGFydC5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcblxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG5cbiAgICAgICAgXy5kZXN0cm95KHRydWUpO1xuXG4gICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMsIHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XG5cbiAgICAgICAgXy5pbml0KCk7XG5cbiAgICAgICAgaWYoICFpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRTbGlkZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZ2lzdGVyQnJlYWtwb2ludHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGJyZWFrcG9pbnQsIGN1cnJlbnRCcmVha3BvaW50LCBsLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZVNldHRpbmdzID0gXy5vcHRpb25zLnJlc3BvbnNpdmUgfHwgbnVsbDtcblxuICAgICAgICBpZiAoICQudHlwZShyZXNwb25zaXZlU2V0dGluZ3MpID09PSAnYXJyYXknICYmIHJlc3BvbnNpdmVTZXR0aW5ncy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcblxuICAgICAgICAgICAgZm9yICggYnJlYWtwb2ludCBpbiByZXNwb25zaXZlU2V0dGluZ3MgKSB7XG5cbiAgICAgICAgICAgICAgICBsID0gXy5icmVha3BvaW50cy5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIGFuZCBjdXQgb3V0IGFueSBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmVzIHdpdGggdGhlIHNhbWUgYnJlYWtwb2ludCBudW1iZXIsIHdlIGRvbid0IHdhbnQgZHVwZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNwbGljZShsLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICggXy5vcHRpb25zLm1vYmlsZUZpcnN0ICkgPyBhLWIgOiBiLWE7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG5cbiAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuICAgICAgICBfLmJ1aWxkRG90cygpO1xuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgXy5wYXVzZWQgPSAhXy5vcHRpb25zLmF1dG9wbGF5O1xuICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3JlSW5pdCcsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgIT09IF8ud2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfLndpbmRvd0RlbGF5KTtcbiAgICAgICAgICAgIF8ud2luZG93RGVsYXkgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgICAgICAgICBpZiggIV8udW5zbGlja2VkICkgeyBfLnNldFBvc2l0aW9uKCk7IH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVtb3ZlU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tSZW1vdmUgPSBmdW5jdGlvbihpbmRleCwgcmVtb3ZlQmVmb3JlLCByZW1vdmVBbGwpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IDAgOiBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0Q1NTID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXG4gICAgICAgICAgICB4LCB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJGxpc3QuaGVpZ2h0KF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IChfLm9wdGlvbnMuY2VudGVyUGFkZGluZyArICcgMHB4JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8ubGlzdFdpZHRoID0gXy4kbGlzdC53aWR0aCgpO1xuICAgICAgICBfLmxpc3RIZWlnaHQgPSBfLiRsaXN0LmhlaWdodCgpO1xuXG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGggLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKChfLnNsaWRlV2lkdGggKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aCg1MDAwICogXy5zbGlkZUNvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgodHJ1ZSkgLSBfLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS53aWR0aChfLnNsaWRlV2lkdGggLSBvZmZzZXQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLnNsaWRlV2lkdGggKiBpbmRleCkgKiAtMTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5jc3Moe1xuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPVxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhY2NlcHRzIGFyZ3VtZW50cyBpbiBmb3JtYXQgb2Y6XG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNpbmdsZSBvcHRpb24ncyB2YWx1ZTpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2V0IG9mIHJlc3BvbnNpdmUgb3B0aW9uczpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCAncmVzcG9uc2l2ZScsIFt7fSwgLi4uXSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciB1cGRhdGluZyBtdWx0aXBsZSB2YWx1ZXMgYXQgb25jZSAobm90IHJlc3BvbnNpdmUpXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgeyAnb3B0aW9uJzogdmFsdWUsIC4uLiB9LCByZWZyZXNoIClcbiAgICAgICAgICovXG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBsLCBpdGVtLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoID0gZmFsc2UsIHR5cGU7XG5cbiAgICAgICAgaWYoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdvYmplY3QnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHR5cGUgPSAnbXVsdGlwbGUnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdzdHJpbmcnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICAgICAgICBpZiAoIGFyZ3VtZW50c1swXSA9PT0gJ3Jlc3BvbnNpdmUnICYmICQudHlwZSggYXJndW1lbnRzWzFdICkgPT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3Jlc3BvbnNpdmUnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlJztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHR5cGUgPT09ICdzaW5nbGUnICkge1xuXG4gICAgICAgICAgICBfLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ211bHRpcGxlJyApIHtcblxuICAgICAgICAgICAgJC5lYWNoKCBvcHRpb24gLCBmdW5jdGlvbiggb3B0LCB2YWwgKSB7XG5cbiAgICAgICAgICAgICAgICBfLm9wdGlvbnNbb3B0XSA9IHZhbDtcblxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAncmVzcG9uc2l2ZScgKSB7XG5cbiAgICAgICAgICAgIGZvciAoIGl0ZW0gaW4gdmFsdWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggJC50eXBlKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSApICE9PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gWyB2YWx1ZVtpdGVtXSBdO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsID0gXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSByZXNwb25zaXZlIG9iamVjdCBhbmQgc3BsaWNlIG91dCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCggdmFsdWVbaXRlbV0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHJlZnJlc2ggKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXREaW1lbnNpb25zKCk7XG5cbiAgICAgICAgXy5zZXRIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNldENTUyhfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2V0RmFkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3NldFBvc2l0aW9uJywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuXG4gICAgICAgIF8ucG9zaXRpb25Qcm9wID0gXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlID8gJ3RvcCcgOiAnbGVmdCc7XG5cbiAgICAgICAgaWYgKF8ucG9zaXRpb25Qcm9wID09PSAndG9wJykge1xuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5XZWJraXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tc1RyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy51c2VDU1MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmZhZGUgKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBfLm9wdGlvbnMuekluZGV4ID09PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnpJbmRleCA8IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5PVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnT1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdNb3pUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ21zVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgKF8uYW5pbVR5cGUgIT09IG51bGwgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpO1xuICAgIH07XG5cblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCwgYWxsU2xpZGVzLCBpbmRleE9mZnNldCwgcmVtYWluZGVyO1xuXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlclxuICAgICAgICAgICAgLmZpbmQoJy5zbGljay1zbGlkZScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jdXJyZW50Jyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIHZhciBldmVuQ29lZiA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJSAyID09PSAwID8gMSA6IDA7XG5cbiAgICAgICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gY2VudGVyT2Zmc2V0ICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSAxKSAtIGNlbnRlck9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCAtIGNlbnRlck9mZnNldCArIGV2ZW5Db2VmLCBpbmRleCArIGNlbnRlck9mZnNldCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSArIGV2ZW5Db2VmLCBpbmRleE9mZnNldCArIGNlbnRlck9mZnNldCArIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKGFsbFNsaWRlcy5sZW5ndGggLSAxIC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBfLnNsaWRlQ291bnQgLSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4LCBpbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsU2xpZGVzLmxlbmd0aCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHJlbWFpbmRlciA9IF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXggOiBpbmRleDtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAmJiAoXy5zbGlkZUNvdW50IC0gaW5kZXgpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSByZW1haW5kZXIpLCBpbmRleE9mZnNldCArIHJlbWFpbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCwgaW5kZXhPZmZzZXQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ29uZGVtYW5kJyB8fCBfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdhbnRpY2lwYXRlZCcpIHtcbiAgICAgICAgICAgIF8ubGF6eUxvYWQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIHNsaWRlSW5kZXgsIGluZmluaXRlQ291bnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuY2VudGVyTW9kZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgc2xpZGVJbmRleCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IF8uc2xpZGVDb3VudDsgaSA+IChfLnNsaWRlQ291bnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCk7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmZpbml0ZUNvdW50ICArIF8uc2xpZGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2lkJywgJycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBmdW5jdGlvbiggdG9nZ2xlICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIXRvZ2dsZSApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBfLmludGVycnVwdGVkID0gdG9nZ2xlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZWxlY3RIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPVxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLmlzKCcuc2xpY2stc2xpZGUnKSA/XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpIDpcbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykpO1xuXG4gICAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gMDtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlkZUhhbmRsZXIgPSBmdW5jdGlvbihpbmRleCwgc3luYywgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgdGFyZ2V0U2xpZGUsIGFuaW1TbGlkZSwgb2xkU2xpZGUsIHNsaWRlTGVmdCwgdGFyZ2V0TGVmdCA9IG51bGwsXG4gICAgICAgICAgICBfID0gdGhpcywgbmF2VGFyZ2V0O1xuXG4gICAgICAgIHN5bmMgPSBzeW5jIHx8IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMud2FpdEZvckFuaW1hdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSAmJiBfLmN1cnJlbnRTbGlkZSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRTbGlkZSA9IGluZGV4O1xuICAgICAgICB0YXJnZXRMZWZ0ID0gXy5nZXRMZWZ0KHRhcmdldFNsaWRlKTtcbiAgICAgICAgc2xpZGVMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gXy5zd2lwZUxlZnQgPT09IG51bGwgPyBzbGlkZUxlZnQgOiBfLnN3aXBlTGVmdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IF8uZ2V0RG90Q291bnQoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0U2xpZGUgPCAwKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlIC0gXy5zbGlkZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBfLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIFtfLCBfLmN1cnJlbnRTbGlkZSwgYW5pbVNsaWRlXSk7XG5cbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBhbmltU2xpZGU7XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFzTmF2Rm9yICkge1xuXG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBfLmdldE5hdlRhcmdldCgpO1xuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gbmF2VGFyZ2V0LnNsaWNrKCdnZXRTbGljaycpO1xuXG4gICAgICAgICAgICBpZiAoIG5hdlRhcmdldC5zbGlkZUNvdW50IDw9IG5hdlRhcmdldC5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgICAgICBuYXZUYXJnZXQuc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlT3V0KG9sZFNsaWRlKTtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHRhcmdldExlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3RhcnRMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LmhpZGUoKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgeERpc3QsIHlEaXN0LCByLCBzd2lwZUFuZ2xlLCBfID0gdGhpcztcblxuICAgICAgICB4RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRYIC0gXy50b3VjaE9iamVjdC5jdXJYO1xuICAgICAgICB5RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRZIC0gXy50b3VjaE9iamVjdC5jdXJZO1xuICAgICAgICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuXG4gICAgICAgIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XG4gICAgICAgICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gNDUpICYmIChzd2lwZUFuZ2xlID49IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDM2MCkgJiYgKHN3aXBlQW5nbGUgPj0gMzE1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAxMzUpICYmIChzd2lwZUFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAncmlnaHQnIDogJ2xlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDM1KSAmJiAoc3dpcGVBbmdsZSA8PSAxMzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ3ZlcnRpY2FsJztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVFbmQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlQ291bnQsXG4gICAgICAgICAgICBkaXJlY3Rpb247XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBfLnN3aXBpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5zY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIF8uc2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgIF8uc2hvdWxkQ2xpY2sgPSAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiAxMCApID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdlZGdlJywgW18sIF8uc3dpcGVEaXJlY3Rpb24oKSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+PSBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlICkge1xuXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoIGRpcmVjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiAhPSAndmVydGljYWwnICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlQ291bnQgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3N3aXBlJywgW18sIGRpcmVjdGlvbiBdKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zdGFydFggIT09IF8udG91Y2hPYmplY3QuY3VyWCApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBfLmN1cnJlbnRTbGlkZSApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKChfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSB8fCAoJ29udG91Y2hlbmQnIGluIGRvY3VtZW50ICYmIF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gZmFsc2UgJiYgZXZlbnQudHlwZS5pbmRleE9mKCdtb3VzZScpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zXG4gICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RIZWlnaHQgLyBfLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuYWN0aW9uKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlTW92ZShldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZUVuZChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZU1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGVkZ2VXYXNIaXQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1ckxlZnQsIHN3aXBlRGlyZWN0aW9uLCBzd2lwZUxlbmd0aCwgcG9zaXRpb25PZmZzZXQsIHRvdWNoZXMsIHZlcnRpY2FsU3dpcGVMZW5ndGg7XG5cbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCA/IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFfLmRyYWdnaW5nIHx8IF8uc2Nyb2xsaW5nIHx8IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ckxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clggLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCwgMikpKTtcblxuICAgICAgICB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clkgLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcblxuICAgICAgICBpZiAoIV8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgJiYgIV8uc3dpcGluZyAmJiB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVEaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zd2lwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbk9mZnNldCA9IChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/IDEgOiAtMSkgKiAoXy50b3VjaE9iamVjdC5jdXJYID4gXy50b3VjaE9iamVjdC5zdGFydFggPyAxIDogLTEpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcG9zaXRpb25PZmZzZXQgPSBfLnRvdWNoT2JqZWN0LmN1clkgPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoKF8uY3VycmVudFNsaWRlID09PSAwICYmIHN3aXBlRGlyZWN0aW9uID09PSAncmlnaHQnKSB8fCAoXy5jdXJyZW50U2xpZGUgPj0gXy5nZXREb3RDb3VudCgpICYmIHN3aXBlRGlyZWN0aW9uID09PSAnbGVmdCcpKSB7XG4gICAgICAgICAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoICogXy5vcHRpb25zLmVkZ2VGcmljdGlvbjtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyAoc3dpcGVMZW5ndGggKiAoXy4kbGlzdC5oZWlnaHQoKSAvIF8ubGlzdFdpZHRoKSkgKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMudG91Y2hNb3ZlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldENTUyhfLnN3aXBlTGVmdCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlU3RhcnQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRvdWNoZXM7XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgIT09IDEgfHwgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA9IF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA9IF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRzbGlkZXNDYWNoZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJHByZXZBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRuZXh0QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAgICAgICAuY3NzKCd3aWR0aCcsICcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5zbGljayA9IGZ1bmN0aW9uKGZyb21CcmVha3BvaW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigndW5zbGljaycsIFtfLCBmcm9tQnJlYWtwb2ludF0pO1xuICAgICAgICBfLmRlc3Ryb3koKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJlxuICAgICAgICAgICAgIV8ub3B0aW9ucy5pbmZpbml0ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIDEgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVEb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5lbmQoKTtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLmVxKE1hdGguZmxvb3IoXy5jdXJyZW50U2xpZGUgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBpZiAoIGRvY3VtZW50W18uaGlkZGVuXSApIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgb3B0ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsID0gXy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcmV0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0ID09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXQgPSBfW2ldLnNsaWNrW29wdF0uYXBwbHkoX1tpXS5zbGljaywgYXJncyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXztcbiAgICB9O1xuXG59KSk7XG4iXX0=
